// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "MAT_Multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic MAT_Multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic MAT_Multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> MAT_Multiply::ap_ST_st1_fsm_0 = "1";
const sc_lv<12> MAT_Multiply::ap_ST_st2_fsm_1 = "10";
const sc_lv<12> MAT_Multiply::ap_ST_st3_fsm_2 = "100";
const sc_lv<12> MAT_Multiply::ap_ST_st4_fsm_3 = "1000";
const sc_lv<12> MAT_Multiply::ap_ST_st5_fsm_4 = "10000";
const sc_lv<12> MAT_Multiply::ap_ST_st6_fsm_5 = "100000";
const sc_lv<12> MAT_Multiply::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<12> MAT_Multiply::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<12> MAT_Multiply::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<12> MAT_Multiply::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<12> MAT_Multiply::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<12> MAT_Multiply::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<32> MAT_Multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> MAT_Multiply::ap_const_lv1_1 = "1";
const sc_lv<32> MAT_Multiply::ap_const_lv32_1 = "1";
const sc_lv<1> MAT_Multiply::ap_const_lv1_0 = "0";
const sc_lv<32> MAT_Multiply::ap_const_lv32_2 = "10";
const sc_lv<32> MAT_Multiply::ap_const_lv32_3 = "11";
const sc_lv<32> MAT_Multiply::ap_const_lv32_4 = "100";
const sc_lv<32> MAT_Multiply::ap_const_lv32_A = "1010";
const sc_lv<7> MAT_Multiply::ap_const_lv7_0 = "0000000";
const sc_lv<14> MAT_Multiply::ap_const_lv14_0 = "00000000000000";
const sc_lv<32> MAT_Multiply::ap_const_lv32_B = "1011";
const sc_lv<64> MAT_Multiply::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> MAT_Multiply::ap_const_lv32_9 = "1001";
const sc_lv<14> MAT_Multiply::ap_const_lv14_64 = "1100100";
const sc_lv<7> MAT_Multiply::ap_const_lv7_64 = "1100100";
const sc_lv<7> MAT_Multiply::ap_const_lv7_1 = "1";
const sc_lv<32> MAT_Multiply::ap_const_lv32_5 = "101";

MAT_Multiply::MAT_Multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    MAT_Multiply_mul_32s_32s_32_6_U1 = new MAT_Multiply_mul_32s_32s_32_6<1,6,32,32,32>("MAT_Multiply_mul_32s_32s_32_6_U1");
    MAT_Multiply_mul_32s_32s_32_6_U1->clk(ap_clk);
    MAT_Multiply_mul_32s_32s_32_6_U1->reset(ap_rst);
    MAT_Multiply_mul_32s_32s_32_6_U1->din0(grp_fu_334_p0);
    MAT_Multiply_mul_32s_32s_32_6_U1->din1(grp_fu_334_p1);
    MAT_Multiply_mul_32s_32s_32_6_U1->ce(grp_fu_334_ce);
    MAT_Multiply_mul_32s_32s_32_6_U1->dout(grp_fu_334_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_10_fu_319_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_14_fu_329_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_C_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( C_addr_reg_401 );
    sensitive << ( ap_sig_cseq_ST_st12_fsm_11 );
    sensitive << ( tmp_6_fu_277_p1 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_C_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st12_fsm_11 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_C_d0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st12_fsm_11 );
    sensitive << ( tmp_13_fu_341_p2 );

    SC_METHOD(thread_C_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_9_fu_262_p2 );
    sensitive << ( exitcond1_fu_245_p2 );
    sensitive << ( tmp_7_reg_414 );
    sensitive << ( ap_sig_cseq_ST_st12_fsm_11 );

    SC_METHOD(thread_ap_done);
    sensitive << ( tmp_4_reg_362 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_224_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_4_reg_362 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_224_p2 );

    SC_METHOD(thread_ap_sig_bdd_100);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_122);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_149);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_159);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_185);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_201);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_281);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_79);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_9);
    sensitive << ( ap_sig_bdd_201 );

    SC_METHOD(thread_ap_sig_cseq_ST_st11_fsm_10);
    sensitive << ( ap_sig_bdd_159 );

    SC_METHOD(thread_ap_sig_cseq_ST_st12_fsm_11);
    sensitive << ( ap_sig_bdd_185 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_28 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_79 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_100 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_122 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_149 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_281 );

    SC_METHOD(thread_exitcond1_fu_245_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_150 );

    SC_METHOD(thread_exitcond2_fu_224_p2);
    sensitive << ( tmp_4_reg_362 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_127 );

    SC_METHOD(thread_exitcond_fu_286_p2);
    sensitive << ( tmp_9_reg_392 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( k_reg_161 );

    SC_METHOD(thread_grp_fu_334_ce);

    SC_METHOD(thread_grp_fu_334_p0);
    sensitive << ( B_load_reg_438 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_grp_fu_334_p1);
    sensitive << ( A_load_reg_433 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_i_1_fu_230_p2);
    sensitive << ( i_reg_127 );

    SC_METHOD(thread_i_cast_fu_220_p1);
    sensitive << ( i_reg_127 );

    SC_METHOD(thread_j_1_fu_251_p2);
    sensitive << ( j_reg_150 );

    SC_METHOD(thread_j_cast_fu_241_p1);
    sensitive << ( j_reg_150 );

    SC_METHOD(thread_k_1_fu_292_p2);
    sensitive << ( k_reg_161 );

    SC_METHOD(thread_k_cast_fu_282_p1);
    sensitive << ( k_reg_161 );

    SC_METHOD(thread_next_mul1_fu_214_p2);
    sensitive << ( phi_mul9_reg_138 );

    SC_METHOD(thread_next_mul_fu_303_p2);
    sensitive << ( phi_mul_reg_172 );

    SC_METHOD(thread_p_addr1_fu_313_p2);
    sensitive << ( phi_mul9_reg_138 );
    sensitive << ( tmp_10_trn_cast_fu_309_p1 );

    SC_METHOD(thread_p_addr4_fu_324_p2);
    sensitive << ( tmp_trn6_cast_reg_396 );
    sensitive << ( phi_mul_reg_172 );

    SC_METHOD(thread_p_addr8_fu_271_p2);
    sensitive << ( tmp_trn6_cast_fu_267_p1 );
    sensitive << ( phi_mul9_reg_138 );

    SC_METHOD(thread_tmp1_fu_202_p2);
    sensitive << ( tmp_1_fu_190_p2 );
    sensitive << ( tmp_3_fu_196_p2 );

    SC_METHOD(thread_tmp_10_fu_319_p1);
    sensitive << ( p_addr1_fu_313_p2 );

    SC_METHOD(thread_tmp_10_trn_cast_fu_309_p1);
    sensitive << ( k_reg_161 );

    SC_METHOD(thread_tmp_12_fu_338_p1);
    sensitive << ( tmp_11_reg_443 );

    SC_METHOD(thread_tmp_13_fu_341_p2);
    sensitive << ( C_load_reg_448 );
    sensitive << ( tmp_12_fu_338_p1 );

    SC_METHOD(thread_tmp_14_fu_329_p1);
    sensitive << ( p_addr4_fu_324_p2 );

    SC_METHOD(thread_tmp_1_fu_190_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( mA );
    sensitive << ( mC );

    SC_METHOD(thread_tmp_3_fu_196_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( nB );
    sensitive << ( nC );

    SC_METHOD(thread_tmp_4_fu_208_p2);
    sensitive << ( tmp1_fu_202_p2 );
    sensitive << ( tmp_fu_184_p2 );

    SC_METHOD(thread_tmp_5_fu_236_p2);
    sensitive << ( mC );
    sensitive << ( tmp_4_reg_362 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_224_p2 );
    sensitive << ( i_cast_fu_220_p1 );

    SC_METHOD(thread_tmp_6_fu_277_p1);
    sensitive << ( p_addr8_fu_271_p2 );

    SC_METHOD(thread_tmp_7_fu_298_p2);
    sensitive << ( mB );
    sensitive << ( tmp_9_reg_392 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond_fu_286_p2 );
    sensitive << ( k_cast_fu_282_p1 );

    SC_METHOD(thread_tmp_8_fu_257_p2);
    sensitive << ( nC );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond1_fu_245_p2 );
    sensitive << ( j_cast_fu_241_p1 );

    SC_METHOD(thread_tmp_9_fu_262_p2);
    sensitive << ( tmp_5_reg_379 );
    sensitive << ( tmp_8_fu_257_p2 );

    SC_METHOD(thread_tmp_fu_184_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( nA );
    sensitive << ( mB );

    SC_METHOD(thread_tmp_trn6_cast_fu_267_p1);
    sensitive << ( j_reg_150 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_4_reg_362 );
    sensitive << ( exitcond2_fu_224_p2 );
    sensitive << ( tmp_9_reg_392 );
    sensitive << ( exitcond1_fu_245_p2 );
    sensitive << ( tmp_7_fu_298_p2 );
    sensitive << ( exitcond_fu_286_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "MAT_Multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, C_address0, "(port)C_address0");
    sc_trace(mVcdFile, C_ce0, "(port)C_ce0");
    sc_trace(mVcdFile, C_we0, "(port)C_we0");
    sc_trace(mVcdFile, C_d0, "(port)C_d0");
    sc_trace(mVcdFile, C_q0, "(port)C_q0");
    sc_trace(mVcdFile, mA, "(port)mA");
    sc_trace(mVcdFile, nA, "(port)nA");
    sc_trace(mVcdFile, mB, "(port)mB");
    sc_trace(mVcdFile, nB, "(port)nB");
    sc_trace(mVcdFile, mC, "(port)mC");
    sc_trace(mVcdFile, nC, "(port)nC");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_28, "ap_sig_bdd_28");
    sc_trace(mVcdFile, tmp_4_fu_208_p2, "tmp_4_fu_208_p2");
    sc_trace(mVcdFile, tmp_4_reg_362, "tmp_4_reg_362");
    sc_trace(mVcdFile, next_mul1_fu_214_p2, "next_mul1_fu_214_p2");
    sc_trace(mVcdFile, next_mul1_reg_366, "next_mul1_reg_366");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_79, "ap_sig_bdd_79");
    sc_trace(mVcdFile, i_1_fu_230_p2, "i_1_fu_230_p2");
    sc_trace(mVcdFile, i_1_reg_374, "i_1_reg_374");
    sc_trace(mVcdFile, tmp_5_fu_236_p2, "tmp_5_fu_236_p2");
    sc_trace(mVcdFile, tmp_5_reg_379, "tmp_5_reg_379");
    sc_trace(mVcdFile, exitcond2_fu_224_p2, "exitcond2_fu_224_p2");
    sc_trace(mVcdFile, j_1_fu_251_p2, "j_1_fu_251_p2");
    sc_trace(mVcdFile, j_1_reg_387, "j_1_reg_387");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_100, "ap_sig_bdd_100");
    sc_trace(mVcdFile, tmp_9_fu_262_p2, "tmp_9_fu_262_p2");
    sc_trace(mVcdFile, tmp_9_reg_392, "tmp_9_reg_392");
    sc_trace(mVcdFile, exitcond1_fu_245_p2, "exitcond1_fu_245_p2");
    sc_trace(mVcdFile, tmp_trn6_cast_fu_267_p1, "tmp_trn6_cast_fu_267_p1");
    sc_trace(mVcdFile, tmp_trn6_cast_reg_396, "tmp_trn6_cast_reg_396");
    sc_trace(mVcdFile, C_addr_reg_401, "C_addr_reg_401");
    sc_trace(mVcdFile, k_1_fu_292_p2, "k_1_fu_292_p2");
    sc_trace(mVcdFile, k_1_reg_409, "k_1_reg_409");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_122, "ap_sig_bdd_122");
    sc_trace(mVcdFile, tmp_7_fu_298_p2, "tmp_7_fu_298_p2");
    sc_trace(mVcdFile, tmp_7_reg_414, "tmp_7_reg_414");
    sc_trace(mVcdFile, exitcond_fu_286_p2, "exitcond_fu_286_p2");
    sc_trace(mVcdFile, next_mul_fu_303_p2, "next_mul_fu_303_p2");
    sc_trace(mVcdFile, next_mul_reg_418, "next_mul_reg_418");
    sc_trace(mVcdFile, A_load_reg_433, "A_load_reg_433");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_149, "ap_sig_bdd_149");
    sc_trace(mVcdFile, B_load_reg_438, "B_load_reg_438");
    sc_trace(mVcdFile, grp_fu_334_p2, "grp_fu_334_p2");
    sc_trace(mVcdFile, tmp_11_reg_443, "tmp_11_reg_443");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st11_fsm_10, "ap_sig_cseq_ST_st11_fsm_10");
    sc_trace(mVcdFile, ap_sig_bdd_159, "ap_sig_bdd_159");
    sc_trace(mVcdFile, C_load_reg_448, "C_load_reg_448");
    sc_trace(mVcdFile, i_reg_127, "i_reg_127");
    sc_trace(mVcdFile, phi_mul9_reg_138, "phi_mul9_reg_138");
    sc_trace(mVcdFile, j_reg_150, "j_reg_150");
    sc_trace(mVcdFile, k_reg_161, "k_reg_161");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st12_fsm_11, "ap_sig_cseq_ST_st12_fsm_11");
    sc_trace(mVcdFile, ap_sig_bdd_185, "ap_sig_bdd_185");
    sc_trace(mVcdFile, phi_mul_reg_172, "phi_mul_reg_172");
    sc_trace(mVcdFile, tmp_6_fu_277_p1, "tmp_6_fu_277_p1");
    sc_trace(mVcdFile, tmp_10_fu_319_p1, "tmp_10_fu_319_p1");
    sc_trace(mVcdFile, tmp_14_fu_329_p1, "tmp_14_fu_329_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_9, "ap_sig_cseq_ST_st10_fsm_9");
    sc_trace(mVcdFile, ap_sig_bdd_201, "ap_sig_bdd_201");
    sc_trace(mVcdFile, tmp_13_fu_341_p2, "tmp_13_fu_341_p2");
    sc_trace(mVcdFile, tmp_1_fu_190_p2, "tmp_1_fu_190_p2");
    sc_trace(mVcdFile, tmp_3_fu_196_p2, "tmp_3_fu_196_p2");
    sc_trace(mVcdFile, tmp1_fu_202_p2, "tmp1_fu_202_p2");
    sc_trace(mVcdFile, tmp_fu_184_p2, "tmp_fu_184_p2");
    sc_trace(mVcdFile, i_cast_fu_220_p1, "i_cast_fu_220_p1");
    sc_trace(mVcdFile, j_cast_fu_241_p1, "j_cast_fu_241_p1");
    sc_trace(mVcdFile, tmp_8_fu_257_p2, "tmp_8_fu_257_p2");
    sc_trace(mVcdFile, p_addr8_fu_271_p2, "p_addr8_fu_271_p2");
    sc_trace(mVcdFile, k_cast_fu_282_p1, "k_cast_fu_282_p1");
    sc_trace(mVcdFile, tmp_10_trn_cast_fu_309_p1, "tmp_10_trn_cast_fu_309_p1");
    sc_trace(mVcdFile, p_addr1_fu_313_p2, "p_addr1_fu_313_p2");
    sc_trace(mVcdFile, p_addr4_fu_324_p2, "p_addr4_fu_324_p2");
    sc_trace(mVcdFile, grp_fu_334_p0, "grp_fu_334_p0");
    sc_trace(mVcdFile, grp_fu_334_p1, "grp_fu_334_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_281, "ap_sig_bdd_281");
    sc_trace(mVcdFile, tmp_12_fu_338_p1, "tmp_12_fu_338_p1");
    sc_trace(mVcdFile, grp_fu_334_ce, "grp_fu_334_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("MAT_Multiply.hdltvin.dat");
    mHdltvoutHandle.open("MAT_Multiply.hdltvout.dat");
}

MAT_Multiply::~MAT_Multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete MAT_Multiply_mul_32s_32s_32_6_U1;
}

void MAT_Multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         !esl_seteq<1,1,1>(tmp_4_fu_208_p2.read(), ap_const_lv1_0))) {
        i_reg_127 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_245_p2.read()))) {
        i_reg_127 = i_1_reg_374.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_392.read()) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_286_p2.read())))) {
        j_reg_150 = j_1_reg_387.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                !esl_seteq<1,1,1>(tmp_4_reg_362.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_224_p2.read()))) {
        j_reg_150 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read())) {
        k_reg_161 = k_1_reg_409.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_245_p2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_262_p2.read()))) {
        k_reg_161 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         !esl_seteq<1,1,1>(tmp_4_fu_208_p2.read(), ap_const_lv1_0))) {
        phi_mul9_reg_138 = ap_const_lv14_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_245_p2.read()))) {
        phi_mul9_reg_138 = next_mul1_reg_366.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read())) {
        phi_mul_reg_172 = next_mul_reg_418.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_245_p2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_262_p2.read()))) {
        phi_mul_reg_172 = ap_const_lv14_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        A_load_reg_433 = A_q0.read();
        B_load_reg_438 = B_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_245_p2.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_262_p2.read()))) {
        C_addr_reg_401 =  (sc_lv<14>) (tmp_6_fu_277_p1.read());
        tmp_trn6_cast_reg_396 = tmp_trn6_cast_fu_267_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read())) {
        C_load_reg_448 = C_q0.read();
        tmp_11_reg_443 = grp_fu_334_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_4_reg_362.read(), ap_const_lv1_0))) {
        i_1_reg_374 = i_1_fu_230_p2.read();
        next_mul1_reg_366 = next_mul1_fu_214_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_1_reg_387 = j_1_fu_251_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_392.read()))) {
        k_1_reg_409 = k_1_fu_292_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_392.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_286_p2.read()))) {
        next_mul_reg_418 = next_mul_fu_303_p2.read();
        tmp_7_reg_414 = tmp_7_fu_298_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_4_reg_362 = tmp_4_fu_208_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_4_reg_362.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_224_p2.read()))) {
        tmp_5_reg_379 = tmp_5_fu_236_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_245_p2.read()))) {
        tmp_9_reg_392 = tmp_9_fu_262_p2.read();
    }
}

void MAT_Multiply::thread_A_address0() {
    A_address0 =  (sc_lv<14>) (tmp_10_fu_319_p1.read());
}

void MAT_Multiply::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_B_address0() {
    B_address0 =  (sc_lv<14>) (tmp_14_fu_329_p1.read());
}

void MAT_Multiply::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_C_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        C_address0 =  (sc_lv<14>) (tmp_6_fu_277_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read()))) {
        C_address0 = C_addr_reg_401.read();
    } else {
        C_address0 = "XXXXXXXXXXXXXX";
    }
}

void MAT_Multiply::thread_C_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read()))) {
        C_ce0 = ap_const_logic_1;
    } else {
        C_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_C_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read())) {
        C_d0 = tmp_13_fu_341_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        C_d0 = ap_const_lv64_0;
    } else {
        C_d0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void MAT_Multiply::thread_C_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_245_p2.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_262_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_reg_414.read())))) {
        C_we0 = ap_const_logic_1;
    } else {
        C_we0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         (esl_seteq<1,1,1>(tmp_4_reg_362.read(), ap_const_lv1_0) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_224_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         (esl_seteq<1,1,1>(tmp_4_reg_362.read(), ap_const_lv1_0) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_224_p2.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_bdd_100() {
    ap_sig_bdd_100 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void MAT_Multiply::thread_ap_sig_bdd_122() {
    ap_sig_bdd_122 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void MAT_Multiply::thread_ap_sig_bdd_149() {
    ap_sig_bdd_149 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void MAT_Multiply::thread_ap_sig_bdd_159() {
    ap_sig_bdd_159 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(10, 10));
}

void MAT_Multiply::thread_ap_sig_bdd_185() {
    ap_sig_bdd_185 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(11, 11));
}

void MAT_Multiply::thread_ap_sig_bdd_201() {
    ap_sig_bdd_201 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void MAT_Multiply::thread_ap_sig_bdd_28() {
    ap_sig_bdd_28 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void MAT_Multiply::thread_ap_sig_bdd_281() {
    ap_sig_bdd_281 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void MAT_Multiply::thread_ap_sig_bdd_79() {
    ap_sig_bdd_79 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st10_fsm_9() {
    if (ap_sig_bdd_201.read()) {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st11_fsm_10() {
    if (ap_sig_bdd_159.read()) {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st12_fsm_11() {
    if (ap_sig_bdd_185.read()) {
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_28.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_79.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_100.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_122.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_149.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_281.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_exitcond1_fu_245_p2() {
    exitcond1_fu_245_p2 = (!j_reg_150.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_150.read() == ap_const_lv7_64);
}

void MAT_Multiply::thread_exitcond2_fu_224_p2() {
    exitcond2_fu_224_p2 = (!i_reg_127.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_127.read() == ap_const_lv7_64);
}

void MAT_Multiply::thread_exitcond_fu_286_p2() {
    exitcond_fu_286_p2 = (!k_reg_161.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_161.read() == ap_const_lv7_64);
}

void MAT_Multiply::thread_grp_fu_334_ce() {
    grp_fu_334_ce = ap_const_logic_1;
}

void MAT_Multiply::thread_grp_fu_334_p0() {
    grp_fu_334_p0 = B_load_reg_438.read();
}

void MAT_Multiply::thread_grp_fu_334_p1() {
    grp_fu_334_p1 = A_load_reg_433.read();
}

void MAT_Multiply::thread_i_1_fu_230_p2() {
    i_1_fu_230_p2 = (!i_reg_127.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_127.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void MAT_Multiply::thread_i_cast_fu_220_p1() {
    i_cast_fu_220_p1 = esl_zext<8,7>(i_reg_127.read());
}

void MAT_Multiply::thread_j_1_fu_251_p2() {
    j_1_fu_251_p2 = (!j_reg_150.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_reg_150.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void MAT_Multiply::thread_j_cast_fu_241_p1() {
    j_cast_fu_241_p1 = esl_zext<8,7>(j_reg_150.read());
}

void MAT_Multiply::thread_k_1_fu_292_p2() {
    k_1_fu_292_p2 = (!k_reg_161.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_reg_161.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void MAT_Multiply::thread_k_cast_fu_282_p1() {
    k_cast_fu_282_p1 = esl_zext<8,7>(k_reg_161.read());
}

void MAT_Multiply::thread_next_mul1_fu_214_p2() {
    next_mul1_fu_214_p2 = (!phi_mul9_reg_138.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul9_reg_138.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void MAT_Multiply::thread_next_mul_fu_303_p2() {
    next_mul_fu_303_p2 = (!phi_mul_reg_172.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_172.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void MAT_Multiply::thread_p_addr1_fu_313_p2() {
    p_addr1_fu_313_p2 = (!tmp_10_trn_cast_fu_309_p1.read().is_01() || !phi_mul9_reg_138.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_10_trn_cast_fu_309_p1.read()) + sc_biguint<14>(phi_mul9_reg_138.read()));
}

void MAT_Multiply::thread_p_addr4_fu_324_p2() {
    p_addr4_fu_324_p2 = (!tmp_trn6_cast_reg_396.read().is_01() || !phi_mul_reg_172.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_trn6_cast_reg_396.read()) + sc_biguint<14>(phi_mul_reg_172.read()));
}

void MAT_Multiply::thread_p_addr8_fu_271_p2() {
    p_addr8_fu_271_p2 = (!tmp_trn6_cast_fu_267_p1.read().is_01() || !phi_mul9_reg_138.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_trn6_cast_fu_267_p1.read()) + sc_biguint<14>(phi_mul9_reg_138.read()));
}

void MAT_Multiply::thread_tmp1_fu_202_p2() {
    tmp1_fu_202_p2 = (tmp_1_fu_190_p2.read() & tmp_3_fu_196_p2.read());
}

void MAT_Multiply::thread_tmp_10_fu_319_p1() {
    tmp_10_fu_319_p1 = esl_zext<64,14>(p_addr1_fu_313_p2.read());
}

void MAT_Multiply::thread_tmp_10_trn_cast_fu_309_p1() {
    tmp_10_trn_cast_fu_309_p1 = esl_zext<14,7>(k_reg_161.read());
}

void MAT_Multiply::thread_tmp_12_fu_338_p1() {
    tmp_12_fu_338_p1 = esl_sext<64,32>(tmp_11_reg_443.read());
}

void MAT_Multiply::thread_tmp_13_fu_341_p2() {
    tmp_13_fu_341_p2 = (!C_load_reg_448.read().is_01() || !tmp_12_fu_338_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(C_load_reg_448.read()) + sc_bigint<64>(tmp_12_fu_338_p1.read()));
}

void MAT_Multiply::thread_tmp_14_fu_329_p1() {
    tmp_14_fu_329_p1 = esl_zext<64,14>(p_addr4_fu_324_p2.read());
}

void MAT_Multiply::thread_tmp_1_fu_190_p2() {
    tmp_1_fu_190_p2 = (!mA.read().is_01() || !mC.read().is_01())? sc_lv<1>(): sc_lv<1>(mA.read() == mC.read());
}

void MAT_Multiply::thread_tmp_3_fu_196_p2() {
    tmp_3_fu_196_p2 = (!nB.read().is_01() || !nC.read().is_01())? sc_lv<1>(): sc_lv<1>(nB.read() == nC.read());
}

void MAT_Multiply::thread_tmp_4_fu_208_p2() {
    tmp_4_fu_208_p2 = (tmp1_fu_202_p2.read() & tmp_fu_184_p2.read());
}

void MAT_Multiply::thread_tmp_5_fu_236_p2() {
    tmp_5_fu_236_p2 = (!i_cast_fu_220_p1.read().is_01() || !mC.read().is_01())? sc_lv<1>(): (sc_biguint<8>(i_cast_fu_220_p1.read()) < sc_biguint<8>(mC.read()));
}

void MAT_Multiply::thread_tmp_6_fu_277_p1() {
    tmp_6_fu_277_p1 = esl_zext<64,14>(p_addr8_fu_271_p2.read());
}

void MAT_Multiply::thread_tmp_7_fu_298_p2() {
    tmp_7_fu_298_p2 = (!k_cast_fu_282_p1.read().is_01() || !mB.read().is_01())? sc_lv<1>(): (sc_biguint<8>(k_cast_fu_282_p1.read()) < sc_biguint<8>(mB.read()));
}

void MAT_Multiply::thread_tmp_8_fu_257_p2() {
    tmp_8_fu_257_p2 = (!j_cast_fu_241_p1.read().is_01() || !nC.read().is_01())? sc_lv<1>(): (sc_biguint<8>(j_cast_fu_241_p1.read()) < sc_biguint<8>(nC.read()));
}

void MAT_Multiply::thread_tmp_9_fu_262_p2() {
    tmp_9_fu_262_p2 = (tmp_5_reg_379.read() & tmp_8_fu_257_p2.read());
}

void MAT_Multiply::thread_tmp_fu_184_p2() {
    tmp_fu_184_p2 = (!nA.read().is_01() || !mB.read().is_01())? sc_lv<1>(): sc_lv<1>(nA.read() == mB.read());
}

void MAT_Multiply::thread_tmp_trn6_cast_fu_267_p1() {
    tmp_trn6_cast_fu_267_p1 = esl_zext<14,7>(j_reg_150.read());
}

void MAT_Multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_4_reg_362.read(), ap_const_lv1_0) || !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_224_p2.read()))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_245_p2.read())) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_392.read()) || !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_286_p2.read()))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_392.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_286_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_298_p2.read()))) {
                ap_NS_fsm = ap_ST_st12_fsm_11;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

void MAT_Multiply::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_address0\" :  \"" << C_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_ce0\" :  \"" << C_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_we0\" :  \"" << C_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_d0\" :  \"" << C_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_q0\" :  \"" << C_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mA\" :  \"" << mA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nA\" :  \"" << nA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mB\" :  \"" << mB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nB\" :  \"" << nB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mC\" :  \"" << mC.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nC\" :  \"" << nC.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

