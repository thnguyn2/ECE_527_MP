-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    mA : IN STD_LOGIC_VECTOR (7 downto 0);
    nA : IN STD_LOGIC_VECTOR (7 downto 0);
    mB : IN STD_LOGIC_VECTOR (7 downto 0);
    nB : IN STD_LOGIC_VECTOR (7 downto 0);
    mC : IN STD_LOGIC_VECTOR (7 downto 0);
    nC : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.309000,HLS_SYN_LAT=1510101,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=295,HLS_SYN_LUT=318}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_28 : BOOLEAN;
    signal tmp_4_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul1_fu_214_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul1_reg_366 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal i_1_fu_230_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_374 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_387 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_100 : BOOLEAN;
    signal tmp_9_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_trn6_cast_fu_267_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_trn6_cast_reg_396 : STD_LOGIC_VECTOR (13 downto 0);
    signal C_addr_reg_401 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_1_fu_292_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_409 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal tmp_7_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_303_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_418 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_load_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal B_load_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_159 : BOOLEAN;
    signal C_load_reg_448 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_127 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul9_reg_138 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_150 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_161 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_185 : BOOLEAN;
    signal phi_mul_reg_172 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_201 : BOOLEAN;
    signal tmp_13_fu_341_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_220_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr8_fu_271_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_cast_fu_282_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_trn_cast_fu_309_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr1_fu_313_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr4_fu_324_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_334_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_281 : BOOLEAN;
    signal tmp_12_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_334_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    MAT_Multiply_mul_32s_32s_32_6_U1 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_334_p0,
        din1 => grp_fu_334_p1,
        ce => grp_fu_334_ce,
        dout => grp_fu_334_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_127 assign process. --
    i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_208_p2 = ap_const_lv1_0)))) then 
                i_reg_127 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_245_p2)))) then 
                i_reg_127 <= i_1_reg_374;
            end if; 
        end if;
    end process;

    -- j_reg_150 assign process. --
    j_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and ((ap_const_lv1_0 = tmp_9_reg_392) or not((ap_const_lv1_0 = exitcond_fu_286_p2))))) then 
                j_reg_150 <= j_1_reg_387;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_362 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_224_p2))) then 
                j_reg_150 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_reg_161 assign process. --
    k_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                k_reg_161 <= k_1_reg_409;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_245_p2) and not((ap_const_lv1_0 = tmp_9_fu_262_p2)))) then 
                k_reg_161 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- phi_mul9_reg_138 assign process. --
    phi_mul9_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_208_p2 = ap_const_lv1_0)))) then 
                phi_mul9_reg_138 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_245_p2)))) then 
                phi_mul9_reg_138 <= next_mul1_reg_366;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_172 assign process. --
    phi_mul_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                phi_mul_reg_172 <= next_mul_reg_418;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_245_p2) and not((ap_const_lv1_0 = tmp_9_fu_262_p2)))) then 
                phi_mul_reg_172 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                A_load_reg_433 <= A_q0;
                B_load_reg_438 <= B_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_245_p2) and not((ap_const_lv1_0 = tmp_9_fu_262_p2)))) then
                C_addr_reg_401 <= tmp_6_fu_277_p1(14 - 1 downto 0);
                    tmp_trn6_cast_reg_396(6 downto 0) <= tmp_trn6_cast_fu_267_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                C_load_reg_448 <= C_q0;
                tmp_11_reg_443 <= grp_fu_334_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_362 = ap_const_lv1_0)))) then
                i_1_reg_374 <= i_1_fu_230_p2;
                next_mul1_reg_366 <= next_mul1_fu_214_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_387 <= j_1_fu_251_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_reg_392)))) then
                k_1_reg_409 <= k_1_fu_292_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_reg_392)) and (ap_const_lv1_0 = exitcond_fu_286_p2))) then
                next_mul_reg_418 <= next_mul_fu_303_p2;
                tmp_7_reg_414 <= tmp_7_fu_298_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_4_reg_362 <= tmp_4_fu_208_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_362 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_224_p2))) then
                tmp_5_reg_379 <= tmp_5_fu_236_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_245_p2))) then
                tmp_9_reg_392 <= tmp_9_fu_262_p2;
            end if;
        end if;
    end process;
    tmp_trn6_cast_reg_396(13 downto 7) <= "0000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_4_reg_362, exitcond2_fu_224_p2, tmp_9_reg_392, exitcond1_fu_245_p2, tmp_7_fu_298_p2, exitcond_fu_286_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((tmp_4_reg_362 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond2_fu_224_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_245_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((ap_const_lv1_0 = tmp_9_reg_392) or not((ap_const_lv1_0 = exitcond_fu_286_p2)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not((ap_const_lv1_0 = tmp_9_reg_392)) and (ap_const_lv1_0 = exitcond_fu_286_p2) and (ap_const_lv1_0 = tmp_7_fu_298_p2))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_10_fu_319_p1(14 - 1 downto 0);

    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_14_fu_329_p1(14 - 1 downto 0);

    -- B_ce0 assign process. --
    B_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C_address0 assign process. --
    C_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, C_addr_reg_401, ap_sig_cseq_ST_st12_fsm_11, tmp_6_fu_277_p1, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_address0 <= tmp_6_fu_277_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            C_address0 <= C_addr_reg_401;
        else 
            C_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C_d0 assign process. --
    C_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st12_fsm_11, tmp_13_fu_341_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            C_d0 <= tmp_13_fu_341_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_d0 <= ap_const_lv64_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C_we0 assign process. --
    C_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_9_fu_262_p2, exitcond1_fu_245_p2, tmp_7_reg_414, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_245_p2) and not((ap_const_lv1_0 = tmp_9_fu_262_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = tmp_7_reg_414))))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_4_reg_362, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_224_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_362 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond2_fu_224_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_4_reg_362, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_224_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_362 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond2_fu_224_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_100 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_159 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_185 assign process. --
    ap_sig_bdd_185_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_185 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_201 assign process. --
    ap_sig_bdd_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_201 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_28 assign process. --
    ap_sig_bdd_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_281 assign process. --
    ap_sig_bdd_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_281 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_201)
    begin
        if (ap_sig_bdd_201) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_159)
    begin
        if (ap_sig_bdd_159) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_185)
    begin
        if (ap_sig_bdd_185) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_28)
    begin
        if (ap_sig_bdd_28) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_100)
    begin
        if (ap_sig_bdd_100) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_281)
    begin
        if (ap_sig_bdd_281) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_245_p2 <= "1" when (j_reg_150 = ap_const_lv7_64) else "0";
    exitcond2_fu_224_p2 <= "1" when (i_reg_127 = ap_const_lv7_64) else "0";
    exitcond_fu_286_p2 <= "1" when (k_reg_161 = ap_const_lv7_64) else "0";
    grp_fu_334_ce <= ap_const_logic_1;
    grp_fu_334_p0 <= B_load_reg_438;
    grp_fu_334_p1 <= A_load_reg_433;
    i_1_fu_230_p2 <= std_logic_vector(unsigned(i_reg_127) + unsigned(ap_const_lv7_1));
    i_cast_fu_220_p1 <= std_logic_vector(resize(unsigned(i_reg_127),8));
    j_1_fu_251_p2 <= std_logic_vector(unsigned(j_reg_150) + unsigned(ap_const_lv7_1));
    j_cast_fu_241_p1 <= std_logic_vector(resize(unsigned(j_reg_150),8));
    k_1_fu_292_p2 <= std_logic_vector(unsigned(k_reg_161) + unsigned(ap_const_lv7_1));
    k_cast_fu_282_p1 <= std_logic_vector(resize(unsigned(k_reg_161),8));
    next_mul1_fu_214_p2 <= std_logic_vector(unsigned(phi_mul9_reg_138) + unsigned(ap_const_lv14_64));
    next_mul_fu_303_p2 <= std_logic_vector(unsigned(phi_mul_reg_172) + unsigned(ap_const_lv14_64));
    p_addr1_fu_313_p2 <= std_logic_vector(unsigned(tmp_10_trn_cast_fu_309_p1) + unsigned(phi_mul9_reg_138));
    p_addr4_fu_324_p2 <= std_logic_vector(unsigned(tmp_trn6_cast_reg_396) + unsigned(phi_mul_reg_172));
    p_addr8_fu_271_p2 <= std_logic_vector(unsigned(tmp_trn6_cast_fu_267_p1) + unsigned(phi_mul9_reg_138));
    tmp1_fu_202_p2 <= (tmp_1_fu_190_p2 and tmp_3_fu_196_p2);
    tmp_10_fu_319_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_313_p2),64));
    tmp_10_trn_cast_fu_309_p1 <= std_logic_vector(resize(unsigned(k_reg_161),14));
        tmp_12_fu_338_p1 <= std_logic_vector(resize(signed(tmp_11_reg_443),64));

    tmp_13_fu_341_p2 <= std_logic_vector(unsigned(C_load_reg_448) + unsigned(tmp_12_fu_338_p1));
    tmp_14_fu_329_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_324_p2),64));
    tmp_1_fu_190_p2 <= "1" when (mA = mC) else "0";
    tmp_3_fu_196_p2 <= "1" when (nB = nC) else "0";
    tmp_4_fu_208_p2 <= (tmp1_fu_202_p2 and tmp_fu_184_p2);
    tmp_5_fu_236_p2 <= "1" when (unsigned(i_cast_fu_220_p1) < unsigned(mC)) else "0";
    tmp_6_fu_277_p1 <= std_logic_vector(resize(unsigned(p_addr8_fu_271_p2),64));
    tmp_7_fu_298_p2 <= "1" when (unsigned(k_cast_fu_282_p1) < unsigned(mB)) else "0";
    tmp_8_fu_257_p2 <= "1" when (unsigned(j_cast_fu_241_p1) < unsigned(nC)) else "0";
    tmp_9_fu_262_p2 <= (tmp_5_reg_379 and tmp_8_fu_257_p2);
    tmp_fu_184_p2 <= "1" when (nA = mB) else "0";
    tmp_trn6_cast_fu_267_p1 <= std_logic_vector(resize(unsigned(j_reg_150),14));
end behav;
