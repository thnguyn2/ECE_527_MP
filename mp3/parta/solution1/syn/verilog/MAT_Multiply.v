// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.860000,HLS_SYN_LAT=3015202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=282,HLS_SYN_LUT=340}" *)

module MAT_Multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        mA,
        nA,
        mB,
        nB,
        mC,
        mC_ap_vld,
        nC,
        nC_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 14'b1;
parameter    ap_ST_st2_fsm_1 = 14'b10;
parameter    ap_ST_st3_fsm_2 = 14'b100;
parameter    ap_ST_st4_fsm_3 = 14'b1000;
parameter    ap_ST_st5_fsm_4 = 14'b10000;
parameter    ap_ST_st6_fsm_5 = 14'b100000;
parameter    ap_ST_st7_fsm_6 = 14'b1000000;
parameter    ap_ST_st8_fsm_7 = 14'b10000000;
parameter    ap_ST_st9_fsm_8 = 14'b100000000;
parameter    ap_ST_st10_fsm_9 = 14'b1000000000;
parameter    ap_ST_st11_fsm_10 = 14'b10000000000;
parameter    ap_ST_st12_fsm_11 = 14'b100000000000;
parameter    ap_ST_st13_fsm_12 = 14'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 14'b10000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv14_64 = 14'b1100100;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [13:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [13:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [7:0] mA;
input  [7:0] nA;
input  [7:0] mB;
input  [7:0] nB;
output  [7:0] mC;
output   mC_ap_vld;
output  [7:0] nC;
output   nC_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg[13:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg[7:0] mC;
reg mC_ap_vld;
reg[7:0] nC;
reg nC_ap_vld;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm = 14'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_30;
wire   [0:0] tmp_fu_225_p2;
reg   [0:0] tmp_reg_426;
wire   [13:0] next_mul_fu_231_p2;
reg   [13:0] next_mul_reg_430;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_83;
wire   [6:0] i_2_fu_243_p2;
reg   [6:0] i_2_reg_438;
wire   [6:0] j_2_fu_255_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_94;
wire   [13:0] next_mul1_fu_276_p2;
reg   [13:0] next_mul1_reg_451;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_103;
wire   [6:0] i_3_fu_292_p2;
reg   [6:0] i_3_reg_459;
wire   [0:0] tmp_2_fu_298_p2;
reg   [0:0] tmp_2_reg_464;
wire   [0:0] exitcond2_fu_286_p2;
wire   [6:0] j_3_fu_313_p2;
reg   [6:0] j_3_reg_472;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_124;
wire   [0:0] tmp_8_fu_319_p2;
reg   [0:0] tmp_8_reg_477;
wire   [0:0] exitcond1_fu_307_p2;
wire   [13:0] tmp_9_trn6_cast_fu_324_p1;
reg   [13:0] tmp_9_trn6_cast_reg_482;
reg   [13:0] C_addr_1_reg_487;
wire   [6:0] k_1_fu_349_p2;
reg   [6:0] k_1_reg_495;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_142;
wire   [0:0] or_cond5_fu_365_p2;
reg   [0:0] or_cond5_reg_500;
wire   [0:0] exitcond_fu_343_p2;
wire   [13:0] next_mul2_fu_370_p2;
reg   [13:0] next_mul2_reg_504;
reg  signed [31:0] A_load_reg_519;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_165;
reg  signed [31:0] B_load_reg_524;
wire  signed [31:0] grp_fu_401_p2;
reg  signed [31:0] tmp_6_reg_529;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_175;
reg   [6:0] i_reg_134;
wire   [0:0] exitcond3_fu_249_p2;
reg   [13:0] phi_mul_reg_145;
reg   [6:0] j_reg_157;
wire   [0:0] exitcond4_fu_237_p2;
reg   [6:0] i_1_reg_168;
reg   [13:0] phi_mul1_reg_179;
reg   [6:0] j_1_reg_191;
reg   [6:0] k_reg_202;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_215;
reg   [13:0] phi_mul2_reg_213;
wire   [63:0] tmp_1_fu_271_p1;
wire   [63:0] tmp_3_fu_334_p1;
wire   [63:0] tmp_4_fu_386_p1;
wire   [63:0] tmp_5_fu_396_p1;
wire  signed [31:0] tmp_7_fu_405_p2;
wire   [13:0] tmp_5_trn_cast_fu_261_p1;
wire   [13:0] p_addr_fu_265_p2;
wire   [7:0] i_1_cast_fu_282_p1;
wire   [7:0] j_1_cast_fu_303_p1;
wire   [13:0] p_addr8_fu_328_p2;
wire   [7:0] k_cast_fu_339_p1;
wire   [0:0] tmp_s_fu_355_p2;
wire   [0:0] tmp1_fu_360_p2;
wire   [13:0] tmp_4_trn_cast_fu_376_p1;
wire   [13:0] p_addr1_fu_380_p2;
wire   [13:0] p_addr4_fu_391_p2;
wire  signed [31:0] grp_fu_401_p0;
wire  signed [31:0] grp_fu_401_p1;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_313;
wire    grp_fu_401_ce;
reg   [13:0] ap_NS_fsm;
reg    ap_sig_bdd_70;


MAT_Multiply_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAT_Multiply_mul_32s_32s_32_6_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_401_p0 ),
    .din1( grp_fu_401_p1 ),
    .ce( grp_fu_401_ce ),
    .dout( grp_fu_401_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond1_fu_307_p2))) begin
        i_1_reg_168 <= i_3_reg_459;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond4_fu_237_p2))) begin
        i_1_reg_168 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond3_fu_249_p2))) begin
        i_reg_134 <= i_2_reg_438;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_225_p2 == ap_const_lv1_0))) begin
        i_reg_134 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == exitcond_fu_343_p2))) begin
        j_1_reg_191 <= j_3_reg_472;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(tmp_reg_426 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond2_fu_286_p2))) begin
        j_1_reg_191 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond4_fu_237_p2))) begin
        j_reg_157 <= ap_const_lv7_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond3_fu_249_p2))) begin
        j_reg_157 <= j_2_fu_255_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond1_fu_307_p2))) begin
        k_reg_202 <= ap_const_lv7_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        k_reg_202 <= k_1_reg_495;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond1_fu_307_p2))) begin
        phi_mul1_reg_179 <= next_mul1_reg_451;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond4_fu_237_p2))) begin
        phi_mul1_reg_179 <= ap_const_lv14_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond1_fu_307_p2))) begin
        phi_mul2_reg_213 <= ap_const_lv14_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        phi_mul2_reg_213 <= next_mul2_reg_504;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond3_fu_249_p2))) begin
        phi_mul_reg_145 <= next_mul_reg_430;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_225_p2 == ap_const_lv1_0))) begin
        phi_mul_reg_145 <= ap_const_lv14_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        A_load_reg_519 <= A_q0;
        B_load_reg_524 <= B_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond1_fu_307_p2))) begin
        C_addr_1_reg_487 <= tmp_3_fu_334_p1;
        tmp_8_reg_477 <= tmp_8_fu_319_p2;
        tmp_9_trn6_cast_reg_482[6 : 0] <= tmp_9_trn6_cast_fu_324_p1[6 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_2_reg_438 <= i_2_fu_243_p2;
        next_mul_reg_430 <= next_mul_fu_231_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(tmp_reg_426 == ap_const_lv1_0))) begin
        i_3_reg_459 <= i_3_fu_292_p2;
        next_mul1_reg_451 <= next_mul1_fu_276_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        j_3_reg_472 <= j_3_fu_313_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        k_1_reg_495 <= k_1_fu_349_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == exitcond_fu_343_p2))) begin
        next_mul2_reg_504 <= next_mul2_fu_370_p2;
        or_cond5_reg_500 <= or_cond5_fu_365_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(tmp_reg_426 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond2_fu_286_p2))) begin
        tmp_2_reg_464 <= tmp_2_fu_298_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        tmp_6_reg_529 <= grp_fu_401_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_426 <= tmp_fu_225_p2;
    end
end

/// A_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        A_ce0 = ap_const_logic_1;
    end else begin
        A_ce0 = ap_const_logic_0;
    end
end

/// B_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

/// C_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or C_addr_1_reg_487 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st14_fsm_13 or tmp_1_fu_271_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        C_address0 = tmp_1_fu_271_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        C_address0 = C_addr_1_reg_487;
    end else begin
        C_address0 = 'bx;
    end
end

/// C_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        C_ce0 = ap_const_logic_1;
    end else begin
        C_ce0 = ap_const_logic_0;
    end
end

/// C_d0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st14_fsm_13 or tmp_7_fu_405_p2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        C_d0 = tmp_7_fu_405_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        C_d0 = ap_const_lv32_0;
    end else begin
        C_d0 = 'bx;
    end
end

/// C_we0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or or_cond5_reg_500 or exitcond3_fu_249_p2 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond3_fu_249_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & ~(ap_const_lv1_0 == or_cond5_reg_500)))) begin
        C_we0 = ap_const_logic_1;
    end else begin
        C_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (tmp_reg_426 or ap_sig_cseq_ST_st4_fsm_3 or exitcond2_fu_286_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((tmp_reg_426 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond2_fu_286_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (tmp_reg_426 or ap_sig_cseq_ST_st4_fsm_3 or exitcond2_fu_286_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((tmp_reg_426 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond2_fu_286_p2)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_175)
begin
    if (ap_sig_bdd_175) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_215)
begin
    if (ap_sig_bdd_215) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_30)
begin
    if (ap_sig_bdd_30) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_83)
begin
    if (ap_sig_bdd_83) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_94)
begin
    if (ap_sig_bdd_94) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_103)
begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_124)
begin
    if (ap_sig_bdd_124) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_142)
begin
    if (ap_sig_bdd_142) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_165)
begin
    if (ap_sig_bdd_165) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_313)
begin
    if (ap_sig_bdd_313) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// mC assign process. ///
always @ (mA or tmp_fu_225_p2 or ap_sig_bdd_70)
begin
    if (ap_sig_bdd_70) begin
        if (~(tmp_fu_225_p2 == ap_const_lv1_0)) begin
            mC = mA;
        end else if ((tmp_fu_225_p2 == ap_const_lv1_0)) begin
            mC = ap_const_lv8_0;
        end else begin
            mC = 'bx;
        end
    end else begin
        mC = 'bx;
    end
end

/// mC_ap_vld assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_fu_225_p2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_225_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (tmp_fu_225_p2 == ap_const_lv1_0)))) begin
        mC_ap_vld = ap_const_logic_1;
    end else begin
        mC_ap_vld = ap_const_logic_0;
    end
end

/// nC assign process. ///
always @ (nB or tmp_fu_225_p2 or ap_sig_bdd_70)
begin
    if (ap_sig_bdd_70) begin
        if (~(tmp_fu_225_p2 == ap_const_lv1_0)) begin
            nC = nB;
        end else if ((tmp_fu_225_p2 == ap_const_lv1_0)) begin
            nC = ap_const_lv8_0;
        end else begin
            nC = 'bx;
        end
    end else begin
        nC = 'bx;
    end
end

/// nC_ap_vld assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_fu_225_p2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_225_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (tmp_fu_225_p2 == ap_const_lv1_0)))) begin
        nC_ap_vld = ap_const_logic_1;
    end else begin
        nC_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_225_p2 or tmp_reg_426 or exitcond2_fu_286_p2 or exitcond1_fu_307_p2 or or_cond5_fu_365_p2 or exitcond_fu_343_p2 or exitcond3_fu_249_p2 or exitcond4_fu_237_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & ~(tmp_fu_225_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if ((~(ap_start == ap_const_logic_0) & (tmp_fu_225_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond4_fu_237_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond3_fu_249_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (((tmp_reg_426 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond2_fu_286_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if ((ap_const_lv1_0 == exitcond1_fu_307_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (((ap_const_lv1_0 == exitcond_fu_343_p2) & (ap_const_lv1_0 == or_cond5_fu_365_p2))) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else if (((ap_const_lv1_0 == exitcond_fu_343_p2) & ~(ap_const_lv1_0 == or_cond5_fu_365_p2))) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_4_fu_386_p1;
assign B_address0 = tmp_5_fu_396_p1;

/// ap_sig_bdd_103 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_124 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_124 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_142 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_142 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_165 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_165 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_175 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_175 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_215 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_215 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_30 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_30 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_313 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_313 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_70 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    ap_sig_bdd_70 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0));
end

/// ap_sig_bdd_83 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_83 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_94 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_94 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign exitcond1_fu_307_p2 = (j_1_reg_191 == ap_const_lv7_64? 1'b1: 1'b0);
assign exitcond2_fu_286_p2 = (i_1_reg_168 == ap_const_lv7_64? 1'b1: 1'b0);
assign exitcond3_fu_249_p2 = (j_reg_157 == ap_const_lv7_64? 1'b1: 1'b0);
assign exitcond4_fu_237_p2 = (i_reg_134 == ap_const_lv7_64? 1'b1: 1'b0);
assign exitcond_fu_343_p2 = (k_reg_202 == ap_const_lv7_64? 1'b1: 1'b0);
assign grp_fu_401_ce = ap_const_logic_1;
assign grp_fu_401_p0 = B_load_reg_524;
assign grp_fu_401_p1 = A_load_reg_519;
assign i_1_cast_fu_282_p1 = i_1_reg_168;
assign i_2_fu_243_p2 = (i_reg_134 + ap_const_lv7_1);
assign i_3_fu_292_p2 = (i_1_reg_168 + ap_const_lv7_1);
assign j_1_cast_fu_303_p1 = j_1_reg_191;
assign j_2_fu_255_p2 = (j_reg_157 + ap_const_lv7_1);
assign j_3_fu_313_p2 = (j_1_reg_191 + ap_const_lv7_1);
assign k_1_fu_349_p2 = (k_reg_202 + ap_const_lv7_1);
assign k_cast_fu_339_p1 = k_reg_202;
assign next_mul1_fu_276_p2 = (phi_mul1_reg_179 + ap_const_lv14_64);
assign next_mul2_fu_370_p2 = (phi_mul2_reg_213 + ap_const_lv14_64);
assign next_mul_fu_231_p2 = (phi_mul_reg_145 + ap_const_lv14_64);
assign or_cond5_fu_365_p2 = (tmp1_fu_360_p2 & tmp_2_reg_464);
assign p_addr1_fu_380_p2 = (tmp_4_trn_cast_fu_376_p1 + phi_mul1_reg_179);
assign p_addr4_fu_391_p2 = (tmp_9_trn6_cast_reg_482 + phi_mul2_reg_213);
assign p_addr8_fu_328_p2 = (tmp_9_trn6_cast_fu_324_p1 + phi_mul1_reg_179);
assign p_addr_fu_265_p2 = (tmp_5_trn_cast_fu_261_p1 + phi_mul_reg_145);
assign tmp1_fu_360_p2 = (tmp_8_reg_477 & tmp_s_fu_355_p2);
assign tmp_1_fu_271_p1 = p_addr_fu_265_p2;
assign tmp_2_fu_298_p2 = (i_1_cast_fu_282_p1 < mA? 1'b1: 1'b0);
assign tmp_3_fu_334_p1 = p_addr8_fu_328_p2;
assign tmp_4_fu_386_p1 = p_addr1_fu_380_p2;
assign tmp_4_trn_cast_fu_376_p1 = k_reg_202;
assign tmp_5_fu_396_p1 = p_addr4_fu_391_p2;
assign tmp_5_trn_cast_fu_261_p1 = j_reg_157;
assign tmp_7_fu_405_p2 = ($signed(C_q0) + $signed(tmp_6_reg_529));
assign tmp_8_fu_319_p2 = (j_1_cast_fu_303_p1 < nB? 1'b1: 1'b0);
assign tmp_9_trn6_cast_fu_324_p1 = j_1_reg_191;
assign tmp_fu_225_p2 = (nA == mB? 1'b1: 1'b0);
assign tmp_s_fu_355_p2 = (k_cast_fu_339_p1 < mB? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    tmp_9_trn6_cast_reg_482[13:7] <= 7'b0000000;
end



endmodule //MAT_Multiply

