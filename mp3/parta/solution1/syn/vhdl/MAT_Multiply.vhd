-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mA : IN STD_LOGIC_VECTOR (7 downto 0);
    nA : IN STD_LOGIC_VECTOR (7 downto 0);
    mB : IN STD_LOGIC_VECTOR (7 downto 0);
    nB : IN STD_LOGIC_VECTOR (7 downto 0);
    mC : OUT STD_LOGIC_VECTOR (7 downto 0);
    mC_ap_vld : OUT STD_LOGIC;
    nC : OUT STD_LOGIC_VECTOR (7 downto 0);
    nC_ap_vld : OUT STD_LOGIC );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.860000,HLS_SYN_LAT=3015202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=282,HLS_SYN_LUT=340}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_30 : BOOLEAN;
    signal tmp_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_231_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_430 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal i_2_fu_243_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_438 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_255_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal next_mul1_fu_276_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul1_reg_451 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal i_3_fu_292_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_459 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_313_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_reg_472 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_124 : BOOLEAN;
    signal tmp_8_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_trn6_cast_fu_324_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_trn6_cast_reg_482 : STD_LOGIC_VECTOR (13 downto 0);
    signal C_addr_1_reg_487 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_1_fu_349_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_495 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal or_cond5_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul2_fu_370_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul2_reg_504 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_load_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_165 : BOOLEAN;
    signal B_load_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_175 : BOOLEAN;
    signal i_reg_134 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_145 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_157 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond4_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_168 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul1_reg_179 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_reg_191 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_202 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_215 : BOOLEAN;
    signal phi_mul2_reg_213 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_trn_cast_fu_261_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr_fu_265_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_cast_fu_282_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_cast_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr8_fu_328_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_cast_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_trn_cast_fu_376_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr1_fu_380_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr4_fu_391_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_313 : BOOLEAN;
    signal grp_fu_401_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_bdd_70 : BOOLEAN;

    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    MAT_Multiply_mul_32s_32s_32_6_U0 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_401_p0,
        din1 => grp_fu_401_p1,
        ce => grp_fu_401_ce,
        dout => grp_fu_401_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_168 assign process. --
    i_1_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond1_fu_307_p2)))) then 
                i_1_reg_168 <= i_3_reg_459;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_237_p2)))) then 
                i_1_reg_168 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- i_reg_134 assign process. --
    i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_249_p2)))) then 
                i_reg_134 <= i_2_reg_438;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_225_p2 = ap_const_lv1_0)))) then 
                i_reg_134 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_191 assign process. --
    j_1_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_fu_343_p2)))) then 
                j_1_reg_191 <= j_3_reg_472;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_426 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_286_p2))) then 
                j_1_reg_191 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- j_reg_157 assign process. --
    j_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond4_fu_237_p2))) then 
                j_reg_157 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_249_p2))) then 
                j_reg_157 <= j_2_fu_255_p2;
            end if; 
        end if;
    end process;

    -- k_reg_202 assign process. --
    k_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_307_p2))) then 
                k_reg_202 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                k_reg_202 <= k_1_reg_495;
            end if; 
        end if;
    end process;

    -- phi_mul1_reg_179 assign process. --
    phi_mul1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond1_fu_307_p2)))) then 
                phi_mul1_reg_179 <= next_mul1_reg_451;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_237_p2)))) then 
                phi_mul1_reg_179 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- phi_mul2_reg_213 assign process. --
    phi_mul2_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_307_p2))) then 
                phi_mul2_reg_213 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                phi_mul2_reg_213 <= next_mul2_reg_504;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_145 assign process. --
    phi_mul_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_249_p2)))) then 
                phi_mul_reg_145 <= next_mul_reg_430;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_225_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_145 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                A_load_reg_519 <= A_q0;
                B_load_reg_524 <= B_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_307_p2))) then
                C_addr_1_reg_487 <= tmp_3_fu_334_p1(14 - 1 downto 0);
                tmp_8_reg_477 <= tmp_8_fu_319_p2;
                    tmp_9_trn6_cast_reg_482(6 downto 0) <= tmp_9_trn6_cast_fu_324_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_2_reg_438 <= i_2_fu_243_p2;
                next_mul_reg_430 <= next_mul_fu_231_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_426 = ap_const_lv1_0)))) then
                i_3_reg_459 <= i_3_fu_292_p2;
                next_mul1_reg_451 <= next_mul1_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                j_3_reg_472 <= j_3_fu_313_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                k_1_reg_495 <= k_1_fu_349_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_fu_343_p2))) then
                next_mul2_reg_504 <= next_mul2_fu_370_p2;
                or_cond5_reg_500 <= or_cond5_fu_365_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_426 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_286_p2))) then
                tmp_2_reg_464 <= tmp_2_fu_298_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                tmp_6_reg_529 <= grp_fu_401_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_426 <= tmp_fu_225_p2;
            end if;
        end if;
    end process;
    tmp_9_trn6_cast_reg_482(13 downto 7) <= "0000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_225_p2, tmp_reg_426, exitcond2_fu_286_p2, exitcond1_fu_307_p2, or_cond5_fu_365_p2, exitcond_fu_343_p2, exitcond3_fu_249_p2, exitcond4_fu_237_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((tmp_fu_225_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((ap_start = ap_const_logic_0)) and (tmp_fu_225_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_237_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond3_fu_249_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((tmp_reg_426 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond2_fu_286_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond1_fu_307_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (((ap_const_lv1_0 = exitcond_fu_343_p2) and (ap_const_lv1_0 = or_cond5_fu_365_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                elsif (((ap_const_lv1_0 = exitcond_fu_343_p2) and not((ap_const_lv1_0 = or_cond5_fu_365_p2)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_4_fu_386_p1(14 - 1 downto 0);

    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_5_fu_396_p1(14 - 1 downto 0);

    -- B_ce0 assign process. --
    B_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C_address0 assign process. --
    C_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, C_addr_1_reg_487, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, tmp_1_fu_271_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_address0 <= tmp_1_fu_271_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            C_address0 <= C_addr_1_reg_487;
        else 
            C_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C_d0 assign process. --
    C_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st14_fsm_13, tmp_7_fu_405_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            C_d0 <= tmp_7_fu_405_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_d0 <= ap_const_lv32_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C_we0 assign process. --
    C_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, or_cond5_reg_500, exitcond3_fu_249_p2, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_249_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = or_cond5_reg_500))))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_reg_426, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_286_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and ((tmp_reg_426 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond2_fu_286_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_reg_426, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_286_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and ((tmp_reg_426 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond2_fu_286_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_124 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_165 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_175 assign process. --
    ap_sig_bdd_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_175 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_215 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_30 assign process. --
    ap_sig_bdd_30_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_30 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_313 assign process. --
    ap_sig_bdd_313_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_313 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
                ap_sig_bdd_70 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_175)
    begin
        if (ap_sig_bdd_175) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_215)
    begin
        if (ap_sig_bdd_215) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_30)
    begin
        if (ap_sig_bdd_30) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_124)
    begin
        if (ap_sig_bdd_124) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_165)
    begin
        if (ap_sig_bdd_165) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_313)
    begin
        if (ap_sig_bdd_313) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_307_p2 <= "1" when (j_1_reg_191 = ap_const_lv7_64) else "0";
    exitcond2_fu_286_p2 <= "1" when (i_1_reg_168 = ap_const_lv7_64) else "0";
    exitcond3_fu_249_p2 <= "1" when (j_reg_157 = ap_const_lv7_64) else "0";
    exitcond4_fu_237_p2 <= "1" when (i_reg_134 = ap_const_lv7_64) else "0";
    exitcond_fu_343_p2 <= "1" when (k_reg_202 = ap_const_lv7_64) else "0";
    grp_fu_401_ce <= ap_const_logic_1;
    grp_fu_401_p0 <= B_load_reg_524;
    grp_fu_401_p1 <= A_load_reg_519;
    i_1_cast_fu_282_p1 <= std_logic_vector(resize(unsigned(i_1_reg_168),8));
    i_2_fu_243_p2 <= std_logic_vector(unsigned(i_reg_134) + unsigned(ap_const_lv7_1));
    i_3_fu_292_p2 <= std_logic_vector(unsigned(i_1_reg_168) + unsigned(ap_const_lv7_1));
    j_1_cast_fu_303_p1 <= std_logic_vector(resize(unsigned(j_1_reg_191),8));
    j_2_fu_255_p2 <= std_logic_vector(unsigned(j_reg_157) + unsigned(ap_const_lv7_1));
    j_3_fu_313_p2 <= std_logic_vector(unsigned(j_1_reg_191) + unsigned(ap_const_lv7_1));
    k_1_fu_349_p2 <= std_logic_vector(unsigned(k_reg_202) + unsigned(ap_const_lv7_1));
    k_cast_fu_339_p1 <= std_logic_vector(resize(unsigned(k_reg_202),8));

    -- mC assign process. --
    mC_assign_proc : process(mA, tmp_fu_225_p2, ap_sig_bdd_70)
    begin
        if (ap_sig_bdd_70) then
            if (not((tmp_fu_225_p2 = ap_const_lv1_0))) then 
                mC <= mA;
            elsif ((tmp_fu_225_p2 = ap_const_lv1_0)) then 
                mC <= ap_const_lv8_0;
            else 
                mC <= "XXXXXXXX";
            end if;
        else 
            mC <= "XXXXXXXX";
        end if; 
    end process;


    -- mC_ap_vld assign process. --
    mC_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_fu_225_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_225_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_225_p2 = ap_const_lv1_0)))) then 
            mC_ap_vld <= ap_const_logic_1;
        else 
            mC_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- nC assign process. --
    nC_assign_proc : process(nB, tmp_fu_225_p2, ap_sig_bdd_70)
    begin
        if (ap_sig_bdd_70) then
            if (not((tmp_fu_225_p2 = ap_const_lv1_0))) then 
                nC <= nB;
            elsif ((tmp_fu_225_p2 = ap_const_lv1_0)) then 
                nC <= ap_const_lv8_0;
            else 
                nC <= "XXXXXXXX";
            end if;
        else 
            nC <= "XXXXXXXX";
        end if; 
    end process;


    -- nC_ap_vld assign process. --
    nC_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_fu_225_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_225_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (tmp_fu_225_p2 = ap_const_lv1_0)))) then 
            nC_ap_vld <= ap_const_logic_1;
        else 
            nC_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    next_mul1_fu_276_p2 <= std_logic_vector(unsigned(phi_mul1_reg_179) + unsigned(ap_const_lv14_64));
    next_mul2_fu_370_p2 <= std_logic_vector(unsigned(phi_mul2_reg_213) + unsigned(ap_const_lv14_64));
    next_mul_fu_231_p2 <= std_logic_vector(unsigned(phi_mul_reg_145) + unsigned(ap_const_lv14_64));
    or_cond5_fu_365_p2 <= (tmp1_fu_360_p2 and tmp_2_reg_464);
    p_addr1_fu_380_p2 <= std_logic_vector(unsigned(tmp_4_trn_cast_fu_376_p1) + unsigned(phi_mul1_reg_179));
    p_addr4_fu_391_p2 <= std_logic_vector(unsigned(tmp_9_trn6_cast_reg_482) + unsigned(phi_mul2_reg_213));
    p_addr8_fu_328_p2 <= std_logic_vector(unsigned(tmp_9_trn6_cast_fu_324_p1) + unsigned(phi_mul1_reg_179));
    p_addr_fu_265_p2 <= std_logic_vector(unsigned(tmp_5_trn_cast_fu_261_p1) + unsigned(phi_mul_reg_145));
    tmp1_fu_360_p2 <= (tmp_8_reg_477 and tmp_s_fu_355_p2);
    tmp_1_fu_271_p1 <= std_logic_vector(resize(unsigned(p_addr_fu_265_p2),64));
    tmp_2_fu_298_p2 <= "1" when (unsigned(i_1_cast_fu_282_p1) < unsigned(mA)) else "0";
    tmp_3_fu_334_p1 <= std_logic_vector(resize(unsigned(p_addr8_fu_328_p2),64));
    tmp_4_fu_386_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_380_p2),64));
    tmp_4_trn_cast_fu_376_p1 <= std_logic_vector(resize(unsigned(k_reg_202),14));
    tmp_5_fu_396_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_391_p2),64));
    tmp_5_trn_cast_fu_261_p1 <= std_logic_vector(resize(unsigned(j_reg_157),14));
    tmp_7_fu_405_p2 <= std_logic_vector(unsigned(C_q0) + unsigned(tmp_6_reg_529));
    tmp_8_fu_319_p2 <= "1" when (unsigned(j_1_cast_fu_303_p1) < unsigned(nB)) else "0";
    tmp_9_trn6_cast_fu_324_p1 <= std_logic_vector(resize(unsigned(j_1_reg_191),14));
    tmp_fu_225_p2 <= "1" when (nA = mB) else "0";
    tmp_s_fu_355_p2 <= "1" when (unsigned(k_cast_fu_339_p1) < unsigned(mB)) else "0";
end behav;
