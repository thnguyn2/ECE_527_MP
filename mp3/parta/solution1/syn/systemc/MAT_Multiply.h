// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _MAT_Multiply_HH_
#define _MAT_Multiply_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "MAT_Multiply_mul_32s_32s_32_6.h"

namespace ap_rtl {

struct MAT_Multiply : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<14> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<32> > B_q0;
    sc_out< sc_lv<14> > C_address0;
    sc_out< sc_logic > C_ce0;
    sc_out< sc_logic > C_we0;
    sc_out< sc_lv<32> > C_d0;
    sc_in< sc_lv<32> > C_q0;
    sc_in< sc_lv<8> > mA;
    sc_in< sc_lv<8> > nA;
    sc_in< sc_lv<8> > mB;
    sc_in< sc_lv<8> > nB;
    sc_out< sc_lv<8> > mC;
    sc_out< sc_logic > mC_ap_vld;
    sc_out< sc_lv<8> > nC;
    sc_out< sc_logic > nC_ap_vld;


    // Module declarations
    MAT_Multiply(sc_module_name name);
    SC_HAS_PROCESS(MAT_Multiply);

    ~MAT_Multiply();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    MAT_Multiply_mul_32s_32s_32_6<1,6,32,32,32>* MAT_Multiply_mul_32s_32s_32_6_U0;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_30;
    sc_signal< sc_lv<1> > tmp_fu_225_p2;
    sc_signal< sc_lv<1> > tmp_reg_426;
    sc_signal< sc_lv<14> > next_mul_fu_231_p2;
    sc_signal< sc_lv<14> > next_mul_reg_430;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_83;
    sc_signal< sc_lv<7> > i_2_fu_243_p2;
    sc_signal< sc_lv<7> > i_2_reg_438;
    sc_signal< sc_lv<7> > j_2_fu_255_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_94;
    sc_signal< sc_lv<14> > next_mul1_fu_276_p2;
    sc_signal< sc_lv<14> > next_mul1_reg_451;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_103;
    sc_signal< sc_lv<7> > i_3_fu_292_p2;
    sc_signal< sc_lv<7> > i_3_reg_459;
    sc_signal< sc_lv<1> > tmp_2_fu_298_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_464;
    sc_signal< sc_lv<1> > exitcond2_fu_286_p2;
    sc_signal< sc_lv<7> > j_3_fu_313_p2;
    sc_signal< sc_lv<7> > j_3_reg_472;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_124;
    sc_signal< sc_lv<1> > tmp_8_fu_319_p2;
    sc_signal< sc_lv<1> > tmp_8_reg_477;
    sc_signal< sc_lv<1> > exitcond1_fu_307_p2;
    sc_signal< sc_lv<14> > tmp_9_trn6_cast_fu_324_p1;
    sc_signal< sc_lv<14> > tmp_9_trn6_cast_reg_482;
    sc_signal< sc_lv<14> > C_addr_1_reg_487;
    sc_signal< sc_lv<7> > k_1_fu_349_p2;
    sc_signal< sc_lv<7> > k_1_reg_495;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_142;
    sc_signal< sc_lv<1> > or_cond5_fu_365_p2;
    sc_signal< sc_lv<1> > or_cond5_reg_500;
    sc_signal< sc_lv<1> > exitcond_fu_343_p2;
    sc_signal< sc_lv<14> > next_mul2_fu_370_p2;
    sc_signal< sc_lv<14> > next_mul2_reg_504;
    sc_signal< sc_lv<32> > A_load_reg_519;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_bdd_165;
    sc_signal< sc_lv<32> > B_load_reg_524;
    sc_signal< sc_lv<32> > grp_fu_401_p2;
    sc_signal< sc_lv<32> > tmp_6_reg_529;
    sc_signal< sc_logic > ap_sig_cseq_ST_st13_fsm_12;
    sc_signal< bool > ap_sig_bdd_175;
    sc_signal< sc_lv<7> > i_reg_134;
    sc_signal< sc_lv<1> > exitcond3_fu_249_p2;
    sc_signal< sc_lv<14> > phi_mul_reg_145;
    sc_signal< sc_lv<7> > j_reg_157;
    sc_signal< sc_lv<1> > exitcond4_fu_237_p2;
    sc_signal< sc_lv<7> > i_1_reg_168;
    sc_signal< sc_lv<14> > phi_mul1_reg_179;
    sc_signal< sc_lv<7> > j_1_reg_191;
    sc_signal< sc_lv<7> > k_reg_202;
    sc_signal< sc_logic > ap_sig_cseq_ST_st14_fsm_13;
    sc_signal< bool > ap_sig_bdd_215;
    sc_signal< sc_lv<14> > phi_mul2_reg_213;
    sc_signal< sc_lv<64> > tmp_1_fu_271_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_334_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_386_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_396_p1;
    sc_signal< sc_lv<32> > tmp_7_fu_405_p2;
    sc_signal< sc_lv<14> > tmp_5_trn_cast_fu_261_p1;
    sc_signal< sc_lv<14> > p_addr_fu_265_p2;
    sc_signal< sc_lv<8> > i_1_cast_fu_282_p1;
    sc_signal< sc_lv<8> > j_1_cast_fu_303_p1;
    sc_signal< sc_lv<14> > p_addr8_fu_328_p2;
    sc_signal< sc_lv<8> > k_cast_fu_339_p1;
    sc_signal< sc_lv<1> > tmp_s_fu_355_p2;
    sc_signal< sc_lv<1> > tmp1_fu_360_p2;
    sc_signal< sc_lv<14> > tmp_4_trn_cast_fu_376_p1;
    sc_signal< sc_lv<14> > p_addr1_fu_380_p2;
    sc_signal< sc_lv<14> > p_addr4_fu_391_p2;
    sc_signal< sc_lv<32> > grp_fu_401_p0;
    sc_signal< sc_lv<32> > grp_fu_401_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_bdd_313;
    sc_signal< sc_logic > grp_fu_401_ce;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_70;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_st1_fsm_0;
    static const sc_lv<14> ap_ST_st2_fsm_1;
    static const sc_lv<14> ap_ST_st3_fsm_2;
    static const sc_lv<14> ap_ST_st4_fsm_3;
    static const sc_lv<14> ap_ST_st5_fsm_4;
    static const sc_lv<14> ap_ST_st6_fsm_5;
    static const sc_lv<14> ap_ST_st7_fsm_6;
    static const sc_lv<14> ap_ST_st8_fsm_7;
    static const sc_lv<14> ap_ST_st9_fsm_8;
    static const sc_lv<14> ap_ST_st10_fsm_9;
    static const sc_lv<14> ap_ST_st11_fsm_10;
    static const sc_lv<14> ap_ST_st12_fsm_11;
    static const sc_lv<14> ap_ST_st13_fsm_12;
    static const sc_lv<14> ap_ST_st14_fsm_13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<14> ap_const_lv14_64;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_7;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_C_address0();
    void thread_C_ce0();
    void thread_C_d0();
    void thread_C_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_103();
    void thread_ap_sig_bdd_124();
    void thread_ap_sig_bdd_142();
    void thread_ap_sig_bdd_165();
    void thread_ap_sig_bdd_175();
    void thread_ap_sig_bdd_215();
    void thread_ap_sig_bdd_30();
    void thread_ap_sig_bdd_313();
    void thread_ap_sig_bdd_70();
    void thread_ap_sig_bdd_83();
    void thread_ap_sig_bdd_94();
    void thread_ap_sig_cseq_ST_st13_fsm_12();
    void thread_ap_sig_cseq_ST_st14_fsm_13();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_exitcond1_fu_307_p2();
    void thread_exitcond2_fu_286_p2();
    void thread_exitcond3_fu_249_p2();
    void thread_exitcond4_fu_237_p2();
    void thread_exitcond_fu_343_p2();
    void thread_grp_fu_401_ce();
    void thread_grp_fu_401_p0();
    void thread_grp_fu_401_p1();
    void thread_i_1_cast_fu_282_p1();
    void thread_i_2_fu_243_p2();
    void thread_i_3_fu_292_p2();
    void thread_j_1_cast_fu_303_p1();
    void thread_j_2_fu_255_p2();
    void thread_j_3_fu_313_p2();
    void thread_k_1_fu_349_p2();
    void thread_k_cast_fu_339_p1();
    void thread_mC();
    void thread_mC_ap_vld();
    void thread_nC();
    void thread_nC_ap_vld();
    void thread_next_mul1_fu_276_p2();
    void thread_next_mul2_fu_370_p2();
    void thread_next_mul_fu_231_p2();
    void thread_or_cond5_fu_365_p2();
    void thread_p_addr1_fu_380_p2();
    void thread_p_addr4_fu_391_p2();
    void thread_p_addr8_fu_328_p2();
    void thread_p_addr_fu_265_p2();
    void thread_tmp1_fu_360_p2();
    void thread_tmp_1_fu_271_p1();
    void thread_tmp_2_fu_298_p2();
    void thread_tmp_3_fu_334_p1();
    void thread_tmp_4_fu_386_p1();
    void thread_tmp_4_trn_cast_fu_376_p1();
    void thread_tmp_5_fu_396_p1();
    void thread_tmp_5_trn_cast_fu_261_p1();
    void thread_tmp_7_fu_405_p2();
    void thread_tmp_8_fu_319_p2();
    void thread_tmp_9_trn6_cast_fu_324_p1();
    void thread_tmp_fu_225_p2();
    void thread_tmp_s_fu_355_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
