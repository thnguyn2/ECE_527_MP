-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    mA : IN STD_LOGIC_VECTOR (31 downto 0);
    nA : IN STD_LOGIC_VECTOR (31 downto 0);
    mB : IN STD_LOGIC_VECTOR (31 downto 0);
    nB : IN STD_LOGIC_VECTOR (31 downto 0);
    mC : IN STD_LOGIC_VECTOR (31 downto 0);
    nC : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.085000,HLS_SYN_LAT=1525302,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=4,HLS_SYN_FF=465,HLS_SYN_LUT=711}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_33 : BOOLEAN;
    signal tmp_4_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_387_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_735 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_76 : BOOLEAN;
    signal next_mul1_fu_393_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul1_reg_740 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul2_fu_399_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul2_reg_745 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_3_fu_415_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_753 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_764 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_445_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_99 : BOOLEAN;
    signal exitcond5_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_116 : BOOLEAN;
    signal next_mul3_fu_509_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul3_reg_786 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal i_4_fu_525_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_794 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_cast7_cast_fu_540_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_cast7_cast_reg_804 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal j_5_fu_550_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_5_reg_812 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayC_addr_reg_821 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_1_fu_591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_829 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_164 : BOOLEAN;
    signal tmp_22_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul5_fu_602_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul5_reg_838 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayA_load_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_192 : BOOLEAN;
    signal arrayB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_load_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_203 : BOOLEAN;
    signal arrayC_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayC_load_1_reg_868 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul4_fu_642_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul4_reg_873 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_214 : BOOLEAN;
    signal i_5_fu_658_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_reg_881 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_683_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_894 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_234 : BOOLEAN;
    signal tmp_17_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayA_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayA_ce0 : STD_LOGIC;
    signal arrayA_we0 : STD_LOGIC;
    signal arrayA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayB_ce0 : STD_LOGIC;
    signal arrayB_we0 : STD_LOGIC;
    signal arrayB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayC_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayC_ce0 : STD_LOGIC;
    signal arrayC_we0 : STD_LOGIC;
    signal arrayC_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_208 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_219 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul1_reg_231 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul2_reg_243 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_255 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_266 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul3_reg_277 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_reg_289 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_300 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_311 : BOOLEAN;
    signal phi_mul5_reg_311 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_2_reg_322 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul4_reg_333 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_2_reg_345 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_330 : BOOLEAN;
    signal ap_sig_bdd_336 : BOOLEAN;
    signal tmp_12_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond8_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_379 : BOOLEAN;
    signal tmp_27_fu_636_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast1_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast9_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast9_cast_fu_435_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr3_fu_461_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr9_fu_482_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr4_fu_498_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_cast8_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_cast7_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_fu_566_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_cast6_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast6_cast_fu_581_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr1_fu_608_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr6_fu_619_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_629_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_509 : BOOLEAN;
    signal tmp_26_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast4_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_cast2_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_cast2_cast_fu_673_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr2_fu_699_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_629_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_arrayA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_arrayC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    arrayA_U : component MAT_Multiply_arrayA
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayA_address0,
        ce0 => arrayA_ce0,
        we0 => arrayA_we0,
        d0 => arrayA_d0,
        q0 => arrayA_q0);

    arrayB_U : component MAT_Multiply_arrayA
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayB_address0,
        ce0 => arrayB_ce0,
        we0 => arrayB_we0,
        d0 => arrayB_d0,
        q0 => arrayB_q0);

    arrayC_U : component MAT_Multiply_arrayC
    generic map (
        DataWidth => 64,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayC_address0,
        ce0 => arrayC_ce0,
        we0 => arrayC_we0,
        d0 => arrayC_d0,
        q0 => arrayC_q0);

    MAT_Multiply_mul_32s_32s_32_6_U1 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_629_p0,
        din1 => grp_fu_629_p1,
        ce => grp_fu_629_ce,
        dout => grp_fu_629_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_266 assign process. --
    i_1_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond6_fu_409_p2 = ap_const_lv1_0)))) then 
                i_1_reg_266 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_544_p2)))) then 
                i_1_reg_266 <= i_4_reg_794;
            end if; 
        end if;
    end process;

    -- i_2_reg_322 assign process. --
    i_2_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond4_fu_519_p2)))) then 
                i_2_reg_322 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = exitcond_fu_677_p2)))) then 
                i_2_reg_322 <= i_5_reg_881;
            end if; 
        end if;
    end process;

    -- i_reg_208 assign process. --
    i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_381_p2 = ap_const_lv1_0)))) then 
                i_reg_208 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond5_fu_439_p2)))) then 
                i_reg_208 <= i_3_reg_753;
            end if; 
        end if;
    end process;

    -- j_1_reg_289 assign process. --
    j_1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and ((ap_const_lv1_0 = tmp_15_reg_817) or not((ap_const_lv1_0 = exitcond2_fu_585_p2))))) then 
                j_1_reg_289 <= j_5_reg_812;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond4_fu_519_p2))) then 
                j_1_reg_289 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- j_2_reg_345 assign process. --
    j_2_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not(ap_sig_bdd_336))) then 
                j_2_reg_345 <= j_4_reg_894;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((tmp_4_reg_731 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_652_p2))) then 
                j_2_reg_345 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- j_reg_255 assign process. --
    j_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_439_p2) and not(ap_sig_bdd_116))) then 
                j_reg_255 <= j_3_fu_445_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond6_fu_409_p2 = ap_const_lv1_0))) then 
                j_reg_255 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_reg_300 assign process. --
    k_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                k_reg_300 <= k_1_reg_829;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_544_p2) and not((ap_const_lv1_0 = tmp_15_fu_561_p2)))) then 
                k_reg_300 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- phi_mul1_reg_231 assign process. --
    phi_mul1_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_381_p2 = ap_const_lv1_0)))) then 
                phi_mul1_reg_231 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond5_fu_439_p2)))) then 
                phi_mul1_reg_231 <= next_mul1_reg_740;
            end if; 
        end if;
    end process;

    -- phi_mul2_reg_243 assign process. --
    phi_mul2_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_381_p2 = ap_const_lv1_0)))) then 
                phi_mul2_reg_243 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond5_fu_439_p2)))) then 
                phi_mul2_reg_243 <= next_mul_reg_735;
            end if; 
        end if;
    end process;

    -- phi_mul3_reg_277 assign process. --
    phi_mul3_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond6_fu_409_p2 = ap_const_lv1_0)))) then 
                phi_mul3_reg_277 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_544_p2)))) then 
                phi_mul3_reg_277 <= next_mul3_reg_786;
            end if; 
        end if;
    end process;

    -- phi_mul4_reg_333 assign process. --
    phi_mul4_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond4_fu_519_p2)))) then 
                phi_mul4_reg_333 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = exitcond_fu_677_p2)))) then 
                phi_mul4_reg_333 <= next_mul4_reg_873;
            end if; 
        end if;
    end process;

    -- phi_mul5_reg_311 assign process. --
    phi_mul5_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                phi_mul5_reg_311 <= next_mul5_reg_838;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_544_p2) and not((ap_const_lv1_0 = tmp_15_fu_561_p2)))) then 
                phi_mul5_reg_311 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_219 assign process. --
    phi_mul_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_381_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_219 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond5_fu_439_p2)))) then 
                phi_mul_reg_219 <= next_mul2_reg_745;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                arrayA_load_reg_853 <= arrayA_q0;
                arrayB_load_reg_858 <= arrayB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_544_p2) and not((ap_const_lv1_0 = tmp_15_fu_561_p2)))) then
                arrayC_addr_reg_821 <= tmp_18_fu_572_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                arrayC_load_1_reg_868 <= arrayC_q0;
                tmp_25_reg_863 <= grp_fu_629_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_3_reg_753 <= i_3_fu_415_p2;
                next_mul1_reg_740 <= next_mul1_fu_393_p2;
                next_mul2_reg_745 <= next_mul2_fu_399_p2;
                next_mul_reg_735 <= next_mul_fu_387_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_4_reg_794 <= i_4_fu_525_p2;
                next_mul3_reg_786 <= next_mul3_fu_509_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((tmp_4_reg_731 = ap_const_lv1_0)))) then
                i_5_reg_881 <= i_5_fu_658_p2;
                next_mul4_reg_873 <= next_mul4_fu_642_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                    j_1_cast7_cast_reg_804(6 downto 0) <= j_1_cast7_cast_fu_540_p1(6 downto 0);
                j_5_reg_812 <= j_5_fu_550_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                j_4_reg_894 <= j_4_fu_683_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_15_reg_817)))) then
                k_1_reg_829 <= k_1_fu_591_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_15_reg_817)) and (ap_const_lv1_0 = exitcond2_fu_585_p2))) then
                next_mul5_reg_838 <= next_mul5_fu_602_p2;
                tmp_22_reg_834 <= tmp_22_fu_597_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((tmp_4_reg_731 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_652_p2))) then
                tmp_10_reg_886 <= tmp_10_fu_664_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_544_p2))) then
                tmp_15_reg_817 <= tmp_15_fu_561_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = exitcond_fu_677_p2))) then
                tmp_17_reg_899 <= tmp_17_fu_694_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_4_reg_731 <= tmp_4_fu_381_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond6_fu_409_p2 = ap_const_lv1_0))) then
                tmp_5_reg_758 <= tmp_5_fu_421_p2;
                tmp_8_reg_764 <= tmp_8_fu_426_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond4_fu_519_p2))) then
                tmp_9_reg_799 <= tmp_9_fu_531_p2;
            end if;
        end if;
    end process;
    j_1_cast7_cast_reg_804(13 downto 7) <= "0000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_4_fu_381_p2, tmp_4_reg_731, exitcond6_fu_409_p2, exitcond5_fu_439_p2, ap_sig_bdd_116, exitcond4_fu_519_p2, tmp_15_reg_817, exitcond3_fu_544_p2, tmp_22_fu_597_p2, exitcond2_fu_585_p2, exitcond1_fu_652_p2, exitcond_fu_677_p2, ap_sig_bdd_336)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (tmp_4_fu_381_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                elsif ((not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_381_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond6_fu_409_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond5_fu_439_p2)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((ap_const_lv1_0 = exitcond5_fu_439_p2) and not(ap_sig_bdd_116))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond4_fu_519_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_544_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (((ap_const_lv1_0 = tmp_15_reg_817) or not((ap_const_lv1_0 = exitcond2_fu_585_p2)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif ((not((ap_const_lv1_0 = tmp_15_reg_817)) and (ap_const_lv1_0 = exitcond2_fu_585_p2) and (ap_const_lv1_0 = tmp_22_fu_597_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st15_fsm_14 => 
                if (((tmp_4_reg_731 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_652_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_lv1_0 = exitcond_fu_677_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st17_fsm_16 => 
                if (not(ap_sig_bdd_336)) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- A_read assign process. --
    A_read_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond5_fu_439_p2, or_cond_fu_456_p2, ap_sig_bdd_116)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_439_p2) and not((ap_const_lv1_0 = or_cond_fu_456_p2)) and not(ap_sig_bdd_116))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_read assign process. --
    B_read_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond5_fu_439_p2, or_cond7_fu_477_p2, ap_sig_bdd_116)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_439_p2) and not((ap_const_lv1_0 = or_cond7_fu_477_p2)) and not(ap_sig_bdd_116))) then 
            B_read <= ap_const_logic_1;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= arrayC_q0;

    -- C_write assign process. --
    C_write_assign_proc : process(tmp_17_reg_899, ap_sig_cseq_ST_st17_fsm_16, ap_sig_bdd_336)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((ap_const_lv1_0 = tmp_17_reg_899)) and not(ap_sig_bdd_336))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_4_reg_731, ap_sig_cseq_ST_st15_fsm_14, exitcond1_fu_652_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and ((tmp_4_reg_731 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_652_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_4_reg_731, ap_sig_cseq_ST_st15_fsm_14, exitcond1_fu_652_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and ((tmp_4_reg_731 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_652_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(A_empty_n, B_empty_n, exitcond5_fu_439_p2, or_cond_fu_456_p2, or_cond7_fu_477_p2)
    begin
                ap_sig_bdd_116 <= (((A_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond5_fu_439_p2) and not((ap_const_lv1_0 = or_cond_fu_456_p2))) or ((ap_const_lv1_0 = exitcond5_fu_439_p2) and (B_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = or_cond7_fu_477_p2))));
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_126 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_164 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_192 assign process. --
    ap_sig_bdd_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_192 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_203 assign process. --
    ap_sig_bdd_203_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_203 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_214 assign process. --
    ap_sig_bdd_214_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_214 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_234 assign process. --
    ap_sig_bdd_234_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_234 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_311 assign process. --
    ap_sig_bdd_311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_311 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_33 assign process. --
    ap_sig_bdd_33_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_33 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_330 assign process. --
    ap_sig_bdd_330_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_330 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_336 assign process. --
    ap_sig_bdd_336_assign_proc : process(C_full_n, tmp_17_reg_899)
    begin
                ap_sig_bdd_336 <= ((C_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_17_reg_899)));
    end process;


    -- ap_sig_bdd_379 assign process. --
    ap_sig_bdd_379_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_379 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_509 assign process. --
    ap_sig_bdd_509_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_509 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_76 assign process. --
    ap_sig_bdd_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_76 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_99 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_379)
    begin
        if (ap_sig_bdd_379) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_203)
    begin
        if (ap_sig_bdd_203) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_311)
    begin
        if (ap_sig_bdd_311) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_214)
    begin
        if (ap_sig_bdd_214) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_234)
    begin
        if (ap_sig_bdd_234) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_330)
    begin
        if (ap_sig_bdd_330) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_33)
    begin
        if (ap_sig_bdd_33) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_76)
    begin
        if (ap_sig_bdd_76) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_99)
    begin
        if (ap_sig_bdd_99) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_126)
    begin
        if (ap_sig_bdd_126) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_164)
    begin
        if (ap_sig_bdd_164) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_192)
    begin
        if (ap_sig_bdd_192) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_509)
    begin
        if (ap_sig_bdd_509) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayA_address0 assign process. --
    arrayA_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st6_fsm_5, tmp_12_fu_467_p1, tmp_23_fu_614_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            arrayA_address0 <= tmp_12_fu_467_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            arrayA_address0 <= tmp_23_fu_614_p1(14 - 1 downto 0);
        else 
            arrayA_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayA_ce0 assign process. --
    arrayA_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_116, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            arrayA_ce0 <= ap_const_logic_1;
        else 
            arrayA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayA_d0 <= A_dout;

    -- arrayA_we0 assign process. --
    arrayA_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond5_fu_439_p2, or_cond_fu_456_p2, ap_sig_bdd_116)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_439_p2) and not((ap_const_lv1_0 = or_cond_fu_456_p2)) and not(ap_sig_bdd_116)))) then 
            arrayA_we0 <= ap_const_logic_1;
        else 
            arrayA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayB_address0 assign process. --
    arrayB_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st6_fsm_5, tmp_19_fu_488_p1, tmp_24_fu_624_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            arrayB_address0 <= tmp_19_fu_488_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            arrayB_address0 <= tmp_24_fu_624_p1(14 - 1 downto 0);
        else 
            arrayB_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayB_ce0 assign process. --
    arrayB_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_116, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            arrayB_ce0 <= ap_const_logic_1;
        else 
            arrayB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayB_d0 <= B_dout;

    -- arrayB_we0 assign process. --
    arrayB_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond5_fu_439_p2, or_cond7_fu_477_p2, ap_sig_bdd_116)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_439_p2) and not((ap_const_lv1_0 = or_cond7_fu_477_p2)) and not(ap_sig_bdd_116)))) then 
            arrayB_we0 <= ap_const_logic_1;
        else 
            arrayB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_address0 assign process. --
    arrayC_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, arrayC_addr_reg_821, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st14_fsm_13, tmp_21_fu_504_p1, tmp_18_fu_572_p1, tmp_20_fu_705_p1, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            arrayC_address0 <= tmp_18_fu_572_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            arrayC_address0 <= tmp_21_fu_504_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            arrayC_address0 <= tmp_20_fu_705_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            arrayC_address0 <= arrayC_addr_reg_821;
        else 
            arrayC_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_ce0 assign process. --
    arrayC_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_116, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            arrayC_ce0 <= ap_const_logic_1;
        else 
            arrayC_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_d0 assign process. --
    arrayC_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st14_fsm_13, tmp_27_fu_636_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            arrayC_d0 <= tmp_27_fu_636_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            arrayC_d0 <= ap_const_lv64_0;
        else 
            arrayC_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_we0 assign process. --
    arrayC_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond5_fu_439_p2, ap_sig_bdd_116, ap_sig_cseq_ST_st5_fsm_4, tmp_15_fu_561_p2, exitcond3_fu_544_p2, tmp_22_reg_834, ap_sig_cseq_ST_st14_fsm_13, or_cond8_fu_493_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_544_p2) and not((ap_const_lv1_0 = tmp_15_fu_561_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_439_p2) and not(ap_sig_bdd_116) and not((ap_const_lv1_0 = or_cond8_fu_493_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = tmp_22_reg_834))))) then 
            arrayC_we0 <= ap_const_logic_1;
        else 
            arrayC_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_652_p2 <= "1" when (i_2_reg_322 = ap_const_lv7_64) else "0";
    exitcond2_fu_585_p2 <= "1" when (k_reg_300 = ap_const_lv7_64) else "0";
    exitcond3_fu_544_p2 <= "1" when (j_1_reg_289 = ap_const_lv7_64) else "0";
    exitcond4_fu_519_p2 <= "1" when (i_1_reg_266 = ap_const_lv7_64) else "0";
    exitcond5_fu_439_p2 <= "1" when (j_reg_255 = ap_const_lv7_64) else "0";
    exitcond6_fu_409_p2 <= "1" when (i_reg_208 = ap_const_lv7_64) else "0";
    exitcond_fu_677_p2 <= "1" when (j_2_reg_345 = ap_const_lv7_64) else "0";
    grp_fu_629_ce <= ap_const_logic_1;
    grp_fu_629_p0 <= arrayB_load_reg_858;
    grp_fu_629_p1 <= arrayA_load_reg_853;
    i_1_cast8_fu_515_p1 <= std_logic_vector(resize(unsigned(i_1_reg_266),32));
    i_2_cast4_fu_648_p1 <= std_logic_vector(resize(unsigned(i_2_reg_322),32));
    i_3_fu_415_p2 <= std_logic_vector(unsigned(i_reg_208) + unsigned(ap_const_lv7_1));
    i_4_fu_525_p2 <= std_logic_vector(unsigned(i_1_reg_266) + unsigned(ap_const_lv7_1));
    i_5_fu_658_p2 <= std_logic_vector(unsigned(i_2_reg_322) + unsigned(ap_const_lv7_1));
    i_cast1_fu_405_p1 <= std_logic_vector(resize(unsigned(i_reg_208),32));
    j_1_cast7_cast_fu_540_p1 <= std_logic_vector(resize(unsigned(j_1_reg_289),14));
    j_1_cast7_fu_536_p1 <= std_logic_vector(resize(unsigned(j_1_reg_289),32));
    j_2_cast2_cast_fu_673_p1 <= std_logic_vector(resize(unsigned(j_2_reg_345),14));
    j_2_cast2_fu_669_p1 <= std_logic_vector(resize(unsigned(j_2_reg_345),32));
    j_3_fu_445_p2 <= std_logic_vector(unsigned(j_reg_255) + unsigned(ap_const_lv7_1));
    j_4_fu_683_p2 <= std_logic_vector(unsigned(j_2_reg_345) + unsigned(ap_const_lv7_1));
    j_5_fu_550_p2 <= std_logic_vector(unsigned(j_1_reg_289) + unsigned(ap_const_lv7_1));
    j_cast9_cast_fu_435_p1 <= std_logic_vector(resize(unsigned(j_reg_255),14));
    j_cast9_fu_431_p1 <= std_logic_vector(resize(unsigned(j_reg_255),32));
    k_1_fu_591_p2 <= std_logic_vector(unsigned(k_reg_300) + unsigned(ap_const_lv7_1));
    k_cast6_cast_fu_581_p1 <= std_logic_vector(resize(unsigned(k_reg_300),14));
    k_cast6_fu_577_p1 <= std_logic_vector(resize(unsigned(k_reg_300),32));
    next_mul1_fu_393_p2 <= std_logic_vector(unsigned(phi_mul1_reg_231) + unsigned(ap_const_lv14_64));
    next_mul2_fu_399_p2 <= std_logic_vector(unsigned(phi_mul_reg_219) + unsigned(ap_const_lv14_64));
    next_mul3_fu_509_p2 <= std_logic_vector(unsigned(phi_mul3_reg_277) + unsigned(ap_const_lv14_64));
    next_mul4_fu_642_p2 <= std_logic_vector(unsigned(phi_mul4_reg_333) + unsigned(ap_const_lv14_64));
    next_mul5_fu_602_p2 <= std_logic_vector(unsigned(phi_mul5_reg_311) + unsigned(ap_const_lv14_64));
    next_mul_fu_387_p2 <= std_logic_vector(unsigned(phi_mul2_reg_243) + unsigned(ap_const_lv14_64));
    or_cond7_fu_477_p2 <= (tmp_8_reg_764 and tmp_13_fu_472_p2);
    or_cond8_fu_493_p2 <= (tmp_5_reg_758 and tmp_13_fu_472_p2);
    or_cond_fu_456_p2 <= (tmp_5_reg_758 and tmp_7_fu_451_p2);
    p_addr1_fu_608_p2 <= std_logic_vector(unsigned(k_cast6_cast_fu_581_p1) + unsigned(phi_mul3_reg_277));
    p_addr2_fu_699_p2 <= std_logic_vector(unsigned(j_2_cast2_cast_fu_673_p1) + unsigned(phi_mul4_reg_333));
    p_addr3_fu_461_p2 <= std_logic_vector(unsigned(j_cast9_cast_fu_435_p1) + unsigned(phi_mul_reg_219));
    p_addr4_fu_498_p2 <= std_logic_vector(unsigned(j_cast9_cast_fu_435_p1) + unsigned(phi_mul2_reg_243));
    p_addr6_fu_619_p2 <= std_logic_vector(unsigned(j_1_cast7_cast_reg_804) + unsigned(phi_mul5_reg_311));
    p_addr9_fu_482_p2 <= std_logic_vector(unsigned(j_cast9_cast_fu_435_p1) + unsigned(phi_mul1_reg_231));
    p_addr_fu_566_p2 <= std_logic_vector(unsigned(j_1_cast7_cast_fu_540_p1) + unsigned(phi_mul3_reg_277));
    tmp1_fu_375_p2 <= (tmp_1_fu_363_p2 and tmp_3_fu_369_p2);
    tmp_10_fu_664_p2 <= "1" when (unsigned(i_2_cast4_fu_648_p1) < unsigned(mC)) else "0";
    tmp_12_fu_467_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_461_p2),64));
    tmp_13_fu_472_p2 <= "1" when (unsigned(j_cast9_fu_431_p1) < unsigned(nC)) else "0";
    tmp_14_fu_556_p2 <= "1" when (unsigned(j_1_cast7_fu_536_p1) < unsigned(nC)) else "0";
    tmp_15_fu_561_p2 <= (tmp_9_reg_799 and tmp_14_fu_556_p2);
    tmp_16_fu_689_p2 <= "1" when (unsigned(j_2_cast2_fu_669_p1) < unsigned(nC)) else "0";
    tmp_17_fu_694_p2 <= (tmp_10_reg_886 and tmp_16_fu_689_p2);
    tmp_18_fu_572_p1 <= std_logic_vector(resize(unsigned(p_addr_fu_566_p2),64));
    tmp_19_fu_488_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_482_p2),64));
    tmp_1_fu_363_p2 <= "1" when (mA = mC) else "0";
    tmp_20_fu_705_p1 <= std_logic_vector(resize(unsigned(p_addr2_fu_699_p2),64));
    tmp_21_fu_504_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_498_p2),64));
    tmp_22_fu_597_p2 <= "1" when (unsigned(k_cast6_fu_577_p1) < unsigned(mB)) else "0";
    tmp_23_fu_614_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_608_p2),64));
    tmp_24_fu_624_p1 <= std_logic_vector(resize(unsigned(p_addr6_fu_619_p2),64));
        tmp_26_fu_633_p1 <= std_logic_vector(resize(signed(tmp_25_reg_863),64));

    tmp_27_fu_636_p2 <= std_logic_vector(unsigned(arrayC_load_1_reg_868) + unsigned(tmp_26_fu_633_p1));
    tmp_3_fu_369_p2 <= "1" when (nB = nC) else "0";
    tmp_4_fu_381_p2 <= (tmp1_fu_375_p2 and tmp_fu_357_p2);
    tmp_5_fu_421_p2 <= "1" when (unsigned(i_cast1_fu_405_p1) < unsigned(mC)) else "0";
    tmp_7_fu_451_p2 <= "1" when (unsigned(j_cast9_fu_431_p1) < unsigned(mB)) else "0";
    tmp_8_fu_426_p2 <= "1" when (unsigned(i_cast1_fu_405_p1) < unsigned(mB)) else "0";
    tmp_9_fu_531_p2 <= "1" when (unsigned(i_1_cast8_fu_515_p1) < unsigned(mC)) else "0";
    tmp_fu_357_p2 <= "1" when (nA = mB) else "0";
end behav;
