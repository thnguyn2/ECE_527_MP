// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "MAT_Multiply_load_mat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic MAT_Multiply_load_mat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic MAT_Multiply_load_mat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> MAT_Multiply_load_mat::ap_ST_st1_fsm_0 = "1";
const sc_lv<4> MAT_Multiply_load_mat::ap_ST_st2_fsm_1 = "10";
const sc_lv<4> MAT_Multiply_load_mat::ap_ST_st3_fsm_2 = "100";
const sc_lv<4> MAT_Multiply_load_mat::ap_ST_st4_fsm_3 = "1000";
const sc_lv<32> MAT_Multiply_load_mat::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> MAT_Multiply_load_mat::ap_const_lv1_1 = "1";
const sc_lv<32> MAT_Multiply_load_mat::ap_const_lv32_1 = "1";
const sc_lv<1> MAT_Multiply_load_mat::ap_const_lv1_0 = "0";
const sc_lv<32> MAT_Multiply_load_mat::ap_const_lv32_2 = "10";
const sc_lv<10> MAT_Multiply_load_mat::ap_const_lv10_0 = "0000000000";
const sc_lv<20> MAT_Multiply_load_mat::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<32> MAT_Multiply_load_mat::ap_const_lv32_3 = "11";
const sc_lv<20> MAT_Multiply_load_mat::ap_const_lv20_3E8 = "1111101000";
const sc_lv<10> MAT_Multiply_load_mat::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> MAT_Multiply_load_mat::ap_const_lv10_1 = "1";

MAT_Multiply_load_mat::MAT_Multiply_load_mat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_X_read);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond_fu_149_p2 );
    sensitive << ( or_cond_fu_166_p2 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_124_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_124_p2 );

    SC_METHOD(thread_ap_sig_bdd_106);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_71);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_81);
    sensitive << ( X_empty_n );
    sensitive << ( exitcond_fu_149_p2 );
    sensitive << ( or_cond_fu_166_p2 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_54 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_71 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_106 );

    SC_METHOD(thread_arrayX_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_5_fu_177_p1 );

    SC_METHOD(thread_arrayX_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_bdd_81 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_arrayX_d0);
    sensitive << ( X_dout );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_arrayX_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond_fu_149_p2 );
    sensitive << ( or_cond_fu_166_p2 );
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_exitcond1_fu_124_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_exitcond_fu_149_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_bdd_81 );
    sensitive << ( j_reg_102 );

    SC_METHOD(thread_i_1_fu_130_p2);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_i_cast3_fu_120_p1);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_j_1_fu_155_p2);
    sensitive << ( j_reg_102 );

    SC_METHOD(thread_j_cast1_fu_145_p1);
    sensitive << ( j_reg_102 );

    SC_METHOD(thread_j_cast2_fu_141_p1);
    sensitive << ( j_reg_102 );

    SC_METHOD(thread_next_mul_fu_114_p2);
    sensitive << ( phi_mul_reg_90 );

    SC_METHOD(thread_or_cond_fu_166_p2);
    sensitive << ( tmp_reg_205 );
    sensitive << ( tmp_3_fu_161_p2 );

    SC_METHOD(thread_tmp_3_fu_161_p2);
    sensitive << ( n );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond_fu_149_p2 );
    sensitive << ( ap_sig_bdd_81 );
    sensitive << ( j_cast1_fu_145_p1 );

    SC_METHOD(thread_tmp_4_fu_171_p2);
    sensitive << ( phi_mul_reg_90 );
    sensitive << ( j_cast2_fu_141_p1 );

    SC_METHOD(thread_tmp_5_fu_177_p1);
    sensitive << ( tmp_4_fu_171_p2 );

    SC_METHOD(thread_tmp_fu_136_p2);
    sensitive << ( m );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_124_p2 );
    sensitive << ( i_cast3_fu_120_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_124_p2 );
    sensitive << ( exitcond_fu_149_p2 );
    sensitive << ( ap_sig_bdd_81 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "MAT_Multiply_load_mat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X_dout, "(port)X_dout");
    sc_trace(mVcdFile, X_empty_n, "(port)X_empty_n");
    sc_trace(mVcdFile, X_read, "(port)X_read");
    sc_trace(mVcdFile, arrayX_address0, "(port)arrayX_address0");
    sc_trace(mVcdFile, arrayX_ce0, "(port)arrayX_ce0");
    sc_trace(mVcdFile, arrayX_we0, "(port)arrayX_we0");
    sc_trace(mVcdFile, arrayX_d0, "(port)arrayX_d0");
    sc_trace(mVcdFile, m, "(port)m");
    sc_trace(mVcdFile, n, "(port)n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_22, "ap_sig_bdd_22");
    sc_trace(mVcdFile, next_mul_fu_114_p2, "next_mul_fu_114_p2");
    sc_trace(mVcdFile, next_mul_reg_192, "next_mul_reg_192");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_54, "ap_sig_bdd_54");
    sc_trace(mVcdFile, i_1_fu_130_p2, "i_1_fu_130_p2");
    sc_trace(mVcdFile, i_1_reg_200, "i_1_reg_200");
    sc_trace(mVcdFile, tmp_fu_136_p2, "tmp_fu_136_p2");
    sc_trace(mVcdFile, tmp_reg_205, "tmp_reg_205");
    sc_trace(mVcdFile, exitcond1_fu_124_p2, "exitcond1_fu_124_p2");
    sc_trace(mVcdFile, j_1_fu_155_p2, "j_1_fu_155_p2");
    sc_trace(mVcdFile, j_1_reg_213, "j_1_reg_213");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_71, "ap_sig_bdd_71");
    sc_trace(mVcdFile, exitcond_fu_149_p2, "exitcond_fu_149_p2");
    sc_trace(mVcdFile, or_cond_fu_166_p2, "or_cond_fu_166_p2");
    sc_trace(mVcdFile, ap_sig_bdd_81, "ap_sig_bdd_81");
    sc_trace(mVcdFile, i_reg_79, "i_reg_79");
    sc_trace(mVcdFile, phi_mul_reg_90, "phi_mul_reg_90");
    sc_trace(mVcdFile, j_reg_102, "j_reg_102");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_106, "ap_sig_bdd_106");
    sc_trace(mVcdFile, tmp_5_fu_177_p1, "tmp_5_fu_177_p1");
    sc_trace(mVcdFile, i_cast3_fu_120_p1, "i_cast3_fu_120_p1");
    sc_trace(mVcdFile, j_cast1_fu_145_p1, "j_cast1_fu_145_p1");
    sc_trace(mVcdFile, tmp_3_fu_161_p2, "tmp_3_fu_161_p2");
    sc_trace(mVcdFile, j_cast2_fu_141_p1, "j_cast2_fu_141_p1");
    sc_trace(mVcdFile, tmp_4_fu_171_p2, "tmp_4_fu_171_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

MAT_Multiply_load_mat::~MAT_Multiply_load_mat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void MAT_Multiply_load_mat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !ap_sig_bdd_81.read() && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_149_p2.read()))) {
        i_reg_79 = i_1_reg_200.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_79 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        j_reg_102 = j_1_reg_213.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_124_p2.read(), ap_const_lv1_0))) {
        j_reg_102 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !ap_sig_bdd_81.read() && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_149_p2.read()))) {
        phi_mul_reg_90 = next_mul_reg_192.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        phi_mul_reg_90 = ap_const_lv20_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_1_reg_200 = i_1_fu_130_p2.read();
        next_mul_reg_192 = next_mul_fu_114_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && !ap_sig_bdd_81.read())) {
        j_1_reg_213 = j_1_fu_155_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond1_fu_124_p2.read(), ap_const_lv1_0))) {
        tmp_reg_205 = tmp_fu_136_p2.read();
    }
}

void MAT_Multiply_load_mat::thread_X_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_149_p2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_166_p2.read()) && 
         !ap_sig_bdd_81.read())) {
        X_read = ap_const_logic_1;
    } else {
        X_read = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond1_fu_124_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_124_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_ap_sig_bdd_106() {
    ap_sig_bdd_106 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void MAT_Multiply_load_mat::thread_ap_sig_bdd_22() {
    ap_sig_bdd_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void MAT_Multiply_load_mat::thread_ap_sig_bdd_54() {
    ap_sig_bdd_54 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void MAT_Multiply_load_mat::thread_ap_sig_bdd_71() {
    ap_sig_bdd_71 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void MAT_Multiply_load_mat::thread_ap_sig_bdd_81() {
    ap_sig_bdd_81 = (esl_seteq<1,1,1>(X_empty_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_149_p2.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_166_p2.read()));
}

void MAT_Multiply_load_mat::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_54.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_71.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_106.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_arrayX_address0() {
    arrayX_address0 =  (sc_lv<20>) (tmp_5_fu_177_p1.read());
}

void MAT_Multiply_load_mat::thread_arrayX_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          !ap_sig_bdd_81.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()))) {
        arrayX_ce0 = ap_const_logic_1;
    } else {
        arrayX_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_arrayX_d0() {
    arrayX_d0 = X_dout.read();
}

void MAT_Multiply_load_mat::thread_arrayX_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_149_p2.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_166_p2.read()) && 
          !ap_sig_bdd_81.read()))) {
        arrayX_we0 = ap_const_logic_1;
    } else {
        arrayX_we0 = ap_const_logic_0;
    }
}

void MAT_Multiply_load_mat::thread_exitcond1_fu_124_p2() {
    exitcond1_fu_124_p2 = (!i_reg_79.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_79.read() == ap_const_lv10_3E8);
}

void MAT_Multiply_load_mat::thread_exitcond_fu_149_p2() {
    exitcond_fu_149_p2 = (!j_reg_102.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_102.read() == ap_const_lv10_3E8);
}

void MAT_Multiply_load_mat::thread_i_1_fu_130_p2() {
    i_1_fu_130_p2 = (!i_reg_79.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_79.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void MAT_Multiply_load_mat::thread_i_cast3_fu_120_p1() {
    i_cast3_fu_120_p1 = esl_zext<32,10>(i_reg_79.read());
}

void MAT_Multiply_load_mat::thread_j_1_fu_155_p2() {
    j_1_fu_155_p2 = (!j_reg_102.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_102.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void MAT_Multiply_load_mat::thread_j_cast1_fu_145_p1() {
    j_cast1_fu_145_p1 = esl_zext<32,10>(j_reg_102.read());
}

void MAT_Multiply_load_mat::thread_j_cast2_fu_141_p1() {
    j_cast2_fu_141_p1 = esl_zext<20,10>(j_reg_102.read());
}

void MAT_Multiply_load_mat::thread_next_mul_fu_114_p2() {
    next_mul_fu_114_p2 = (!phi_mul_reg_90.read().is_01() || !ap_const_lv20_3E8.is_01())? sc_lv<20>(): (sc_biguint<20>(phi_mul_reg_90.read()) + sc_biguint<20>(ap_const_lv20_3E8));
}

void MAT_Multiply_load_mat::thread_or_cond_fu_166_p2() {
    or_cond_fu_166_p2 = (tmp_reg_205.read() & tmp_3_fu_161_p2.read());
}

void MAT_Multiply_load_mat::thread_tmp_3_fu_161_p2() {
    tmp_3_fu_161_p2 = (!j_cast1_fu_145_p1.read().is_01() || !n.read().is_01())? sc_lv<1>(): (sc_biguint<32>(j_cast1_fu_145_p1.read()) < sc_biguint<32>(n.read()));
}

void MAT_Multiply_load_mat::thread_tmp_4_fu_171_p2() {
    tmp_4_fu_171_p2 = (!j_cast2_fu_141_p1.read().is_01() || !phi_mul_reg_90.read().is_01())? sc_lv<20>(): (sc_biguint<20>(j_cast2_fu_141_p1.read()) + sc_biguint<20>(phi_mul_reg_90.read()));
}

void MAT_Multiply_load_mat::thread_tmp_5_fu_177_p1() {
    tmp_5_fu_177_p1 = esl_zext<64,20>(tmp_4_fu_171_p2.read());
}

void MAT_Multiply_load_mat::thread_tmp_fu_136_p2() {
    tmp_fu_136_p2 = (!i_cast3_fu_120_p1.read().is_01() || !m.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i_cast3_fu_120_p1.read()) < sc_biguint<32>(m.read()));
}

void MAT_Multiply_load_mat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond1_fu_124_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if ((!ap_sig_bdd_81.read() && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_149_p2.read()))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_149_p2.read()) && !ap_sig_bdd_81.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

