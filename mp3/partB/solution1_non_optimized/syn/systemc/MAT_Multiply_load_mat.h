// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _MAT_Multiply_load_mat_HH_
#define _MAT_Multiply_load_mat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct MAT_Multiply_load_mat : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > X_dout;
    sc_in< sc_logic > X_empty_n;
    sc_out< sc_logic > X_read;
    sc_out< sc_lv<20> > arrayX_address0;
    sc_out< sc_logic > arrayX_ce0;
    sc_out< sc_logic > arrayX_we0;
    sc_out< sc_lv<32> > arrayX_d0;
    sc_in< sc_lv<32> > m;
    sc_in< sc_lv<32> > n;


    // Module declarations
    MAT_Multiply_load_mat(sc_module_name name);
    SC_HAS_PROCESS(MAT_Multiply_load_mat);

    ~MAT_Multiply_load_mat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<20> > next_mul_fu_114_p2;
    sc_signal< sc_lv<20> > next_mul_reg_192;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_54;
    sc_signal< sc_lv<10> > i_1_fu_130_p2;
    sc_signal< sc_lv<10> > i_1_reg_200;
    sc_signal< sc_lv<1> > tmp_fu_136_p2;
    sc_signal< sc_lv<1> > tmp_reg_205;
    sc_signal< sc_lv<1> > exitcond1_fu_124_p2;
    sc_signal< sc_lv<10> > j_1_fu_155_p2;
    sc_signal< sc_lv<10> > j_1_reg_213;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_71;
    sc_signal< sc_lv<1> > exitcond_fu_149_p2;
    sc_signal< sc_lv<1> > or_cond_fu_166_p2;
    sc_signal< bool > ap_sig_bdd_81;
    sc_signal< sc_lv<10> > i_reg_79;
    sc_signal< sc_lv<20> > phi_mul_reg_90;
    sc_signal< sc_lv<10> > j_reg_102;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_106;
    sc_signal< sc_lv<64> > tmp_5_fu_177_p1;
    sc_signal< sc_lv<32> > i_cast3_fu_120_p1;
    sc_signal< sc_lv<32> > j_cast1_fu_145_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_161_p2;
    sc_signal< sc_lv<20> > j_cast2_fu_141_p1;
    sc_signal< sc_lv<20> > tmp_4_fu_171_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_st3_fsm_2;
    static const sc_lv<4> ap_ST_st4_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<20> ap_const_lv20_3E8;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const sc_lv<10> ap_const_lv10_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_X_read();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_106();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_54();
    void thread_ap_sig_bdd_71();
    void thread_ap_sig_bdd_81();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_arrayX_address0();
    void thread_arrayX_ce0();
    void thread_arrayX_d0();
    void thread_arrayX_we0();
    void thread_exitcond1_fu_124_p2();
    void thread_exitcond_fu_149_p2();
    void thread_i_1_fu_130_p2();
    void thread_i_cast3_fu_120_p1();
    void thread_j_1_fu_155_p2();
    void thread_j_cast1_fu_145_p1();
    void thread_j_cast2_fu_141_p1();
    void thread_next_mul_fu_114_p2();
    void thread_or_cond_fu_166_p2();
    void thread_tmp_3_fu_161_p2();
    void thread_tmp_4_fu_171_p2();
    void thread_tmp_5_fu_177_p1();
    void thread_tmp_fu_136_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
