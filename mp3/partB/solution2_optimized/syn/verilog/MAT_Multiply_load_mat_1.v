// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MAT_Multiply_load_mat_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_dout,
        X_empty_n,
        X_read,
        arrayX_address0,
        arrayX_ce0,
        arrayX_q0,
        arrayX_address1,
        arrayX_ce1,
        arrayX_we1,
        arrayX_d1,
        m,
        n
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st9_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv20_F4240 = 20'b11110100001001000000;
parameter    ap_const_lv20_1 = 20'b1;
parameter    ap_const_lv10_3E8 = 10'b1111101000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv20_3E8 = 20'b1111101000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1F = 16'b11111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
output  [9:0] arrayX_address0;
output   arrayX_ce0;
input  [31999:0] arrayX_q0;
output  [9:0] arrayX_address1;
output   arrayX_ce1;
output   arrayX_we1;
output  [31999:0] arrayX_d1;
input  [31:0] m;
input  [31:0] n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_read;
reg arrayX_ce0;
reg arrayX_ce1;
reg arrayX_we1;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [19:0] indvar_flatten_reg_94;
reg   [9:0] i_reg_105;
reg   [9:0] j_reg_116;
wire   [0:0] exitcond_flatten_fu_128_p2;
reg   [0:0] exitcond_flatten_reg_244;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_62;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg   [0:0] or_cond_reg_264;
reg   [0:0] ap_reg_ppstg_or_cond_reg_264_pp0_it4;
reg    ap_sig_bdd_81;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
wire   [19:0] indvar_flatten_next_fu_134_p2;
wire   [9:0] j_mid2_fu_146_p3;
reg   [9:0] j_mid2_reg_253;
wire   [9:0] i_mid2_fu_160_p3;
reg   [9:0] i_mid2_reg_258;
wire   [0:0] or_cond_fu_186_p2;
reg   [0:0] ap_reg_ppstg_or_cond_reg_264_pp0_it1;
reg   [0:0] ap_reg_ppstg_or_cond_reg_264_pp0_it2;
reg   [0:0] ap_reg_ppstg_or_cond_reg_264_pp0_it3;
wire   [9:0] j_1_fu_192_p2;
reg   [9:0] arrayX_addr_reg_273;
reg   [9:0] ap_reg_ppstg_arrayX_addr_reg_273_pp0_it2;
reg   [9:0] ap_reg_ppstg_arrayX_addr_reg_273_pp0_it3;
reg   [9:0] ap_reg_ppstg_arrayX_addr_reg_273_pp0_it4;
reg   [9:0] i_phi_fu_109_p4;
wire   [63:0] tmp_5_fu_216_p1;
wire   [0:0] exitcond9_fu_140_p2;
wire   [9:0] i_s_fu_154_p2;
wire   [31:0] i_cast3_fu_168_p1;
wire   [31:0] j_cast1_fu_177_p1;
wire   [0:0] tmp_fu_172_p2;
wire   [0:0] tmp_3_fu_181_p2;
wire   [9:0] tmp_1_fu_201_p0;
wire   [19:0] j_cast2_fu_207_p1;
wire   [19:0] tmp_1_fu_201_p2;
wire   [19:0] tmp_4_fu_210_p2;
reg    ap_sig_cseq_ST_st9_fsm_2;
reg    ap_sig_bdd_230;
reg   [2:0] ap_NS_fsm;
wire   [19:0] tmp_1_fu_201_p00;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(exitcond_flatten_fu_128_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_128_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(exitcond_flatten_fu_128_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end
    end
end

/// ap_reg_ppiten_pp0_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_reg_244 == ap_const_lv1_0))) begin
        i_reg_105 <= i_mid2_reg_258;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_105 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_128_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_94 <= indvar_flatten_next_fu_134_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten_reg_94 <= ap_const_lv20_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_128_p2 == ap_const_lv1_0))) begin
        j_reg_116 <= j_1_fu_192_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        j_reg_116 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
        ap_reg_ppstg_arrayX_addr_reg_273_pp0_it2 <= arrayX_addr_reg_273;
        ap_reg_ppstg_arrayX_addr_reg_273_pp0_it3 <= ap_reg_ppstg_arrayX_addr_reg_273_pp0_it2;
        ap_reg_ppstg_arrayX_addr_reg_273_pp0_it4 <= ap_reg_ppstg_arrayX_addr_reg_273_pp0_it3;
        ap_reg_ppstg_or_cond_reg_264_pp0_it2 <= ap_reg_ppstg_or_cond_reg_264_pp0_it1;
        ap_reg_ppstg_or_cond_reg_264_pp0_it3 <= ap_reg_ppstg_or_cond_reg_264_pp0_it2;
        ap_reg_ppstg_or_cond_reg_264_pp0_it4 <= ap_reg_ppstg_or_cond_reg_264_pp0_it3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        ap_reg_ppstg_or_cond_reg_264_pp0_it1 <= or_cond_reg_264;
        exitcond_flatten_reg_244 <= exitcond_flatten_fu_128_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(or_cond_reg_264 == ap_const_lv1_0))) begin
        arrayX_addr_reg_273 <= tmp_5_fu_216_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_128_p2 == ap_const_lv1_0))) begin
        i_mid2_reg_258 <= i_mid2_fu_160_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_128_p2 == ap_const_lv1_0))) begin
        j_mid2_reg_253 <= j_mid2_fu_146_p3;
        or_cond_reg_264 <= or_cond_fu_186_p2;
    end
end

/// X_read assign process. ///
always @ (ap_reg_ppstg_or_cond_reg_264_pp0_it4 or ap_sig_bdd_81 or ap_reg_ppiten_pp0_it5)
begin
    if ((~(ap_reg_ppstg_or_cond_reg_264_pp0_it4 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        X_read = ap_const_logic_1;
    end else begin
        X_read = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st9_fsm_2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_62)
begin
    if (ap_sig_bdd_62) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_2 assign process. ///
always @ (ap_sig_bdd_230)
begin
    if (ap_sig_bdd_230) begin
        ap_sig_cseq_ST_st9_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_2 = ap_const_logic_0;
    end
end

/// arrayX_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or ap_reg_ppiten_pp0_it4 or ap_sig_bdd_81 or ap_reg_ppiten_pp0_it5)
begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it4) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        arrayX_ce0 = ap_const_logic_1;
    end else begin
        arrayX_ce0 = ap_const_logic_0;
    end
end

/// arrayX_ce1 assign process. ///
always @ (ap_sig_bdd_81 or ap_reg_ppiten_pp0_it5 or ap_reg_ppiten_pp0_it6)
begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        arrayX_ce1 = ap_const_logic_1;
    end else begin
        arrayX_ce1 = ap_const_logic_0;
    end
end

/// arrayX_we1 assign process. ///
always @ (ap_reg_ppstg_or_cond_reg_264_pp0_it4 or ap_sig_bdd_81 or ap_reg_ppiten_pp0_it5)
begin
    if ((~(ap_reg_ppstg_or_cond_reg_264_pp0_it4 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        arrayX_we1 = ap_const_logic_1;
    end else begin
        arrayX_we1 = ap_const_logic_0;
    end
end

/// i_phi_fu_109_p4 assign process. ///
always @ (i_reg_105 or exitcond_flatten_reg_244 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or i_mid2_reg_258)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_244 == ap_const_lv1_0))) begin
        i_phi_fu_109_p4 = i_mid2_reg_258;
    end else begin
        i_phi_fu_109_p4 = i_reg_105;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_flatten_fu_128_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_81 or ap_reg_ppiten_pp0_it5 or ap_reg_ppiten_pp0_it6)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(exitcond_flatten_fu_128_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_81 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(exitcond_flatten_fu_128_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st9_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st9_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_230 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_230 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_62 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_62 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_81 assign process. ///
always @ (X_empty_n or ap_reg_ppstg_or_cond_reg_264_pp0_it4)
begin
    ap_sig_bdd_81 = ((X_empty_n == ap_const_logic_0) & ~(ap_reg_ppstg_or_cond_reg_264_pp0_it4 == ap_const_lv1_0));
end
assign arrayX_address0 = arrayX_addr_reg_273;
assign arrayX_address1 = ap_reg_ppstg_arrayX_addr_reg_273_pp0_it4;
assign arrayX_d1 = {{arrayX_q0[32'd31999 : 32'd32]}, {X_dout}};
assign exitcond9_fu_140_p2 = (j_reg_116 == ap_const_lv10_3E8? 1'b1: 1'b0);
assign exitcond_flatten_fu_128_p2 = (indvar_flatten_reg_94 == ap_const_lv20_F4240? 1'b1: 1'b0);
assign i_cast3_fu_168_p1 = i_mid2_fu_160_p3;
assign i_mid2_fu_160_p3 = ((exitcond9_fu_140_p2[0:0]===1'b1)? i_s_fu_154_p2: i_phi_fu_109_p4);
assign i_s_fu_154_p2 = (i_phi_fu_109_p4 + ap_const_lv10_1);
assign indvar_flatten_next_fu_134_p2 = (indvar_flatten_reg_94 + ap_const_lv20_1);
assign j_1_fu_192_p2 = (j_mid2_fu_146_p3 + ap_const_lv10_1);
assign j_cast1_fu_177_p1 = j_mid2_fu_146_p3;
assign j_cast2_fu_207_p1 = j_mid2_reg_253;
assign j_mid2_fu_146_p3 = ((exitcond9_fu_140_p2[0:0]===1'b1)? ap_const_lv10_0: j_reg_116);
assign or_cond_fu_186_p2 = (tmp_fu_172_p2 & tmp_3_fu_181_p2);
assign tmp_1_fu_201_p0 = tmp_1_fu_201_p00;
assign tmp_1_fu_201_p00 = i_mid2_reg_258;
assign tmp_1_fu_201_p2 = (tmp_1_fu_201_p0 * $signed('h3E8));
assign tmp_3_fu_181_p2 = (j_cast1_fu_177_p1 < n? 1'b1: 1'b0);
assign tmp_4_fu_210_p2 = (j_cast2_fu_207_p1 + tmp_1_fu_201_p2);
assign tmp_5_fu_216_p1 = tmp_4_fu_210_p2;
assign tmp_fu_172_p2 = (i_cast3_fu_168_p1 < m? 1'b1: 1'b0);


endmodule //MAT_Multiply_load_mat_1

