-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    mA : IN STD_LOGIC_VECTOR (31 downto 0);
    nA : IN STD_LOGIC_VECTOR (31 downto 0);
    mB : IN STD_LOGIC_VECTOR (31 downto 0);
    nB : IN STD_LOGIC_VECTOR (31 downto 0);
    mC : IN STD_LOGIC_VECTOR (31 downto 0);
    nC : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.067500,HLS_SYN_LAT=2005750005,HLS_SYN_TPT=none,HLS_SYN_MEM=8192,HLS_SYN_DSP=15,HLS_SYN_FF=857,HLS_SYN_LUT=1290}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_st5_fsm_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_st6_fsm_3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_st7_fsm_4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_st8_fsm_5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_st9_fsm_6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_pp1_stg0_fsm_7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_pp1_stg1_fsm_8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_pp1_stg2_fsm_9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_pp1_stg3_fsm_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_st20_fsm_11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_st21_fsm_12 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_pp2_stg0_fsm_13 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_pp2_stg1_fsm_14 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_pp2_stg2_fsm_15 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_pp2_stg3_fsm_16 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_st32_fsm_17 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_pp3_stg0_fsm_18 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_st38_fsm_19 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv20_F4240 : STD_LOGIC_VECTOR (19 downto 0) := "11110100001001000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv19_7A120 : STD_LOGIC_VECTOR (18 downto 0) := "1111010000100100000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_3E8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001111101000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_36 : BOOLEAN;
    signal indvar_flatten_reg_347 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_reg_358 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_369 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_413 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_s_reg_424 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten1_reg_435 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_2_reg_446 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_457 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_469_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg1_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal exitcond2_reg_1276 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_1272 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_1285 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg1_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal exitcond2_1_reg_1354 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_1_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_1_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal or_cond_reg_1179 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_165 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_523_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_mid2_fu_535_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_mid2_reg_1162 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_fu_549_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_reg_1167 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_571_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1175 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_607_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_flatten9_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_212 : BOOLEAN;
    signal indvar_flatten_next8_fu_676_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten_next8_reg_1210 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_1_mid2_fu_688_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_mid2_reg_1215 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_mid2_fu_702_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_mid2_reg_1223 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_719_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1240 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_cast_fu_733_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_cast_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_235 : BOOLEAN;
    signal j_1_cast_cast_fu_736_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_1_cast_cast_reg_1250 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_addr2_fu_742_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_addr2_reg_1255 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayC_0_addr_reg_1262 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayC_1_addr_reg_1267 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_23_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_251 : BOOLEAN;
    signal exitcond2_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_259 : BOOLEAN;
    signal k_1_fu_775_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_reg_1280 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_30_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_30_reg_1285_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_805_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayB_load_0_phi_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_load_0_phi_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg3_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_309 : BOOLEAN;
    signal tmp_34_fu_843_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_4_cast_fu_856_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_cast_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_325 : BOOLEAN;
    signal j_4_cast_cast_fu_860_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_4_cast_cast_reg_1335 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayC_0_addr_2_reg_1340 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayC_1_addr_2_reg_1345 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_20_1_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_339 : BOOLEAN;
    signal exitcond2_1_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_347 : BOOLEAN;
    signal k_1_1_fu_890_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_1_reg_1358 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_30_1_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_30_1_reg_1363_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_920_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_reg_1377 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayB_load_1_phi_fu_943_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_load_1_phi_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_1_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp2_stg3_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_395 : BOOLEAN;
    signal tmp_34_1_fu_958_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_4_1_fu_966_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_411 : BOOLEAN;
    signal exitcond_flatten1_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_1413 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_420 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it3 : STD_LOGIC := '0';
    signal tmp_19_reg_1437 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_1437_pp3_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_436 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it4 : STD_LOGIC := '0';
    signal indvar_flatten_next1_fu_977_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_2_mid2_fu_989_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_mid2_reg_1422 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_mid2_fu_1003_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_mid2_reg_1427 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1020_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1432 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1432_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1432_pp3_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1432_pp3_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_1437_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_1437_pp3_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1441 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_4_fu_1049_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal arrayA_0_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayA_0_ce0 : STD_LOGIC;
    signal arrayA_0_we0 : STD_LOGIC;
    signal arrayA_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayA_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayA_1_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayA_1_ce0 : STD_LOGIC;
    signal arrayA_1_we0 : STD_LOGIC;
    signal arrayA_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayA_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_0_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayB_0_ce0 : STD_LOGIC;
    signal arrayB_0_we0 : STD_LOGIC;
    signal arrayB_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_1_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayB_1_ce0 : STD_LOGIC;
    signal arrayB_1_we0 : STD_LOGIC;
    signal arrayB_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayC_0_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayC_0_ce0 : STD_LOGIC;
    signal arrayC_0_we0 : STD_LOGIC;
    signal arrayC_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayC_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayC_1_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal arrayC_1_ce0 : STD_LOGIC;
    signal arrayC_1_we0 : STD_LOGIC;
    signal arrayC_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayC_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_phi_fu_362_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten7_reg_380 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_1_reg_391 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_402 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_phi_fu_417_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_s_phi_fu_428_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_phi_fu_450_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_666 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg2_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_676 : BOOLEAN;
    signal ap_sig_cseq_ST_pp2_stg2_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_698 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_737 : BOOLEAN;
    signal tmp_1_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_543_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast1_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast1_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_616_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1083_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_29_fu_634_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1117_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_42_fu_652_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1074_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond1_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_696_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_cast_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr2_fu_742_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr3_fu_748_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_20_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_cast9_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast9_cast_fu_785_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_addr9_fu_794_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_41_fu_809_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1101_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_835_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_835_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_476_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_4_s_fu_851_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr8_fu_864_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_19_1_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_cast8_fu_896_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast8_cast_fu_900_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_addr14_fu_909_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_44_fu_924_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1109_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_950_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_1_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_997_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_cast6_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_cast4_fu_1024_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1092_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1074_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1074_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1074_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast1_cast_fu_613_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1083_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1083_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1083_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1092_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1092_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1092_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1101_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1101_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1101_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1109_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1109_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1109_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1117_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1117_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1117_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_835_ce : STD_LOGIC;
    signal grp_fu_950_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st38_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_1169 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1074_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1083_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1092_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1092_p20 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1101_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1109_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1117_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_addr2_fu_742_p10 : STD_LOGIC_VECTOR (18 downto 0);

    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component MAT_Multiply_mac_muladd_11ns_9ns_10ns_19_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component MAT_Multiply_arrayA_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_arrayC_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    arrayA_0_U : component MAT_Multiply_arrayA_0
    generic map (
        DataWidth => 32,
        AddressRange => 500000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayA_0_address0,
        ce0 => arrayA_0_ce0,
        we0 => arrayA_0_we0,
        d0 => arrayA_0_d0,
        q0 => arrayA_0_q0);

    arrayA_1_U : component MAT_Multiply_arrayA_0
    generic map (
        DataWidth => 32,
        AddressRange => 500000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayA_1_address0,
        ce0 => arrayA_1_ce0,
        we0 => arrayA_1_we0,
        d0 => arrayA_1_d0,
        q0 => arrayA_1_q0);

    arrayB_0_U : component MAT_Multiply_arrayA_0
    generic map (
        DataWidth => 32,
        AddressRange => 500000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayB_0_address0,
        ce0 => arrayB_0_ce0,
        we0 => arrayB_0_we0,
        d0 => arrayB_0_d0,
        q0 => arrayB_0_q0);

    arrayB_1_U : component MAT_Multiply_arrayA_0
    generic map (
        DataWidth => 32,
        AddressRange => 500000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayB_1_address0,
        ce0 => arrayB_1_ce0,
        we0 => arrayB_1_we0,
        d0 => arrayB_1_d0,
        q0 => arrayB_1_q0);

    arrayC_0_U : component MAT_Multiply_arrayC_0
    generic map (
        DataWidth => 64,
        AddressRange => 500000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayC_0_address0,
        ce0 => arrayC_0_ce0,
        we0 => arrayC_0_we0,
        d0 => arrayC_0_d0,
        q0 => arrayC_0_q0);

    arrayC_1_U : component MAT_Multiply_arrayC_0
    generic map (
        DataWidth => 64,
        AddressRange => 500000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayC_1_address0,
        ce0 => arrayC_1_ce0,
        we0 => arrayC_1_we0,
        d0 => arrayC_1_d0,
        q0 => arrayC_1_q0);

    MAT_Multiply_mul_32s_32s_32_6_U1 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_835_p0,
        din1 => grp_fu_835_p1,
        ce => grp_fu_835_ce,
        dout => grp_fu_835_p2);

    MAT_Multiply_mul_32s_32s_32_6_U2 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_950_p0,
        din1 => grp_fu_950_p1,
        ce => grp_fu_950_ce,
        dout => grp_fu_950_p2);

    MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1_U3 : component MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1074_p0,
        din1 => grp_fu_1074_p1,
        din2 => grp_fu_1074_p2,
        dout => grp_fu_1074_p3);

    MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1_U4 : component MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1083_p0,
        din1 => grp_fu_1083_p1,
        din2 => grp_fu_1083_p2,
        dout => grp_fu_1083_p3);

    MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1_U5 : component MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1092_p0,
        din1 => grp_fu_1092_p1,
        din2 => grp_fu_1092_p2,
        dout => grp_fu_1092_p3);

    MAT_Multiply_mac_muladd_11ns_9ns_10ns_19_1_U6 : component MAT_Multiply_mac_muladd_11ns_9ns_10ns_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1101_p0,
        din1 => grp_fu_1101_p1,
        din2 => grp_fu_1101_p2,
        dout => grp_fu_1101_p3);

    MAT_Multiply_mac_muladd_11ns_9ns_10ns_19_1_U7 : component MAT_Multiply_mac_muladd_11ns_9ns_10ns_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1109_p0,
        din1 => grp_fu_1109_p1,
        din2 => grp_fu_1109_p2,
        dout => grp_fu_1109_p3);

    MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1_U8 : component MAT_Multiply_mac_muladd_9ns_11ns_10ns_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1117_p0,
        din1 => grp_fu_1117_p1,
        din2 => grp_fu_1117_p2,
        dout => grp_fu_1117_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_flatten_fu_517_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_4_fu_511_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_flatten_fu_517_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_4_fu_511_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_flatten_fu_517_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_4_fu_511_p2)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and not((ap_const_lv1_0 = exitcond2_fu_769_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((exitcond2_reg_1276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_10))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_10) and not((exitcond2_reg_1276 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_10)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13) and not((ap_const_lv1_0 = exitcond2_1_fu_884_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_12)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond2_1_reg_1354) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg3_fsm_16))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg3_fsm_16) and not((ap_const_lv1_0 = exitcond2_1_reg_1354))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg3_fsm_16)) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_12)) then 
                    ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and not((ap_const_lv1_0 = exitcond_flatten1_fu_971_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2) and not((ap_const_lv1_0 = exitcond_flatten9_fu_670_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_971_p2))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2) and not((ap_const_lv1_0 = exitcond_flatten9_fu_670_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and not((ap_const_lv1_0 = exitcond_flatten1_fu_971_p2))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it2 assign process. --
    ap_reg_ppiten_pp3_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) then 
                    ap_reg_ppiten_pp3_it2 <= ap_reg_ppiten_pp3_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it3 assign process. --
    ap_reg_ppiten_pp3_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) then 
                    ap_reg_ppiten_pp3_it3 <= ap_reg_ppiten_pp3_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it4 assign process. --
    ap_reg_ppiten_pp3_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) then 
                    ap_reg_ppiten_pp3_it4 <= ap_reg_ppiten_pp3_it3;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2) and not((ap_const_lv1_0 = exitcond_flatten9_fu_670_p2)))) then 
                    ap_reg_ppiten_pp3_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_391 assign process. --
    i_1_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_flatten_fu_517_p2)))) then 
                i_1_reg_391 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_17)) then 
                i_1_reg_391 <= i_1_mid2_reg_1223;
            end if; 
        end if;
    end process;

    -- i_2_reg_446 assign process. --
    i_2_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2) and not((ap_const_lv1_0 = exitcond_flatten9_fu_670_p2)))) then 
                i_2_reg_446 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and (ap_const_lv1_0 = exitcond_flatten1_reg_1413))) then 
                i_2_reg_446 <= i_2_mid2_reg_1427;
            end if; 
        end if;
    end process;

    -- i_reg_358 assign process. --
    i_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_4_fu_511_p2)))) then 
                i_reg_358 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_flatten_reg_1153))) then 
                i_reg_358 <= i_mid2_reg_1167;
            end if; 
        end if;
    end process;

    -- indvar_flatten1_reg_435 assign process. --
    indvar_flatten1_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2) and not((ap_const_lv1_0 = exitcond_flatten9_fu_670_p2)))) then 
                indvar_flatten1_reg_435 <= ap_const_lv20_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_971_p2))) then 
                indvar_flatten1_reg_435 <= indvar_flatten_next1_fu_977_p2;
            end if; 
        end if;
    end process;

    -- indvar_flatten7_reg_380 assign process. --
    indvar_flatten7_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_flatten_fu_517_p2)))) then 
                indvar_flatten7_reg_380 <= ap_const_lv19_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_17)) then 
                indvar_flatten7_reg_380 <= indvar_flatten_next8_reg_1210;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_347 assign process. --
    indvar_flatten_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_4_fu_511_p2)))) then 
                indvar_flatten_reg_347 <= ap_const_lv20_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_flatten_fu_517_p2))) then 
                indvar_flatten_reg_347 <= indvar_flatten_next_fu_523_p2;
            end if; 
        end if;
    end process;

    -- j_1_reg_402 assign process. --
    j_1_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_flatten_fu_517_p2)))) then 
                j_1_reg_402 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_17)) then 
                j_1_reg_402 <= j_4_1_fu_966_p2;
            end if; 
        end if;
    end process;

    -- j_2_reg_457 assign process. --
    j_2_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2) and not((ap_const_lv1_0 = exitcond_flatten9_fu_670_p2)))) then 
                j_2_reg_457 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_971_p2))) then 
                j_2_reg_457 <= j_4_fu_1049_p2;
            end if; 
        end if;
    end process;

    -- j_reg_369 assign process. --
    j_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_4_fu_511_p2)))) then 
                j_reg_369 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_flatten_fu_517_p2))) then 
                j_reg_369 <= j_3_fu_607_p2;
            end if; 
        end if;
    end process;

    -- k_reg_413 assign process. --
    k_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_1276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then 
                k_reg_413 <= k_1_reg_1280;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                k_reg_413 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- k_s_reg_424 assign process. --
    k_s_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond2_1_reg_1354) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then 
                k_s_reg_424 <= k_1_1_reg_1358;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_12)) then 
                k_s_reg_424 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))))) then
                ap_reg_ppstg_tmp_19_reg_1437_pp3_it1 <= tmp_19_reg_1437;
                ap_reg_ppstg_tmp_21_reg_1432_pp3_it1 <= tmp_21_reg_1432;
                exitcond_flatten1_reg_1413 <= exitcond_flatten1_fu_971_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) then
                ap_reg_ppstg_tmp_19_reg_1437_pp3_it2 <= ap_reg_ppstg_tmp_19_reg_1437_pp3_it1;
                ap_reg_ppstg_tmp_19_reg_1437_pp3_it3 <= ap_reg_ppstg_tmp_19_reg_1437_pp3_it2;
                ap_reg_ppstg_tmp_21_reg_1432_pp3_it2 <= ap_reg_ppstg_tmp_21_reg_1432_pp3_it1;
                ap_reg_ppstg_tmp_21_reg_1432_pp3_it3 <= ap_reg_ppstg_tmp_21_reg_1432_pp3_it2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)) then
                ap_reg_ppstg_tmp_30_1_reg_1363_pp2_it1 <= tmp_30_1_reg_1363;
                exitcond2_1_reg_1354 <= exitcond2_1_fu_884_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) then
                ap_reg_ppstg_tmp_30_reg_1285_pp1_it1 <= tmp_30_reg_1285;
                exitcond2_reg_1276 <= exitcond2_fu_769_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (exitcond2_reg_1276 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_23_reg_1272)) and not((ap_const_lv1_0 = tmp_30_reg_1285)))) then
                arrayB_load_0_phi_reg_1314 <= arrayB_load_0_phi_fu_828_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_lv1_0 = exitcond2_1_reg_1354) and not((ap_const_lv1_0 = tmp_20_1_reg_1350)) and not((ap_const_lv1_0 = tmp_30_1_reg_1363)))) then
                arrayB_load_1_phi_reg_1392 <= arrayB_load_1_phi_fu_943_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11)) then
                arrayC_0_addr_2_reg_1340 <= tmp_26_fu_869_p1(19 - 1 downto 0);
                arrayC_1_addr_2_reg_1345 <= tmp_26_fu_869_p1(19 - 1 downto 0);
                    j_4_cast_cast_reg_1335(9 downto 1) <= j_4_cast_cast_fu_860_p1(9 downto 1);
                    j_4_cast_reg_1330(9 downto 1) <= j_4_cast_fu_856_p1(9 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then
                arrayC_0_addr_reg_1262 <= tmp_13_fu_754_p1(19 - 1 downto 0);
                arrayC_1_addr_reg_1267 <= tmp_13_fu_754_p1(19 - 1 downto 0);
                    j_1_cast_cast_reg_1250(9 downto 0) <= j_1_cast_cast_fu_736_p1(9 downto 0);
                    j_1_cast_reg_1245(9 downto 0) <= j_1_cast_fu_733_p1(9 downto 0);
                p_addr2_reg_1255 <= p_addr2_fu_742_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond_flatten_reg_1153 <= exitcond_flatten_fu_517_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2) and (ap_const_lv1_0 = exitcond_flatten9_fu_670_p2))) then
                i_1_mid2_reg_1223 <= i_1_mid2_fu_702_p3;
                j_1_mid2_reg_1215 <= j_1_mid2_fu_688_p3;
                tmp_12_reg_1240 <= i_1_mid2_fu_702_p3(9 downto 1);
                tmp_9_reg_1234 <= tmp_9_fu_719_p1;
                tmp_s_reg_1228 <= tmp_s_fu_714_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_971_p2))) then
                i_2_mid2_reg_1427 <= i_2_mid2_fu_1003_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_flatten_fu_517_p2))) then
                i_mid2_reg_1167 <= i_mid2_fu_549_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2)) then
                indvar_flatten_next8_reg_1210 <= indvar_flatten_next8_fu_676_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_971_p2))) then
                j_2_mid2_reg_1422 <= j_2_mid2_fu_989_p3;
                tmp_19_reg_1437 <= tmp_19_fu_1033_p2;
                tmp_21_reg_1432 <= tmp_21_fu_1020_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_flatten_fu_517_p2))) then
                j_mid2_reg_1162 <= j_mid2_fu_535_p3;
                or_cond7_reg_1183 <= or_cond7_fu_595_p2;
                or_cond8_reg_1187 <= or_cond8_fu_601_p2;
                or_cond_reg_1179 <= or_cond_fu_584_p2;
                tmp_6_reg_1175 <= tmp_6_fu_571_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then
                k_1_1_reg_1358 <= k_1_1_fu_890_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then
                k_1_reg_1280 <= k_1_fu_775_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (exitcond2_reg_1276 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_23_reg_1272)) and not((ap_const_lv1_0 = tmp_30_reg_1285))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_lv1_0 = exitcond2_1_reg_1354) and not((ap_const_lv1_0 = tmp_20_1_reg_1350)) and not((ap_const_lv1_0 = tmp_30_1_reg_1363))))) then
                reg_483 <= grp_fu_469_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_12)) then
                tmp_20_1_reg_1350 <= tmp_20_1_fu_879_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_971_p2) and not((ap_const_lv1_0 = tmp_19_fu_1033_p2)))) then
                tmp_22_reg_1441 <= i_2_mid2_fu_1003_p3(9 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then
                tmp_23_reg_1272 <= tmp_23_fu_764_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_20_1_reg_1350)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13) and (ap_const_lv1_0 = exitcond2_1_fu_884_p2))) then
                tmp_30_1_reg_1363 <= tmp_30_1_fu_904_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_23_reg_1272)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = exitcond2_fu_769_p2))) then
                tmp_30_reg_1285 <= tmp_30_fu_789_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_20_1_reg_1350)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg3_fsm_16) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_30_1_reg_1363_pp2_it1)))) then
                tmp_32_1_reg_1397 <= grp_fu_950_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_23_reg_1272)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = exitcond2_fu_769_p2) and not((ap_const_lv1_0 = tmp_30_fu_789_p2)))) then
                tmp_35_reg_1299 <= tmp_35_fu_805_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_23_reg_1272)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_10) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_30_reg_1285_pp1_it1)))) then
                tmp_37_reg_1319 <= grp_fu_835_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_20_1_reg_1350)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13) and (ap_const_lv1_0 = exitcond2_1_fu_884_p2) and not((ap_const_lv1_0 = tmp_30_1_fu_904_p2)))) then
                tmp_43_reg_1377 <= tmp_43_fu_920_p1;
            end if;
        end if;
    end process;
    j_1_cast_reg_1245(31 downto 10) <= "0000000000000000000000";
    j_1_cast_cast_reg_1250(18 downto 10) <= "000000000";
    j_4_cast_reg_1330(0) <= '1';
    j_4_cast_reg_1330(31 downto 10) <= "0000000000000000000000";
    j_4_cast_cast_reg_1335(0) <= '1';
    j_4_cast_cast_reg_1335(18 downto 10) <= "000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_sig_cseq_ST_pp1_stg1_fsm_8, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg1_fsm_14, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, tmp_4_fu_511_p2, exitcond_flatten_fu_517_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond_flatten9_fu_670_p2, tmp_9_reg_1234, exitcond2_fu_769_p2, exitcond2_1_fu_884_p2, exitcond_flatten1_fu_971_p2, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it3, ap_sig_bdd_436, ap_reg_ppiten_pp3_it4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_4_fu_511_p2))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_19;
                elsif ((not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_4_fu_511_p2)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_flatten_fu_517_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_flatten_fu_517_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st5_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_flatten9_fu_670_p2))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_3;
                end if;
            when ap_ST_st6_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_9_reg_1234))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_4;
                end if;
            when ap_ST_st7_fsm_4 => 
                ap_NS_fsm <= ap_ST_st8_fsm_5;
            when ap_ST_st8_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
            when ap_ST_st9_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_5;
            when ap_ST_pp1_stg0_fsm_7 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond2_fu_769_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_11;
                end if;
            when ap_ST_pp1_stg1_fsm_8 => 
                if (not(((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg2_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_11;
                end if;
            when ap_ST_pp1_stg2_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp1_stg3_fsm_10;
            when ap_ST_pp1_stg3_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
            when ap_ST_st20_fsm_11 => 
                ap_NS_fsm <= ap_ST_st21_fsm_12;
            when ap_ST_st21_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_13;
            when ap_ST_pp2_stg0_fsm_13 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = exitcond2_1_fu_884_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg1_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_17;
                end if;
            when ap_ST_pp2_stg1_fsm_14 => 
                if (not(((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg2_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_17;
                end if;
            when ap_ST_pp2_stg2_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp2_stg3_fsm_16;
            when ap_ST_pp2_stg3_fsm_16 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_13;
            when ap_ST_st32_fsm_17 => 
                ap_NS_fsm <= ap_ST_st5_fsm_2;
            when ap_ST_pp3_stg0_fsm_18 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it4) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it3)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and not((ap_const_lv1_0 = exitcond_flatten1_fu_971_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_18;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it4) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it3))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))) and not((ap_const_lv1_0 = exitcond_flatten1_fu_971_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_18;
                end if;
            when ap_ST_st38_fsm_19 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- A_read assign process. --
    A_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond_reg_1179, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_reg_1179)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_read assign process. --
    B_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond7_reg_1183, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond7_reg_1183)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            B_read <= ap_const_logic_1;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= 
        arrayC_1_q0 when (ap_reg_ppstg_tmp_21_reg_1432_pp3_it3(0) = '1') else 
        arrayC_0_q0;

    -- C_write assign process. --
    C_write_assign_proc : process(ap_reg_ppstg_tmp_19_reg_1437_pp3_it3, ap_sig_bdd_436, ap_reg_ppiten_pp3_it4)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_19_reg_1437_pp3_it3)) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4))))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st38_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st38_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_1169 assign process. --
    ap_sig_bdd_1169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1169 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(A_empty_n, B_empty_n, or_cond_reg_1179, or_cond7_reg_1183)
    begin
                ap_sig_bdd_165 <= (((A_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = or_cond_reg_1179))) or ((B_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = or_cond7_reg_1183))));
    end process;


    -- ap_sig_bdd_212 assign process. --
    ap_sig_bdd_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_212 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_235 assign process. --
    ap_sig_bdd_235_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_235 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_251 assign process. --
    ap_sig_bdd_251_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_251 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_259 assign process. --
    ap_sig_bdd_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_259 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_309 assign process. --
    ap_sig_bdd_309_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_309 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_325 assign process. --
    ap_sig_bdd_325_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_325 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_339 assign process. --
    ap_sig_bdd_339_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_339 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_347 assign process. --
    ap_sig_bdd_347_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_347 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_36 assign process. --
    ap_sig_bdd_36_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_36 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_395 assign process. --
    ap_sig_bdd_395_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_395 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_411 assign process. --
    ap_sig_bdd_411_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_411 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_420 assign process. --
    ap_sig_bdd_420_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_420 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_436 assign process. --
    ap_sig_bdd_436_assign_proc : process(C_full_n, ap_reg_ppstg_tmp_19_reg_1437_pp3_it3)
    begin
                ap_sig_bdd_436 <= ((C_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_19_reg_1437_pp3_it3)));
    end process;


    -- ap_sig_bdd_666 assign process. --
    ap_sig_bdd_666_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_666 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_676 assign process. --
    ap_sig_bdd_676_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_676 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_698 assign process. --
    ap_sig_bdd_698_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_698 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_737 assign process. --
    ap_sig_bdd_737_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_737 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_84 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_7 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_7_assign_proc : process(ap_sig_bdd_259)
    begin
        if (ap_sig_bdd_259) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg1_fsm_8 assign process. --
    ap_sig_cseq_ST_pp1_stg1_fsm_8_assign_proc : process(ap_sig_bdd_84)
    begin
        if (ap_sig_bdd_84) then 
            ap_sig_cseq_ST_pp1_stg1_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg1_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg2_fsm_9 assign process. --
    ap_sig_cseq_ST_pp1_stg2_fsm_9_assign_proc : process(ap_sig_bdd_676)
    begin
        if (ap_sig_bdd_676) then 
            ap_sig_cseq_ST_pp1_stg2_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg2_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg3_fsm_10 assign process. --
    ap_sig_cseq_ST_pp1_stg3_fsm_10_assign_proc : process(ap_sig_bdd_309)
    begin
        if (ap_sig_bdd_309) then 
            ap_sig_cseq_ST_pp1_stg3_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg3_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_13 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_13_assign_proc : process(ap_sig_bdd_347)
    begin
        if (ap_sig_bdd_347) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg1_fsm_14 assign process. --
    ap_sig_cseq_ST_pp2_stg1_fsm_14_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_pp2_stg1_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg1_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg2_fsm_15 assign process. --
    ap_sig_cseq_ST_pp2_stg2_fsm_15_assign_proc : process(ap_sig_bdd_698)
    begin
        if (ap_sig_bdd_698) then 
            ap_sig_cseq_ST_pp2_stg2_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg2_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg3_fsm_16 assign process. --
    ap_sig_cseq_ST_pp2_stg3_fsm_16_assign_proc : process(ap_sig_bdd_395)
    begin
        if (ap_sig_bdd_395) then 
            ap_sig_cseq_ST_pp2_stg3_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg3_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_18 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_18_assign_proc : process(ap_sig_bdd_420)
    begin
        if (ap_sig_bdd_420) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_36)
    begin
        if (ap_sig_bdd_36) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_11 assign process. --
    ap_sig_cseq_ST_st20_fsm_11_assign_proc : process(ap_sig_bdd_325)
    begin
        if (ap_sig_bdd_325) then 
            ap_sig_cseq_ST_st20_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_12 assign process. --
    ap_sig_cseq_ST_st21_fsm_12_assign_proc : process(ap_sig_bdd_339)
    begin
        if (ap_sig_bdd_339) then 
            ap_sig_cseq_ST_st21_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_17 assign process. --
    ap_sig_cseq_ST_st32_fsm_17_assign_proc : process(ap_sig_bdd_411)
    begin
        if (ap_sig_bdd_411) then 
            ap_sig_cseq_ST_st32_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_19 assign process. --
    ap_sig_cseq_ST_st38_fsm_19_assign_proc : process(ap_sig_bdd_1169)
    begin
        if (ap_sig_bdd_1169) then 
            ap_sig_cseq_ST_st38_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_2 assign process. --
    ap_sig_cseq_ST_st5_fsm_2_assign_proc : process(ap_sig_bdd_212)
    begin
        if (ap_sig_bdd_212) then 
            ap_sig_cseq_ST_st5_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_3 assign process. --
    ap_sig_cseq_ST_st6_fsm_3_assign_proc : process(ap_sig_bdd_235)
    begin
        if (ap_sig_bdd_235) then 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_4 assign process. --
    ap_sig_cseq_ST_st7_fsm_4_assign_proc : process(ap_sig_bdd_666)
    begin
        if (ap_sig_bdd_666) then 
            ap_sig_cseq_ST_st7_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_5 assign process. --
    ap_sig_cseq_ST_st8_fsm_5_assign_proc : process(ap_sig_bdd_251)
    begin
        if (ap_sig_bdd_251) then 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_6 assign process. --
    ap_sig_cseq_ST_st9_fsm_6_assign_proc : process(ap_sig_bdd_737)
    begin
        if (ap_sig_bdd_737) then 
            ap_sig_cseq_ST_st9_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayA_0_address0 assign process. --
    arrayA_0_address0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp2_stg0_fsm_13, tmp_11_fu_629_p1, tmp_31_fu_799_p1, tmp_39_fu_914_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            arrayA_0_address0 <= tmp_11_fu_629_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then 
            arrayA_0_address0 <= tmp_39_fu_914_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then 
            arrayA_0_address0 <= tmp_31_fu_799_p1(19 - 1 downto 0);
        else 
            arrayA_0_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayA_0_ce0 assign process. --
    arrayA_0_ce0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp2_stg0_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            arrayA_0_ce0 <= ap_const_logic_1;
        else 
            arrayA_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayA_0_d0 <= A_dout;

    -- arrayA_0_we0 assign process. --
    arrayA_0_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond_reg_1179, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, tmp_6_reg_1175)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_reg_1179)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = tmp_6_reg_1175)))) then 
            arrayA_0_we0 <= ap_const_logic_1;
        else 
            arrayA_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayA_1_address0 assign process. --
    arrayA_1_address0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp2_stg0_fsm_13, tmp_11_fu_629_p1, tmp_31_fu_799_p1, tmp_39_fu_914_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            arrayA_1_address0 <= tmp_11_fu_629_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then 
            arrayA_1_address0 <= tmp_39_fu_914_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then 
            arrayA_1_address0 <= tmp_31_fu_799_p1(19 - 1 downto 0);
        else 
            arrayA_1_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayA_1_ce0 assign process. --
    arrayA_1_ce0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp2_stg0_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            arrayA_1_ce0 <= ap_const_logic_1;
        else 
            arrayA_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayA_1_d0 <= A_dout;

    -- arrayA_1_we0 assign process. --
    arrayA_1_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond_reg_1179, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, tmp_6_reg_1175)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_reg_1179)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = tmp_6_reg_1175))))) then 
            arrayA_1_we0 <= ap_const_logic_1;
        else 
            arrayA_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayB_0_address0 assign process. --
    arrayB_0_address0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp2_stg0_fsm_13, tmp_27_fu_647_p1, tmp_36_fu_823_p1, tmp_40_fu_938_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            arrayB_0_address0 <= tmp_27_fu_647_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then 
            arrayB_0_address0 <= tmp_40_fu_938_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then 
            arrayB_0_address0 <= tmp_36_fu_823_p1(19 - 1 downto 0);
        else 
            arrayB_0_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayB_0_ce0 assign process. --
    arrayB_0_ce0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp2_stg0_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            arrayB_0_ce0 <= ap_const_logic_1;
        else 
            arrayB_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayB_0_d0 <= B_dout;

    -- arrayB_0_we0 assign process. --
    arrayB_0_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond7_reg_1183, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, tmp_6_reg_1175)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond7_reg_1183)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = tmp_6_reg_1175)))) then 
            arrayB_0_we0 <= ap_const_logic_1;
        else 
            arrayB_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayB_1_address0 assign process. --
    arrayB_1_address0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp2_stg0_fsm_13, tmp_27_fu_647_p1, tmp_36_fu_823_p1, tmp_40_fu_938_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            arrayB_1_address0 <= tmp_27_fu_647_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then 
            arrayB_1_address0 <= tmp_40_fu_938_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then 
            arrayB_1_address0 <= tmp_36_fu_823_p1(19 - 1 downto 0);
        else 
            arrayB_1_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayB_1_ce0 assign process. --
    arrayB_1_ce0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp2_stg0_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            arrayB_1_ce0 <= ap_const_logic_1;
        else 
            arrayB_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayB_1_d0 <= B_dout;

    -- arrayB_1_we0 assign process. --
    arrayB_1_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond7_reg_1183, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, tmp_6_reg_1175)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond7_reg_1183)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = tmp_6_reg_1175))))) then 
            arrayB_1_we0 <= ap_const_logic_1;
        else 
            arrayB_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayB_load_0_phi_fu_828_p3 <= 
        arrayB_1_q0 when (tmp_35_reg_1299(0) = '1') else 
        arrayB_0_q0;
    arrayB_load_1_phi_fu_943_p3 <= 
        arrayB_1_q0 when (tmp_43_reg_1377(0) = '1') else 
        arrayB_0_q0;

    -- arrayC_0_address0 assign process. --
    arrayC_0_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg1_fsm_8, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg1_fsm_14, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, arrayC_0_addr_reg_1262, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_st20_fsm_11, arrayC_0_addr_2_reg_1340, ap_sig_cseq_ST_pp2_stg0_fsm_13, ap_sig_cseq_ST_pp3_stg0_fsm_18, ap_reg_ppiten_pp3_it1, tmp_38_fu_665_p1, tmp_26_fu_869_p1, tmp_24_fu_1061_p1, ap_sig_cseq_ST_st7_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11)) then 
            arrayC_0_address0 <= tmp_26_fu_869_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            arrayC_0_address0 <= tmp_38_fu_665_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) then 
            arrayC_0_address0 <= tmp_24_fu_1061_p1(19 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)))) then 
            arrayC_0_address0 <= arrayC_0_addr_2_reg_1340;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)))) then 
            arrayC_0_address0 <= arrayC_0_addr_reg_1262;
        else 
            arrayC_0_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_0_ce0 assign process. --
    arrayC_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg1_fsm_8, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg1_fsm_14, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st8_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp1_stg3_fsm_10, ap_sig_cseq_ST_st20_fsm_11, ap_sig_cseq_ST_st21_fsm_12, ap_sig_cseq_ST_pp2_stg0_fsm_13, ap_sig_cseq_ST_pp2_stg3_fsm_16, ap_sig_cseq_ST_pp3_stg0_fsm_18, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it2, ap_reg_ppiten_pp3_it3, ap_sig_bdd_436, ap_reg_ppiten_pp3_it4, ap_sig_cseq_ST_st7_fsm_4, ap_sig_cseq_ST_pp1_stg2_fsm_9, ap_sig_cseq_ST_pp2_stg2_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it4) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg2_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg3_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it3) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) then 
            arrayC_0_ce0 <= ap_const_logic_1;
        else 
            arrayC_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_0_d0 assign process. --
    arrayC_0_d0_assign_proc : process(ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, tmp_34_fu_843_p2, ap_sig_cseq_ST_st20_fsm_11, ap_sig_cseq_ST_pp2_stg0_fsm_13, tmp_34_1_fu_958_p2, ap_sig_cseq_ST_st7_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then 
            arrayC_0_d0 <= tmp_34_1_fu_958_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then 
            arrayC_0_d0 <= tmp_34_fu_843_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_4))) then 
            arrayC_0_d0 <= ap_const_lv64_0;
        else 
            arrayC_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_0_we0 assign process. --
    arrayC_0_we0_assign_proc : process(ap_reg_ppiten_pp1_it2, tmp_23_reg_1272, ap_reg_ppiten_pp2_it2, tmp_20_1_reg_1350, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, tmp_6_reg_1175, or_cond8_reg_1187, tmp_9_reg_1234, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppstg_tmp_30_reg_1285_pp1_it1, ap_sig_cseq_ST_st20_fsm_11, ap_sig_cseq_ST_pp2_stg0_fsm_13, ap_reg_ppstg_tmp_30_1_reg_1363_pp2_it1, ap_sig_cseq_ST_st7_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = or_cond8_reg_1187)) and (ap_const_lv1_0 = tmp_6_reg_1175)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_const_lv1_0 = tmp_23_reg_1272)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = tmp_9_reg_1234) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_30_reg_1285_pp1_it1))) or ((ap_const_lv1_0 = tmp_9_reg_1234) and (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_const_lv1_0 = tmp_20_1_reg_1350)) and (ap_const_lv1_0 = tmp_9_reg_1234) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_30_1_reg_1363_pp2_it1))))) then 
            arrayC_0_we0 <= ap_const_logic_1;
        else 
            arrayC_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_1_address0 assign process. --
    arrayC_1_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg1_fsm_8, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg1_fsm_14, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, arrayC_1_addr_reg_1267, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_st20_fsm_11, arrayC_1_addr_2_reg_1345, ap_sig_cseq_ST_pp2_stg0_fsm_13, ap_sig_cseq_ST_pp3_stg0_fsm_18, ap_reg_ppiten_pp3_it1, tmp_38_fu_665_p1, tmp_26_fu_869_p1, tmp_24_fu_1061_p1, ap_sig_cseq_ST_st9_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11)) then 
            arrayC_1_address0 <= tmp_26_fu_869_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            arrayC_1_address0 <= tmp_38_fu_665_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) then 
            arrayC_1_address0 <= tmp_24_fu_1061_p1(19 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)))) then 
            arrayC_1_address0 <= arrayC_1_addr_2_reg_1345;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6))) then 
            arrayC_1_address0 <= arrayC_1_addr_reg_1267;
        else 
            arrayC_1_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_1_ce0 assign process. --
    arrayC_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg1_fsm_8, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg1_fsm_14, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st8_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_sig_cseq_ST_pp1_stg3_fsm_10, ap_sig_cseq_ST_st20_fsm_11, ap_sig_cseq_ST_st21_fsm_12, ap_sig_cseq_ST_pp2_stg0_fsm_13, ap_sig_cseq_ST_pp2_stg3_fsm_16, ap_sig_cseq_ST_pp3_stg0_fsm_18, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it2, ap_reg_ppiten_pp3_it3, ap_sig_bdd_436, ap_reg_ppiten_pp3_it4, ap_sig_cseq_ST_pp1_stg2_fsm_9, ap_sig_cseq_ST_pp2_stg2_fsm_15, ap_sig_cseq_ST_st9_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it4) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg2_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg3_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it3) and not((ap_sig_bdd_436 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6))) then 
            arrayC_1_ce0 <= ap_const_logic_1;
        else 
            arrayC_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_1_d0 assign process. --
    arrayC_1_d0_assign_proc : process(ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_7, tmp_34_fu_843_p2, ap_sig_cseq_ST_st20_fsm_11, ap_sig_cseq_ST_pp2_stg0_fsm_13, tmp_34_1_fu_958_p2, ap_sig_cseq_ST_st9_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then 
            arrayC_1_d0 <= tmp_34_1_fu_958_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then 
            arrayC_1_d0 <= tmp_34_fu_843_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6))) then 
            arrayC_1_d0 <= ap_const_lv64_0;
        else 
            arrayC_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_1_we0 assign process. --
    arrayC_1_we0_assign_proc : process(ap_reg_ppiten_pp1_it2, tmp_23_reg_1272, ap_reg_ppiten_pp2_it2, tmp_20_1_reg_1350, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it1, tmp_6_reg_1175, or_cond8_reg_1187, tmp_9_reg_1234, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppstg_tmp_30_reg_1285_pp1_it1, ap_sig_cseq_ST_st20_fsm_11, ap_sig_cseq_ST_pp2_stg0_fsm_13, ap_reg_ppstg_tmp_30_1_reg_1363_pp2_it1, ap_sig_cseq_ST_st9_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = or_cond8_reg_1187)) and not((ap_const_lv1_0 = tmp_6_reg_1175))) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_const_lv1_0 = tmp_23_reg_1272)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and not((ap_const_lv1_0 = tmp_9_reg_1234)) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_30_reg_1285_pp1_it1))) or (not((ap_const_lv1_0 = tmp_9_reg_1234)) and (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_const_lv1_0 = tmp_20_1_reg_1350)) and not((ap_const_lv1_0 = tmp_9_reg_1234)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_30_1_reg_1363_pp2_it1))))) then 
            arrayC_1_we0 <= ap_const_logic_1;
        else 
            arrayC_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_682_p2 <= "1" when (j_1_reg_402 = ap_const_lv10_3E8) else "0";
    exitcond2_1_fu_884_p2 <= "1" when (k_s_phi_fu_428_p4 = ap_const_lv10_3E8) else "0";
    exitcond2_fu_769_p2 <= "1" when (k_phi_fu_417_p4 = ap_const_lv10_3E8) else "0";
    exitcond3_fu_983_p2 <= "1" when (j_2_reg_457 = ap_const_lv10_3E8) else "0";
    exitcond_flatten1_fu_971_p2 <= "1" when (indvar_flatten1_reg_435 = ap_const_lv20_F4240) else "0";
    exitcond_flatten9_fu_670_p2 <= "1" when (indvar_flatten7_reg_380 = ap_const_lv19_7A120) else "0";
    exitcond_flatten_fu_517_p2 <= "1" when (indvar_flatten_reg_347 = ap_const_lv20_F4240) else "0";
    exitcond_fu_529_p2 <= "1" when (j_reg_369 = ap_const_lv10_3E8) else "0";
    grp_fu_1074_p0 <= grp_fu_1074_p00(9 - 1 downto 0);
    grp_fu_1074_p00 <= std_logic_vector(resize(unsigned(tmp_42_fu_652_p4),19));
    grp_fu_1074_p1 <= ap_const_lv19_3E8(11 - 1 downto 0);
    grp_fu_1074_p2 <= j_cast1_cast_fu_613_p1(10 - 1 downto 0);
    grp_fu_1083_p0 <= grp_fu_1083_p00(9 - 1 downto 0);
    grp_fu_1083_p00 <= std_logic_vector(resize(unsigned(tmp_16_fu_616_p4),19));
    grp_fu_1083_p1 <= ap_const_lv19_3E8(11 - 1 downto 0);
    grp_fu_1083_p2 <= j_cast1_cast_fu_613_p1(10 - 1 downto 0);
    grp_fu_1092_p0 <= grp_fu_1092_p00(9 - 1 downto 0);
    grp_fu_1092_p00 <= std_logic_vector(resize(unsigned(tmp_22_reg_1441),19));
    grp_fu_1092_p1 <= ap_const_lv19_3E8(11 - 1 downto 0);
    grp_fu_1092_p2 <= grp_fu_1092_p20(10 - 1 downto 0);
    grp_fu_1092_p20 <= std_logic_vector(resize(unsigned(j_2_mid2_reg_1422),19));
    grp_fu_1101_p0 <= ap_const_lv19_3E8(11 - 1 downto 0);
    grp_fu_1101_p1 <= grp_fu_1101_p10(9 - 1 downto 0);
    grp_fu_1101_p10 <= std_logic_vector(resize(unsigned(tmp_41_fu_809_p4),19));
    grp_fu_1101_p2 <= j_1_cast_cast_reg_1250(10 - 1 downto 0);
    grp_fu_1109_p0 <= ap_const_lv19_3E8(11 - 1 downto 0);
    grp_fu_1109_p1 <= grp_fu_1109_p10(9 - 1 downto 0);
    grp_fu_1109_p10 <= std_logic_vector(resize(unsigned(tmp_44_fu_924_p4),19));
    grp_fu_1109_p2 <= j_4_cast_cast_reg_1335(10 - 1 downto 0);
    grp_fu_1117_p0 <= grp_fu_1117_p00(9 - 1 downto 0);
    grp_fu_1117_p00 <= std_logic_vector(resize(unsigned(tmp_29_fu_634_p4),19));
    grp_fu_1117_p1 <= ap_const_lv19_3E8(11 - 1 downto 0);
    grp_fu_1117_p2 <= j_cast1_cast_fu_613_p1(10 - 1 downto 0);
    grp_fu_469_p3 <= 
        arrayA_1_q0 when (tmp_9_reg_1234(0) = '1') else 
        arrayA_0_q0;
    grp_fu_476_p3 <= 
        arrayC_1_q0 when (tmp_9_reg_1234(0) = '1') else 
        arrayC_0_q0;
    grp_fu_835_ce <= ap_const_logic_1;
    grp_fu_835_p0 <= reg_483;
    grp_fu_835_p1 <= arrayB_load_0_phi_reg_1314;
    grp_fu_950_ce <= ap_const_logic_1;
    grp_fu_950_p0 <= reg_483;
    grp_fu_950_p1 <= arrayB_load_1_phi_reg_1392;
    i_1_cast_fu_710_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_fu_702_p3),32));
    i_1_mid2_fu_702_p3 <= 
        i_3_fu_696_p2 when (exitcond1_fu_682_p2(0) = '1') else 
        i_1_reg_391;
    i_2_cast6_fu_1011_p1 <= std_logic_vector(resize(unsigned(i_2_mid2_fu_1003_p3),32));
    i_2_mid2_fu_1003_p3 <= 
        i_4_fu_997_p2 when (exitcond3_fu_983_p2(0) = '1') else 
        i_2_phi_fu_450_p4;

    -- i_2_phi_fu_450_p4 assign process. --
    i_2_phi_fu_450_p4_assign_proc : process(i_2_reg_446, exitcond_flatten1_reg_1413, ap_sig_cseq_ST_pp3_stg0_fsm_18, ap_reg_ppiten_pp3_it1, i_2_mid2_reg_1427)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_flatten1_reg_1413))) then 
            i_2_phi_fu_450_p4 <= i_2_mid2_reg_1427;
        else 
            i_2_phi_fu_450_p4 <= i_2_reg_446;
        end if; 
    end process;

    i_3_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_1_reg_391));
    i_4_fu_997_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_2_phi_fu_450_p4));
    i_cast1_fu_557_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_549_p3),32));
    i_mid2_fu_549_p3 <= 
        i_s_fu_543_p2 when (exitcond_fu_529_p2(0) = '1') else 
        i_phi_fu_362_p4;

    -- i_phi_fu_362_p4 assign process. --
    i_phi_fu_362_p4_assign_proc : process(i_reg_358, exitcond_flatten_reg_1153, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_mid2_reg_1167)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_flatten_reg_1153))) then 
            i_phi_fu_362_p4 <= i_mid2_reg_1167;
        else 
            i_phi_fu_362_p4 <= i_reg_358;
        end if; 
    end process;

    i_s_fu_543_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_phi_fu_362_p4));
    indvar_flatten_next1_fu_977_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_435) + unsigned(ap_const_lv20_1));
    indvar_flatten_next8_fu_676_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_380) + unsigned(ap_const_lv19_1));
    indvar_flatten_next_fu_523_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_347) + unsigned(ap_const_lv20_1));
    j_1_cast_cast_fu_736_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_reg_1215),19));
    j_1_cast_fu_733_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_reg_1215),32));
    j_1_mid2_fu_688_p3 <= 
        ap_const_lv10_0 when (exitcond1_fu_682_p2(0) = '1') else 
        j_1_reg_402;
    j_2_cast4_fu_1024_p1 <= std_logic_vector(resize(unsigned(j_2_mid2_fu_989_p3),32));
    j_2_mid2_fu_989_p3 <= 
        ap_const_lv10_0 when (exitcond3_fu_983_p2(0) = '1') else 
        j_2_reg_457;
    j_3_fu_607_p2 <= std_logic_vector(unsigned(j_mid2_fu_535_p3) + unsigned(ap_const_lv10_1));
    j_4_1_fu_966_p2 <= std_logic_vector(unsigned(j_1_mid2_reg_1215) + unsigned(ap_const_lv10_2));
    j_4_cast_cast_fu_860_p1 <= std_logic_vector(resize(unsigned(j_4_s_fu_851_p2),19));
    j_4_cast_fu_856_p1 <= std_logic_vector(resize(unsigned(j_4_s_fu_851_p2),32));
    j_4_fu_1049_p2 <= std_logic_vector(unsigned(j_2_mid2_fu_989_p3) + unsigned(ap_const_lv10_1));
    j_4_s_fu_851_p2 <= (j_1_mid2_reg_1215 or ap_const_lv10_1);
    j_cast1_cast_fu_613_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1162),19));
    j_cast1_fu_575_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_535_p3),32));
    j_mid2_fu_535_p3 <= 
        ap_const_lv10_0 when (exitcond_fu_529_p2(0) = '1') else 
        j_reg_369;
    k_1_1_fu_890_p2 <= std_logic_vector(unsigned(k_s_phi_fu_428_p4) + unsigned(ap_const_lv10_1));
    k_1_fu_775_p2 <= std_logic_vector(unsigned(k_phi_fu_417_p4) + unsigned(ap_const_lv10_1));
    k_cast8_cast_fu_900_p1 <= std_logic_vector(resize(unsigned(k_s_phi_fu_428_p4),19));
    k_cast8_fu_896_p1 <= std_logic_vector(resize(unsigned(k_s_phi_fu_428_p4),32));
    k_cast9_cast_fu_785_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_417_p4),19));
    k_cast9_fu_781_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_417_p4),32));

    -- k_phi_fu_417_p4 assign process. --
    k_phi_fu_417_p4_assign_proc : process(k_reg_413, ap_reg_ppiten_pp1_it1, exitcond2_reg_1276, ap_sig_cseq_ST_pp1_stg0_fsm_7, k_1_reg_1280)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond2_reg_1276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7))) then 
            k_phi_fu_417_p4 <= k_1_reg_1280;
        else 
            k_phi_fu_417_p4 <= k_reg_413;
        end if; 
    end process;


    -- k_s_phi_fu_428_p4 assign process. --
    k_s_phi_fu_428_p4_assign_proc : process(k_s_reg_424, ap_reg_ppiten_pp2_it1, exitcond2_1_reg_1354, ap_sig_cseq_ST_pp2_stg0_fsm_13, k_1_1_reg_1358)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond2_1_reg_1354) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_13))) then 
            k_s_phi_fu_428_p4 <= k_1_1_reg_1358;
        else 
            k_s_phi_fu_428_p4 <= k_s_reg_424;
        end if; 
    end process;

    or_cond7_fu_595_p2 <= (tmp_8_fu_566_p2 and tmp_14_fu_590_p2);
    or_cond8_fu_601_p2 <= (tmp_5_fu_561_p2 and tmp_14_fu_590_p2);
    or_cond_fu_584_p2 <= (tmp_5_fu_561_p2 and tmp_7_fu_579_p2);
    p_addr14_fu_909_p2 <= std_logic_vector(unsigned(p_addr2_reg_1255) + unsigned(k_cast8_cast_fu_900_p1));
    p_addr2_fu_742_p1 <= p_addr2_fu_742_p10(9 - 1 downto 0);
    p_addr2_fu_742_p10 <= std_logic_vector(resize(unsigned(tmp_12_reg_1240),19));
    p_addr2_fu_742_p2 <= std_logic_vector(resize(unsigned(ap_const_lv19_3E8) * unsigned(p_addr2_fu_742_p1), 19));
    p_addr3_fu_748_p2 <= std_logic_vector(unsigned(p_addr2_fu_742_p2) + unsigned(j_1_cast_cast_fu_736_p1));
    p_addr8_fu_864_p2 <= std_logic_vector(unsigned(j_4_cast_cast_fu_860_p1) + unsigned(p_addr2_reg_1255));
    p_addr9_fu_794_p2 <= std_logic_vector(unsigned(p_addr2_reg_1255) + unsigned(k_cast9_cast_fu_785_p1));
    tmp3_fu_505_p2 <= (tmp_1_fu_493_p2 and tmp_3_fu_499_p2);
    tmp_11_fu_629_p1 <= std_logic_vector(resize(unsigned(grp_fu_1083_p3),64));
    tmp_13_fu_754_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_748_p2),64));
    tmp_14_fu_590_p2 <= "1" when (unsigned(j_cast1_fu_575_p1) < unsigned(nC)) else "0";
    tmp_15_fu_1015_p2 <= "1" when (unsigned(i_2_cast6_fu_1011_p1) < unsigned(mC)) else "0";
    tmp_16_fu_616_p4 <= i_mid2_reg_1167(9 downto 1);
    tmp_18_fu_1028_p2 <= "1" when (unsigned(j_2_cast4_fu_1024_p1) < unsigned(nC)) else "0";
    tmp_19_1_fu_875_p2 <= "1" when (unsigned(j_4_cast_reg_1330) < unsigned(nC)) else "0";
    tmp_19_fu_1033_p2 <= (tmp_15_fu_1015_p2 and tmp_18_fu_1028_p2);
    tmp_1_fu_493_p2 <= "1" when (mA = mC) else "0";
    tmp_20_1_fu_879_p2 <= (tmp_s_reg_1228 and tmp_19_1_fu_875_p2);
    tmp_20_fu_760_p2 <= "1" when (unsigned(j_1_cast_reg_1245) < unsigned(nC)) else "0";
    tmp_21_fu_1020_p1 <= i_2_mid2_fu_1003_p3(1 - 1 downto 0);
    tmp_23_fu_764_p2 <= (tmp_s_reg_1228 and tmp_20_fu_760_p2);
    tmp_24_fu_1061_p1 <= std_logic_vector(resize(unsigned(grp_fu_1092_p3),64));
    tmp_26_fu_869_p1 <= std_logic_vector(resize(unsigned(p_addr8_fu_864_p2),64));
    tmp_27_fu_647_p1 <= std_logic_vector(resize(unsigned(grp_fu_1117_p3),64));
    tmp_29_fu_634_p4 <= i_mid2_reg_1167(9 downto 1);
    tmp_30_1_fu_904_p2 <= "1" when (unsigned(k_cast8_fu_896_p1) < unsigned(mB)) else "0";
    tmp_30_fu_789_p2 <= "1" when (unsigned(k_cast9_fu_781_p1) < unsigned(mB)) else "0";
    tmp_31_fu_799_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_794_p2),64));
        tmp_33_1_fu_955_p1 <= std_logic_vector(resize(signed(tmp_32_1_reg_1397),64));

        tmp_33_fu_840_p1 <= std_logic_vector(resize(signed(tmp_37_reg_1319),64));

    tmp_34_1_fu_958_p2 <= std_logic_vector(signed(tmp_33_1_fu_955_p1) + signed(grp_fu_476_p3));
    tmp_34_fu_843_p2 <= std_logic_vector(signed(tmp_33_fu_840_p1) + signed(grp_fu_476_p3));
    tmp_35_fu_805_p1 <= k_phi_fu_417_p4(1 - 1 downto 0);
    tmp_36_fu_823_p1 <= std_logic_vector(resize(unsigned(grp_fu_1101_p3),64));
    tmp_38_fu_665_p1 <= std_logic_vector(resize(unsigned(grp_fu_1074_p3),64));
    tmp_39_fu_914_p1 <= std_logic_vector(resize(unsigned(p_addr14_fu_909_p2),64));
    tmp_3_fu_499_p2 <= "1" when (nB = nC) else "0";
    tmp_40_fu_938_p1 <= std_logic_vector(resize(unsigned(grp_fu_1109_p3),64));
    tmp_41_fu_809_p4 <= k_phi_fu_417_p4(9 downto 1);
    tmp_42_fu_652_p4 <= i_mid2_reg_1167(9 downto 1);
    tmp_43_fu_920_p1 <= k_s_phi_fu_428_p4(1 - 1 downto 0);
    tmp_44_fu_924_p4 <= k_s_phi_fu_428_p4(9 downto 1);
    tmp_4_fu_511_p2 <= (tmp3_fu_505_p2 and tmp_fu_487_p2);
    tmp_5_fu_561_p2 <= "1" when (unsigned(i_cast1_fu_557_p1) < unsigned(mC)) else "0";
    tmp_6_fu_571_p1 <= i_mid2_fu_549_p3(1 - 1 downto 0);
    tmp_7_fu_579_p2 <= "1" when (unsigned(j_cast1_fu_575_p1) < unsigned(mB)) else "0";
    tmp_8_fu_566_p2 <= "1" when (unsigned(i_cast1_fu_557_p1) < unsigned(mB)) else "0";
    tmp_9_fu_719_p1 <= i_1_mid2_fu_702_p3(1 - 1 downto 0);
    tmp_fu_487_p2 <= "1" when (nA = mB) else "0";
    tmp_s_fu_714_p2 <= "1" when (unsigned(i_1_cast_fu_710_p1) < unsigned(mC)) else "0";
end behav;
