// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MAT_Multiply_load_mat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_dout,
        X_empty_n,
        X_read,
        arrayX_address0,
        arrayX_ce0,
        arrayX_we0,
        arrayX_d0,
        m,
        n
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv12_32 = 12'b110010;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
output  [11:0] arrayX_address0;
output   arrayX_ce0;
output   arrayX_we0;
output  [31:0] arrayX_d0;
input  [31:0] m;
input  [31:0] n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_read;
reg arrayX_ce0;
reg arrayX_we0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [11:0] next_mul_fu_114_p2;
reg   [11:0] next_mul_reg_192;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_53;
wire   [5:0] i_1_fu_130_p2;
reg   [5:0] i_1_reg_200;
wire   [0:0] tmp_fu_136_p2;
reg   [0:0] tmp_reg_205;
wire   [0:0] exitcond1_fu_124_p2;
wire   [5:0] j_1_fu_155_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_70;
wire   [0:0] exitcond_fu_149_p2;
wire   [0:0] or_cond_fu_166_p2;
reg    ap_sig_bdd_80;
reg   [5:0] i_reg_79;
reg   [11:0] phi_mul_reg_90;
reg   [5:0] j_reg_102;
wire   [63:0] tmp_5_fu_177_p1;
wire   [31:0] i_cast3_fu_120_p1;
wire   [31:0] j_cast1_fu_145_p1;
wire   [0:0] tmp_3_fu_161_p2;
wire   [11:0] j_cast2_fu_141_p1;
wire   [11:0] tmp_4_fu_171_p2;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_80 & ~(ap_const_lv1_0 == exitcond_fu_149_p2))) begin
        i_reg_79 <= i_1_reg_200;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_79 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_149_p2) & ~ap_sig_bdd_80)) begin
        j_reg_102 <= j_1_fu_155_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_124_p2 == ap_const_lv1_0))) begin
        j_reg_102 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_80 & ~(ap_const_lv1_0 == exitcond_fu_149_p2))) begin
        phi_mul_reg_90 <= next_mul_reg_192;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        phi_mul_reg_90 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_200 <= i_1_fu_130_p2;
        next_mul_reg_192 <= next_mul_fu_114_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_124_p2 == ap_const_lv1_0))) begin
        tmp_reg_205 <= tmp_fu_136_p2;
    end
end

/// X_read assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond_fu_149_p2 or or_cond_fu_166_p2 or ap_sig_bdd_80)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_149_p2) & ~(ap_const_lv1_0 == or_cond_fu_166_p2) & ~ap_sig_bdd_80)) begin
        X_read = ap_const_logic_1;
    end else begin
        X_read = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_124_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_124_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_124_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_124_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_53)
begin
    if (ap_sig_bdd_53) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_70)
begin
    if (ap_sig_bdd_70) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// arrayX_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_80)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_80)) begin
        arrayX_ce0 = ap_const_logic_1;
    end else begin
        arrayX_ce0 = ap_const_logic_0;
    end
end

/// arrayX_we0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond_fu_149_p2 or or_cond_fu_166_p2 or ap_sig_bdd_80)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_149_p2) & ~(ap_const_lv1_0 == or_cond_fu_166_p2) & ~ap_sig_bdd_80)) begin
        arrayX_we0 = ap_const_logic_1;
    end else begin
        arrayX_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_124_p2 or exitcond_fu_149_p2 or ap_sig_bdd_80)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond1_fu_124_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((~ap_sig_bdd_80 & ~(ap_const_lv1_0 == exitcond_fu_149_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if (((ap_const_lv1_0 == exitcond_fu_149_p2) & ~ap_sig_bdd_80)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_53 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_53 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_70 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_70 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_80 assign process. ///
always @ (X_empty_n or exitcond_fu_149_p2 or or_cond_fu_166_p2)
begin
    ap_sig_bdd_80 = ((X_empty_n == ap_const_logic_0) & (ap_const_lv1_0 == exitcond_fu_149_p2) & ~(ap_const_lv1_0 == or_cond_fu_166_p2));
end
assign arrayX_address0 = tmp_5_fu_177_p1;
assign arrayX_d0 = X_dout;
assign exitcond1_fu_124_p2 = (i_reg_79 == ap_const_lv6_32? 1'b1: 1'b0);
assign exitcond_fu_149_p2 = (j_reg_102 == ap_const_lv6_32? 1'b1: 1'b0);
assign i_1_fu_130_p2 = (i_reg_79 + ap_const_lv6_1);
assign i_cast3_fu_120_p1 = i_reg_79;
assign j_1_fu_155_p2 = (j_reg_102 + ap_const_lv6_1);
assign j_cast1_fu_145_p1 = j_reg_102;
assign j_cast2_fu_141_p1 = j_reg_102;
assign next_mul_fu_114_p2 = (phi_mul_reg_90 + ap_const_lv12_32);
assign or_cond_fu_166_p2 = (tmp_reg_205 & tmp_3_fu_161_p2);
assign tmp_3_fu_161_p2 = (j_cast1_fu_145_p1 < n? 1'b1: 1'b0);
assign tmp_4_fu_171_p2 = (j_cast2_fu_141_p1 + phi_mul_reg_90);
assign tmp_5_fu_177_p1 = tmp_4_fu_171_p2;
assign tmp_fu_136_p2 = (i_cast3_fu_120_p1 < m? 1'b1: 1'b0);


endmodule //MAT_Multiply_load_mat

