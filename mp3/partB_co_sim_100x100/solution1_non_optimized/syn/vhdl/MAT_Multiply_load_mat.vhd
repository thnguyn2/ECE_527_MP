-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply_load_mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    X_empty_n : IN STD_LOGIC;
    X_read : OUT STD_LOGIC;
    arrayX_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    arrayX_ce0 : OUT STD_LOGIC;
    arrayX_we0 : OUT STD_LOGIC;
    arrayX_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    m : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MAT_Multiply_load_mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal next_mul_fu_114_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul_reg_192 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_54 : BOOLEAN;
    signal i_1_fu_130_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_200 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_155_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_213 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_71 : BOOLEAN;
    signal exitcond_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_81 : BOOLEAN;
    signal i_reg_79 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_reg_102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal tmp_5_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast3_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast1_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast2_fu_141_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_171_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_79 assign process. --
    i_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_81) and not((ap_const_lv1_0 = exitcond_fu_149_p2)))) then 
                i_reg_79 <= i_1_reg_200;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_79 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- j_reg_102 assign process. --
    j_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                j_reg_102 <= j_1_reg_213;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_124_p2 = ap_const_lv1_0))) then 
                j_reg_102 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_90 assign process. --
    phi_mul_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_81) and not((ap_const_lv1_0 = exitcond_fu_149_p2)))) then 
                phi_mul_reg_90 <= next_mul_reg_192;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_90 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_200 <= i_1_fu_130_p2;
                next_mul_reg_192 <= next_mul_fu_114_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_81))) then
                j_1_reg_213 <= j_1_fu_155_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_124_p2 = ap_const_lv1_0))) then
                tmp_reg_205 <= tmp_fu_136_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_124_p2, exitcond_fu_149_p2, ap_sig_bdd_81)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_124_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((not(ap_sig_bdd_81) and not((ap_const_lv1_0 = exitcond_fu_149_p2)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((ap_const_lv1_0 = exitcond_fu_149_p2) and not(ap_sig_bdd_81))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- X_read assign process. --
    X_read_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_149_p2, or_cond_fu_166_p2, ap_sig_bdd_81)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_149_p2) and not((ap_const_lv1_0 = or_cond_fu_166_p2)) and not(ap_sig_bdd_81))) then 
            X_read <= ap_const_logic_1;
        else 
            X_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_124_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_124_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_124_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_124_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_54 assign process. --
    ap_sig_bdd_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_54 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_71 assign process. --
    ap_sig_bdd_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_71 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(X_empty_n, exitcond_fu_149_p2, or_cond_fu_166_p2)
    begin
                ap_sig_bdd_81 <= ((X_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond_fu_149_p2) and not((ap_const_lv1_0 = or_cond_fu_166_p2)));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_54)
    begin
        if (ap_sig_bdd_54) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_71)
    begin
        if (ap_sig_bdd_71) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    arrayX_address0 <= tmp_5_fu_177_p1(20 - 1 downto 0);

    -- arrayX_ce0 assign process. --
    arrayX_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_81, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_81)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            arrayX_ce0 <= ap_const_logic_1;
        else 
            arrayX_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayX_d0 <= X_dout;

    -- arrayX_we0 assign process. --
    arrayX_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_149_p2, or_cond_fu_166_p2, ap_sig_bdd_81)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_149_p2) and not((ap_const_lv1_0 = or_cond_fu_166_p2)) and not(ap_sig_bdd_81)))) then 
            arrayX_we0 <= ap_const_logic_1;
        else 
            arrayX_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_124_p2 <= "1" when (i_reg_79 = ap_const_lv10_3E8) else "0";
    exitcond_fu_149_p2 <= "1" when (j_reg_102 = ap_const_lv10_3E8) else "0";
    i_1_fu_130_p2 <= std_logic_vector(unsigned(i_reg_79) + unsigned(ap_const_lv10_1));
    i_cast3_fu_120_p1 <= std_logic_vector(resize(unsigned(i_reg_79),32));
    j_1_fu_155_p2 <= std_logic_vector(unsigned(j_reg_102) + unsigned(ap_const_lv10_1));
    j_cast1_fu_145_p1 <= std_logic_vector(resize(unsigned(j_reg_102),32));
    j_cast2_fu_141_p1 <= std_logic_vector(resize(unsigned(j_reg_102),20));
    next_mul_fu_114_p2 <= std_logic_vector(unsigned(phi_mul_reg_90) + unsigned(ap_const_lv20_3E8));
    or_cond_fu_166_p2 <= (tmp_reg_205 and tmp_3_fu_161_p2);
    tmp_3_fu_161_p2 <= "1" when (unsigned(j_cast1_fu_145_p1) < unsigned(n)) else "0";
    tmp_4_fu_171_p2 <= std_logic_vector(unsigned(j_cast2_fu_141_p1) + unsigned(phi_mul_reg_90));
    tmp_5_fu_177_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_171_p2),64));
    tmp_fu_136_p2 <= "1" when (unsigned(i_cast3_fu_120_p1) < unsigned(m)) else "0";
end behav;
