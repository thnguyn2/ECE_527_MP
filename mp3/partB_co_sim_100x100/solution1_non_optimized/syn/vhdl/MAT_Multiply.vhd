-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    mA : IN STD_LOGIC_VECTOR (31 downto 0);
    nA : IN STD_LOGIC_VECTOR (31 downto 0);
    mB : IN STD_LOGIC_VECTOR (31 downto 0);
    nB : IN STD_LOGIC_VECTOR (31 downto 0);
    mC : IN STD_LOGIC_VECTOR (31 downto 0);
    nC : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.690000,HLS_SYN_LAT=2504003003,HLS_SYN_TPT=none,HLS_SYN_MEM=8192,HLS_SYN_DSP=4,HLS_SYN_FF=736,HLS_SYN_LUT=891}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_37 : BOOLEAN;
    signal tmp_s_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul1_fu_316_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul1_reg_545 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal i_2_fu_332_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_553 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast7_cast_fu_347_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_cast7_cast_reg_563 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_97 : BOOLEAN;
    signal j_2_fu_357_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_571 : STD_LOGIC_VECTOR (9 downto 0);
    signal arrayC_addr_reg_576 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond3_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_398_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_reg_588 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal next_mul_fu_404_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul_reg_593 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond2_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal arrayB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal tmp_19_fu_445_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal next_mul2_fu_452_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul2_reg_632 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_172 : BOOLEAN;
    signal i_3_fu_468_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_640 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_493_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_reg_653 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_192 : BOOLEAN;
    signal tmp_12_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayA_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal arrayA_ce0 : STD_LOGIC;
    signal arrayA_we0 : STD_LOGIC;
    signal arrayA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayB_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal arrayB_ce0 : STD_LOGIC;
    signal arrayB_we0 : STD_LOGIC;
    signal arrayB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayC_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal arrayC_ce0 : STD_LOGIC;
    signal arrayC_we0 : STD_LOGIC;
    signal arrayC_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayC_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_262_ap_start : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_262_ap_done : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_262_ap_idle : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_262_ap_ready : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_262_X_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_262_X_empty_n : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_262_X_read : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_262_arrayX_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_262_arrayX_ce0 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_262_arrayX_we0 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_262_arrayX_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_262_m : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_262_n : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_274_ap_start : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_274_ap_done : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_274_ap_idle : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_274_ap_ready : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_274_X_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_274_X_empty_n : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_274_X_read : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_274_arrayX_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_274_arrayX_ce0 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_274_arrayX_we0 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_274_arrayX_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_274_m : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_274_n : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_171 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_269 : BOOLEAN;
    signal phi_mul1_reg_182 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_reg_194 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_205 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_292 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_299 : BOOLEAN;
    signal phi_mul_reg_216 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_1_reg_227 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul2_reg_238 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_1_reg_250 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_318 : BOOLEAN;
    signal ap_sig_bdd_324 : BOOLEAN;
    signal grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_6_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_349 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_356 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_368 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_376 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_389 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_397 : BOOLEAN;
    signal tmp_7_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast8_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr_fu_363_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_cast7_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_cast6_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast6_cast_fu_388_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_addr1_fu_415_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_addr4_fu_426_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_436_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast4_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_cast2_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_cast2_cast_fu_483_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_addr6_fu_509_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_436_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component MAT_Multiply_load_mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        X_empty_n : IN STD_LOGIC;
        X_read : OUT STD_LOGIC;
        arrayX_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        arrayX_ce0 : OUT STD_LOGIC;
        arrayX_we0 : OUT STD_LOGIC;
        arrayX_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_arrayA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_arrayC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    arrayA_U : component MAT_Multiply_arrayA
    generic map (
        DataWidth => 32,
        AddressRange => 1000000,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayA_address0,
        ce0 => arrayA_ce0,
        we0 => arrayA_we0,
        d0 => arrayA_d0,
        q0 => arrayA_q0);

    arrayB_U : component MAT_Multiply_arrayA
    generic map (
        DataWidth => 32,
        AddressRange => 1000000,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayB_address0,
        ce0 => arrayB_ce0,
        we0 => arrayB_we0,
        d0 => arrayB_d0,
        q0 => arrayB_q0);

    arrayC_U : component MAT_Multiply_arrayC
    generic map (
        DataWidth => 64,
        AddressRange => 1000000,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayC_address0,
        ce0 => arrayC_ce0,
        we0 => arrayC_we0,
        d0 => arrayC_d0,
        q0 => arrayC_q0);

    grp_MAT_Multiply_load_mat_fu_262 : component MAT_Multiply_load_mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MAT_Multiply_load_mat_fu_262_ap_start,
        ap_done => grp_MAT_Multiply_load_mat_fu_262_ap_done,
        ap_idle => grp_MAT_Multiply_load_mat_fu_262_ap_idle,
        ap_ready => grp_MAT_Multiply_load_mat_fu_262_ap_ready,
        X_dout => grp_MAT_Multiply_load_mat_fu_262_X_dout,
        X_empty_n => grp_MAT_Multiply_load_mat_fu_262_X_empty_n,
        X_read => grp_MAT_Multiply_load_mat_fu_262_X_read,
        arrayX_address0 => grp_MAT_Multiply_load_mat_fu_262_arrayX_address0,
        arrayX_ce0 => grp_MAT_Multiply_load_mat_fu_262_arrayX_ce0,
        arrayX_we0 => grp_MAT_Multiply_load_mat_fu_262_arrayX_we0,
        arrayX_d0 => grp_MAT_Multiply_load_mat_fu_262_arrayX_d0,
        m => grp_MAT_Multiply_load_mat_fu_262_m,
        n => grp_MAT_Multiply_load_mat_fu_262_n);

    grp_MAT_Multiply_load_mat_fu_274 : component MAT_Multiply_load_mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MAT_Multiply_load_mat_fu_274_ap_start,
        ap_done => grp_MAT_Multiply_load_mat_fu_274_ap_done,
        ap_idle => grp_MAT_Multiply_load_mat_fu_274_ap_idle,
        ap_ready => grp_MAT_Multiply_load_mat_fu_274_ap_ready,
        X_dout => grp_MAT_Multiply_load_mat_fu_274_X_dout,
        X_empty_n => grp_MAT_Multiply_load_mat_fu_274_X_empty_n,
        X_read => grp_MAT_Multiply_load_mat_fu_274_X_read,
        arrayX_address0 => grp_MAT_Multiply_load_mat_fu_274_arrayX_address0,
        arrayX_ce0 => grp_MAT_Multiply_load_mat_fu_274_arrayX_ce0,
        arrayX_we0 => grp_MAT_Multiply_load_mat_fu_274_arrayX_we0,
        arrayX_d0 => grp_MAT_Multiply_load_mat_fu_274_arrayX_d0,
        m => grp_MAT_Multiply_load_mat_fu_274_m,
        n => grp_MAT_Multiply_load_mat_fu_274_n);

    MAT_Multiply_mul_32s_32s_32_6_U5 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_436_p0,
        din1 => grp_fu_436_p1,
        ce => grp_fu_436_ce,
        dout => grp_fu_436_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg assign process. --
    grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_310_p2 = ap_const_lv1_0)))) then 
                    grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_MAT_Multiply_load_mat_fu_262_ap_ready)) then 
                    grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg assign process. --
    grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_310_p2 = ap_const_lv1_0)))) then 
                    grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_MAT_Multiply_load_mat_fu_274_ap_ready)) then 
                    grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_227 assign process. --
    i_1_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond4_fu_326_p2 = ap_const_lv1_0)))) then 
                i_1_reg_227 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and not((ap_const_lv1_0 = exitcond_fu_487_p2)))) then 
                i_1_reg_227 <= i_3_reg_640;
            end if; 
        end if;
    end process;

    -- i_reg_171 assign process. --
    i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond3_fu_351_p2)))) then 
                i_reg_171 <= i_2_reg_553;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_262_ap_done) or (ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_274_ap_done))))) then 
                i_reg_171 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_250 assign process. --
    j_1_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not(ap_sig_bdd_324))) then 
                j_1_reg_250 <= j_3_reg_653;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((tmp_s_reg_541 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_462_p2))) then 
                j_1_reg_250 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- j_reg_194 assign process. --
    j_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_392_p2)))) then 
                j_reg_194 <= j_2_reg_571;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond4_fu_326_p2 = ap_const_lv1_0))) then 
                j_reg_194 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- k_reg_205 assign process. --
    k_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                k_reg_205 <= k_1_reg_588;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                k_reg_205 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- phi_mul1_reg_182 assign process. --
    phi_mul1_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond3_fu_351_p2)))) then 
                phi_mul1_reg_182 <= next_mul1_reg_545;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_262_ap_done) or (ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_274_ap_done))))) then 
                phi_mul1_reg_182 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    -- phi_mul2_reg_238 assign process. --
    phi_mul2_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond4_fu_326_p2 = ap_const_lv1_0)))) then 
                phi_mul2_reg_238 <= ap_const_lv20_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and not((ap_const_lv1_0 = exitcond_fu_487_p2)))) then 
                phi_mul2_reg_238 <= next_mul2_reg_632;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_216 assign process. --
    phi_mul_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                phi_mul_reg_216 <= next_mul_reg_593;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                phi_mul_reg_216 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_351_p2))) then
                arrayC_addr_reg_576 <= tmp_6_fu_369_p1(20 - 1 downto 0);
                tmp_10_reg_581 <= tmp_10_fu_379_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_2_reg_553 <= i_2_fu_332_p2;
                next_mul1_reg_545 <= next_mul1_fu_316_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((tmp_s_reg_541 = ap_const_lv1_0)))) then
                i_3_reg_640 <= i_3_fu_468_p2;
                next_mul2_reg_632 <= next_mul2_fu_452_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_2_reg_571 <= j_2_fu_357_p2;
                    j_cast7_cast_reg_563(9 downto 0) <= j_cast7_cast_fu_347_p1(9 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                j_3_reg_653 <= j_3_fu_493_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                k_1_reg_588 <= k_1_fu_398_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_392_p2))) then
                next_mul_reg_593 <= next_mul_fu_404_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and (ap_const_lv1_0 = exitcond_fu_487_p2))) then
                tmp_12_reg_658 <= tmp_12_fu_504_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_17_reg_622 <= grp_fu_436_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond4_fu_326_p2 = ap_const_lv1_0))) then
                tmp_2_reg_558 <= tmp_2_fu_338_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((tmp_s_reg_541 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_462_p2))) then
                tmp_3_reg_645 <= tmp_3_fu_474_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_s_reg_541 <= tmp_s_fu_310_p2;
            end if;
        end if;
    end process;
    j_cast7_cast_reg_563(19 downto 10) <= "0000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_s_fu_310_p2, tmp_s_reg_541, exitcond4_fu_326_p2, exitcond3_fu_351_p2, tmp_10_reg_581, exitcond2_fu_392_p2, tmp_14_fu_410_p2, exitcond1_fu_462_p2, tmp_12_fu_504_p2, exitcond_fu_487_p2, grp_MAT_Multiply_load_mat_fu_262_ap_done, grp_MAT_Multiply_load_mat_fu_274_ap_done, ap_sig_bdd_324)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (tmp_s_fu_310_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                elsif ((not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_310_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not(((ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_262_ap_done) or (ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_274_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond4_fu_326_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_351_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_392_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                elsif (((ap_const_lv1_0 = exitcond2_fu_392_p2) and not((ap_const_lv1_0 = tmp_10_reg_581)) and not((ap_const_lv1_0 = tmp_14_fu_410_p2)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st17_fsm_16 => 
                if (((tmp_s_reg_541 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_462_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_lv1_0 = exitcond_fu_487_p2))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                elsif (((ap_const_lv1_0 = exitcond_fu_487_p2) and (ap_const_lv1_0 = tmp_12_fu_504_p2))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                if (not(ap_sig_bdd_324)) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- A_read assign process. --
    A_read_assign_proc : process(grp_MAT_Multiply_load_mat_fu_262_X_read, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            A_read <= grp_MAT_Multiply_load_mat_fu_262_X_read;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_read assign process. --
    B_read_assign_proc : process(grp_MAT_Multiply_load_mat_fu_274_X_read, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            B_read <= grp_MAT_Multiply_load_mat_fu_274_X_read;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= arrayC_q0;

    -- C_write assign process. --
    C_write_assign_proc : process(tmp_12_reg_658, ap_sig_cseq_ST_st21_fsm_20, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = tmp_12_reg_658)) and not(ap_sig_bdd_324))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_s_reg_541, ap_sig_cseq_ST_st17_fsm_16, exitcond1_fu_462_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and ((tmp_s_reg_541 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_462_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_s_reg_541, ap_sig_cseq_ST_st17_fsm_16, exitcond1_fu_462_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and ((tmp_s_reg_541 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_462_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_143 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_163 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_172 assign process. --
    ap_sig_bdd_172_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_172 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_192 assign process. --
    ap_sig_bdd_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_192 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_269 assign process. --
    ap_sig_bdd_269_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_269 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_292 assign process. --
    ap_sig_bdd_292_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_292 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_299 assign process. --
    ap_sig_bdd_299_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_299 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_318 assign process. --
    ap_sig_bdd_318_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_318 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_324 assign process. --
    ap_sig_bdd_324_assign_proc : process(C_full_n, tmp_12_reg_658)
    begin
                ap_sig_bdd_324 <= ((C_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_12_reg_658)));
    end process;


    -- ap_sig_bdd_349 assign process. --
    ap_sig_bdd_349_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_349 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_356 assign process. --
    ap_sig_bdd_356_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_356 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_368 assign process. --
    ap_sig_bdd_368_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_368 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_37 assign process. --
    ap_sig_bdd_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_37 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_376 assign process. --
    ap_sig_bdd_376_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_376 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_389 assign process. --
    ap_sig_bdd_389_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_389 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_397 assign process. --
    ap_sig_bdd_397_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_397 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_97 assign process. --
    ap_sig_bdd_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_97 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_349)
    begin
        if (ap_sig_bdd_349) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_356)
    begin
        if (ap_sig_bdd_356) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_163)
    begin
        if (ap_sig_bdd_163) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_299)
    begin
        if (ap_sig_bdd_299) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_172)
    begin
        if (ap_sig_bdd_172) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_192)
    begin
        if (ap_sig_bdd_192) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_368)
    begin
        if (ap_sig_bdd_368) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_37)
    begin
        if (ap_sig_bdd_37) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_376)
    begin
        if (ap_sig_bdd_376) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_318)
    begin
        if (ap_sig_bdd_318) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_269)
    begin
        if (ap_sig_bdd_269) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_97)
    begin
        if (ap_sig_bdd_97) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_292)
    begin
        if (ap_sig_bdd_292) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_389)
    begin
        if (ap_sig_bdd_389) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_397)
    begin
        if (ap_sig_bdd_397) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_143)
    begin
        if (ap_sig_bdd_143) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayA_address0 assign process. --
    arrayA_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_MAT_Multiply_load_mat_fu_262_arrayX_address0, ap_sig_cseq_ST_st2_fsm_1, tmp_15_fu_421_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            arrayA_address0 <= tmp_15_fu_421_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayA_address0 <= grp_MAT_Multiply_load_mat_fu_262_arrayX_address0;
        else 
            arrayA_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayA_ce0 assign process. --
    arrayA_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st9_fsm_8, grp_MAT_Multiply_load_mat_fu_262_arrayX_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            arrayA_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayA_ce0 <= grp_MAT_Multiply_load_mat_fu_262_arrayX_ce0;
        else 
            arrayA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayA_d0 <= grp_MAT_Multiply_load_mat_fu_262_arrayX_d0;

    -- arrayA_we0 assign process. --
    arrayA_we0_assign_proc : process(grp_MAT_Multiply_load_mat_fu_262_arrayX_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayA_we0 <= grp_MAT_Multiply_load_mat_fu_262_arrayX_we0;
        else 
            arrayA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayB_address0 assign process. --
    arrayB_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_MAT_Multiply_load_mat_fu_274_arrayX_address0, ap_sig_cseq_ST_st2_fsm_1, tmp_16_fu_431_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            arrayB_address0 <= tmp_16_fu_431_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayB_address0 <= grp_MAT_Multiply_load_mat_fu_274_arrayX_address0;
        else 
            arrayB_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayB_ce0 assign process. --
    arrayB_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st9_fsm_8, grp_MAT_Multiply_load_mat_fu_274_arrayX_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            arrayB_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayB_ce0 <= grp_MAT_Multiply_load_mat_fu_274_arrayX_ce0;
        else 
            arrayB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayB_d0 <= grp_MAT_Multiply_load_mat_fu_274_arrayX_d0;

    -- arrayB_we0 assign process. --
    arrayB_we0_assign_proc : process(grp_MAT_Multiply_load_mat_fu_274_arrayX_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayB_we0 <= grp_MAT_Multiply_load_mat_fu_274_arrayX_we0;
        else 
            arrayB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_address0 assign process. --
    arrayC_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, arrayC_addr_reg_576, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st18_fsm_17, tmp_6_fu_369_p1, tmp_13_fu_515_p1, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            arrayC_address0 <= tmp_6_fu_369_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            arrayC_address0 <= tmp_13_fu_515_p1(20 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            arrayC_address0 <= arrayC_addr_reg_576;
        else 
            arrayC_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_ce0 assign process. --
    arrayC_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st21_fsm_20, ap_sig_bdd_324, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not(ap_sig_bdd_324)) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            arrayC_ce0 <= ap_const_logic_1;
        else 
            arrayC_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_d0 assign process. --
    arrayC_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, tmp_19_fu_445_p2, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            arrayC_d0 <= tmp_19_fu_445_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            arrayC_d0 <= ap_const_lv64_0;
        else 
            arrayC_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_we0 assign process. --
    arrayC_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_351_p2, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_351_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            arrayC_we0 <= ap_const_logic_1;
        else 
            arrayC_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_462_p2 <= "1" when (i_1_reg_227 = ap_const_lv10_3E8) else "0";
    exitcond2_fu_392_p2 <= "1" when (k_reg_205 = ap_const_lv10_3E8) else "0";
    exitcond3_fu_351_p2 <= "1" when (j_reg_194 = ap_const_lv10_3E8) else "0";
    exitcond4_fu_326_p2 <= "1" when (i_reg_171 = ap_const_lv10_3E8) else "0";
    exitcond_fu_487_p2 <= "1" when (j_1_reg_250 = ap_const_lv10_3E8) else "0";
    grp_MAT_Multiply_load_mat_fu_262_X_dout <= A_dout;
    grp_MAT_Multiply_load_mat_fu_262_X_empty_n <= A_empty_n;
    grp_MAT_Multiply_load_mat_fu_262_ap_start <= grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg;
    grp_MAT_Multiply_load_mat_fu_262_m <= mC;
    grp_MAT_Multiply_load_mat_fu_262_n <= mB;
    grp_MAT_Multiply_load_mat_fu_274_X_dout <= B_dout;
    grp_MAT_Multiply_load_mat_fu_274_X_empty_n <= B_empty_n;
    grp_MAT_Multiply_load_mat_fu_274_ap_start <= grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg;
    grp_MAT_Multiply_load_mat_fu_274_m <= mB;
    grp_MAT_Multiply_load_mat_fu_274_n <= nC;
    grp_fu_436_ce <= ap_const_logic_1;
    grp_fu_436_p0 <= arrayB_q0;
    grp_fu_436_p1 <= arrayA_q0;
    i_1_cast4_fu_458_p1 <= std_logic_vector(resize(unsigned(i_1_reg_227),32));
    i_2_fu_332_p2 <= std_logic_vector(unsigned(i_reg_171) + unsigned(ap_const_lv10_1));
    i_3_fu_468_p2 <= std_logic_vector(unsigned(i_1_reg_227) + unsigned(ap_const_lv10_1));
    i_cast8_fu_322_p1 <= std_logic_vector(resize(unsigned(i_reg_171),32));
    j_1_cast2_cast_fu_483_p1 <= std_logic_vector(resize(unsigned(j_1_reg_250),20));
    j_1_cast2_fu_479_p1 <= std_logic_vector(resize(unsigned(j_1_reg_250),32));
    j_2_fu_357_p2 <= std_logic_vector(unsigned(j_reg_194) + unsigned(ap_const_lv10_1));
    j_3_fu_493_p2 <= std_logic_vector(unsigned(j_1_reg_250) + unsigned(ap_const_lv10_1));
    j_cast7_cast_fu_347_p1 <= std_logic_vector(resize(unsigned(j_reg_194),20));
    j_cast7_fu_343_p1 <= std_logic_vector(resize(unsigned(j_reg_194),32));
    k_1_fu_398_p2 <= std_logic_vector(unsigned(k_reg_205) + unsigned(ap_const_lv10_1));
    k_cast6_cast_fu_388_p1 <= std_logic_vector(resize(unsigned(k_reg_205),20));
    k_cast6_fu_384_p1 <= std_logic_vector(resize(unsigned(k_reg_205),32));
    next_mul1_fu_316_p2 <= std_logic_vector(unsigned(phi_mul1_reg_182) + unsigned(ap_const_lv20_3E8));
    next_mul2_fu_452_p2 <= std_logic_vector(unsigned(phi_mul2_reg_238) + unsigned(ap_const_lv20_3E8));
    next_mul_fu_404_p2 <= std_logic_vector(unsigned(phi_mul_reg_216) + unsigned(ap_const_lv20_3E8));
    p_addr1_fu_415_p2 <= std_logic_vector(unsigned(k_cast6_cast_fu_388_p1) + unsigned(phi_mul1_reg_182));
    p_addr4_fu_426_p2 <= std_logic_vector(unsigned(j_cast7_cast_reg_563) + unsigned(phi_mul_reg_216));
    p_addr6_fu_509_p2 <= std_logic_vector(unsigned(j_1_cast2_cast_fu_483_p1) + unsigned(phi_mul2_reg_238));
    p_addr_fu_363_p2 <= std_logic_vector(unsigned(j_cast7_cast_fu_347_p1) + unsigned(phi_mul1_reg_182));
    tmp1_fu_304_p2 <= (tmp_7_fu_292_p2 and tmp_9_fu_298_p2);
    tmp_10_fu_379_p2 <= (tmp_2_reg_558 and tmp_5_fu_374_p2);
    tmp_11_fu_499_p2 <= "1" when (unsigned(j_1_cast2_fu_479_p1) < unsigned(nC)) else "0";
    tmp_12_fu_504_p2 <= (tmp_3_reg_645 and tmp_11_fu_499_p2);
    tmp_13_fu_515_p1 <= std_logic_vector(resize(unsigned(p_addr6_fu_509_p2),64));
    tmp_14_fu_410_p2 <= "1" when (unsigned(k_cast6_fu_384_p1) < unsigned(mB)) else "0";
    tmp_15_fu_421_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_415_p2),64));
    tmp_16_fu_431_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_426_p2),64));
        tmp_18_fu_442_p1 <= std_logic_vector(resize(signed(tmp_17_reg_622),64));

    tmp_19_fu_445_p2 <= std_logic_vector(unsigned(arrayC_q0) + unsigned(tmp_18_fu_442_p1));
    tmp_2_fu_338_p2 <= "1" when (unsigned(i_cast8_fu_322_p1) < unsigned(mC)) else "0";
    tmp_3_fu_474_p2 <= "1" when (unsigned(i_1_cast4_fu_458_p1) < unsigned(mC)) else "0";
    tmp_5_fu_374_p2 <= "1" when (unsigned(j_cast7_fu_343_p1) < unsigned(nC)) else "0";
    tmp_6_fu_369_p1 <= std_logic_vector(resize(unsigned(p_addr_fu_363_p2),64));
    tmp_7_fu_292_p2 <= "1" when (mA = mC) else "0";
    tmp_9_fu_298_p2 <= "1" when (nB = nC) else "0";
    tmp_fu_286_p2 <= "1" when (nA = mB) else "0";
    tmp_s_fu_310_p2 <= (tmp1_fu_304_p2 and tmp_fu_286_p2);
end behav;
