// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.690000,HLS_SYN_LAT=2504003003,HLS_SYN_TPT=none,HLS_SYN_MEM=8192,HLS_SYN_DSP=4,HLS_SYN_FF=736,HLS_SYN_LUT=891}" *)

module MAT_Multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_dout,
        A_empty_n,
        A_read,
        B_dout,
        B_empty_n,
        B_read,
        C_din,
        C_full_n,
        C_write,
        mA,
        nA,
        mB,
        nB,
        mC,
        nC
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 21'b1;
parameter    ap_ST_st2_fsm_1 = 21'b10;
parameter    ap_ST_st3_fsm_2 = 21'b100;
parameter    ap_ST_st4_fsm_3 = 21'b1000;
parameter    ap_ST_st5_fsm_4 = 21'b10000;
parameter    ap_ST_st6_fsm_5 = 21'b100000;
parameter    ap_ST_st7_fsm_6 = 21'b1000000;
parameter    ap_ST_st8_fsm_7 = 21'b10000000;
parameter    ap_ST_st9_fsm_8 = 21'b100000000;
parameter    ap_ST_st10_fsm_9 = 21'b1000000000;
parameter    ap_ST_st11_fsm_10 = 21'b10000000000;
parameter    ap_ST_st12_fsm_11 = 21'b100000000000;
parameter    ap_ST_st13_fsm_12 = 21'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 21'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 21'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 21'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 21'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 21'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 21'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 21'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 21'b100000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv20_3E8 = 20'b1111101000;
parameter    ap_const_lv10_3E8 = 10'b1111101000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] A_dout;
input   A_empty_n;
output   A_read;
input  [31:0] B_dout;
input   B_empty_n;
output   B_read;
output  [63:0] C_din;
input   C_full_n;
output   C_write;
input  [31:0] mA;
input  [31:0] nA;
input  [31:0] mB;
input  [31:0] nB;
input  [31:0] mC;
input  [31:0] nC;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_read;
reg B_read;
reg C_write;
(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm = 21'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_37;
wire   [0:0] tmp_s_fu_310_p2;
reg   [0:0] tmp_s_reg_541;
wire   [19:0] next_mul1_fu_316_p2;
reg   [19:0] next_mul1_reg_545;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_80;
wire   [9:0] i_2_fu_332_p2;
reg   [9:0] i_2_reg_553;
wire   [0:0] tmp_2_fu_338_p2;
reg   [0:0] tmp_2_reg_558;
wire   [0:0] exitcond4_fu_326_p2;
wire   [19:0] j_cast7_cast_fu_347_p1;
reg   [19:0] j_cast7_cast_reg_563;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_97;
wire   [9:0] j_2_fu_357_p2;
reg   [9:0] j_2_reg_571;
reg   [19:0] arrayC_addr_reg_576;
wire   [0:0] exitcond3_fu_351_p2;
wire   [0:0] tmp_10_fu_379_p2;
reg   [0:0] tmp_10_reg_581;
wire   [9:0] k_1_fu_398_p2;
reg   [9:0] k_1_reg_588;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_115;
wire   [19:0] next_mul_fu_404_p2;
reg   [19:0] next_mul_reg_593;
wire   [0:0] exitcond2_fu_392_p2;
wire   [0:0] tmp_14_fu_410_p2;
wire   [31:0] arrayA_q0;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_143;
wire   [31:0] arrayB_q0;
wire  signed [31:0] grp_fu_436_p2;
reg  signed [31:0] tmp_17_reg_622;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_154;
wire  signed [63:0] tmp_19_fu_445_p2;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_163;
wire   [19:0] next_mul2_fu_452_p2;
reg   [19:0] next_mul2_reg_632;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_172;
wire   [9:0] i_3_fu_468_p2;
reg   [9:0] i_3_reg_640;
wire   [0:0] tmp_3_fu_474_p2;
reg   [0:0] tmp_3_reg_645;
wire   [0:0] exitcond1_fu_462_p2;
wire   [9:0] j_3_fu_493_p2;
reg   [9:0] j_3_reg_653;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_bdd_192;
wire   [0:0] tmp_12_fu_504_p2;
reg   [0:0] tmp_12_reg_658;
wire   [0:0] exitcond_fu_487_p2;
reg   [19:0] arrayA_address0;
reg    arrayA_ce0;
reg    arrayA_we0;
wire   [31:0] arrayA_d0;
reg   [19:0] arrayB_address0;
reg    arrayB_ce0;
reg    arrayB_we0;
wire   [31:0] arrayB_d0;
reg   [19:0] arrayC_address0;
reg    arrayC_ce0;
reg    arrayC_we0;
reg   [63:0] arrayC_d0;
wire   [63:0] arrayC_q0;
wire    grp_MAT_Multiply_load_mat_fu_262_ap_start;
wire    grp_MAT_Multiply_load_mat_fu_262_ap_done;
wire    grp_MAT_Multiply_load_mat_fu_262_ap_idle;
wire    grp_MAT_Multiply_load_mat_fu_262_ap_ready;
wire   [31:0] grp_MAT_Multiply_load_mat_fu_262_X_dout;
wire    grp_MAT_Multiply_load_mat_fu_262_X_empty_n;
wire    grp_MAT_Multiply_load_mat_fu_262_X_read;
wire   [19:0] grp_MAT_Multiply_load_mat_fu_262_arrayX_address0;
wire    grp_MAT_Multiply_load_mat_fu_262_arrayX_ce0;
wire    grp_MAT_Multiply_load_mat_fu_262_arrayX_we0;
wire   [31:0] grp_MAT_Multiply_load_mat_fu_262_arrayX_d0;
wire   [31:0] grp_MAT_Multiply_load_mat_fu_262_m;
wire   [31:0] grp_MAT_Multiply_load_mat_fu_262_n;
wire    grp_MAT_Multiply_load_mat_fu_274_ap_start;
wire    grp_MAT_Multiply_load_mat_fu_274_ap_done;
wire    grp_MAT_Multiply_load_mat_fu_274_ap_idle;
wire    grp_MAT_Multiply_load_mat_fu_274_ap_ready;
wire   [31:0] grp_MAT_Multiply_load_mat_fu_274_X_dout;
wire    grp_MAT_Multiply_load_mat_fu_274_X_empty_n;
wire    grp_MAT_Multiply_load_mat_fu_274_X_read;
wire   [19:0] grp_MAT_Multiply_load_mat_fu_274_arrayX_address0;
wire    grp_MAT_Multiply_load_mat_fu_274_arrayX_ce0;
wire    grp_MAT_Multiply_load_mat_fu_274_arrayX_we0;
wire   [31:0] grp_MAT_Multiply_load_mat_fu_274_arrayX_d0;
wire   [31:0] grp_MAT_Multiply_load_mat_fu_274_m;
wire   [31:0] grp_MAT_Multiply_load_mat_fu_274_n;
reg   [9:0] i_reg_171;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_269;
reg   [19:0] phi_mul1_reg_182;
reg   [9:0] j_reg_194;
reg   [9:0] k_reg_205;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_292;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_299;
reg   [19:0] phi_mul_reg_216;
reg   [9:0] i_1_reg_227;
reg   [19:0] phi_mul2_reg_238;
reg   [9:0] j_1_reg_250;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_318;
reg    ap_sig_bdd_324;
reg    grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg = 1'b0;
reg    grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg = 1'b0;
wire   [63:0] tmp_6_fu_369_p1;
wire   [63:0] tmp_15_fu_421_p1;
wire   [63:0] tmp_16_fu_431_p1;
wire   [63:0] tmp_13_fu_515_p1;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_349;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_356;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_bdd_368;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_bdd_376;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_389;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_397;
wire   [0:0] tmp_7_fu_292_p2;
wire   [0:0] tmp_9_fu_298_p2;
wire   [0:0] tmp1_fu_304_p2;
wire   [0:0] tmp_fu_286_p2;
wire   [31:0] i_cast8_fu_322_p1;
wire   [19:0] p_addr_fu_363_p2;
wire   [31:0] j_cast7_fu_343_p1;
wire   [0:0] tmp_5_fu_374_p2;
wire   [31:0] k_cast6_fu_384_p1;
wire   [19:0] k_cast6_cast_fu_388_p1;
wire   [19:0] p_addr1_fu_415_p2;
wire   [19:0] p_addr4_fu_426_p2;
wire  signed [31:0] grp_fu_436_p0;
wire  signed [31:0] grp_fu_436_p1;
wire  signed [63:0] tmp_18_fu_442_p1;
wire   [31:0] i_1_cast4_fu_458_p1;
wire   [31:0] j_1_cast2_fu_479_p1;
wire   [0:0] tmp_11_fu_499_p2;
wire   [19:0] j_1_cast2_cast_fu_483_p1;
wire   [19:0] p_addr6_fu_509_p2;
wire    grp_fu_436_ce;
reg   [20:0] ap_NS_fsm;


MAT_Multiply_arrayA #(
    .DataWidth( 32 ),
    .AddressRange( 1000000 ),
    .AddressWidth( 20 ))
arrayA_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( arrayA_address0 ),
    .ce0( arrayA_ce0 ),
    .we0( arrayA_we0 ),
    .d0( arrayA_d0 ),
    .q0( arrayA_q0 )
);

MAT_Multiply_arrayA #(
    .DataWidth( 32 ),
    .AddressRange( 1000000 ),
    .AddressWidth( 20 ))
arrayB_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( arrayB_address0 ),
    .ce0( arrayB_ce0 ),
    .we0( arrayB_we0 ),
    .d0( arrayB_d0 ),
    .q0( arrayB_q0 )
);

MAT_Multiply_arrayC #(
    .DataWidth( 64 ),
    .AddressRange( 1000000 ),
    .AddressWidth( 20 ))
arrayC_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( arrayC_address0 ),
    .ce0( arrayC_ce0 ),
    .we0( arrayC_we0 ),
    .d0( arrayC_d0 ),
    .q0( arrayC_q0 )
);

MAT_Multiply_load_mat grp_MAT_Multiply_load_mat_fu_262(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_MAT_Multiply_load_mat_fu_262_ap_start ),
    .ap_done( grp_MAT_Multiply_load_mat_fu_262_ap_done ),
    .ap_idle( grp_MAT_Multiply_load_mat_fu_262_ap_idle ),
    .ap_ready( grp_MAT_Multiply_load_mat_fu_262_ap_ready ),
    .X_dout( grp_MAT_Multiply_load_mat_fu_262_X_dout ),
    .X_empty_n( grp_MAT_Multiply_load_mat_fu_262_X_empty_n ),
    .X_read( grp_MAT_Multiply_load_mat_fu_262_X_read ),
    .arrayX_address0( grp_MAT_Multiply_load_mat_fu_262_arrayX_address0 ),
    .arrayX_ce0( grp_MAT_Multiply_load_mat_fu_262_arrayX_ce0 ),
    .arrayX_we0( grp_MAT_Multiply_load_mat_fu_262_arrayX_we0 ),
    .arrayX_d0( grp_MAT_Multiply_load_mat_fu_262_arrayX_d0 ),
    .m( grp_MAT_Multiply_load_mat_fu_262_m ),
    .n( grp_MAT_Multiply_load_mat_fu_262_n )
);

MAT_Multiply_load_mat grp_MAT_Multiply_load_mat_fu_274(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_MAT_Multiply_load_mat_fu_274_ap_start ),
    .ap_done( grp_MAT_Multiply_load_mat_fu_274_ap_done ),
    .ap_idle( grp_MAT_Multiply_load_mat_fu_274_ap_idle ),
    .ap_ready( grp_MAT_Multiply_load_mat_fu_274_ap_ready ),
    .X_dout( grp_MAT_Multiply_load_mat_fu_274_X_dout ),
    .X_empty_n( grp_MAT_Multiply_load_mat_fu_274_X_empty_n ),
    .X_read( grp_MAT_Multiply_load_mat_fu_274_X_read ),
    .arrayX_address0( grp_MAT_Multiply_load_mat_fu_274_arrayX_address0 ),
    .arrayX_ce0( grp_MAT_Multiply_load_mat_fu_274_arrayX_ce0 ),
    .arrayX_we0( grp_MAT_Multiply_load_mat_fu_274_arrayX_we0 ),
    .arrayX_d0( grp_MAT_Multiply_load_mat_fu_274_arrayX_d0 ),
    .m( grp_MAT_Multiply_load_mat_fu_274_m ),
    .n( grp_MAT_Multiply_load_mat_fu_274_n )
);

MAT_Multiply_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAT_Multiply_mul_32s_32s_32_6_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_436_p0 ),
    .din1( grp_fu_436_p1 ),
    .ce( grp_fu_436_ce ),
    .dout( grp_fu_436_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_s_fu_310_p2 == ap_const_lv1_0))) begin
            grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_MAT_Multiply_load_mat_fu_262_ap_ready)) begin
            grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_s_fu_310_p2 == ap_const_lv1_0))) begin
            grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_MAT_Multiply_load_mat_fu_274_ap_ready)) begin
            grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond4_fu_326_p2 == ap_const_lv1_0))) begin
        i_1_reg_227 <= ap_const_lv10_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17) & ~(ap_const_lv1_0 == exitcond_fu_487_p2))) begin
        i_1_reg_227 <= i_3_reg_640;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_351_p2))) begin
        i_reg_171 <= i_2_reg_553;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~((ap_const_logic_0 == grp_MAT_Multiply_load_mat_fu_262_ap_done) | (ap_const_logic_0 == grp_MAT_Multiply_load_mat_fu_274_ap_done)))) begin
        i_reg_171 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_bdd_324)) begin
        j_1_reg_250 <= j_3_reg_653;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ~(tmp_s_reg_541 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_462_p2))) begin
        j_1_reg_250 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == exitcond2_fu_392_p2))) begin
        j_reg_194 <= j_2_reg_571;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond4_fu_326_p2 == ap_const_lv1_0))) begin
        j_reg_194 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        k_reg_205 <= k_1_reg_588;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        k_reg_205 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_351_p2))) begin
        phi_mul1_reg_182 <= next_mul1_reg_545;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~((ap_const_logic_0 == grp_MAT_Multiply_load_mat_fu_262_ap_done) | (ap_const_logic_0 == grp_MAT_Multiply_load_mat_fu_274_ap_done)))) begin
        phi_mul1_reg_182 <= ap_const_lv20_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond4_fu_326_p2 == ap_const_lv1_0))) begin
        phi_mul2_reg_238 <= ap_const_lv20_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17) & ~(ap_const_lv1_0 == exitcond_fu_487_p2))) begin
        phi_mul2_reg_238 <= next_mul2_reg_632;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        phi_mul_reg_216 <= next_mul_reg_593;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        phi_mul_reg_216 <= ap_const_lv20_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_351_p2))) begin
        arrayC_addr_reg_576 <= tmp_6_fu_369_p1;
        tmp_10_reg_581 <= tmp_10_fu_379_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_2_reg_553 <= i_2_fu_332_p2;
        next_mul1_reg_545 <= next_mul1_fu_316_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ~(tmp_s_reg_541 == ap_const_lv1_0))) begin
        i_3_reg_640 <= i_3_fu_468_p2;
        next_mul2_reg_632 <= next_mul2_fu_452_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_2_reg_571 <= j_2_fu_357_p2;
        j_cast7_cast_reg_563[9 : 0] <= j_cast7_cast_fu_347_p1[9 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        j_3_reg_653 <= j_3_fu_493_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        k_1_reg_588 <= k_1_fu_398_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == exitcond2_fu_392_p2))) begin
        next_mul_reg_593 <= next_mul_fu_404_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17) & (ap_const_lv1_0 == exitcond_fu_487_p2))) begin
        tmp_12_reg_658 <= tmp_12_fu_504_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        tmp_17_reg_622 <= grp_fu_436_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond4_fu_326_p2 == ap_const_lv1_0))) begin
        tmp_2_reg_558 <= tmp_2_fu_338_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ~(tmp_s_reg_541 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond1_fu_462_p2))) begin
        tmp_3_reg_645 <= tmp_3_fu_474_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_s_reg_541 <= tmp_s_fu_310_p2;
    end
end

/// A_read assign process. ///
always @ (grp_MAT_Multiply_load_mat_fu_262_X_read or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        A_read = grp_MAT_Multiply_load_mat_fu_262_X_read;
    end else begin
        A_read = ap_const_logic_0;
    end
end

/// B_read assign process. ///
always @ (grp_MAT_Multiply_load_mat_fu_274_X_read or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        B_read = grp_MAT_Multiply_load_mat_fu_274_X_read;
    end else begin
        B_read = ap_const_logic_0;
    end
end

/// C_write assign process. ///
always @ (tmp_12_reg_658 or ap_sig_cseq_ST_st21_fsm_20 or ap_sig_bdd_324)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20) & ~(ap_const_lv1_0 == tmp_12_reg_658) & ~ap_sig_bdd_324)) begin
        C_write = ap_const_logic_1;
    end else begin
        C_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (tmp_s_reg_541 or ap_sig_cseq_ST_st17_fsm_16 or exitcond1_fu_462_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ((tmp_s_reg_541 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond1_fu_462_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (tmp_s_reg_541 or ap_sig_cseq_ST_st17_fsm_16 or exitcond1_fu_462_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ((tmp_s_reg_541 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond1_fu_462_p2)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_349)
begin
    if (ap_sig_bdd_349) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_356)
begin
    if (ap_sig_bdd_356) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_154)
begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_163)
begin
    if (ap_sig_bdd_163) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_299)
begin
    if (ap_sig_bdd_299) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_172)
begin
    if (ap_sig_bdd_172) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st18_fsm_17 assign process. ///
always @ (ap_sig_bdd_192)
begin
    if (ap_sig_bdd_192) begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st19_fsm_18 assign process. ///
always @ (ap_sig_bdd_368)
begin
    if (ap_sig_bdd_368) begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_37)
begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st20_fsm_19 assign process. ///
always @ (ap_sig_bdd_376)
begin
    if (ap_sig_bdd_376) begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_318)
begin
    if (ap_sig_bdd_318) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_269)
begin
    if (ap_sig_bdd_269) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_80)
begin
    if (ap_sig_bdd_80) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_97)
begin
    if (ap_sig_bdd_97) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_292)
begin
    if (ap_sig_bdd_292) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_115)
begin
    if (ap_sig_bdd_115) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_389)
begin
    if (ap_sig_bdd_389) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_397)
begin
    if (ap_sig_bdd_397) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_143)
begin
    if (ap_sig_bdd_143) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// arrayA_address0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or grp_MAT_Multiply_load_mat_fu_262_arrayX_address0 or ap_sig_cseq_ST_st2_fsm_1 or tmp_15_fu_421_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        arrayA_address0 = tmp_15_fu_421_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        arrayA_address0 = grp_MAT_Multiply_load_mat_fu_262_arrayX_address0;
    end else begin
        arrayA_address0 = 'bx;
    end
end

/// arrayA_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st9_fsm_8 or grp_MAT_Multiply_load_mat_fu_262_arrayX_ce0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        arrayA_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        arrayA_ce0 = grp_MAT_Multiply_load_mat_fu_262_arrayX_ce0;
    end else begin
        arrayA_ce0 = ap_const_logic_0;
    end
end

/// arrayA_we0 assign process. ///
always @ (grp_MAT_Multiply_load_mat_fu_262_arrayX_we0 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        arrayA_we0 = grp_MAT_Multiply_load_mat_fu_262_arrayX_we0;
    end else begin
        arrayA_we0 = ap_const_logic_0;
    end
end

/// arrayB_address0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or grp_MAT_Multiply_load_mat_fu_274_arrayX_address0 or ap_sig_cseq_ST_st2_fsm_1 or tmp_16_fu_431_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        arrayB_address0 = tmp_16_fu_431_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        arrayB_address0 = grp_MAT_Multiply_load_mat_fu_274_arrayX_address0;
    end else begin
        arrayB_address0 = 'bx;
    end
end

/// arrayB_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st9_fsm_8 or grp_MAT_Multiply_load_mat_fu_274_arrayX_ce0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        arrayB_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        arrayB_ce0 = grp_MAT_Multiply_load_mat_fu_274_arrayX_ce0;
    end else begin
        arrayB_ce0 = ap_const_logic_0;
    end
end

/// arrayB_we0 assign process. ///
always @ (grp_MAT_Multiply_load_mat_fu_274_arrayX_we0 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        arrayB_we0 = grp_MAT_Multiply_load_mat_fu_274_arrayX_we0;
    end else begin
        arrayB_we0 = ap_const_logic_0;
    end
end

/// arrayC_address0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or arrayC_addr_reg_576 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st18_fsm_17 or tmp_6_fu_369_p1 or tmp_13_fu_515_p1 or ap_sig_cseq_ST_st12_fsm_11)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        arrayC_address0 = tmp_6_fu_369_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        arrayC_address0 = tmp_13_fu_515_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11))) begin
        arrayC_address0 = arrayC_addr_reg_576;
    end else begin
        arrayC_address0 = 'bx;
    end
end

/// arrayC_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st18_fsm_17 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st21_fsm_20 or ap_sig_bdd_324 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st19_fsm_18 or ap_sig_cseq_ST_st20_fsm_19)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) | ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_bdd_324) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18) | (ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19))) begin
        arrayC_ce0 = ap_const_logic_1;
    end else begin
        arrayC_ce0 = ap_const_logic_0;
    end
end

/// arrayC_d0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or tmp_19_fu_445_p2 or ap_sig_cseq_ST_st15_fsm_14)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        arrayC_d0 = tmp_19_fu_445_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        arrayC_d0 = ap_const_lv64_0;
    end else begin
        arrayC_d0 = 'bx;
    end
end

/// arrayC_we0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond3_fu_351_p2 or ap_sig_cseq_ST_st15_fsm_14)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_351_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14))) begin
        arrayC_we0 = ap_const_logic_1;
    end else begin
        arrayC_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_s_fu_310_p2 or tmp_s_reg_541 or exitcond4_fu_326_p2 or exitcond3_fu_351_p2 or tmp_10_reg_581 or exitcond2_fu_392_p2 or tmp_14_fu_410_p2 or exitcond1_fu_462_p2 or tmp_12_fu_504_p2 or exitcond_fu_487_p2 or grp_MAT_Multiply_load_mat_fu_262_ap_done or grp_MAT_Multiply_load_mat_fu_274_ap_done or ap_sig_bdd_324)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & (tmp_s_fu_310_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else if ((~(ap_start == ap_const_logic_0) & ~(tmp_s_fu_310_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~((ap_const_logic_0 == grp_MAT_Multiply_load_mat_fu_262_ap_done) | (ap_const_logic_0 == grp_MAT_Multiply_load_mat_fu_274_ap_done))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((exitcond4_fu_326_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_351_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_392_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else if (((ap_const_lv1_0 == exitcond2_fu_392_p2) & ~(ap_const_lv1_0 == tmp_10_reg_581) & ~(ap_const_lv1_0 == tmp_14_fu_410_p2))) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st17_fsm_16 : 
        begin
            if (((tmp_s_reg_541 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond1_fu_462_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        end
        ap_ST_st18_fsm_17 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_487_p2)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else if (((ap_const_lv1_0 == exitcond_fu_487_p2) & (ap_const_lv1_0 == tmp_12_fu_504_p2))) begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end else begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            if (~ap_sig_bdd_324) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_din = arrayC_q0;

/// ap_sig_bdd_115 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_115 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_143 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_143 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_154 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_163 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_163 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_172 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_172 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_192 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_192 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end

/// ap_sig_bdd_269 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_269 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_292 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_292 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_299 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_299 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_318 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_318 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_324 assign process. ///
always @ (C_full_n or tmp_12_reg_658)
begin
    ap_sig_bdd_324 = ((C_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_12_reg_658));
end

/// ap_sig_bdd_349 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_349 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_356 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_356 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_368 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_368 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_37 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_376 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_376 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_13]);
end

/// ap_sig_bdd_389 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_389 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_397 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_397 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_80 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_80 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_97 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_97 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign arrayA_d0 = grp_MAT_Multiply_load_mat_fu_262_arrayX_d0;
assign arrayB_d0 = grp_MAT_Multiply_load_mat_fu_274_arrayX_d0;
assign exitcond1_fu_462_p2 = (i_1_reg_227 == ap_const_lv10_3E8? 1'b1: 1'b0);
assign exitcond2_fu_392_p2 = (k_reg_205 == ap_const_lv10_3E8? 1'b1: 1'b0);
assign exitcond3_fu_351_p2 = (j_reg_194 == ap_const_lv10_3E8? 1'b1: 1'b0);
assign exitcond4_fu_326_p2 = (i_reg_171 == ap_const_lv10_3E8? 1'b1: 1'b0);
assign exitcond_fu_487_p2 = (j_1_reg_250 == ap_const_lv10_3E8? 1'b1: 1'b0);
assign grp_MAT_Multiply_load_mat_fu_262_X_dout = A_dout;
assign grp_MAT_Multiply_load_mat_fu_262_X_empty_n = A_empty_n;
assign grp_MAT_Multiply_load_mat_fu_262_ap_start = grp_MAT_Multiply_load_mat_fu_262_ap_start_ap_start_reg;
assign grp_MAT_Multiply_load_mat_fu_262_m = mC;
assign grp_MAT_Multiply_load_mat_fu_262_n = mB;
assign grp_MAT_Multiply_load_mat_fu_274_X_dout = B_dout;
assign grp_MAT_Multiply_load_mat_fu_274_X_empty_n = B_empty_n;
assign grp_MAT_Multiply_load_mat_fu_274_ap_start = grp_MAT_Multiply_load_mat_fu_274_ap_start_ap_start_reg;
assign grp_MAT_Multiply_load_mat_fu_274_m = mB;
assign grp_MAT_Multiply_load_mat_fu_274_n = nC;
assign grp_fu_436_ce = ap_const_logic_1;
assign grp_fu_436_p0 = arrayB_q0;
assign grp_fu_436_p1 = arrayA_q0;
assign i_1_cast4_fu_458_p1 = i_1_reg_227;
assign i_2_fu_332_p2 = (i_reg_171 + ap_const_lv10_1);
assign i_3_fu_468_p2 = (i_1_reg_227 + ap_const_lv10_1);
assign i_cast8_fu_322_p1 = i_reg_171;
assign j_1_cast2_cast_fu_483_p1 = j_1_reg_250;
assign j_1_cast2_fu_479_p1 = j_1_reg_250;
assign j_2_fu_357_p2 = (j_reg_194 + ap_const_lv10_1);
assign j_3_fu_493_p2 = (j_1_reg_250 + ap_const_lv10_1);
assign j_cast7_cast_fu_347_p1 = j_reg_194;
assign j_cast7_fu_343_p1 = j_reg_194;
assign k_1_fu_398_p2 = (k_reg_205 + ap_const_lv10_1);
assign k_cast6_cast_fu_388_p1 = k_reg_205;
assign k_cast6_fu_384_p1 = k_reg_205;
assign next_mul1_fu_316_p2 = (phi_mul1_reg_182 + ap_const_lv20_3E8);
assign next_mul2_fu_452_p2 = (phi_mul2_reg_238 + ap_const_lv20_3E8);
assign next_mul_fu_404_p2 = (phi_mul_reg_216 + ap_const_lv20_3E8);
assign p_addr1_fu_415_p2 = (k_cast6_cast_fu_388_p1 + phi_mul1_reg_182);
assign p_addr4_fu_426_p2 = (j_cast7_cast_reg_563 + phi_mul_reg_216);
assign p_addr6_fu_509_p2 = (j_1_cast2_cast_fu_483_p1 + phi_mul2_reg_238);
assign p_addr_fu_363_p2 = (j_cast7_cast_fu_347_p1 + phi_mul1_reg_182);
assign tmp1_fu_304_p2 = (tmp_7_fu_292_p2 & tmp_9_fu_298_p2);
assign tmp_10_fu_379_p2 = (tmp_2_reg_558 & tmp_5_fu_374_p2);
assign tmp_11_fu_499_p2 = (j_1_cast2_fu_479_p1 < nC? 1'b1: 1'b0);
assign tmp_12_fu_504_p2 = (tmp_3_reg_645 & tmp_11_fu_499_p2);
assign tmp_13_fu_515_p1 = p_addr6_fu_509_p2;
assign tmp_14_fu_410_p2 = (k_cast6_fu_384_p1 < mB? 1'b1: 1'b0);
assign tmp_15_fu_421_p1 = p_addr1_fu_415_p2;
assign tmp_16_fu_431_p1 = p_addr4_fu_426_p2;
assign tmp_18_fu_442_p1 = tmp_17_reg_622;
assign tmp_19_fu_445_p2 = ($signed(arrayC_q0) + $signed(tmp_18_fu_442_p1));
assign tmp_2_fu_338_p2 = (i_cast8_fu_322_p1 < mC? 1'b1: 1'b0);
assign tmp_3_fu_474_p2 = (i_1_cast4_fu_458_p1 < mC? 1'b1: 1'b0);
assign tmp_5_fu_374_p2 = (j_cast7_fu_343_p1 < nC? 1'b1: 1'b0);
assign tmp_6_fu_369_p1 = p_addr_fu_363_p2;
assign tmp_7_fu_292_p2 = (mA == mC? 1'b1: 1'b0);
assign tmp_9_fu_298_p2 = (nB == nC? 1'b1: 1'b0);
assign tmp_fu_286_p2 = (nA == mB? 1'b1: 1'b0);
assign tmp_s_fu_310_p2 = (tmp1_fu_304_p2 & tmp_fu_286_p2);
always @ (posedge ap_clk)
begin
    j_cast7_cast_reg_563[19:10] <= 10'b0000000000;
end



endmodule //MAT_Multiply

