-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply_load_mat_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    X_empty_n : IN STD_LOGIC;
    X_read : OUT STD_LOGIC;
    arrayX_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    arrayX_ce0 : OUT STD_LOGIC;
    arrayX_q0 : IN STD_LOGIC_VECTOR (31999 downto 0);
    arrayX_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    arrayX_ce1 : OUT STD_LOGIC;
    arrayX_we1 : OUT STD_LOGIC;
    arrayX_d1 : OUT STD_LOGIC_VECTOR (31999 downto 0);
    m : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MAT_Multiply_load_mat_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st9_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv20_F4240 : STD_LOGIC_VECTOR (19 downto 0) := "11110100001001000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal indvar_flatten_reg_94 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_reg_105 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_116 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_flatten_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_62 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal or_cond_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_264_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_81 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_134_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_mid2_fu_146_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_mid2_reg_253 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_fu_160_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_reg_258 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_cond_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_264_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_264_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_264_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_192_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal arrayX_addr_reg_273 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_ppstg_arrayX_addr_reg_273_pp0_it2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_ppstg_arrayX_addr_reg_273_pp0_it3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_ppstg_arrayX_addr_reg_273_pp0_it4 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_phi_fu_109_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond9_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_154_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast3_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast1_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_201_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast2_fu_207_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_201_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_210_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_201_p00 : STD_LOGIC_VECTOR (19 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((exitcond_flatten_fu_128_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_128_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((exitcond_flatten_fu_128_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_105 assign process. --
    i_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_reg_244 = ap_const_lv1_0))) then 
                i_reg_105 <= i_mid2_reg_258;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_105 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_94 assign process. --
    indvar_flatten_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_128_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_94 <= indvar_flatten_next_fu_134_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_94 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    -- j_reg_116 assign process. --
    j_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_128_p2 = ap_const_lv1_0))) then 
                j_reg_116 <= j_1_fu_192_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_116 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then
                ap_reg_ppstg_arrayX_addr_reg_273_pp0_it2 <= arrayX_addr_reg_273;
                ap_reg_ppstg_arrayX_addr_reg_273_pp0_it3 <= ap_reg_ppstg_arrayX_addr_reg_273_pp0_it2;
                ap_reg_ppstg_arrayX_addr_reg_273_pp0_it4 <= ap_reg_ppstg_arrayX_addr_reg_273_pp0_it3;
                ap_reg_ppstg_or_cond_reg_264_pp0_it2 <= ap_reg_ppstg_or_cond_reg_264_pp0_it1;
                ap_reg_ppstg_or_cond_reg_264_pp0_it3 <= ap_reg_ppstg_or_cond_reg_264_pp0_it2;
                ap_reg_ppstg_or_cond_reg_264_pp0_it4 <= ap_reg_ppstg_or_cond_reg_264_pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then
                ap_reg_ppstg_or_cond_reg_264_pp0_it1 <= or_cond_reg_264;
                exitcond_flatten_reg_244 <= exitcond_flatten_fu_128_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((or_cond_reg_264 = ap_const_lv1_0)))) then
                arrayX_addr_reg_273 <= tmp_5_fu_216_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_128_p2 = ap_const_lv1_0))) then
                i_mid2_reg_258 <= i_mid2_fu_160_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_128_p2 = ap_const_lv1_0))) then
                j_mid2_reg_253 <= j_mid2_fu_146_p3;
                or_cond_reg_264 <= or_cond_fu_186_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_128_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_bdd_81, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((exitcond_flatten_fu_128_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((exitcond_flatten_fu_128_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st9_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- X_read assign process. --
    X_read_assign_proc : process(ap_reg_ppstg_or_cond_reg_264_pp0_it4, ap_sig_bdd_81, ap_reg_ppiten_pp0_it5)
    begin
        if ((not((ap_reg_ppstg_or_cond_reg_264_pp0_it4 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
            X_read <= ap_const_logic_1;
        else 
            X_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st9_fsm_2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_62 assign process. --
    ap_sig_bdd_62_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_62 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(X_empty_n, ap_reg_ppstg_or_cond_reg_264_pp0_it4)
    begin
                ap_sig_bdd_81 <= ((X_empty_n = ap_const_logic_0) and not((ap_reg_ppstg_or_cond_reg_264_pp0_it4 = ap_const_lv1_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_62)
    begin
        if (ap_sig_bdd_62) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_2 assign process. --
    ap_sig_cseq_ST_st9_fsm_2_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    arrayX_address0 <= arrayX_addr_reg_273;
    arrayX_address1 <= ap_reg_ppstg_arrayX_addr_reg_273_pp0_it4;

    -- arrayX_ce0 assign process. --
    arrayX_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_81, ap_reg_ppiten_pp0_it5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
            arrayX_ce0 <= ap_const_logic_1;
        else 
            arrayX_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayX_ce1 assign process. --
    arrayX_ce1_assign_proc : process(ap_sig_bdd_81, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
            arrayX_ce1 <= ap_const_logic_1;
        else 
            arrayX_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arrayX_d1 <= (arrayX_q0(31999 downto 32) & X_dout);

    -- arrayX_we1 assign process. --
    arrayX_we1_assign_proc : process(ap_reg_ppstg_or_cond_reg_264_pp0_it4, ap_sig_bdd_81, ap_reg_ppiten_pp0_it5)
    begin
        if (((not((ap_reg_ppstg_or_cond_reg_264_pp0_it4 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_81 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
            arrayX_we1 <= ap_const_logic_1;
        else 
            arrayX_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond9_fu_140_p2 <= "1" when (j_reg_116 = ap_const_lv10_3E8) else "0";
    exitcond_flatten_fu_128_p2 <= "1" when (indvar_flatten_reg_94 = ap_const_lv20_F4240) else "0";
    i_cast3_fu_168_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_160_p3),32));
    i_mid2_fu_160_p3 <= 
        i_s_fu_154_p2 when (exitcond9_fu_140_p2(0) = '1') else 
        i_phi_fu_109_p4;

    -- i_phi_fu_109_p4 assign process. --
    i_phi_fu_109_p4_assign_proc : process(i_reg_105, exitcond_flatten_reg_244, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_mid2_reg_258)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_244 = ap_const_lv1_0))) then 
            i_phi_fu_109_p4 <= i_mid2_reg_258;
        else 
            i_phi_fu_109_p4 <= i_reg_105;
        end if; 
    end process;

    i_s_fu_154_p2 <= std_logic_vector(unsigned(i_phi_fu_109_p4) + unsigned(ap_const_lv10_1));
    indvar_flatten_next_fu_134_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_94) + unsigned(ap_const_lv20_1));
    j_1_fu_192_p2 <= std_logic_vector(unsigned(j_mid2_fu_146_p3) + unsigned(ap_const_lv10_1));
    j_cast1_fu_177_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_146_p3),32));
    j_cast2_fu_207_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_253),20));
    j_mid2_fu_146_p3 <= 
        ap_const_lv10_0 when (exitcond9_fu_140_p2(0) = '1') else 
        j_reg_116;
    or_cond_fu_186_p2 <= (tmp_fu_172_p2 and tmp_3_fu_181_p2);
    tmp_1_fu_201_p0 <= tmp_1_fu_201_p00(10 - 1 downto 0);
    tmp_1_fu_201_p00 <= std_logic_vector(resize(unsigned(i_mid2_reg_258),20));
    tmp_1_fu_201_p2 <= std_logic_vector(resize(unsigned(tmp_1_fu_201_p0) * unsigned(ap_const_lv20_3E8), 20));
    tmp_3_fu_181_p2 <= "1" when (unsigned(j_cast1_fu_177_p1) < unsigned(n)) else "0";
    tmp_4_fu_210_p2 <= std_logic_vector(unsigned(j_cast2_fu_207_p1) + unsigned(tmp_1_fu_201_p2));
    tmp_5_fu_216_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_210_p2),64));
    tmp_fu_172_p2 <= "1" when (unsigned(i_cast3_fu_168_p1) < unsigned(m)) else "0";
end behav;
