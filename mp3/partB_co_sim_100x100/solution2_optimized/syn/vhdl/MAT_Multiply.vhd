-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    mA : IN STD_LOGIC_VECTOR (31 downto 0);
    nA : IN STD_LOGIC_VECTOR (31 downto 0);
    mB : IN STD_LOGIC_VECTOR (31 downto 0);
    nB : IN STD_LOGIC_VECTOR (31 downto 0);
    mC : IN STD_LOGIC_VECTOR (31 downto 0);
    nC : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.990000,HLS_SYN_LAT=2008500006,HLS_SYN_TPT=none,HLS_SYN_MEM=7652,HLS_SYN_DSP=8,HLS_SYN_FF=416686,HLS_SYN_LUT=1185528}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_pp0_stg0_fsm_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_pp0_stg1_fsm_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_pp0_stg2_fsm_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_pp0_stg3_fsm_9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_st18_fsm_10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_pp1_stg0_fsm_11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_st24_fsm_12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_7CFF : STD_LOGIC_VECTOR (14 downto 0) := "111110011111111";
    constant ap_const_lv20_F4240 : STD_LOGIC_VECTOR (19 downto 0) := "11110100001001000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv15_1F : STD_LOGIC_VECTOR (14 downto 0) := "000000000011111";
    constant ap_const_lv32_7CFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111110011111111";
    constant ap_const_lv32000_lc_1 : STD_LOGIC_VECTOR (31999 downto
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_29 : BOOLEAN;
    signal k_reg_230 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten1_reg_241 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_1_reg_252 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_263 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_flatten_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_78 : BOOLEAN;
    signal indvar_flatten_next_fu_373_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal indvar_flatten_next_reg_727 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_mid2_fu_385_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_mid2_reg_732 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_fu_399_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_reg_739 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_100 : BOOLEAN;
    signal arrayC_addr_reg_760 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal arrayA_q0 : STD_LOGIC_VECTOR (31999 downto 0);
    signal arrayA_load_reg_765 : STD_LOGIC_VECTOR (31999 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_118 : BOOLEAN;
    signal arrayB_q0 : STD_LOGIC_VECTOR (31999 downto 0);
    signal arrayB_load_reg_771 : STD_LOGIC_VECTOR (31999 downto 0);
    signal exitcond2_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal k_1_fu_455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_reg_781 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_16_reg_786_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_16_reg_786_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_470_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_reg_790 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_483_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_reg_799 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_34_fu_522_p2 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_34_reg_816 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_36_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal tmp_49_fu_567_p2 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_49_reg_836 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_51_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_197 : BOOLEAN;
    signal grp_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_589_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_fu_596_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal exitcond_flatten1_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal tmp_13_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_13_reg_881_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_246 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal indvar_flatten_next1_fu_607_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_1_mid2_fu_619_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_mid2_reg_870 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_mid2_fu_633_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_mid2_reg_875 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_13_reg_881_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_13_reg_881_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_665_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal arrayA_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal arrayA_ce0 : STD_LOGIC;
    signal arrayA_we0 : STD_LOGIC;
    signal arrayA_d0 : STD_LOGIC_VECTOR (31999 downto 0);
    signal arrayB_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal arrayB_ce0 : STD_LOGIC;
    signal arrayB_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal arrayB_ce1 : STD_LOGIC;
    signal arrayB_we1 : STD_LOGIC;
    signal arrayB_d1 : STD_LOGIC_VECTOR (31999 downto 0);
    signal arrayC_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal arrayC_ce0 : STD_LOGIC;
    signal arrayC_we0 : STD_LOGIC;
    signal arrayC_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayC_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_275_ap_start : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_275_ap_done : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_275_ap_idle : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_275_ap_ready : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_275_X_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_275_X_empty_n : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_275_X_read : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_275_arrayX_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_275_arrayX_ce0 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_275_arrayX_we0 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_fu_275_arrayX_d0 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_275_arrayX_q0 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_275_m : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_275_n : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_1_fu_287_ap_start : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_ap_done : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_ap_idle : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_ap_ready : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_X_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_1_fu_287_X_empty_n : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_X_read : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_arrayX_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_MAT_Multiply_load_mat_1_fu_287_arrayX_ce0 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_arrayX_q0 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_MAT_Multiply_load_mat_1_fu_287_arrayX_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_MAT_Multiply_load_mat_1_fu_287_arrayX_ce1 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_arrayX_we1 : STD_LOGIC;
    signal grp_MAT_Multiply_load_mat_1_fu_287_arrayX_d1 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_MAT_Multiply_load_mat_1_fu_287_m : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_Multiply_load_mat_1_fu_287_n : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_197 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_371 : BOOLEAN;
    signal i_reg_208 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_219 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_phi_fu_234_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_phi_fu_256_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_MAT_Multiply_load_mat_fu_275_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_MAT_Multiply_load_mat_1_fu_287_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_1_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_299_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_299_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_307_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_316_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_393_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast8_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast7_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_690_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal k_cast6_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_492_p4 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_fu_324_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_516_p0 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_32_fu_512_p1 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_fu_516_p2 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_35_fu_528_p2 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_38_fu_537_p4 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_fu_561_p0 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_fu_561_p1 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_47_fu_557_p1 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_fu_561_p2 : STD_LOGIC_VECTOR (31999 downto 0);
    signal tmp_50_fu_573_p2 : STD_LOGIC_VECTOR (31999 downto 0);
    signal grp_fu_582_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_627_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_cast4_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_cast2_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_681_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_681_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_681_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_690_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_690_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_690_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_516_ce : STD_LOGIC;
    signal grp_fu_561_ce : STD_LOGIC;
    signal grp_fu_582_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st24_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_710 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_681_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_681_p20 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_690_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_690_p20 : STD_LOGIC_VECTOR (19 downto 0);

    component MAT_Multiply_load_mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        X_empty_n : IN STD_LOGIC;
        X_read : OUT STD_LOGIC;
        arrayX_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        arrayX_ce0 : OUT STD_LOGIC;
        arrayX_we0 : OUT STD_LOGIC;
        arrayX_d0 : OUT STD_LOGIC_VECTOR (31999 downto 0);
        arrayX_q0 : IN STD_LOGIC_VECTOR (31999 downto 0);
        m : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_load_mat_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        X_empty_n : IN STD_LOGIC;
        X_read : OUT STD_LOGIC;
        arrayX_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        arrayX_ce0 : OUT STD_LOGIC;
        arrayX_q0 : IN STD_LOGIC_VECTOR (31999 downto 0);
        arrayX_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        arrayX_ce1 : OUT STD_LOGIC;
        arrayX_we1 : OUT STD_LOGIC;
        arrayX_d1 : OUT STD_LOGIC_VECTOR (31999 downto 0);
        m : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_lshr_32000ns_15ns_32000_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31999 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31999 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31999 downto 0) );
    end component;


    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_mac_muladd_10ns_11ns_10ns_20_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component MAT_Multiply_arrayA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31999 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31999 downto 0) );
    end component;


    component MAT_Multiply_arrayB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31999 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31999 downto 0) );
    end component;


    component MAT_Multiply_arrayC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    arrayA_U : component MAT_Multiply_arrayA
    generic map (
        DataWidth => 32000,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayA_address0,
        ce0 => arrayA_ce0,
        we0 => arrayA_we0,
        d0 => arrayA_d0,
        q0 => arrayA_q0);

    arrayB_U : component MAT_Multiply_arrayB
    generic map (
        DataWidth => 32000,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayB_address0,
        ce0 => arrayB_ce0,
        q0 => arrayB_q0,
        address1 => arrayB_address1,
        ce1 => arrayB_ce1,
        we1 => arrayB_we1,
        d1 => arrayB_d1);

    arrayC_U : component MAT_Multiply_arrayC
    generic map (
        DataWidth => 64,
        AddressRange => 1000000,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayC_address0,
        ce0 => arrayC_ce0,
        we0 => arrayC_we0,
        d0 => arrayC_d0,
        q0 => arrayC_q0);

    grp_MAT_Multiply_load_mat_fu_275 : component MAT_Multiply_load_mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MAT_Multiply_load_mat_fu_275_ap_start,
        ap_done => grp_MAT_Multiply_load_mat_fu_275_ap_done,
        ap_idle => grp_MAT_Multiply_load_mat_fu_275_ap_idle,
        ap_ready => grp_MAT_Multiply_load_mat_fu_275_ap_ready,
        X_dout => grp_MAT_Multiply_load_mat_fu_275_X_dout,
        X_empty_n => grp_MAT_Multiply_load_mat_fu_275_X_empty_n,
        X_read => grp_MAT_Multiply_load_mat_fu_275_X_read,
        arrayX_address0 => grp_MAT_Multiply_load_mat_fu_275_arrayX_address0,
        arrayX_ce0 => grp_MAT_Multiply_load_mat_fu_275_arrayX_ce0,
        arrayX_we0 => grp_MAT_Multiply_load_mat_fu_275_arrayX_we0,
        arrayX_d0 => grp_MAT_Multiply_load_mat_fu_275_arrayX_d0,
        arrayX_q0 => grp_MAT_Multiply_load_mat_fu_275_arrayX_q0,
        m => grp_MAT_Multiply_load_mat_fu_275_m,
        n => grp_MAT_Multiply_load_mat_fu_275_n);

    grp_MAT_Multiply_load_mat_1_fu_287 : component MAT_Multiply_load_mat_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MAT_Multiply_load_mat_1_fu_287_ap_start,
        ap_done => grp_MAT_Multiply_load_mat_1_fu_287_ap_done,
        ap_idle => grp_MAT_Multiply_load_mat_1_fu_287_ap_idle,
        ap_ready => grp_MAT_Multiply_load_mat_1_fu_287_ap_ready,
        X_dout => grp_MAT_Multiply_load_mat_1_fu_287_X_dout,
        X_empty_n => grp_MAT_Multiply_load_mat_1_fu_287_X_empty_n,
        X_read => grp_MAT_Multiply_load_mat_1_fu_287_X_read,
        arrayX_address0 => grp_MAT_Multiply_load_mat_1_fu_287_arrayX_address0,
        arrayX_ce0 => grp_MAT_Multiply_load_mat_1_fu_287_arrayX_ce0,
        arrayX_q0 => grp_MAT_Multiply_load_mat_1_fu_287_arrayX_q0,
        arrayX_address1 => grp_MAT_Multiply_load_mat_1_fu_287_arrayX_address1,
        arrayX_ce1 => grp_MAT_Multiply_load_mat_1_fu_287_arrayX_ce1,
        arrayX_we1 => grp_MAT_Multiply_load_mat_1_fu_287_arrayX_we1,
        arrayX_d1 => grp_MAT_Multiply_load_mat_1_fu_287_arrayX_d1,
        m => grp_MAT_Multiply_load_mat_1_fu_287_m,
        n => grp_MAT_Multiply_load_mat_1_fu_287_n);

    MAT_Multiply_lshr_32000ns_15ns_32000_2_U9 : component MAT_Multiply_lshr_32000ns_15ns_32000_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 32000,
        din1_WIDTH => 15,
        dout_WIDTH => 32000)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_516_p0,
        din1 => grp_fu_516_p1,
        ce => grp_fu_516_ce,
        dout => grp_fu_516_p2);

    MAT_Multiply_lshr_32000ns_15ns_32000_2_U10 : component MAT_Multiply_lshr_32000ns_15ns_32000_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 32000,
        din1_WIDTH => 15,
        dout_WIDTH => 32000)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_561_p0,
        din1 => grp_fu_561_p1,
        ce => grp_fu_561_ce,
        dout => grp_fu_561_p2);

    MAT_Multiply_mul_32s_32s_32_6_U11 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_582_p0,
        din1 => grp_fu_582_p1,
        ce => grp_fu_582_ce,
        dout => grp_fu_582_p2);

    MAT_Multiply_mac_muladd_10ns_11ns_10ns_20_1_U12 : component MAT_Multiply_mac_muladd_10ns_11ns_10ns_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_681_p0,
        din1 => grp_fu_681_p1,
        din2 => grp_fu_681_p2,
        dout => grp_fu_681_p3);

    MAT_Multiply_mac_muladd_10ns_11ns_10ns_20_1_U13 : component MAT_Multiply_mac_muladd_10ns_11ns_10ns_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_690_p0,
        din1 => grp_fu_690_p1,
        din2 => grp_fu_690_p2,
        dout => grp_fu_690_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_449_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond2_reg_777) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_9))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_9) and not((ap_const_lv1_0 = exitcond2_reg_777))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_9)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and not((ap_const_lv1_0 = exitcond_flatten1_fu_601_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_flatten_fu_367_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_601_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_flatten_fu_367_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and not((ap_const_lv1_0 = exitcond_flatten1_fu_601_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) then 
                    ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_flatten_fu_367_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_MAT_Multiply_load_mat_1_fu_287_ap_start_ap_start_reg assign process. --
    grp_MAT_Multiply_load_mat_1_fu_287_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MAT_Multiply_load_mat_1_fu_287_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_s_fu_361_p2)))) then 
                    grp_MAT_Multiply_load_mat_1_fu_287_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_MAT_Multiply_load_mat_1_fu_287_ap_ready)) then 
                    grp_MAT_Multiply_load_mat_1_fu_287_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_MAT_Multiply_load_mat_fu_275_ap_start_ap_start_reg assign process. --
    grp_MAT_Multiply_load_mat_fu_275_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MAT_Multiply_load_mat_fu_275_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_s_fu_361_p2)))) then 
                    grp_MAT_Multiply_load_mat_fu_275_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_MAT_Multiply_load_mat_fu_275_ap_ready)) then 
                    grp_MAT_Multiply_load_mat_fu_275_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_252 assign process. --
    i_1_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_flatten_fu_367_p2 = ap_const_lv1_0)))) then 
                i_1_reg_252 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and (ap_const_lv1_0 = exitcond_flatten1_reg_861))) then 
                i_1_reg_252 <= i_1_mid2_reg_875;
            end if; 
        end if;
    end process;

    -- i_reg_208 assign process. --
    i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_10)) then 
                i_reg_208 <= i_mid2_reg_739;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_275_ap_done) or (ap_const_logic_0 = grp_MAT_Multiply_load_mat_1_fu_287_ap_done))))) then 
                i_reg_208 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten1_reg_241 assign process. --
    indvar_flatten1_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_flatten_fu_367_p2 = ap_const_lv1_0)))) then 
                indvar_flatten1_reg_241 <= ap_const_lv20_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_601_p2))) then 
                indvar_flatten1_reg_241 <= indvar_flatten_next1_fu_607_p2;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_197 assign process. --
    indvar_flatten_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_10)) then 
                indvar_flatten_reg_197 <= indvar_flatten_next_reg_727;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_275_ap_done) or (ap_const_logic_0 = grp_MAT_Multiply_load_mat_1_fu_287_ap_done))))) then 
                indvar_flatten_reg_197 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_263 assign process. --
    j_1_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_flatten_fu_367_p2 = ap_const_lv1_0)))) then 
                j_1_reg_263 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_601_p2))) then 
                j_1_reg_263 <= j_3_fu_665_p2;
            end if; 
        end if;
    end process;

    -- j_reg_219 assign process. --
    j_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_10)) then 
                j_reg_219 <= j_2_fu_596_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_275_ap_done) or (ap_const_logic_0 = grp_MAT_Multiply_load_mat_1_fu_287_ap_done))))) then 
                j_reg_219 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- k_reg_230 assign process. --
    k_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond2_reg_777))) then 
                k_reg_230 <= k_1_reg_781;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                k_reg_230 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))))) then
                ap_reg_ppstg_tmp_13_reg_881_pp1_it1 <= tmp_13_reg_881;
                exitcond_flatten1_reg_861 <= exitcond_flatten1_fu_601_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) then
                ap_reg_ppstg_tmp_13_reg_881_pp1_it2 <= ap_reg_ppstg_tmp_13_reg_881_pp1_it1;
                ap_reg_ppstg_tmp_13_reg_881_pp1_it3 <= ap_reg_ppstg_tmp_13_reg_881_pp1_it2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then
                ap_reg_ppstg_tmp_16_reg_786_pp0_it1 <= tmp_16_reg_786;
                ap_reg_ppstg_tmp_16_reg_786_pp0_it2 <= ap_reg_ppstg_tmp_16_reg_786_pp0_it1;
                exitcond2_reg_777 <= exitcond2_fu_449_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                arrayA_load_reg_765 <= arrayA_q0;
                arrayB_load_reg_771 <= arrayB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                arrayC_addr_reg_760 <= tmp_8_fu_445_p1(20 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_601_p2))) then
                i_1_mid2_reg_875 <= i_1_mid2_fu_633_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_flatten_fu_367_p2 = ap_const_lv1_0))) then
                i_mid2_reg_739 <= i_mid2_fu_399_p3;
                j_mid2_reg_732 <= j_mid2_fu_385_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                indvar_flatten_next_reg_727 <= indvar_flatten_next_fu_373_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and (ap_const_lv1_0 = exitcond_flatten1_fu_601_p2))) then
                j_1_mid2_reg_870 <= j_1_mid2_fu_619_p3;
                tmp_13_reg_881 <= tmp_13_fu_659_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                k_1_reg_781 <= k_1_fu_455_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_10_reg_756 <= tmp_10_fu_433_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_lv1_0 = exitcond2_fu_449_p2) and not((ap_const_lv1_0 = tmp_10_reg_756)))) then
                tmp_16_reg_786 <= tmp_16_fu_465_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_lv1_0 = exitcond2_fu_449_p2) and not((ap_const_lv1_0 = tmp_10_reg_756)) and not((ap_const_lv1_0 = tmp_16_fu_465_p2)))) then
                    tmp_17_reg_790(14 downto 5) <= tmp_17_fu_470_p3(14 downto 5);
                    tmp_18_reg_799(14 downto 5) <= tmp_18_fu_483_p2(14 downto 5);
                tmp_34_reg_816 <= tmp_34_fu_522_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_const_lv1_0 = tmp_10_reg_756)) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_16_reg_786_pp0_it1)))) then
                tmp_19_reg_846 <= grp_fu_582_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_10_reg_756)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7) and (ap_const_lv1_0 = exitcond2_reg_777) and not((ap_const_lv1_0 = tmp_16_reg_786)))) then
                tmp_36_reg_821 <= tmp_36_fu_533_p1;
                tmp_49_reg_836 <= tmp_49_fu_567_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_10_reg_756)) and (ap_const_lv1_0 = exitcond2_reg_777) and not((ap_const_lv1_0 = tmp_16_reg_786)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_8))) then
                tmp_51_reg_841 <= tmp_51_fu_578_p1;
            end if;
        end if;
    end process;
    tmp_17_reg_790(4 downto 0) <= "00000";
    tmp_18_reg_799(4 downto 0) <= "11111";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_367_p2, exitcond2_fu_449_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg2_fsm_8, exitcond_flatten1_fu_601_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it3, ap_sig_bdd_246, ap_reg_ppiten_pp1_it4, grp_MAT_Multiply_load_mat_fu_275_ap_done, grp_MAT_Multiply_load_mat_1_fu_287_ap_done, tmp_s_fu_361_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_s_fu_361_p2))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_12;
                elsif ((not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_s_fu_361_p2)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not(((ap_const_logic_0 = grp_MAT_Multiply_load_mat_fu_275_ap_done) or (ap_const_logic_0 = grp_MAT_Multiply_load_mat_1_fu_287_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond_flatten_fu_367_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
            when ap_ST_pp0_stg0_fsm_6 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond2_fu_449_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_10;
                end if;
            when ap_ST_pp0_stg1_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_8;
            when ap_ST_pp0_stg2_fsm_8 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_8) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_10;
                end if;
            when ap_ST_pp0_stg3_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
            when ap_ST_st18_fsm_10 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_pp1_stg0_fsm_11 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it3)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and not((ap_const_lv1_0 = exitcond_flatten1_fu_601_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_11;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it3))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) and not((ap_const_lv1_0 = exitcond_flatten1_fu_601_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_11;
                end if;
            when ap_ST_st24_fsm_12 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    -- A_read assign process. --
    A_read_assign_proc : process(grp_MAT_Multiply_load_mat_fu_275_X_read, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            A_read <= grp_MAT_Multiply_load_mat_fu_275_X_read;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_read assign process. --
    B_read_assign_proc : process(grp_MAT_Multiply_load_mat_1_fu_287_X_read, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            B_read <= grp_MAT_Multiply_load_mat_1_fu_287_X_read;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= arrayC_q0;

    -- C_write assign process. --
    C_write_assign_proc : process(ap_reg_ppstg_tmp_13_reg_881_pp1_it3, ap_sig_bdd_246, ap_reg_ppiten_pp1_it4)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_13_reg_881_pp1_it3)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4))))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st24_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st24_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_100 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_109 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_118 assign process. --
    ap_sig_bdd_118_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_118 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_197 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_246 assign process. --
    ap_sig_bdd_246_assign_proc : process(C_full_n, ap_reg_ppstg_tmp_13_reg_881_pp1_it3)
    begin
                ap_sig_bdd_246 <= ((C_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_13_reg_881_pp1_it3)));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_29 assign process. --
    ap_sig_bdd_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_371 assign process. --
    ap_sig_bdd_371_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_371 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_710 assign process. --
    ap_sig_bdd_710_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_710 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_78 assign process. --
    ap_sig_bdd_78_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_78 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_6_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_7_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_8_assign_proc : process(ap_sig_bdd_197)
    begin
        if (ap_sig_bdd_197) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_9 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_9_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_11 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_11_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_10 assign process. --
    ap_sig_cseq_ST_st18_fsm_10_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st18_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_29)
    begin
        if (ap_sig_bdd_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_12 assign process. --
    ap_sig_cseq_ST_st24_fsm_12_assign_proc : process(ap_sig_bdd_710)
    begin
        if (ap_sig_bdd_710) then 
            ap_sig_cseq_ST_st24_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_371)
    begin
        if (ap_sig_bdd_371) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_78)
    begin
        if (ap_sig_bdd_78) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_100)
    begin
        if (ap_sig_bdd_100) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_109)
    begin
        if (ap_sig_bdd_109) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_118)
    begin
        if (ap_sig_bdd_118) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayA_address0 assign process. --
    arrayA_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_MAT_Multiply_load_mat_fu_275_arrayX_address0, ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_407_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            arrayA_address0 <= tmp_1_fu_407_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayA_address0 <= grp_MAT_Multiply_load_mat_fu_275_arrayX_address0;
        else 
            arrayA_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- arrayA_ce0 assign process. --
    arrayA_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, grp_MAT_Multiply_load_mat_fu_275_arrayX_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            arrayA_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayA_ce0 <= grp_MAT_Multiply_load_mat_fu_275_arrayX_ce0;
        else 
            arrayA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arrayA_d0 <= grp_MAT_Multiply_load_mat_fu_275_arrayX_d0;

    -- arrayA_we0 assign process. --
    arrayA_we0_assign_proc : process(grp_MAT_Multiply_load_mat_fu_275_arrayX_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayA_we0 <= grp_MAT_Multiply_load_mat_fu_275_arrayX_we0;
        else 
            arrayA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayB_address0 assign process. --
    arrayB_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_MAT_Multiply_load_mat_1_fu_287_arrayX_address0, ap_sig_cseq_ST_st2_fsm_1, tmp_6_fu_412_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            arrayB_address0 <= tmp_6_fu_412_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayB_address0 <= grp_MAT_Multiply_load_mat_1_fu_287_arrayX_address0;
        else 
            arrayB_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    arrayB_address1 <= grp_MAT_Multiply_load_mat_1_fu_287_arrayX_address1;

    -- arrayB_ce0 assign process. --
    arrayB_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, grp_MAT_Multiply_load_mat_1_fu_287_arrayX_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            arrayB_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayB_ce0 <= grp_MAT_Multiply_load_mat_1_fu_287_arrayX_ce0;
        else 
            arrayB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayB_ce1 assign process. --
    arrayB_ce1_assign_proc : process(grp_MAT_Multiply_load_mat_1_fu_287_arrayX_ce1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayB_ce1 <= grp_MAT_Multiply_load_mat_1_fu_287_arrayX_ce1;
        else 
            arrayB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arrayB_d1 <= grp_MAT_Multiply_load_mat_1_fu_287_arrayX_d1;

    -- arrayB_we1 assign process. --
    arrayB_we1_assign_proc : process(grp_MAT_Multiply_load_mat_1_fu_287_arrayX_we1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            arrayB_we1 <= grp_MAT_Multiply_load_mat_1_fu_287_arrayX_we1;
        else 
            arrayB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_address0 assign process. --
    arrayC_address0_assign_proc : process(arrayC_addr_reg_760, ap_sig_cseq_ST_st5_fsm_4, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_7, ap_sig_cseq_ST_pp0_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg0_fsm_11, ap_reg_ppiten_pp1_it1, tmp_8_fu_445_p1, tmp_14_fu_677_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            arrayC_address0 <= tmp_8_fu_445_p1(20 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            arrayC_address0 <= tmp_14_fu_677_p1(20 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)))) then 
            arrayC_address0 <= arrayC_addr_reg_760;
        else 
            arrayC_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_ce0 assign process. --
    arrayC_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_7, ap_sig_cseq_ST_pp0_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg0_fsm_11, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp1_it3, ap_sig_bdd_246, ap_reg_ppiten_pp1_it4, ap_sig_cseq_ST_pp0_stg3_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_9)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it3) and not((ap_sig_bdd_246 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_8)))) then 
            arrayC_ce0 <= ap_const_logic_1;
        else 
            arrayC_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- arrayC_d0 assign process. --
    arrayC_d0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_7, tmp_21_fu_589_p2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7))) then 
            arrayC_d0 <= tmp_21_fu_589_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            arrayC_d0 <= ap_const_lv64_0;
        else 
            arrayC_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- arrayC_we0 assign process. --
    arrayC_we0_assign_proc : process(tmp_10_reg_756, ap_sig_cseq_ST_st5_fsm_4, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_tmp_16_reg_786_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_lv1_0 = tmp_10_reg_756)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_16_reg_786_pp0_it2))))) then 
            arrayC_we0 <= ap_const_logic_1;
        else 
            arrayC_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_613_p2 <= "1" when (j_1_reg_263 = ap_const_lv10_3E8) else "0";
    exitcond2_fu_449_p2 <= "1" when (k_phi_fu_234_p4 = ap_const_lv10_3E8) else "0";
    exitcond_flatten1_fu_601_p2 <= "1" when (indvar_flatten1_reg_241 = ap_const_lv20_F4240) else "0";
    exitcond_flatten_fu_367_p2 <= "1" when (indvar_flatten_reg_197 = ap_const_lv20_F4240) else "0";
    exitcond_fu_379_p2 <= "1" when (j_reg_219 = ap_const_lv10_3E8) else "0";
    grp_MAT_Multiply_load_mat_1_fu_287_X_dout <= B_dout;
    grp_MAT_Multiply_load_mat_1_fu_287_X_empty_n <= B_empty_n;
    grp_MAT_Multiply_load_mat_1_fu_287_ap_start <= grp_MAT_Multiply_load_mat_1_fu_287_ap_start_ap_start_reg;
    grp_MAT_Multiply_load_mat_1_fu_287_arrayX_q0 <= arrayB_q0;
    grp_MAT_Multiply_load_mat_1_fu_287_m <= mB;
    grp_MAT_Multiply_load_mat_1_fu_287_n <= nC;
    grp_MAT_Multiply_load_mat_fu_275_X_dout <= A_dout;
    grp_MAT_Multiply_load_mat_fu_275_X_empty_n <= A_empty_n;
    grp_MAT_Multiply_load_mat_fu_275_ap_start <= grp_MAT_Multiply_load_mat_fu_275_ap_start_ap_start_reg;
    grp_MAT_Multiply_load_mat_fu_275_arrayX_q0 <= arrayA_q0;
    grp_MAT_Multiply_load_mat_fu_275_m <= mC;
    grp_MAT_Multiply_load_mat_fu_275_n <= mB;

    -- grp_fu_299_p0 assign process. --
    grp_fu_299_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_17_fu_470_p3, tmp_17_reg_790, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) then 
                grp_fu_299_p0 <= tmp_17_reg_790;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then 
                grp_fu_299_p0 <= tmp_17_fu_470_p3;
            else 
                grp_fu_299_p0 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_299_p0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_299_p1 assign process. --
    grp_fu_299_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_18_fu_483_p2, tmp_18_reg_799, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) then 
                grp_fu_299_p1 <= tmp_18_reg_799;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then 
                grp_fu_299_p1 <= tmp_18_fu_483_p2;
            else 
                grp_fu_299_p1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_299_p1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_299_p2 <= "1" when (unsigned(grp_fu_299_p0) > unsigned(grp_fu_299_p1)) else "0";

    -- grp_fu_303_p0 assign process. --
    grp_fu_303_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_17_fu_470_p3, tmp_17_reg_790, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) then 
                grp_fu_303_p0 <= tmp_17_reg_790;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then 
                grp_fu_303_p0 <= tmp_17_fu_470_p3;
            else 
                grp_fu_303_p0 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_303_p0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_303_p1 assign process. --
    grp_fu_303_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_18_fu_483_p2, tmp_18_reg_799, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) then 
                grp_fu_303_p1 <= tmp_18_reg_799;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then 
                grp_fu_303_p1 <= tmp_18_fu_483_p2;
            else 
                grp_fu_303_p1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_303_p1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_303_p2 <= std_logic_vector(unsigned(grp_fu_303_p0) - unsigned(grp_fu_303_p1));

    -- grp_fu_307_p1 assign process. --
    grp_fu_307_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_17_fu_470_p3, tmp_17_reg_790, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) then 
                grp_fu_307_p1 <= tmp_17_reg_790;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then 
                grp_fu_307_p1 <= tmp_17_fu_470_p3;
            else 
                grp_fu_307_p1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_307_p1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_307_p2 <= std_logic_vector(signed(ap_const_lv15_7CFF) - signed(grp_fu_307_p1));

    -- grp_fu_312_p0 assign process. --
    grp_fu_312_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_18_fu_483_p2, tmp_18_reg_799, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) then 
                grp_fu_312_p0 <= tmp_18_reg_799;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then 
                grp_fu_312_p0 <= tmp_18_fu_483_p2;
            else 
                grp_fu_312_p0 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_312_p0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_312_p1 assign process. --
    grp_fu_312_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_17_fu_470_p3, tmp_17_reg_790, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) then 
                grp_fu_312_p1 <= tmp_17_reg_790;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then 
                grp_fu_312_p1 <= tmp_17_fu_470_p3;
            else 
                grp_fu_312_p1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_312_p1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_312_p2 <= std_logic_vector(unsigned(grp_fu_312_p0) - unsigned(grp_fu_312_p1));
    grp_fu_316_p3 <= 
        grp_fu_303_p2 when (grp_fu_299_p2(0) = '1') else 
        grp_fu_312_p2;

    -- grp_fu_324_p2 assign process. --
    grp_fu_324_p2_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_17_fu_470_p3, tmp_17_reg_790, ap_sig_cseq_ST_pp0_stg1_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_7)) then 
                grp_fu_324_p2 <= tmp_17_reg_790;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then 
                grp_fu_324_p2 <= tmp_17_fu_470_p3;
            else 
                grp_fu_324_p2 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_324_p2 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_324_p3 <= 
        grp_fu_307_p2 when (grp_fu_299_p2(0) = '1') else 
        grp_fu_324_p2;
    grp_fu_331_p2 <= std_logic_vector(signed(ap_const_lv15_7CFF) - signed(grp_fu_316_p3));
    grp_fu_516_ce <= ap_const_logic_1;
    grp_fu_516_p0 <= 
        tmp_23_fu_492_p4 when (grp_fu_299_p2(0) = '1') else 
        arrayA_load_reg_765;
    grp_fu_516_p1 <= std_logic_vector(resize(unsigned(grp_fu_324_p3),32000));
    grp_fu_561_ce <= ap_const_logic_1;
    grp_fu_561_p0 <= 
        tmp_38_fu_537_p4 when (grp_fu_299_p2(0) = '1') else 
        arrayB_load_reg_771;
    grp_fu_561_p1 <= std_logic_vector(resize(unsigned(grp_fu_324_p3),32000));
    grp_fu_582_ce <= ap_const_logic_1;
    grp_fu_582_p0 <= tmp_51_reg_841;
    grp_fu_582_p1 <= tmp_36_reg_821;
    grp_fu_681_p0 <= grp_fu_681_p00(10 - 1 downto 0);
    grp_fu_681_p00 <= std_logic_vector(resize(unsigned(i_1_mid2_reg_875),20));
    grp_fu_681_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    grp_fu_681_p2 <= grp_fu_681_p20(10 - 1 downto 0);
    grp_fu_681_p20 <= std_logic_vector(resize(unsigned(j_1_mid2_reg_870),20));
    grp_fu_690_p0 <= grp_fu_690_p00(10 - 1 downto 0);
    grp_fu_690_p00 <= std_logic_vector(resize(unsigned(i_mid2_reg_739),20));
    grp_fu_690_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    grp_fu_690_p2 <= grp_fu_690_p20(10 - 1 downto 0);
    grp_fu_690_p20 <= std_logic_vector(resize(unsigned(j_mid2_reg_732),20));
    i_1_cast4_fu_641_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_fu_633_p3),32));
    i_1_mid2_fu_633_p3 <= 
        i_2_fu_627_p2 when (exitcond1_fu_613_p2(0) = '1') else 
        i_1_phi_fu_256_p4;

    -- i_1_phi_fu_256_p4 assign process. --
    i_1_phi_fu_256_p4_assign_proc : process(i_1_reg_252, exitcond_flatten1_reg_861, ap_sig_cseq_ST_pp1_stg0_fsm_11, ap_reg_ppiten_pp1_it1, i_1_mid2_reg_875)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten1_reg_861))) then 
            i_1_phi_fu_256_p4 <= i_1_mid2_reg_875;
        else 
            i_1_phi_fu_256_p4 <= i_1_reg_252;
        end if; 
    end process;

    i_2_fu_627_p2 <= std_logic_vector(unsigned(i_1_phi_fu_256_p4) + unsigned(ap_const_lv10_1));
    i_cast8_fu_417_p1 <= std_logic_vector(resize(unsigned(i_mid2_reg_739),32));
    i_mid2_fu_399_p3 <= 
        i_s_fu_393_p2 when (exitcond_fu_379_p2(0) = '1') else 
        i_reg_208;
    i_s_fu_393_p2 <= std_logic_vector(unsigned(i_reg_208) + unsigned(ap_const_lv10_1));
    indvar_flatten_next1_fu_607_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_241) + unsigned(ap_const_lv20_1));
    indvar_flatten_next_fu_373_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_197) + unsigned(ap_const_lv20_1));
    j_1_cast2_fu_650_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_fu_619_p3),32));
    j_1_mid2_fu_619_p3 <= 
        ap_const_lv10_0 when (exitcond1_fu_613_p2(0) = '1') else 
        j_1_reg_263;
    j_2_fu_596_p2 <= std_logic_vector(unsigned(j_mid2_reg_732) + unsigned(ap_const_lv10_1));
    j_3_fu_665_p2 <= std_logic_vector(unsigned(j_1_mid2_fu_619_p3) + unsigned(ap_const_lv10_1));
    j_cast7_fu_425_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_732),32));
    j_mid2_fu_385_p3 <= 
        ap_const_lv10_0 when (exitcond_fu_379_p2(0) = '1') else 
        j_reg_219;
    k_1_fu_455_p2 <= std_logic_vector(unsigned(k_phi_fu_234_p4) + unsigned(ap_const_lv10_1));
    k_cast6_fu_461_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_234_p4),32));

    -- k_phi_fu_234_p4 assign process. --
    k_phi_fu_234_p4_assign_proc : process(k_reg_230, exitcond2_reg_777, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1, k_1_reg_781)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond2_reg_777))) then 
            k_phi_fu_234_p4 <= k_1_reg_781;
        else 
            k_phi_fu_234_p4 <= k_reg_230;
        end if; 
    end process;

    tmp1_fu_355_p2 <= (tmp_7_fu_343_p2 and tmp_9_fu_349_p2);
    tmp_10_fu_433_p2 <= (tmp_2_fu_420_p2 and tmp_5_fu_428_p2);
    tmp_12_fu_654_p2 <= "1" when (unsigned(j_1_cast2_fu_650_p1) < unsigned(nC)) else "0";
    tmp_13_fu_659_p2 <= (tmp_3_fu_645_p2 and tmp_12_fu_654_p2);
    tmp_14_fu_677_p1 <= std_logic_vector(resize(unsigned(grp_fu_681_p3),64));
    tmp_16_fu_465_p2 <= "1" when (unsigned(k_cast6_fu_461_p1) < unsigned(mB)) else "0";
    tmp_17_fu_470_p3 <= (k_phi_fu_234_p4 & ap_const_lv5_0);
    tmp_18_fu_483_p2 <= (tmp_17_fu_470_p3 or ap_const_lv15_1F);
    tmp_1_fu_407_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_399_p3),64));
        tmp_20_fu_586_p1 <= std_logic_vector(resize(signed(tmp_19_reg_846),64));

    tmp_21_fu_589_p2 <= std_logic_vector(unsigned(arrayC_q0) + unsigned(tmp_20_fu_586_p1));
    
    tmp_23_fu_492_p4_proc : process(arrayA_load_reg_765)
    variable vlo_cpy : STD_LOGIC_VECTOR(32000+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32000+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32000 - 1 downto 0);
    variable tmp_23_fu_492_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32000 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32000 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32000 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(15 - 1 downto 0) := ap_const_lv32_7CFF(15 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(15 - 1 downto 0) := ap_const_lv32_0(15 - 1 downto 0);
        v0_cpy := arrayA_load_reg_765;
        if (vlo_cpy(15 - 1 downto 0) > vhi_cpy(15 - 1 downto 0)) then
            vhi_cpy(15-1 downto 0) := std_logic_vector(32000-1-unsigned(ap_const_lv32_0(15-1 downto 0)));
            vlo_cpy(15-1 downto 0) := std_logic_vector(32000-1-unsigned(ap_const_lv32_7CFF(15-1 downto 0)));
            for tmp_23_fu_492_p4_i in 0 to 32000-1 loop
                v0_cpy(tmp_23_fu_492_p4_i) := arrayA_load_reg_765(32000-1-tmp_23_fu_492_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(15-1 downto 0)))));

        section := (others=>'0');
        section(15-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(15-1 downto 0)) - unsigned(vlo_cpy(15-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32000-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_23_fu_492_p4 <= resvalue(32000-1 downto 0);
    end process;

    tmp_2_fu_420_p2 <= "1" when (unsigned(i_cast8_fu_417_p1) < unsigned(mC)) else "0";
    tmp_32_fu_512_p1 <= std_logic_vector(resize(unsigned(grp_fu_331_p2),32000));
    tmp_34_fu_522_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32000_lc_1),to_integer(unsigned('0' & tmp_32_fu_512_p1(31-1 downto 0)))));
    tmp_35_fu_528_p2 <= (grp_fu_516_p2 and tmp_34_reg_816);
    tmp_36_fu_533_p1 <= tmp_35_fu_528_p2(32 - 1 downto 0);
    
    tmp_38_fu_537_p4_proc : process(arrayB_load_reg_771)
    variable vlo_cpy : STD_LOGIC_VECTOR(32000+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32000+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32000 - 1 downto 0);
    variable tmp_38_fu_537_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32000 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32000 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32000 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(15 - 1 downto 0) := ap_const_lv32_7CFF(15 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(15 - 1 downto 0) := ap_const_lv32_0(15 - 1 downto 0);
        v0_cpy := arrayB_load_reg_771;
        if (vlo_cpy(15 - 1 downto 0) > vhi_cpy(15 - 1 downto 0)) then
            vhi_cpy(15-1 downto 0) := std_logic_vector(32000-1-unsigned(ap_const_lv32_0(15-1 downto 0)));
            vlo_cpy(15-1 downto 0) := std_logic_vector(32000-1-unsigned(ap_const_lv32_7CFF(15-1 downto 0)));
            for tmp_38_fu_537_p4_i in 0 to 32000-1 loop
                v0_cpy(tmp_38_fu_537_p4_i) := arrayB_load_reg_771(32000-1-tmp_38_fu_537_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(15-1 downto 0)))));

        section := (others=>'0');
        section(15-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(15-1 downto 0)) - unsigned(vlo_cpy(15-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32000-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_38_fu_537_p4 <= resvalue(32000-1 downto 0);
    end process;

    tmp_3_fu_645_p2 <= "1" when (unsigned(i_1_cast4_fu_641_p1) < unsigned(mC)) else "0";
    tmp_47_fu_557_p1 <= std_logic_vector(resize(unsigned(grp_fu_331_p2),32000));
    tmp_49_fu_567_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32000_lc_1),to_integer(unsigned('0' & tmp_47_fu_557_p1(31-1 downto 0)))));
    tmp_50_fu_573_p2 <= (grp_fu_561_p2 and tmp_49_reg_836);
    tmp_51_fu_578_p1 <= tmp_50_fu_573_p2(32 - 1 downto 0);
    tmp_5_fu_428_p2 <= "1" when (unsigned(j_cast7_fu_425_p1) < unsigned(nC)) else "0";
    tmp_6_fu_412_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_385_p3),64));
    tmp_7_fu_343_p2 <= "1" when (mA = mC) else "0";
    tmp_8_fu_445_p1 <= std_logic_vector(resize(unsigned(grp_fu_690_p3),64));
    tmp_9_fu_349_p2 <= "1" when (nB = nC) else "0";
    tmp_fu_337_p2 <= "1" when (nA = mB) else "0";
    tmp_s_fu_361_p2 <= (tmp1_fu_355_p2 and tmp_fu_337_p2);
end behav;
