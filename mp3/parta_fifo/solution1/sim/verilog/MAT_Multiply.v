// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.309000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=303,HLS_SYN_LUT=307}" *)

module MAT_Multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        mA,
        nA,
        mB,
        nB,
        mC,
        nC
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv15_0 = 15'b000000000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv15_64 = 15'b1100100;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [13:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [13:0] C_address0;
output   C_ce0;
output   C_we0;
output  [63:0] C_d0;
input  [7:0] mA;
input  [7:0] nA;
input  [7:0] mB;
input  [7:0] nB;
input  [7:0] mC;
input  [7:0] nC;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm = 12'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
wire   [0:0] tmp_4_fu_213_p2;
reg   [0:0] tmp_4_reg_332;
wire   [14:0] next_mul1_fu_219_p2;
reg   [14:0] next_mul1_reg_336;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_78;
wire   [7:0] i_1_fu_230_p2;
reg   [7:0] i_1_reg_344;
wire   [7:0] j_1_fu_241_p2;
reg   [7:0] j_1_reg_352;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_93;
wire   [14:0] tmp_7_trn6_cast_fu_247_p1;
reg   [14:0] tmp_7_trn6_cast_reg_357;
wire   [0:0] exitcond1_fu_236_p2;
reg   [13:0] C_addr_reg_362;
wire   [7:0] k_1_fu_267_p2;
reg   [7:0] k_1_reg_370;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_109;
wire   [0:0] exitcond_fu_262_p2;
wire   [14:0] next_mul_fu_288_p2;
reg   [14:0] next_mul_reg_380;
reg  signed [31:0] A_load_reg_390;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_126;
reg  signed [31:0] B_load_reg_395;
wire  signed [31:0] grp_fu_304_p2;
reg  signed [31:0] tmp_s_reg_400;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_136;
wire  signed [63:0] tmp_8_fu_311_p2;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_145;
reg   [7:0] i_reg_119;
reg   [14:0] phi_mul9_reg_130;
reg   [7:0] j_reg_142;
wire   [0:0] exitcond2_fu_225_p2;
reg   [63:0] C_load_reg_153;
reg   [7:0] k_reg_166;
reg   [14:0] phi_mul_reg_177;
wire   [63:0] tmp_7_fu_257_p1;
wire   [63:0] tmp_9_fu_283_p1;
wire   [63:0] tmp_10_fu_299_p1;
wire   [0:0] tmp_1_fu_195_p2;
wire   [0:0] tmp_3_fu_201_p2;
wire   [0:0] tmp1_fu_207_p2;
wire   [0:0] tmp_fu_189_p2;
wire   [14:0] p_addr8_fu_251_p2;
wire   [14:0] tmp_9_trn_cast_fu_273_p1;
wire   [14:0] p_addr1_fu_277_p2;
wire   [14:0] p_addr4_fu_294_p2;
wire  signed [31:0] grp_fu_304_p0;
wire  signed [31:0] grp_fu_304_p1;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_234;
wire  signed [63:0] tmp_6_fu_308_p1;
wire    grp_fu_304_ce;
reg   [11:0] ap_NS_fsm;


MAT_Multiply_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAT_Multiply_mul_32s_32s_32_6_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_304_p0 ),
    .din1( grp_fu_304_p1 ),
    .ce( grp_fu_304_ce ),
    .dout( grp_fu_304_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        C_load_reg_153 <= tmp_8_fu_311_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_236_p2))) begin
        C_load_reg_153 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_4_fu_213_p2 == ap_const_lv1_0))) begin
        i_reg_119 <= ap_const_lv8_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_236_p2))) begin
        i_reg_119 <= i_1_reg_344;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_262_p2))) begin
        j_reg_142 <= j_1_reg_352;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_4_reg_332 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond2_fu_225_p2))) begin
        j_reg_142 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        k_reg_166 <= k_1_reg_370;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_236_p2))) begin
        k_reg_166 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_4_fu_213_p2 == ap_const_lv1_0))) begin
        phi_mul9_reg_130 <= ap_const_lv15_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_236_p2))) begin
        phi_mul9_reg_130 <= next_mul1_reg_336;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        phi_mul_reg_177 <= next_mul_reg_380;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_236_p2))) begin
        phi_mul_reg_177 <= ap_const_lv15_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        A_load_reg_390 <= A_q0;
        B_load_reg_395 <= B_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_236_p2))) begin
        C_addr_reg_362 <= tmp_7_fu_257_p1;
        tmp_7_trn6_cast_reg_357[7 : 0] <= tmp_7_trn6_cast_fu_247_p1[7 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_4_reg_332 == ap_const_lv1_0))) begin
        i_1_reg_344 <= i_1_fu_230_p2;
        next_mul1_reg_336 <= next_mul1_fu_219_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_352 <= j_1_fu_241_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_1_reg_370 <= k_1_fu_267_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond_fu_262_p2))) begin
        next_mul_reg_380 <= next_mul_fu_288_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_4_reg_332 <= tmp_4_fu_213_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        tmp_s_reg_400 <= grp_fu_304_p2;
    end
end

/// A_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_ce0 = ap_const_logic_1;
    end else begin
        A_ce0 = ap_const_logic_0;
    end
end

/// B_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

/// C_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C_ce0 = ap_const_logic_1;
    end else begin
        C_ce0 = ap_const_logic_0;
    end
end

/// C_we0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C_we0 = ap_const_logic_1;
    end else begin
        C_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (tmp_4_reg_332 or ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_225_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((tmp_4_reg_332 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond2_fu_225_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (tmp_4_reg_332 or ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_225_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((tmp_4_reg_332 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond2_fu_225_p2)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_136)
begin
    if (ap_sig_bdd_136) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_145)
begin
    if (ap_sig_bdd_145) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_28)
begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_78)
begin
    if (ap_sig_bdd_78) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_93)
begin
    if (ap_sig_bdd_93) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_109)
begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_126)
begin
    if (ap_sig_bdd_126) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_234)
begin
    if (ap_sig_bdd_234) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_4_reg_332 or exitcond1_fu_236_p2 or exitcond_fu_262_p2 or exitcond2_fu_225_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (((tmp_4_reg_332 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond2_fu_225_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_236_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_262_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_9_fu_283_p1;
assign B_address0 = tmp_10_fu_299_p1;
assign C_address0 = C_addr_reg_362;
assign C_d0 = C_load_reg_153;

/// ap_sig_bdd_109 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_126 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_126 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_136 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_136 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_145 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_145 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_234 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_234 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_28 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_78 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_78 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_93 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_93 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign exitcond1_fu_236_p2 = (j_reg_142 == nC? 1'b1: 1'b0);
assign exitcond2_fu_225_p2 = (i_reg_119 == mC? 1'b1: 1'b0);
assign exitcond_fu_262_p2 = (k_reg_166 == mB? 1'b1: 1'b0);
assign grp_fu_304_ce = ap_const_logic_1;
assign grp_fu_304_p0 = B_load_reg_395;
assign grp_fu_304_p1 = A_load_reg_390;
assign i_1_fu_230_p2 = (i_reg_119 + ap_const_lv8_1);
assign j_1_fu_241_p2 = (j_reg_142 + ap_const_lv8_1);
assign k_1_fu_267_p2 = (k_reg_166 + ap_const_lv8_1);
assign next_mul1_fu_219_p2 = (phi_mul9_reg_130 + ap_const_lv15_64);
assign next_mul_fu_288_p2 = (phi_mul_reg_177 + ap_const_lv15_64);
assign p_addr1_fu_277_p2 = (tmp_9_trn_cast_fu_273_p1 + phi_mul9_reg_130);
assign p_addr4_fu_294_p2 = (tmp_7_trn6_cast_reg_357 + phi_mul_reg_177);
assign p_addr8_fu_251_p2 = (tmp_7_trn6_cast_fu_247_p1 + phi_mul9_reg_130);
assign tmp1_fu_207_p2 = (tmp_1_fu_195_p2 & tmp_3_fu_201_p2);
assign tmp_10_fu_299_p1 = p_addr4_fu_294_p2;
assign tmp_1_fu_195_p2 = (mA == mC? 1'b1: 1'b0);
assign tmp_3_fu_201_p2 = (nB == nC? 1'b1: 1'b0);
assign tmp_4_fu_213_p2 = (tmp1_fu_207_p2 & tmp_fu_189_p2);
assign tmp_6_fu_308_p1 = tmp_s_reg_400;
assign tmp_7_fu_257_p1 = p_addr8_fu_251_p2;
assign tmp_7_trn6_cast_fu_247_p1 = j_reg_142;
assign tmp_8_fu_311_p2 = ($signed(C_load_reg_153) + $signed(tmp_6_fu_308_p1));
assign tmp_9_fu_283_p1 = p_addr1_fu_277_p2;
assign tmp_9_trn_cast_fu_273_p1 = k_reg_166;
assign tmp_fu_189_p2 = (nA == mB? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    tmp_7_trn6_cast_reg_357[14:8] <= 7'b0000000;
end



endmodule //MAT_Multiply

