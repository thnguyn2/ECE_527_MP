// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "MAT_Multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic MAT_Multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic MAT_Multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> MAT_Multiply::ap_ST_st1_fsm_0 = "1";
const sc_lv<14> MAT_Multiply::ap_ST_st2_fsm_1 = "10";
const sc_lv<14> MAT_Multiply::ap_ST_st3_fsm_2 = "100";
const sc_lv<14> MAT_Multiply::ap_ST_st4_fsm_3 = "1000";
const sc_lv<14> MAT_Multiply::ap_ST_st5_fsm_4 = "10000";
const sc_lv<14> MAT_Multiply::ap_ST_st6_fsm_5 = "100000";
const sc_lv<14> MAT_Multiply::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<14> MAT_Multiply::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<14> MAT_Multiply::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<14> MAT_Multiply::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<14> MAT_Multiply::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<14> MAT_Multiply::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<14> MAT_Multiply::ap_ST_st13_fsm_12 = "1000000000000";
const sc_lv<14> MAT_Multiply::ap_ST_st14_fsm_13 = "10000000000000";
const sc_lv<32> MAT_Multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> MAT_Multiply::ap_const_lv1_1 = "1";
const sc_lv<32> MAT_Multiply::ap_const_lv32_1 = "1";
const sc_lv<1> MAT_Multiply::ap_const_lv1_0 = "0";
const sc_lv<32> MAT_Multiply::ap_const_lv32_2 = "10";
const sc_lv<32> MAT_Multiply::ap_const_lv32_3 = "11";
const sc_lv<32> MAT_Multiply::ap_const_lv32_4 = "100";
const sc_lv<32> MAT_Multiply::ap_const_lv32_5 = "101";
const sc_lv<32> MAT_Multiply::ap_const_lv32_6 = "110";
const sc_lv<32> MAT_Multiply::ap_const_lv32_C = "1100";
const sc_lv<32> MAT_Multiply::ap_const_lv32_D = "1101";
const sc_lv<7> MAT_Multiply::ap_const_lv7_0 = "0000000";
const sc_lv<14> MAT_Multiply::ap_const_lv14_0 = "00000000000000";
const sc_lv<64> MAT_Multiply::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> MAT_Multiply::ap_const_lv7_64 = "1100100";
const sc_lv<7> MAT_Multiply::ap_const_lv7_1 = "1";
const sc_lv<14> MAT_Multiply::ap_const_lv14_64 = "1100100";
const sc_lv<32> MAT_Multiply::ap_const_lv32_7 = "111";

MAT_Multiply::MAT_Multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    A_cached_row_U = new MAT_Multiply_A_cached_row("A_cached_row_U");
    A_cached_row_U->clk(ap_clk);
    A_cached_row_U->reset(ap_rst);
    A_cached_row_U->address0(A_cached_row_address0);
    A_cached_row_U->ce0(A_cached_row_ce0);
    A_cached_row_U->we0(A_cached_row_we0);
    A_cached_row_U->d0(A_cached_row_d0);
    A_cached_row_U->q0(A_cached_row_q0);
    B_cached_U = new MAT_Multiply_B_cached("B_cached_U");
    B_cached_U->clk(ap_clk);
    B_cached_U->reset(ap_rst);
    B_cached_U->address0(B_cached_address0);
    B_cached_U->ce0(B_cached_ce0);
    B_cached_U->we0(B_cached_we0);
    B_cached_U->d0(B_cached_d0);
    B_cached_U->q0(B_cached_q0);
    MAT_Multiply_mul_32s_32s_32_6_U1 = new MAT_Multiply_mul_32s_32s_32_6<1,6,32,32,32>("MAT_Multiply_mul_32s_32s_32_6_U1");
    MAT_Multiply_mul_32s_32s_32_6_U1->clk(ap_clk);
    MAT_Multiply_mul_32s_32s_32_6_U1->reset(ap_rst);
    MAT_Multiply_mul_32s_32s_32_6_U1->din0(grp_fu_449_p0);
    MAT_Multiply_mul_32s_32s_32_6_U1->din1(grp_fu_449_p1);
    MAT_Multiply_mul_32s_32s_32_6_U1->ce(grp_fu_449_ce);
    MAT_Multiply_mul_32s_32s_32_6_U1->dout(grp_fu_449_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_cached_row_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( tmp_10_fu_366_p1 );
    sensitive << ( tmp_13_fu_428_p1 );

    SC_METHOD(thread_A_cached_row_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_bdd_123 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_bdd_179 );

    SC_METHOD(thread_A_cached_row_d0);
    sensitive << ( A_dout );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_A_cached_row_we0);
    sensitive << ( tmp_8_reg_517 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond2_fu_354_p2 );
    sensitive << ( ap_sig_bdd_123 );

    SC_METHOD(thread_A_read);
    sensitive << ( tmp_8_reg_517 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond2_fu_354_p2 );
    sensitive << ( ap_sig_bdd_123 );

    SC_METHOD(thread_B_cached_address0);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( tmp_11_fu_398_p1 );
    sensitive << ( tmp_14_fu_444_p1 );

    SC_METHOD(thread_B_cached_ce0);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_bdd_150 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_bdd_179 );

    SC_METHOD(thread_B_cached_d0);
    sensitive << ( B_dout );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_B_cached_we0);
    sensitive << ( tmp_6_reg_501 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( exitcond1_fu_375_p2 );
    sensitive << ( ap_sig_bdd_150 );

    SC_METHOD(thread_B_read);
    sensitive << ( tmp_6_reg_501 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( exitcond1_fu_375_p2 );
    sensitive << ( ap_sig_bdd_150 );

    SC_METHOD(thread_C_din);
    sensitive << ( tmp_s_reg_513 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( exitcond_fu_411_p2 );
    sensitive << ( ap_sig_bdd_179 );
    sensitive << ( temp_reg_240 );

    SC_METHOD(thread_C_write);
    sensitive << ( tmp_s_reg_513 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( exitcond_fu_411_p2 );
    sensitive << ( ap_sig_bdd_179 );

    SC_METHOD(thread_ap_done);
    sensitive << ( tmp_4_reg_484 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond4_fu_299_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_4_reg_484 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond4_fu_299_p2 );

    SC_METHOD(thread_ap_sig_bdd_114);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_123);
    sensitive << ( A_empty_n );
    sensitive << ( tmp_8_reg_517 );
    sensitive << ( exitcond2_fu_354_p2 );

    SC_METHOD(thread_ap_sig_bdd_143);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_150);
    sensitive << ( B_empty_n );
    sensitive << ( tmp_6_reg_501 );
    sensitive << ( exitcond1_fu_375_p2 );

    SC_METHOD(thread_ap_sig_bdd_169);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_179);
    sensitive << ( C_full_n );
    sensitive << ( tmp_s_reg_513 );
    sensitive << ( exitcond_fu_411_p2 );

    SC_METHOD(thread_ap_sig_bdd_200);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_211);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_223);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_376);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_73);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_94);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st13_fsm_12);
    sensitive << ( ap_sig_bdd_211 );

    SC_METHOD(thread_ap_sig_cseq_ST_st14_fsm_13);
    sensitive << ( ap_sig_bdd_223 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_30 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_73 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_94 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_114 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_143 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_169 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_bdd_200 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_bdd_376 );

    SC_METHOD(thread_exitcond1_fu_375_p2);
    sensitive << ( tmp_6_reg_501 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_bdd_150 );
    sensitive << ( k_1_reg_207 );

    SC_METHOD(thread_exitcond2_fu_354_p2);
    sensitive << ( tmp_8_reg_517 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_bdd_123 );
    sensitive << ( k_reg_196 );

    SC_METHOD(thread_exitcond3_fu_326_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_184 );

    SC_METHOD(thread_exitcond4_fu_299_p2);
    sensitive << ( tmp_4_reg_484 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_173 );

    SC_METHOD(thread_exitcond_fu_411_p2);
    sensitive << ( tmp_s_reg_513 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_bdd_179 );
    sensitive << ( k_2_reg_229 );

    SC_METHOD(thread_grp_fu_449_ce);

    SC_METHOD(thread_grp_fu_449_p0);
    sensitive << ( B_cached_load_reg_585 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_grp_fu_449_p1);
    sensitive << ( A_cached_row_load_reg_580 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_i_1_fu_305_p2);
    sensitive << ( i_reg_173 );

    SC_METHOD(thread_i_cast_fu_295_p1);
    sensitive << ( i_reg_173 );

    SC_METHOD(thread_j_1_fu_332_p2);
    sensitive << ( j_reg_184 );

    SC_METHOD(thread_j_cast_fu_322_p1);
    sensitive << ( j_reg_184 );

    SC_METHOD(thread_k_2_cast_fu_407_p1);
    sensitive << ( k_2_reg_229 );

    SC_METHOD(thread_k_3_fu_360_p2);
    sensitive << ( k_reg_196 );

    SC_METHOD(thread_k_4_fu_381_p2);
    sensitive << ( k_1_reg_207 );

    SC_METHOD(thread_k_5_fu_417_p2);
    sensitive << ( k_2_reg_229 );

    SC_METHOD(thread_next_mul5_fu_433_p2);
    sensitive << ( phi_mul4_reg_253 );

    SC_METHOD(thread_next_mul_fu_387_p2);
    sensitive << ( phi_mul_reg_218 );

    SC_METHOD(thread_p_addr1_fu_439_p2);
    sensitive << ( tmp_13_trn_cast_reg_547 );
    sensitive << ( phi_mul4_reg_253 );

    SC_METHOD(thread_p_addr3_fu_393_p2);
    sensitive << ( tmp_11_trn_cast_reg_529 );
    sensitive << ( phi_mul_reg_218 );

    SC_METHOD(thread_temp_1_fu_462_p3);
    sensitive << ( tmp_12_reg_560 );
    sensitive << ( temp_reg_240 );
    sensitive << ( temp_2_fu_456_p2 );

    SC_METHOD(thread_temp_2_fu_456_p2);
    sensitive << ( temp_reg_240 );
    sensitive << ( tmp_16_fu_453_p1 );

    SC_METHOD(thread_tmp1_fu_283_p2);
    sensitive << ( tmp_1_fu_271_p2 );
    sensitive << ( tmp_3_fu_277_p2 );

    SC_METHOD(thread_tmp_10_fu_366_p1);
    sensitive << ( k_reg_196 );

    SC_METHOD(thread_tmp_11_fu_398_p1);
    sensitive << ( p_addr3_fu_393_p2 );

    SC_METHOD(thread_tmp_11_trn_cast_fu_371_p1);
    sensitive << ( j_reg_184 );

    SC_METHOD(thread_tmp_12_fu_423_p2);
    sensitive << ( mB );
    sensitive << ( tmp_s_reg_513 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( exitcond_fu_411_p2 );
    sensitive << ( ap_sig_bdd_179 );
    sensitive << ( k_2_cast_fu_407_p1 );

    SC_METHOD(thread_tmp_13_fu_428_p1);
    sensitive << ( k_2_reg_229 );

    SC_METHOD(thread_tmp_13_trn_cast_fu_403_p1);
    sensitive << ( j_reg_184 );

    SC_METHOD(thread_tmp_14_fu_444_p1);
    sensitive << ( p_addr1_fu_439_p2 );

    SC_METHOD(thread_tmp_16_fu_453_p1);
    sensitive << ( tmp_15_reg_590 );

    SC_METHOD(thread_tmp_1_fu_271_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( mA );
    sensitive << ( mC );

    SC_METHOD(thread_tmp_3_fu_277_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( nB );
    sensitive << ( nC );

    SC_METHOD(thread_tmp_4_fu_289_p2);
    sensitive << ( tmp1_fu_283_p2 );
    sensitive << ( tmp_fu_265_p2 );

    SC_METHOD(thread_tmp_5_fu_311_p2);
    sensitive << ( mC );
    sensitive << ( tmp_4_reg_484 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond4_fu_299_p2 );
    sensitive << ( i_cast_fu_295_p1 );

    SC_METHOD(thread_tmp_6_fu_316_p2);
    sensitive << ( tmp_4_reg_484 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond4_fu_299_p2 );
    sensitive << ( i_reg_173 );

    SC_METHOD(thread_tmp_8_fu_348_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_s_fu_343_p2 );
    sensitive << ( exitcond3_fu_326_p2 );
    sensitive << ( j_reg_184 );

    SC_METHOD(thread_tmp_9_fu_338_p2);
    sensitive << ( nC );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond3_fu_326_p2 );
    sensitive << ( j_cast_fu_322_p1 );

    SC_METHOD(thread_tmp_fu_265_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( nA );
    sensitive << ( mB );

    SC_METHOD(thread_tmp_s_fu_343_p2);
    sensitive << ( tmp_5_reg_496 );
    sensitive << ( tmp_9_fu_338_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_4_reg_484 );
    sensitive << ( exitcond4_fu_299_p2 );
    sensitive << ( tmp_6_reg_501 );
    sensitive << ( tmp_s_fu_343_p2 );
    sensitive << ( tmp_s_reg_513 );
    sensitive << ( exitcond3_fu_326_p2 );
    sensitive << ( tmp_8_reg_517 );
    sensitive << ( exitcond2_fu_354_p2 );
    sensitive << ( ap_sig_bdd_123 );
    sensitive << ( exitcond1_fu_375_p2 );
    sensitive << ( ap_sig_bdd_150 );
    sensitive << ( exitcond_fu_411_p2 );
    sensitive << ( ap_sig_bdd_179 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "MAT_Multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_dout, "(port)A_dout");
    sc_trace(mVcdFile, A_empty_n, "(port)A_empty_n");
    sc_trace(mVcdFile, A_read, "(port)A_read");
    sc_trace(mVcdFile, B_dout, "(port)B_dout");
    sc_trace(mVcdFile, B_empty_n, "(port)B_empty_n");
    sc_trace(mVcdFile, B_read, "(port)B_read");
    sc_trace(mVcdFile, C_din, "(port)C_din");
    sc_trace(mVcdFile, C_full_n, "(port)C_full_n");
    sc_trace(mVcdFile, C_write, "(port)C_write");
    sc_trace(mVcdFile, mA, "(port)mA");
    sc_trace(mVcdFile, nA, "(port)nA");
    sc_trace(mVcdFile, mB, "(port)mB");
    sc_trace(mVcdFile, nB, "(port)nB");
    sc_trace(mVcdFile, mC, "(port)mC");
    sc_trace(mVcdFile, nC, "(port)nC");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_30, "ap_sig_bdd_30");
    sc_trace(mVcdFile, tmp_4_fu_289_p2, "tmp_4_fu_289_p2");
    sc_trace(mVcdFile, tmp_4_reg_484, "tmp_4_reg_484");
    sc_trace(mVcdFile, i_1_fu_305_p2, "i_1_fu_305_p2");
    sc_trace(mVcdFile, i_1_reg_491, "i_1_reg_491");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_73, "ap_sig_bdd_73");
    sc_trace(mVcdFile, tmp_5_fu_311_p2, "tmp_5_fu_311_p2");
    sc_trace(mVcdFile, tmp_5_reg_496, "tmp_5_reg_496");
    sc_trace(mVcdFile, exitcond4_fu_299_p2, "exitcond4_fu_299_p2");
    sc_trace(mVcdFile, tmp_6_fu_316_p2, "tmp_6_fu_316_p2");
    sc_trace(mVcdFile, tmp_6_reg_501, "tmp_6_reg_501");
    sc_trace(mVcdFile, j_1_fu_332_p2, "j_1_fu_332_p2");
    sc_trace(mVcdFile, j_1_reg_508, "j_1_reg_508");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_94, "ap_sig_bdd_94");
    sc_trace(mVcdFile, tmp_s_fu_343_p2, "tmp_s_fu_343_p2");
    sc_trace(mVcdFile, tmp_s_reg_513, "tmp_s_reg_513");
    sc_trace(mVcdFile, exitcond3_fu_326_p2, "exitcond3_fu_326_p2");
    sc_trace(mVcdFile, tmp_8_fu_348_p2, "tmp_8_fu_348_p2");
    sc_trace(mVcdFile, tmp_8_reg_517, "tmp_8_reg_517");
    sc_trace(mVcdFile, k_3_fu_360_p2, "k_3_fu_360_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_114, "ap_sig_bdd_114");
    sc_trace(mVcdFile, exitcond2_fu_354_p2, "exitcond2_fu_354_p2");
    sc_trace(mVcdFile, ap_sig_bdd_123, "ap_sig_bdd_123");
    sc_trace(mVcdFile, tmp_11_trn_cast_fu_371_p1, "tmp_11_trn_cast_fu_371_p1");
    sc_trace(mVcdFile, tmp_11_trn_cast_reg_529, "tmp_11_trn_cast_reg_529");
    sc_trace(mVcdFile, k_4_fu_381_p2, "k_4_fu_381_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_143, "ap_sig_bdd_143");
    sc_trace(mVcdFile, exitcond1_fu_375_p2, "exitcond1_fu_375_p2");
    sc_trace(mVcdFile, ap_sig_bdd_150, "ap_sig_bdd_150");
    sc_trace(mVcdFile, next_mul_fu_387_p2, "next_mul_fu_387_p2");
    sc_trace(mVcdFile, tmp_13_trn_cast_fu_403_p1, "tmp_13_trn_cast_fu_403_p1");
    sc_trace(mVcdFile, tmp_13_trn_cast_reg_547, "tmp_13_trn_cast_reg_547");
    sc_trace(mVcdFile, k_5_fu_417_p2, "k_5_fu_417_p2");
    sc_trace(mVcdFile, k_5_reg_555, "k_5_reg_555");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_169, "ap_sig_bdd_169");
    sc_trace(mVcdFile, exitcond_fu_411_p2, "exitcond_fu_411_p2");
    sc_trace(mVcdFile, ap_sig_bdd_179, "ap_sig_bdd_179");
    sc_trace(mVcdFile, tmp_12_fu_423_p2, "tmp_12_fu_423_p2");
    sc_trace(mVcdFile, tmp_12_reg_560, "tmp_12_reg_560");
    sc_trace(mVcdFile, next_mul5_fu_433_p2, "next_mul5_fu_433_p2");
    sc_trace(mVcdFile, next_mul5_reg_570, "next_mul5_reg_570");
    sc_trace(mVcdFile, A_cached_row_q0, "A_cached_row_q0");
    sc_trace(mVcdFile, A_cached_row_load_reg_580, "A_cached_row_load_reg_580");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_200, "ap_sig_bdd_200");
    sc_trace(mVcdFile, B_cached_q0, "B_cached_q0");
    sc_trace(mVcdFile, B_cached_load_reg_585, "B_cached_load_reg_585");
    sc_trace(mVcdFile, grp_fu_449_p2, "grp_fu_449_p2");
    sc_trace(mVcdFile, tmp_15_reg_590, "tmp_15_reg_590");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st13_fsm_12, "ap_sig_cseq_ST_st13_fsm_12");
    sc_trace(mVcdFile, ap_sig_bdd_211, "ap_sig_bdd_211");
    sc_trace(mVcdFile, temp_1_fu_462_p3, "temp_1_fu_462_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st14_fsm_13, "ap_sig_cseq_ST_st14_fsm_13");
    sc_trace(mVcdFile, ap_sig_bdd_223, "ap_sig_bdd_223");
    sc_trace(mVcdFile, A_cached_row_address0, "A_cached_row_address0");
    sc_trace(mVcdFile, A_cached_row_ce0, "A_cached_row_ce0");
    sc_trace(mVcdFile, A_cached_row_we0, "A_cached_row_we0");
    sc_trace(mVcdFile, A_cached_row_d0, "A_cached_row_d0");
    sc_trace(mVcdFile, B_cached_address0, "B_cached_address0");
    sc_trace(mVcdFile, B_cached_ce0, "B_cached_ce0");
    sc_trace(mVcdFile, B_cached_we0, "B_cached_we0");
    sc_trace(mVcdFile, B_cached_d0, "B_cached_d0");
    sc_trace(mVcdFile, i_reg_173, "i_reg_173");
    sc_trace(mVcdFile, j_reg_184, "j_reg_184");
    sc_trace(mVcdFile, k_reg_196, "k_reg_196");
    sc_trace(mVcdFile, k_1_reg_207, "k_1_reg_207");
    sc_trace(mVcdFile, phi_mul_reg_218, "phi_mul_reg_218");
    sc_trace(mVcdFile, k_2_reg_229, "k_2_reg_229");
    sc_trace(mVcdFile, temp_reg_240, "temp_reg_240");
    sc_trace(mVcdFile, phi_mul4_reg_253, "phi_mul4_reg_253");
    sc_trace(mVcdFile, tmp_10_fu_366_p1, "tmp_10_fu_366_p1");
    sc_trace(mVcdFile, tmp_11_fu_398_p1, "tmp_11_fu_398_p1");
    sc_trace(mVcdFile, tmp_13_fu_428_p1, "tmp_13_fu_428_p1");
    sc_trace(mVcdFile, tmp_14_fu_444_p1, "tmp_14_fu_444_p1");
    sc_trace(mVcdFile, tmp_1_fu_271_p2, "tmp_1_fu_271_p2");
    sc_trace(mVcdFile, tmp_3_fu_277_p2, "tmp_3_fu_277_p2");
    sc_trace(mVcdFile, tmp1_fu_283_p2, "tmp1_fu_283_p2");
    sc_trace(mVcdFile, tmp_fu_265_p2, "tmp_fu_265_p2");
    sc_trace(mVcdFile, i_cast_fu_295_p1, "i_cast_fu_295_p1");
    sc_trace(mVcdFile, j_cast_fu_322_p1, "j_cast_fu_322_p1");
    sc_trace(mVcdFile, tmp_9_fu_338_p2, "tmp_9_fu_338_p2");
    sc_trace(mVcdFile, p_addr3_fu_393_p2, "p_addr3_fu_393_p2");
    sc_trace(mVcdFile, k_2_cast_fu_407_p1, "k_2_cast_fu_407_p1");
    sc_trace(mVcdFile, p_addr1_fu_439_p2, "p_addr1_fu_439_p2");
    sc_trace(mVcdFile, grp_fu_449_p0, "grp_fu_449_p0");
    sc_trace(mVcdFile, grp_fu_449_p1, "grp_fu_449_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_376, "ap_sig_bdd_376");
    sc_trace(mVcdFile, tmp_16_fu_453_p1, "tmp_16_fu_453_p1");
    sc_trace(mVcdFile, temp_2_fu_456_p2, "temp_2_fu_456_p2");
    sc_trace(mVcdFile, grp_fu_449_ce, "grp_fu_449_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("MAT_Multiply.hdltvin.dat");
    mHdltvoutHandle.open("MAT_Multiply.hdltvout.dat");
}

MAT_Multiply::~MAT_Multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete A_cached_row_U;
    delete B_cached_U;
    delete MAT_Multiply_mul_32s_32s_32_6_U1;
}

void MAT_Multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         !esl_seteq<1,1,1>(tmp_4_fu_289_p2.read(), ap_const_lv1_0))) {
        i_reg_173 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_326_p2.read()))) {
        i_reg_173 = i_1_reg_491.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !ap_sig_bdd_179.read() && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_513.read()) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_411_p2.read())))) {
        j_reg_184 = j_1_reg_508.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                !esl_seteq<1,1,1>(tmp_4_reg_484.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_299_p2.read()))) {
        j_reg_184 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !ap_sig_bdd_123.read() && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read()))))) {
        k_1_reg_207 = ap_const_lv7_0;
    } else if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read()) && 
                !ap_sig_bdd_150.read())) {
        k_1_reg_207 = k_4_fu_381_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_13.read())) {
        k_2_reg_229 = k_5_reg_555.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
                !ap_sig_bdd_150.read() && 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) || 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read())))) {
        k_2_reg_229 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_326_p2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_343_p2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_348_p2.read()))) {
        k_reg_196 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read()) && 
                !ap_sig_bdd_123.read())) {
        k_reg_196 = k_3_fu_360_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_13.read())) {
        phi_mul4_reg_253 = next_mul5_reg_570.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
                !ap_sig_bdd_150.read() && 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) || 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read())))) {
        phi_mul4_reg_253 = ap_const_lv14_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !ap_sig_bdd_123.read() && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read()))))) {
        phi_mul_reg_218 = ap_const_lv14_0;
    } else if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read()) && 
                !ap_sig_bdd_150.read())) {
        phi_mul_reg_218 = next_mul_fu_387_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_13.read())) {
        temp_reg_240 = temp_1_fu_462_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
                !ap_sig_bdd_150.read() && 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) || 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read())))) {
        temp_reg_240 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        A_cached_row_load_reg_580 = A_cached_row_q0.read();
        B_cached_load_reg_585 = B_cached_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_4_reg_484.read(), ap_const_lv1_0))) {
        i_1_reg_491 = i_1_fu_305_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_1_reg_508 = j_1_fu_332_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_513.read()) && !ap_sig_bdd_179.read())) {
        k_5_reg_555 = k_5_fu_417_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_513.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_411_p2.read()) && !ap_sig_bdd_179.read())) {
        next_mul5_reg_570 = next_mul5_fu_433_p2.read();
        tmp_12_reg_560 = tmp_12_fu_423_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !ap_sig_bdd_123.read() && ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) && 
   !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read())) || 
  (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && 
   !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read()))))) {
        tmp_11_trn_cast_reg_529 = tmp_11_trn_cast_fu_371_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && !ap_sig_bdd_150.read() && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read())))) {
        tmp_13_trn_cast_reg_547 = tmp_13_trn_cast_fu_403_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st13_fsm_12.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_560.read()))) {
        tmp_15_reg_590 = grp_fu_449_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_4_reg_484 = tmp_4_fu_289_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_4_reg_484.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_299_p2.read()))) {
        tmp_5_reg_496 = tmp_5_fu_311_p2.read();
        tmp_6_reg_501 = tmp_6_fu_316_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_326_p2.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_343_p2.read()))) {
        tmp_8_reg_517 = tmp_8_fu_348_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_326_p2.read()))) {
        tmp_s_reg_513 = tmp_s_fu_343_p2.read();
    }
}

void MAT_Multiply::thread_A_cached_row_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        A_cached_row_address0 =  (sc_lv<7>) (tmp_10_fu_366_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        A_cached_row_address0 =  (sc_lv<7>) (tmp_13_fu_428_p1.read());
    } else {
        A_cached_row_address0 = "XXXXXXX";
    }
}

void MAT_Multiply::thread_A_cached_row_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !ap_sig_bdd_123.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
          !ap_sig_bdd_179.read()))) {
        A_cached_row_ce0 = ap_const_logic_1;
    } else {
        A_cached_row_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_A_cached_row_d0() {
    A_cached_row_d0 = A_dout.read();
}

void MAT_Multiply::thread_A_cached_row_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read()) && 
          !ap_sig_bdd_123.read()))) {
        A_cached_row_we0 = ap_const_logic_1;
    } else {
        A_cached_row_we0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_A_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read()) && 
         !ap_sig_bdd_123.read())) {
        A_read = ap_const_logic_1;
    } else {
        A_read = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_B_cached_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        B_cached_address0 =  (sc_lv<14>) (tmp_11_fu_398_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        B_cached_address0 =  (sc_lv<14>) (tmp_14_fu_444_p1.read());
    } else {
        B_cached_address0 =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
    }
}

void MAT_Multiply::thread_B_cached_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !ap_sig_bdd_150.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
          !ap_sig_bdd_179.read()))) {
        B_cached_ce0 = ap_const_logic_1;
    } else {
        B_cached_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_B_cached_d0() {
    B_cached_d0 = B_dout.read();
}

void MAT_Multiply::thread_B_cached_we0() {
    if (((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read()) && 
          !ap_sig_bdd_150.read()))) {
        B_cached_we0 = ap_const_logic_1;
    } else {
        B_cached_we0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_B_read() {
    if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read()) && 
         !ap_sig_bdd_150.read())) {
        B_read = ap_const_logic_1;
    } else {
        B_read = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_C_din() {
    C_din = temp_reg_240.read();
}

void MAT_Multiply::thread_C_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_513.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_411_p2.read()) && 
         !ap_sig_bdd_179.read())) {
        C_write = ap_const_logic_1;
    } else {
        C_write = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         (esl_seteq<1,1,1>(tmp_4_reg_484.read(), ap_const_lv1_0) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_299_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         (esl_seteq<1,1,1>(tmp_4_reg_484.read(), ap_const_lv1_0) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_299_p2.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_bdd_114() {
    ap_sig_bdd_114 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void MAT_Multiply::thread_ap_sig_bdd_123() {
    ap_sig_bdd_123 = (esl_seteq<1,1,1>(A_empty_n.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read()));
}

void MAT_Multiply::thread_ap_sig_bdd_143() {
    ap_sig_bdd_143 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void MAT_Multiply::thread_ap_sig_bdd_150() {
    ap_sig_bdd_150 = (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && esl_seteq<1,1,1>(B_empty_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read()));
}

void MAT_Multiply::thread_ap_sig_bdd_169() {
    ap_sig_bdd_169 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void MAT_Multiply::thread_ap_sig_bdd_179() {
    ap_sig_bdd_179 = (esl_seteq<1,1,1>(C_full_n.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_513.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_411_p2.read()));
}

void MAT_Multiply::thread_ap_sig_bdd_200() {
    ap_sig_bdd_200 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void MAT_Multiply::thread_ap_sig_bdd_211() {
    ap_sig_bdd_211 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(12, 12));
}

void MAT_Multiply::thread_ap_sig_bdd_223() {
    ap_sig_bdd_223 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(13, 13));
}

void MAT_Multiply::thread_ap_sig_bdd_30() {
    ap_sig_bdd_30 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void MAT_Multiply::thread_ap_sig_bdd_376() {
    ap_sig_bdd_376 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void MAT_Multiply::thread_ap_sig_bdd_73() {
    ap_sig_bdd_73 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void MAT_Multiply::thread_ap_sig_bdd_94() {
    ap_sig_bdd_94 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st13_fsm_12() {
    if (ap_sig_bdd_211.read()) {
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st14_fsm_13() {
    if (ap_sig_bdd_223.read()) {
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_30.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_73.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_94.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_114.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_143.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_169.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_bdd_200.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_bdd_376.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_exitcond1_fu_375_p2() {
    exitcond1_fu_375_p2 = (!k_1_reg_207.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_1_reg_207.read() == ap_const_lv7_64);
}

void MAT_Multiply::thread_exitcond2_fu_354_p2() {
    exitcond2_fu_354_p2 = (!k_reg_196.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_196.read() == ap_const_lv7_64);
}

void MAT_Multiply::thread_exitcond3_fu_326_p2() {
    exitcond3_fu_326_p2 = (!j_reg_184.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_184.read() == ap_const_lv7_64);
}

void MAT_Multiply::thread_exitcond4_fu_299_p2() {
    exitcond4_fu_299_p2 = (!i_reg_173.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_173.read() == ap_const_lv7_64);
}

void MAT_Multiply::thread_exitcond_fu_411_p2() {
    exitcond_fu_411_p2 = (!k_2_reg_229.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_2_reg_229.read() == ap_const_lv7_64);
}

void MAT_Multiply::thread_grp_fu_449_ce() {
    grp_fu_449_ce = ap_const_logic_1;
}

void MAT_Multiply::thread_grp_fu_449_p0() {
    grp_fu_449_p0 = B_cached_load_reg_585.read();
}

void MAT_Multiply::thread_grp_fu_449_p1() {
    grp_fu_449_p1 = A_cached_row_load_reg_580.read();
}

void MAT_Multiply::thread_i_1_fu_305_p2() {
    i_1_fu_305_p2 = (!i_reg_173.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_173.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void MAT_Multiply::thread_i_cast_fu_295_p1() {
    i_cast_fu_295_p1 = esl_zext<8,7>(i_reg_173.read());
}

void MAT_Multiply::thread_j_1_fu_332_p2() {
    j_1_fu_332_p2 = (!j_reg_184.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_reg_184.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void MAT_Multiply::thread_j_cast_fu_322_p1() {
    j_cast_fu_322_p1 = esl_zext<8,7>(j_reg_184.read());
}

void MAT_Multiply::thread_k_2_cast_fu_407_p1() {
    k_2_cast_fu_407_p1 = esl_zext<8,7>(k_2_reg_229.read());
}

void MAT_Multiply::thread_k_3_fu_360_p2() {
    k_3_fu_360_p2 = (!k_reg_196.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_reg_196.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void MAT_Multiply::thread_k_4_fu_381_p2() {
    k_4_fu_381_p2 = (!k_1_reg_207.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_1_reg_207.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void MAT_Multiply::thread_k_5_fu_417_p2() {
    k_5_fu_417_p2 = (!k_2_reg_229.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_2_reg_229.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void MAT_Multiply::thread_next_mul5_fu_433_p2() {
    next_mul5_fu_433_p2 = (!phi_mul4_reg_253.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul4_reg_253.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void MAT_Multiply::thread_next_mul_fu_387_p2() {
    next_mul_fu_387_p2 = (!phi_mul_reg_218.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_218.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void MAT_Multiply::thread_p_addr1_fu_439_p2() {
    p_addr1_fu_439_p2 = (!tmp_13_trn_cast_reg_547.read().is_01() || !phi_mul4_reg_253.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_13_trn_cast_reg_547.read()) + sc_biguint<14>(phi_mul4_reg_253.read()));
}

void MAT_Multiply::thread_p_addr3_fu_393_p2() {
    p_addr3_fu_393_p2 = (!tmp_11_trn_cast_reg_529.read().is_01() || !phi_mul_reg_218.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_11_trn_cast_reg_529.read()) + sc_biguint<14>(phi_mul_reg_218.read()));
}

void MAT_Multiply::thread_temp_1_fu_462_p3() {
    temp_1_fu_462_p3 = (!tmp_12_reg_560.read()[0].is_01())? sc_lv<64>(): ((tmp_12_reg_560.read()[0].to_bool())? temp_2_fu_456_p2.read(): temp_reg_240.read());
}

void MAT_Multiply::thread_temp_2_fu_456_p2() {
    temp_2_fu_456_p2 = (!temp_reg_240.read().is_01() || !tmp_16_fu_453_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(temp_reg_240.read()) + sc_bigint<64>(tmp_16_fu_453_p1.read()));
}

void MAT_Multiply::thread_tmp1_fu_283_p2() {
    tmp1_fu_283_p2 = (tmp_1_fu_271_p2.read() & tmp_3_fu_277_p2.read());
}

void MAT_Multiply::thread_tmp_10_fu_366_p1() {
    tmp_10_fu_366_p1 = esl_zext<64,7>(k_reg_196.read());
}

void MAT_Multiply::thread_tmp_11_fu_398_p1() {
    tmp_11_fu_398_p1 = esl_zext<64,14>(p_addr3_fu_393_p2.read());
}

void MAT_Multiply::thread_tmp_11_trn_cast_fu_371_p1() {
    tmp_11_trn_cast_fu_371_p1 = esl_zext<14,7>(j_reg_184.read());
}

void MAT_Multiply::thread_tmp_12_fu_423_p2() {
    tmp_12_fu_423_p2 = (!k_2_cast_fu_407_p1.read().is_01() || !mB.read().is_01())? sc_lv<1>(): (sc_biguint<8>(k_2_cast_fu_407_p1.read()) < sc_biguint<8>(mB.read()));
}

void MAT_Multiply::thread_tmp_13_fu_428_p1() {
    tmp_13_fu_428_p1 = esl_zext<64,7>(k_2_reg_229.read());
}

void MAT_Multiply::thread_tmp_13_trn_cast_fu_403_p1() {
    tmp_13_trn_cast_fu_403_p1 = esl_zext<14,7>(j_reg_184.read());
}

void MAT_Multiply::thread_tmp_14_fu_444_p1() {
    tmp_14_fu_444_p1 = esl_zext<64,14>(p_addr1_fu_439_p2.read());
}

void MAT_Multiply::thread_tmp_16_fu_453_p1() {
    tmp_16_fu_453_p1 = esl_sext<64,32>(tmp_15_reg_590.read());
}

void MAT_Multiply::thread_tmp_1_fu_271_p2() {
    tmp_1_fu_271_p2 = (!mA.read().is_01() || !mC.read().is_01())? sc_lv<1>(): sc_lv<1>(mA.read() == mC.read());
}

void MAT_Multiply::thread_tmp_3_fu_277_p2() {
    tmp_3_fu_277_p2 = (!nB.read().is_01() || !nC.read().is_01())? sc_lv<1>(): sc_lv<1>(nB.read() == nC.read());
}

void MAT_Multiply::thread_tmp_4_fu_289_p2() {
    tmp_4_fu_289_p2 = (tmp1_fu_283_p2.read() & tmp_fu_265_p2.read());
}

void MAT_Multiply::thread_tmp_5_fu_311_p2() {
    tmp_5_fu_311_p2 = (!i_cast_fu_295_p1.read().is_01() || !mC.read().is_01())? sc_lv<1>(): (sc_biguint<8>(i_cast_fu_295_p1.read()) < sc_biguint<8>(mC.read()));
}

void MAT_Multiply::thread_tmp_6_fu_316_p2() {
    tmp_6_fu_316_p2 = (!i_reg_173.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_173.read() == ap_const_lv7_0);
}

void MAT_Multiply::thread_tmp_8_fu_348_p2() {
    tmp_8_fu_348_p2 = (!j_reg_184.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_184.read() == ap_const_lv7_0);
}

void MAT_Multiply::thread_tmp_9_fu_338_p2() {
    tmp_9_fu_338_p2 = (!j_cast_fu_322_p1.read().is_01() || !nC.read().is_01())? sc_lv<1>(): (sc_biguint<8>(j_cast_fu_322_p1.read()) < sc_biguint<8>(nC.read()));
}

void MAT_Multiply::thread_tmp_fu_265_p2() {
    tmp_fu_265_p2 = (!nA.read().is_01() || !mB.read().is_01())? sc_lv<1>(): sc_lv<1>(nA.read() == mB.read());
}

void MAT_Multiply::thread_tmp_s_fu_343_p2() {
    tmp_s_fu_343_p2 = (tmp_5_reg_496.read() & tmp_9_fu_338_p2.read());
}

void MAT_Multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_4_reg_484.read(), ap_const_lv1_0) || !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_299_p2.read()))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_326_p2.read())) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_326_p2.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_343_p2.read()))) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            }
            break;
        case 8 : 
            if ((!ap_sig_bdd_123.read() && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read())))) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_517.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_354_p2.read()) && !ap_sig_bdd_123.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 16 : 
            if ((!ap_sig_bdd_150.read() && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read())))) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_501.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_375_p2.read()) && !ap_sig_bdd_150.read())) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 32 : 
            if ((!ap_sig_bdd_179.read() && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_513.read()) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_411_p2.read())))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_513.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_411_p2.read()) && !ap_sig_bdd_179.read())) {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            } else {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
            break;
    }
}

void MAT_Multiply::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_dout\" :  \"" << A_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_empty_n\" :  \"" << A_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_read\" :  \"" << A_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_dout\" :  \"" << B_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_empty_n\" :  \"" << B_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_read\" :  \"" << B_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_din\" :  \"" << C_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_full_n\" :  \"" << C_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_write\" :  \"" << C_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mA\" :  \"" << mA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nA\" :  \"" << nA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mB\" :  \"" << mB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nB\" :  \"" << nB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mC\" :  \"" << mC.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nC\" :  \"" << nC.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

