-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    mA : IN STD_LOGIC_VECTOR (7 downto 0);
    nA : IN STD_LOGIC_VECTOR (7 downto 0);
    mB : IN STD_LOGIC_VECTOR (7 downto 0);
    nB : IN STD_LOGIC_VECTOR (7 downto 0);
    mC : IN STD_LOGIC_VECTOR (7 downto 0);
    nC : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.085000,HLS_SYN_LAT=2515101,HLS_SYN_TPT=none,HLS_SYN_MEM=33,HLS_SYN_DSP=4,HLS_SYN_FF=292,HLS_SYN_LUT=418}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_30 : BOOLEAN;
    signal tmp_4_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_305_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_491 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_73 : BOOLEAN;
    signal tmp_5_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_332_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_508 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal tmp_s_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_513 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_360_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_114 : BOOLEAN;
    signal exitcond2_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_123 : BOOLEAN;
    signal tmp_11_trn_cast_fu_371_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_trn_cast_reg_529 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_4_fu_381_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal exitcond1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_150 : BOOLEAN;
    signal next_mul_fu_387_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_trn_cast_fu_403_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_trn_cast_reg_547 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_5_fu_417_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_5_reg_555 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_169 : BOOLEAN;
    signal exitcond_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_179 : BOOLEAN;
    signal tmp_12_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul5_fu_433_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul5_reg_570 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_cached_row_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_load_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal B_cached_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_211 : BOOLEAN;
    signal temp_1_fu_462_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_223 : BOOLEAN;
    signal A_cached_row_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal A_cached_row_ce0 : STD_LOGIC;
    signal A_cached_row_we0 : STD_LOGIC;
    signal A_cached_row_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal B_cached_ce0 : STD_LOGIC;
    signal B_cached_we0 : STD_LOGIC;
    signal B_cached_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_173 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_184 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_196 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_207 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_218 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_2_reg_229 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul4_reg_253 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_10_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_295_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_fu_322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr3_fu_393_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_2_cast_fu_407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_439_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_449_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_376 : BOOLEAN;
    signal tmp_16_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_2_fu_456_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_449_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_A_cached_row IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_B_cached IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_cached_row_U : component MAT_Multiply_A_cached_row
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_cached_row_address0,
        ce0 => A_cached_row_ce0,
        we0 => A_cached_row_we0,
        d0 => A_cached_row_d0,
        q0 => A_cached_row_q0);

    B_cached_U : component MAT_Multiply_B_cached
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_cached_address0,
        ce0 => B_cached_ce0,
        we0 => B_cached_we0,
        d0 => B_cached_d0,
        q0 => B_cached_q0);

    MAT_Multiply_mul_32s_32s_32_6_U1 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_449_p0,
        din1 => grp_fu_449_p1,
        ce => grp_fu_449_ce,
        dout => grp_fu_449_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_173 assign process. --
    i_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_289_p2 = ap_const_lv1_0)))) then 
                i_reg_173 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_326_p2)))) then 
                i_reg_173 <= i_1_reg_491;
            end if; 
        end if;
    end process;

    -- j_reg_184 assign process. --
    j_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_bdd_179) and ((ap_const_lv1_0 = tmp_s_reg_513) or not((ap_const_lv1_0 = exitcond_fu_411_p2))))) then 
                j_reg_184 <= j_1_reg_508;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_484 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond4_fu_299_p2))) then 
                j_reg_184 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_207 assign process. --
    k_1_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_123) and (((ap_const_lv1_0 = tmp_8_reg_517) and not((ap_const_lv1_0 = tmp_6_reg_501))) or (not((ap_const_lv1_0 = tmp_6_reg_501)) and not((ap_const_lv1_0 = exitcond2_fu_354_p2)))))) then 
                k_1_reg_207 <= ap_const_lv7_0;
            elsif ((not((ap_const_lv1_0 = tmp_6_reg_501)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_375_p2) and not(ap_sig_bdd_150))) then 
                k_1_reg_207 <= k_4_fu_381_p2;
            end if; 
        end if;
    end process;

    -- k_2_reg_229 assign process. --
    k_2_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                k_2_reg_229 <= k_5_reg_555;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_150) and ((ap_const_lv1_0 = tmp_6_reg_501) or not((ap_const_lv1_0 = exitcond1_fu_375_p2))))) then 
                k_2_reg_229 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_reg_196 assign process. --
    k_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_326_p2) and not((ap_const_lv1_0 = tmp_s_fu_343_p2)) and not((ap_const_lv1_0 = tmp_8_fu_348_p2)))) then 
                k_reg_196 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_8_reg_517)) and (ap_const_lv1_0 = exitcond2_fu_354_p2) and not(ap_sig_bdd_123))) then 
                k_reg_196 <= k_3_fu_360_p2;
            end if; 
        end if;
    end process;

    -- phi_mul4_reg_253 assign process. --
    phi_mul4_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                phi_mul4_reg_253 <= next_mul5_reg_570;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_150) and ((ap_const_lv1_0 = tmp_6_reg_501) or not((ap_const_lv1_0 = exitcond1_fu_375_p2))))) then 
                phi_mul4_reg_253 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_218 assign process. --
    phi_mul_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_123) and (((ap_const_lv1_0 = tmp_8_reg_517) and not((ap_const_lv1_0 = tmp_6_reg_501))) or (not((ap_const_lv1_0 = tmp_6_reg_501)) and not((ap_const_lv1_0 = exitcond2_fu_354_p2)))))) then 
                phi_mul_reg_218 <= ap_const_lv14_0;
            elsif ((not((ap_const_lv1_0 = tmp_6_reg_501)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_375_p2) and not(ap_sig_bdd_150))) then 
                phi_mul_reg_218 <= next_mul_fu_387_p2;
            end if; 
        end if;
    end process;

    -- temp_reg_240 assign process. --
    temp_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                temp_reg_240 <= temp_1_fu_462_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_150) and ((ap_const_lv1_0 = tmp_6_reg_501) or not((ap_const_lv1_0 = exitcond1_fu_375_p2))))) then 
                temp_reg_240 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                A_cached_row_load_reg_580 <= A_cached_row_q0;
                B_cached_load_reg_585 <= B_cached_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_484 = ap_const_lv1_0)))) then
                i_1_reg_491 <= i_1_fu_305_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_508 <= j_1_fu_332_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_s_reg_513)) and not(ap_sig_bdd_179))) then
                k_5_reg_555 <= k_5_fu_417_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_s_reg_513)) and (ap_const_lv1_0 = exitcond_fu_411_p2) and not(ap_sig_bdd_179))) then
                next_mul5_reg_570 <= next_mul5_fu_433_p2;
                tmp_12_reg_560 <= tmp_12_fu_423_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_123) and (((ap_const_lv1_0 = tmp_8_reg_517) and not((ap_const_lv1_0 = tmp_6_reg_501))) or (not((ap_const_lv1_0 = tmp_6_reg_501)) and not((ap_const_lv1_0 = exitcond2_fu_354_p2)))))) then
                    tmp_11_trn_cast_reg_529(6 downto 0) <= tmp_11_trn_cast_fu_371_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_150) and ((ap_const_lv1_0 = tmp_6_reg_501) or not((ap_const_lv1_0 = exitcond1_fu_375_p2))))) then
                    tmp_13_trn_cast_reg_547(6 downto 0) <= tmp_13_trn_cast_fu_403_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_12_reg_560)))) then
                tmp_15_reg_590 <= grp_fu_449_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_4_reg_484 <= tmp_4_fu_289_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_484 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond4_fu_299_p2))) then
                tmp_5_reg_496 <= tmp_5_fu_311_p2;
                tmp_6_reg_501 <= tmp_6_fu_316_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_326_p2) and not((ap_const_lv1_0 = tmp_s_fu_343_p2)))) then
                tmp_8_reg_517 <= tmp_8_fu_348_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_326_p2))) then
                tmp_s_reg_513 <= tmp_s_fu_343_p2;
            end if;
        end if;
    end process;
    tmp_11_trn_cast_reg_529(13 downto 7) <= "0000000";
    tmp_13_trn_cast_reg_547(13 downto 7) <= "0000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_4_reg_484, exitcond4_fu_299_p2, tmp_6_reg_501, tmp_s_fu_343_p2, tmp_s_reg_513, exitcond3_fu_326_p2, tmp_8_reg_517, exitcond2_fu_354_p2, ap_sig_bdd_123, exitcond1_fu_375_p2, ap_sig_bdd_150, exitcond_fu_411_p2, ap_sig_bdd_179)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((tmp_4_reg_484 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_299_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_326_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((ap_const_lv1_0 = exitcond3_fu_326_p2) and not((ap_const_lv1_0 = tmp_s_fu_343_p2)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((not(ap_sig_bdd_123) and ((ap_const_lv1_0 = tmp_8_reg_517) or not((ap_const_lv1_0 = exitcond2_fu_354_p2))))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif ((not((ap_const_lv1_0 = tmp_8_reg_517)) and (ap_const_lv1_0 = exitcond2_fu_354_p2) and not(ap_sig_bdd_123))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((not(ap_sig_bdd_150) and ((ap_const_lv1_0 = tmp_6_reg_501) or not((ap_const_lv1_0 = exitcond1_fu_375_p2))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                elsif ((not((ap_const_lv1_0 = tmp_6_reg_501)) and (ap_const_lv1_0 = exitcond1_fu_375_p2) and not(ap_sig_bdd_150))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((not(ap_sig_bdd_179) and ((ap_const_lv1_0 = tmp_s_reg_513) or not((ap_const_lv1_0 = exitcond_fu_411_p2))))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not((ap_const_lv1_0 = tmp_s_reg_513)) and (ap_const_lv1_0 = exitcond_fu_411_p2) and not(ap_sig_bdd_179))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    -- A_cached_row_address0 assign process. --
    A_cached_row_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, tmp_10_fu_366_p1, tmp_13_fu_428_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_cached_row_address0 <= tmp_10_fu_366_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            A_cached_row_address0 <= tmp_13_fu_428_p1(7 - 1 downto 0);
        else 
            A_cached_row_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- A_cached_row_ce0 assign process. --
    A_cached_row_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_bdd_123, ap_sig_cseq_ST_st6_fsm_5, ap_sig_bdd_179)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_bdd_179)))) then 
            A_cached_row_ce0 <= ap_const_logic_1;
        else 
            A_cached_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_cached_row_d0 <= A_dout;

    -- A_cached_row_we0 assign process. --
    A_cached_row_we0_assign_proc : process(tmp_8_reg_517, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_354_p2, ap_sig_bdd_123)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_8_reg_517)) and (ap_const_lv1_0 = exitcond2_fu_354_p2) and not(ap_sig_bdd_123)))) then 
            A_cached_row_we0 <= ap_const_logic_1;
        else 
            A_cached_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_read assign process. --
    A_read_assign_proc : process(tmp_8_reg_517, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_354_p2, ap_sig_bdd_123)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_8_reg_517)) and (ap_const_lv1_0 = exitcond2_fu_354_p2) and not(ap_sig_bdd_123))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_cached_address0 assign process. --
    B_cached_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, tmp_11_fu_398_p1, tmp_14_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            B_cached_address0 <= tmp_11_fu_398_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            B_cached_address0 <= tmp_14_fu_444_p1(14 - 1 downto 0);
        else 
            B_cached_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- B_cached_ce0 assign process. --
    B_cached_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_bdd_150, ap_sig_cseq_ST_st6_fsm_5, ap_sig_bdd_179)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_150)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_bdd_179)))) then 
            B_cached_ce0 <= ap_const_logic_1;
        else 
            B_cached_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_cached_d0 <= B_dout;

    -- B_cached_we0 assign process. --
    B_cached_we0_assign_proc : process(tmp_6_reg_501, ap_sig_cseq_ST_st5_fsm_4, exitcond1_fu_375_p2, ap_sig_bdd_150)
    begin
        if (((not((ap_const_lv1_0 = tmp_6_reg_501)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_375_p2) and not(ap_sig_bdd_150)))) then 
            B_cached_we0 <= ap_const_logic_1;
        else 
            B_cached_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_read assign process. --
    B_read_assign_proc : process(tmp_6_reg_501, ap_sig_cseq_ST_st5_fsm_4, exitcond1_fu_375_p2, ap_sig_bdd_150)
    begin
        if ((not((ap_const_lv1_0 = tmp_6_reg_501)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_375_p2) and not(ap_sig_bdd_150))) then 
            B_read <= ap_const_logic_1;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= temp_reg_240;

    -- C_write assign process. --
    C_write_assign_proc : process(tmp_s_reg_513, ap_sig_cseq_ST_st6_fsm_5, exitcond_fu_411_p2, ap_sig_bdd_179)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_s_reg_513)) and not((ap_const_lv1_0 = exitcond_fu_411_p2)) and not(ap_sig_bdd_179))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_4_reg_484, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_299_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_484 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_299_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_4_reg_484, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_299_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_484 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_299_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_114 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(A_empty_n, tmp_8_reg_517, exitcond2_fu_354_p2)
    begin
                ap_sig_bdd_123 <= ((A_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_8_reg_517)) and (ap_const_lv1_0 = exitcond2_fu_354_p2));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_143 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(B_empty_n, tmp_6_reg_501, exitcond1_fu_375_p2)
    begin
                ap_sig_bdd_150 <= (not((ap_const_lv1_0 = tmp_6_reg_501)) and (B_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond1_fu_375_p2));
    end process;


    -- ap_sig_bdd_169 assign process. --
    ap_sig_bdd_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_169 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_179 assign process. --
    ap_sig_bdd_179_assign_proc : process(C_full_n, tmp_s_reg_513, exitcond_fu_411_p2)
    begin
                ap_sig_bdd_179 <= ((C_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_s_reg_513)) and not((ap_const_lv1_0 = exitcond_fu_411_p2)));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_211 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_223 assign process. --
    ap_sig_bdd_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_223 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_30 assign process. --
    ap_sig_bdd_30_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_30 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_376 assign process. --
    ap_sig_bdd_376_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_376 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_73 assign process. --
    ap_sig_bdd_73_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_73 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_223)
    begin
        if (ap_sig_bdd_223) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_30)
    begin
        if (ap_sig_bdd_30) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_73)
    begin
        if (ap_sig_bdd_73) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_114)
    begin
        if (ap_sig_bdd_114) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_143)
    begin
        if (ap_sig_bdd_143) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_169)
    begin
        if (ap_sig_bdd_169) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_376)
    begin
        if (ap_sig_bdd_376) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_375_p2 <= "1" when (k_1_reg_207 = ap_const_lv7_64) else "0";
    exitcond2_fu_354_p2 <= "1" when (k_reg_196 = ap_const_lv7_64) else "0";
    exitcond3_fu_326_p2 <= "1" when (j_reg_184 = ap_const_lv7_64) else "0";
    exitcond4_fu_299_p2 <= "1" when (i_reg_173 = ap_const_lv7_64) else "0";
    exitcond_fu_411_p2 <= "1" when (k_2_reg_229 = ap_const_lv7_64) else "0";
    grp_fu_449_ce <= ap_const_logic_1;
    grp_fu_449_p0 <= B_cached_load_reg_585;
    grp_fu_449_p1 <= A_cached_row_load_reg_580;
    i_1_fu_305_p2 <= std_logic_vector(unsigned(i_reg_173) + unsigned(ap_const_lv7_1));
    i_cast_fu_295_p1 <= std_logic_vector(resize(unsigned(i_reg_173),8));
    j_1_fu_332_p2 <= std_logic_vector(unsigned(j_reg_184) + unsigned(ap_const_lv7_1));
    j_cast_fu_322_p1 <= std_logic_vector(resize(unsigned(j_reg_184),8));
    k_2_cast_fu_407_p1 <= std_logic_vector(resize(unsigned(k_2_reg_229),8));
    k_3_fu_360_p2 <= std_logic_vector(unsigned(k_reg_196) + unsigned(ap_const_lv7_1));
    k_4_fu_381_p2 <= std_logic_vector(unsigned(k_1_reg_207) + unsigned(ap_const_lv7_1));
    k_5_fu_417_p2 <= std_logic_vector(unsigned(k_2_reg_229) + unsigned(ap_const_lv7_1));
    next_mul5_fu_433_p2 <= std_logic_vector(unsigned(phi_mul4_reg_253) + unsigned(ap_const_lv14_64));
    next_mul_fu_387_p2 <= std_logic_vector(unsigned(phi_mul_reg_218) + unsigned(ap_const_lv14_64));
    p_addr1_fu_439_p2 <= std_logic_vector(unsigned(tmp_13_trn_cast_reg_547) + unsigned(phi_mul4_reg_253));
    p_addr3_fu_393_p2 <= std_logic_vector(unsigned(tmp_11_trn_cast_reg_529) + unsigned(phi_mul_reg_218));
    temp_1_fu_462_p3 <= 
        temp_2_fu_456_p2 when (tmp_12_reg_560(0) = '1') else 
        temp_reg_240;
    temp_2_fu_456_p2 <= std_logic_vector(unsigned(temp_reg_240) + unsigned(tmp_16_fu_453_p1));
    tmp1_fu_283_p2 <= (tmp_1_fu_271_p2 and tmp_3_fu_277_p2);
    tmp_10_fu_366_p1 <= std_logic_vector(resize(unsigned(k_reg_196),64));
    tmp_11_fu_398_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_393_p2),64));
    tmp_11_trn_cast_fu_371_p1 <= std_logic_vector(resize(unsigned(j_reg_184),14));
    tmp_12_fu_423_p2 <= "1" when (unsigned(k_2_cast_fu_407_p1) < unsigned(mB)) else "0";
    tmp_13_fu_428_p1 <= std_logic_vector(resize(unsigned(k_2_reg_229),64));
    tmp_13_trn_cast_fu_403_p1 <= std_logic_vector(resize(unsigned(j_reg_184),14));
    tmp_14_fu_444_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_439_p2),64));
        tmp_16_fu_453_p1 <= std_logic_vector(resize(signed(tmp_15_reg_590),64));

    tmp_1_fu_271_p2 <= "1" when (mA = mC) else "0";
    tmp_3_fu_277_p2 <= "1" when (nB = nC) else "0";
    tmp_4_fu_289_p2 <= (tmp1_fu_283_p2 and tmp_fu_265_p2);
    tmp_5_fu_311_p2 <= "1" when (unsigned(i_cast_fu_295_p1) < unsigned(mC)) else "0";
    tmp_6_fu_316_p2 <= "1" when (i_reg_173 = ap_const_lv7_0) else "0";
    tmp_8_fu_348_p2 <= "1" when (j_reg_184 = ap_const_lv7_0) else "0";
    tmp_9_fu_338_p2 <= "1" when (unsigned(j_cast_fu_322_p1) < unsigned(nC)) else "0";
    tmp_fu_265_p2 <= "1" when (nA = mB) else "0";
    tmp_s_fu_343_p2 <= (tmp_5_reg_496 and tmp_9_fu_338_p2);
end behav;
