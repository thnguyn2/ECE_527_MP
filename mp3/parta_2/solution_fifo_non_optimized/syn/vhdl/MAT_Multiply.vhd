-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    mA : IN STD_LOGIC_VECTOR (7 downto 0);
    nA : IN STD_LOGIC_VECTOR (7 downto 0);
    mB : IN STD_LOGIC_VECTOR (7 downto 0);
    nB : IN STD_LOGIC_VECTOR (7 downto 0);
    mC : IN STD_LOGIC_VECTOR (7 downto 0);
    nC : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.085000,HLS_SYN_LAT=317551,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=4,HLS_SYN_FF=340,HLS_SYN_LUT=460}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_31 : BOOLEAN;
    signal tmp_4_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_319_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_505 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_74 : BOOLEAN;
    signal tmp_5_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_522 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_95 : BOOLEAN;
    signal tmp_8_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_374_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal exitcond2_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_122 : BOOLEAN;
    signal tmp_11_trn_cast_fu_385_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_trn_cast_reg_542 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_4_fu_395_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal exitcond1_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_149 : BOOLEAN;
    signal next_mul_fu_401_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_trn_cast_fu_417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_trn_cast_reg_560 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_5_fu_431_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_5_reg_568 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_168 : BOOLEAN;
    signal tmp_12_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul5_fu_447_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul5_reg_583 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_cached_row_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_load_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal B_cached_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_199 : BOOLEAN;
    signal temp_1_fu_476_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_211 : BOOLEAN;
    signal A_cached_row_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_cached_row_ce0 : STD_LOGIC;
    signal A_cached_row_we0 : STD_LOGIC;
    signal A_cached_row_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_cached_ce0 : STD_LOGIC;
    signal B_cached_we0 : STD_LOGIC;
    signal B_cached_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_175 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_246 : BOOLEAN;
    signal k_reg_198 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_209 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_220 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_2_reg_231 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_reg_242 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul4_reg_254 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_2_reg_265 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast6_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast5_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr3_fu_407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_2_cast2_fu_421_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_453_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_463_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_376 : BOOLEAN;
    signal tmp_16_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_3_fu_470_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_463_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_A_cached_row IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_B_cached IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_cached_row_U : component MAT_Multiply_A_cached_row
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_cached_row_address0,
        ce0 => A_cached_row_ce0,
        we0 => A_cached_row_we0,
        d0 => A_cached_row_d0,
        q0 => A_cached_row_q0);

    B_cached_U : component MAT_Multiply_B_cached
    generic map (
        DataWidth => 32,
        AddressRange => 2500,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_cached_address0,
        ce0 => B_cached_ce0,
        we0 => B_cached_we0,
        d0 => B_cached_d0,
        q0 => B_cached_q0);

    MAT_Multiply_mul_32s_32s_32_6_U1 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_463_p0,
        din1 => grp_fu_463_p1,
        ce => grp_fu_463_ce,
        dout => grp_fu_463_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_175 assign process. --
    i_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_303_p2 = ap_const_lv1_0)))) then 
                i_reg_175 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_340_p2)))) then 
                i_reg_175 <= i_1_reg_505;
            end if; 
        end if;
    end process;

    -- j_reg_186 assign process. --
    j_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((C_full_n = ap_const_logic_0)))) then 
                j_reg_186 <= j_1_reg_522;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_498 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond4_fu_313_p2))) then 
                j_reg_186 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_209 assign process. --
    k_1_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_122) and (((ap_const_lv1_0 = tmp_8_reg_530) and not((ap_const_lv1_0 = tmp_6_reg_515))) or (not((ap_const_lv1_0 = tmp_6_reg_515)) and not((ap_const_lv1_0 = exitcond2_fu_368_p2)))))) then 
                k_1_reg_209 <= ap_const_lv6_0;
            elsif ((not((ap_const_lv1_0 = tmp_6_reg_515)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_389_p2) and not(ap_sig_bdd_149))) then 
                k_1_reg_209 <= k_4_fu_395_p2;
            end if; 
        end if;
    end process;

    -- k_2_reg_231 assign process. --
    k_2_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                k_2_reg_231 <= k_5_reg_568;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_149) and ((ap_const_lv1_0 = tmp_6_reg_515) or not((ap_const_lv1_0 = exitcond1_fu_389_p2))))) then 
                k_2_reg_231 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- k_reg_198 assign process. --
    k_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_340_p2) and not((ap_const_lv1_0 = tmp_s_fu_357_p2)) and not((ap_const_lv1_0 = tmp_8_fu_362_p2)))) then 
                k_reg_198 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_8_reg_530)) and (ap_const_lv1_0 = exitcond2_fu_368_p2) and not(ap_sig_bdd_122))) then 
                k_reg_198 <= k_3_fu_374_p2;
            end if; 
        end if;
    end process;

    -- phi_mul4_reg_254 assign process. --
    phi_mul4_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                phi_mul4_reg_254 <= next_mul5_reg_583;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_149) and ((ap_const_lv1_0 = tmp_6_reg_515) or not((ap_const_lv1_0 = exitcond1_fu_389_p2))))) then 
                phi_mul4_reg_254 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_220 assign process. --
    phi_mul_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_122) and (((ap_const_lv1_0 = tmp_8_reg_530) and not((ap_const_lv1_0 = tmp_6_reg_515))) or (not((ap_const_lv1_0 = tmp_6_reg_515)) and not((ap_const_lv1_0 = exitcond2_fu_368_p2)))))) then 
                phi_mul_reg_220 <= ap_const_lv12_0;
            elsif ((not((ap_const_lv1_0 = tmp_6_reg_515)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_389_p2) and not(ap_sig_bdd_149))) then 
                phi_mul_reg_220 <= next_mul_fu_401_p2;
            end if; 
        end if;
    end process;

    -- temp_2_reg_265 assign process. --
    temp_2_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_fu_425_p2)))) then 
                temp_2_reg_265 <= temp_reg_242;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_340_p2) and (ap_const_lv1_0 = tmp_s_fu_357_p2))) then 
                temp_2_reg_265 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- temp_reg_242 assign process. --
    temp_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                temp_reg_242 <= temp_1_fu_476_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_149) and ((ap_const_lv1_0 = tmp_6_reg_515) or not((ap_const_lv1_0 = exitcond1_fu_389_p2))))) then 
                temp_reg_242 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                A_cached_row_load_reg_593 <= A_cached_row_q0;
                B_cached_load_reg_598 <= B_cached_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_498 = ap_const_lv1_0)))) then
                i_1_reg_505 <= i_1_fu_319_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_522 <= j_1_fu_346_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                k_5_reg_568 <= k_5_fu_431_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_fu_425_p2))) then
                next_mul5_reg_583 <= next_mul5_fu_447_p2;
                tmp_12_reg_573 <= tmp_12_fu_437_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_122) and (((ap_const_lv1_0 = tmp_8_reg_530) and not((ap_const_lv1_0 = tmp_6_reg_515))) or (not((ap_const_lv1_0 = tmp_6_reg_515)) and not((ap_const_lv1_0 = exitcond2_fu_368_p2)))))) then
                    tmp_11_trn_cast_reg_542(5 downto 0) <= tmp_11_trn_cast_fu_385_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_149) and ((ap_const_lv1_0 = tmp_6_reg_515) or not((ap_const_lv1_0 = exitcond1_fu_389_p2))))) then
                    tmp_13_trn_cast_reg_560(5 downto 0) <= tmp_13_trn_cast_fu_417_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_12_reg_573)))) then
                tmp_15_reg_603 <= grp_fu_463_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_4_reg_498 <= tmp_4_fu_303_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_498 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond4_fu_313_p2))) then
                tmp_5_reg_510 <= tmp_5_fu_325_p2;
                tmp_6_reg_515 <= tmp_6_fu_330_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_340_p2) and not((ap_const_lv1_0 = tmp_s_fu_357_p2)))) then
                tmp_8_reg_530 <= tmp_8_fu_362_p2;
            end if;
        end if;
    end process;
    tmp_11_trn_cast_reg_542(11 downto 6) <= "000000";
    tmp_13_trn_cast_reg_560(11 downto 6) <= "000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, C_full_n, tmp_4_reg_498, exitcond4_fu_313_p2, tmp_6_reg_515, tmp_8_reg_530, exitcond3_fu_340_p2, tmp_s_fu_357_p2, exitcond2_fu_368_p2, ap_sig_bdd_122, exitcond1_fu_389_p2, ap_sig_bdd_149, exitcond_fu_425_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((tmp_4_reg_498 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_313_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_340_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((ap_const_lv1_0 = exitcond3_fu_340_p2) and not((ap_const_lv1_0 = tmp_s_fu_357_p2)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((not(ap_sig_bdd_122) and ((ap_const_lv1_0 = tmp_8_reg_530) or not((ap_const_lv1_0 = exitcond2_fu_368_p2))))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif ((not((ap_const_lv1_0 = tmp_8_reg_530)) and (ap_const_lv1_0 = exitcond2_fu_368_p2) and not(ap_sig_bdd_122))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((not(ap_sig_bdd_149) and ((ap_const_lv1_0 = tmp_6_reg_515) or not((ap_const_lv1_0 = exitcond1_fu_389_p2))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                elsif ((not((ap_const_lv1_0 = tmp_6_reg_515)) and (ap_const_lv1_0 = exitcond1_fu_389_p2) and not(ap_sig_bdd_149))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond_fu_425_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st15_fsm_14 => 
                if (not((C_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    -- A_cached_row_address0 assign process. --
    A_cached_row_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, tmp_10_fu_380_p1, tmp_13_fu_442_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_cached_row_address0 <= tmp_10_fu_380_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            A_cached_row_address0 <= tmp_13_fu_442_p1(6 - 1 downto 0);
        else 
            A_cached_row_address0 <= "XXXXXX";
        end if; 
    end process;


    -- A_cached_row_ce0 assign process. --
    A_cached_row_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_bdd_122, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_122)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            A_cached_row_ce0 <= ap_const_logic_1;
        else 
            A_cached_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_cached_row_d0 <= A_dout;

    -- A_cached_row_we0 assign process. --
    A_cached_row_we0_assign_proc : process(tmp_8_reg_530, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_368_p2, ap_sig_bdd_122)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_8_reg_530)) and (ap_const_lv1_0 = exitcond2_fu_368_p2) and not(ap_sig_bdd_122)))) then 
            A_cached_row_we0 <= ap_const_logic_1;
        else 
            A_cached_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_read assign process. --
    A_read_assign_proc : process(tmp_8_reg_530, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_368_p2, ap_sig_bdd_122)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_8_reg_530)) and (ap_const_lv1_0 = exitcond2_fu_368_p2) and not(ap_sig_bdd_122))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_cached_address0 assign process. --
    B_cached_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, tmp_11_fu_412_p1, tmp_14_fu_458_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            B_cached_address0 <= tmp_11_fu_412_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            B_cached_address0 <= tmp_14_fu_458_p1(12 - 1 downto 0);
        else 
            B_cached_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- B_cached_ce0 assign process. --
    B_cached_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_bdd_149, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_149)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            B_cached_ce0 <= ap_const_logic_1;
        else 
            B_cached_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_cached_d0 <= B_dout;

    -- B_cached_we0 assign process. --
    B_cached_we0_assign_proc : process(tmp_6_reg_515, ap_sig_cseq_ST_st5_fsm_4, exitcond1_fu_389_p2, ap_sig_bdd_149)
    begin
        if (((not((ap_const_lv1_0 = tmp_6_reg_515)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_389_p2) and not(ap_sig_bdd_149)))) then 
            B_cached_we0 <= ap_const_logic_1;
        else 
            B_cached_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_read assign process. --
    B_read_assign_proc : process(tmp_6_reg_515, ap_sig_cseq_ST_st5_fsm_4, exitcond1_fu_389_p2, ap_sig_bdd_149)
    begin
        if ((not((ap_const_lv1_0 = tmp_6_reg_515)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_389_p2) and not(ap_sig_bdd_149))) then 
            B_read <= ap_const_logic_1;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= temp_2_reg_265;

    -- C_write assign process. --
    C_write_assign_proc : process(C_full_n, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((C_full_n = ap_const_logic_0)))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_4_reg_498, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_313_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_498 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_313_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_4_reg_498, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_313_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_498 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_313_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(A_empty_n, tmp_8_reg_530, exitcond2_fu_368_p2)
    begin
                ap_sig_bdd_122 <= ((A_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_8_reg_530)) and (ap_const_lv1_0 = exitcond2_fu_368_p2));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(B_empty_n, tmp_6_reg_515, exitcond1_fu_389_p2)
    begin
                ap_sig_bdd_149 <= (not((ap_const_lv1_0 = tmp_6_reg_515)) and (B_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond1_fu_389_p2));
    end process;


    -- ap_sig_bdd_168 assign process. --
    ap_sig_bdd_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_168 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_199 assign process. --
    ap_sig_bdd_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_199 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_211 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_246 assign process. --
    ap_sig_bdd_246_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_246 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_31 assign process. --
    ap_sig_bdd_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_376 assign process. --
    ap_sig_bdd_376_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_376 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_74 assign process. --
    ap_sig_bdd_74_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_74 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_95 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_199)
    begin
        if (ap_sig_bdd_199) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_246)
    begin
        if (ap_sig_bdd_246) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_31)
    begin
        if (ap_sig_bdd_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_74)
    begin
        if (ap_sig_bdd_74) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_95)
    begin
        if (ap_sig_bdd_95) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_168)
    begin
        if (ap_sig_bdd_168) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_376)
    begin
        if (ap_sig_bdd_376) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_389_p2 <= "1" when (k_1_reg_209 = ap_const_lv6_32) else "0";
    exitcond2_fu_368_p2 <= "1" when (k_reg_198 = ap_const_lv6_32) else "0";
    exitcond3_fu_340_p2 <= "1" when (j_reg_186 = ap_const_lv6_32) else "0";
    exitcond4_fu_313_p2 <= "1" when (i_reg_175 = ap_const_lv6_32) else "0";
    exitcond_fu_425_p2 <= "1" when (k_2_reg_231 = ap_const_lv6_32) else "0";
    grp_fu_463_ce <= ap_const_logic_1;
    grp_fu_463_p0 <= B_cached_load_reg_598;
    grp_fu_463_p1 <= A_cached_row_load_reg_593;
    i_1_fu_319_p2 <= std_logic_vector(unsigned(i_reg_175) + unsigned(ap_const_lv6_1));
    i_cast6_fu_309_p1 <= std_logic_vector(resize(unsigned(i_reg_175),8));
    j_1_fu_346_p2 <= std_logic_vector(unsigned(j_reg_186) + unsigned(ap_const_lv6_1));
    j_cast5_fu_336_p1 <= std_logic_vector(resize(unsigned(j_reg_186),8));
    k_2_cast2_fu_421_p1 <= std_logic_vector(resize(unsigned(k_2_reg_231),8));
    k_3_fu_374_p2 <= std_logic_vector(unsigned(k_reg_198) + unsigned(ap_const_lv6_1));
    k_4_fu_395_p2 <= std_logic_vector(unsigned(k_1_reg_209) + unsigned(ap_const_lv6_1));
    k_5_fu_431_p2 <= std_logic_vector(unsigned(k_2_reg_231) + unsigned(ap_const_lv6_1));
    next_mul5_fu_447_p2 <= std_logic_vector(unsigned(phi_mul4_reg_254) + unsigned(ap_const_lv12_32));
    next_mul_fu_401_p2 <= std_logic_vector(unsigned(phi_mul_reg_220) + unsigned(ap_const_lv12_32));
    p_addr1_fu_453_p2 <= std_logic_vector(unsigned(tmp_13_trn_cast_reg_560) + unsigned(phi_mul4_reg_254));
    p_addr3_fu_407_p2 <= std_logic_vector(unsigned(tmp_11_trn_cast_reg_542) + unsigned(phi_mul_reg_220));
    temp_1_fu_476_p3 <= 
        temp_3_fu_470_p2 when (tmp_12_reg_573(0) = '1') else 
        temp_reg_242;
    temp_3_fu_470_p2 <= std_logic_vector(unsigned(temp_reg_242) + unsigned(tmp_16_fu_467_p1));
    tmp1_fu_297_p2 <= (tmp_1_fu_285_p2 and tmp_3_fu_291_p2);
    tmp_10_fu_380_p1 <= std_logic_vector(resize(unsigned(k_reg_198),64));
    tmp_11_fu_412_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_407_p2),64));
    tmp_11_trn_cast_fu_385_p1 <= std_logic_vector(resize(unsigned(j_reg_186),12));
    tmp_12_fu_437_p2 <= "1" when (unsigned(k_2_cast2_fu_421_p1) < unsigned(mB)) else "0";
    tmp_13_fu_442_p1 <= std_logic_vector(resize(unsigned(k_2_reg_231),64));
    tmp_13_trn_cast_fu_417_p1 <= std_logic_vector(resize(unsigned(j_reg_186),12));
    tmp_14_fu_458_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_453_p2),64));
        tmp_16_fu_467_p1 <= std_logic_vector(resize(signed(tmp_15_reg_603),64));

    tmp_1_fu_285_p2 <= "1" when (mA = mC) else "0";
    tmp_3_fu_291_p2 <= "1" when (nB = nC) else "0";
    tmp_4_fu_303_p2 <= (tmp1_fu_297_p2 and tmp_fu_279_p2);
    tmp_5_fu_325_p2 <= "1" when (unsigned(i_cast6_fu_309_p1) < unsigned(mC)) else "0";
    tmp_6_fu_330_p2 <= "1" when (i_reg_175 = ap_const_lv6_0) else "0";
    tmp_8_fu_362_p2 <= "1" when (j_reg_186 = ap_const_lv6_0) else "0";
    tmp_9_fu_352_p2 <= "1" when (unsigned(j_cast5_fu_336_p1) < unsigned(nC)) else "0";
    tmp_fu_279_p2 <= "1" when (nA = mB) else "0";
    tmp_s_fu_357_p2 <= (tmp_5_reg_510 and tmp_9_fu_352_p2);
end behav;
