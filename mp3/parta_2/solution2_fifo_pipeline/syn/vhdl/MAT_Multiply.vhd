-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    mA : IN STD_LOGIC_VECTOR (7 downto 0);
    nA : IN STD_LOGIC_VECTOR (7 downto 0);
    mB : IN STD_LOGIC_VECTOR (7 downto 0);
    nB : IN STD_LOGIC_VECTOR (7 downto 0);
    mC : IN STD_LOGIC_VECTOR (7 downto 0);
    nC : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.445750,HLS_SYN_LAT=540001,HLS_SYN_TPT=none,HLS_SYN_MEM=33,HLS_SYN_DSP=4,HLS_SYN_FF=296,HLS_SYN_LUT=374}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st5_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st8_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_pp2_stg0_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st18_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_2710 : STD_LOGIC_VECTOR (13 downto 0) := "10011100010000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_24 : BOOLEAN;
    signal k_reg_216 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_228 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_239 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_2_reg_250 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul5_reg_274 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal indvar_flatten_next_fu_322_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_next_reg_528 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_mid2_fu_334_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_mid2_reg_533 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_mid2_fu_348_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_mid2_reg_540 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_118 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal k_3_fu_398_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_3_reg_561 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_trn_cast_fu_409_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_trn_cast_reg_566 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal exitcond1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_147 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_154 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal k_4_fu_418_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul_fu_424_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr4_fu_430_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_addr4_reg_585 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_trn_cast_fu_439_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_trn_cast_reg_590 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_178 : BOOLEAN;
    signal exitcond_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_595 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_187 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it8 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_595_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_595_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_595_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_595_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_595_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_595_pp2_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_595_pp2_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_5_fu_448_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_604_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_604_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_604_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_604_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_604_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_604_pp2_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_604_pp2_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul6_fu_468_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_cached_row_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_load_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_500_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_272 : BOOLEAN;
    signal ap_sig_bdd_278 : BOOLEAN;
    signal A_cached_row_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal A_cached_row_ce0 : STD_LOGIC;
    signal A_cached_row_we0 : STD_LOGIC;
    signal A_cached_row_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal B_cached_ce0 : STD_LOGIC;
    signal B_cached_we0 : STD_LOGIC;
    signal B_cached_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_183 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_194 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_205 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_phi_fu_220_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_342_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast_fu_356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_cast_fu_454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr2_fu_474_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_484_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_484_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_A_cached_row IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_B_cached IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_cached_row_U : component MAT_Multiply_A_cached_row
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_cached_row_address0,
        ce0 => A_cached_row_ce0,
        we0 => A_cached_row_we0,
        d0 => A_cached_row_d0,
        q0 => A_cached_row_q0);

    B_cached_U : component MAT_Multiply_B_cached
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_cached_address0,
        ce0 => B_cached_ce0,
        we0 => B_cached_we0,
        d0 => B_cached_d0,
        q0 => B_cached_q0);

    MAT_Multiply_mul_32s_32s_32_6_U0 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_484_p0,
        din1 => grp_fu_484_p1,
        ce => grp_fu_484_ce,
        dout => grp_fu_484_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_392_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_520 = ap_const_lv1_0)) and (exitcond_flatten_fu_316_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_fu_380_p2)) and not((ap_const_lv1_0 = tmp_8_fu_386_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond2_fu_392_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_520 = ap_const_lv1_0)) and (exitcond_flatten_fu_316_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_fu_380_p2)) and not((ap_const_lv1_0 = tmp_8_fu_386_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_392_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond1_fu_412_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3) and not((ap_const_lv1_0 = tmp_6_reg_545)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3) and not((ap_const_lv1_0 = tmp_6_reg_545))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond1_fu_412_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_442_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_fu_442_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_442_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it4 assign process. --
    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it5 assign process. --
    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it6 assign process. --
    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it7 assign process. --
    ap_reg_ppiten_pp2_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it7 <= ap_reg_ppiten_pp2_it6;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it8 assign process. --
    ap_reg_ppiten_pp2_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it8 <= ap_reg_ppiten_pp2_it7;
            end if;
        end if;
    end process;


    -- i_reg_194 assign process. --
    i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_310_p2 = ap_const_lv1_0)))) then 
                i_reg_194 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_7) and not(ap_sig_bdd_278))) then 
                i_reg_194 <= i_mid2_reg_540;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_183 assign process. --
    indvar_flatten_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_310_p2 = ap_const_lv1_0)))) then 
                indvar_flatten_reg_183 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_7) and not(ap_sig_bdd_278))) then 
                indvar_flatten_reg_183 <= indvar_flatten_next_reg_528;
            end if; 
        end if;
    end process;

    -- j_reg_205 assign process. --
    j_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_310_p2 = ap_const_lv1_0)))) then 
                j_reg_205 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_7) and not(ap_sig_bdd_278))) then 
                j_reg_205 <= j_1_fu_500_p2;
            end if; 
        end if;
    end process;

    -- k_1_reg_228 assign process. --
    k_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3) and not((ap_const_lv1_0 = tmp_6_reg_545)))) then 
                k_1_reg_228 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then 
                k_1_reg_228 <= k_4_fu_418_p2;
            end if; 
        end if;
    end process;

    -- k_2_reg_250 assign process. --
    k_2_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = exitcond_fu_442_p2))) then 
                k_2_reg_250 <= k_5_fu_448_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                k_2_reg_250 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_reg_216 assign process. --
    k_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_520 = ap_const_lv1_0)) and (exitcond_flatten_fu_316_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_fu_380_p2)) and not((ap_const_lv1_0 = tmp_8_fu_386_p2)))) then 
                k_reg_216 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond2_reg_557) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                k_reg_216 <= k_3_reg_561;
            end if; 
        end if;
    end process;

    -- phi_mul5_reg_274 assign process. --
    phi_mul5_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = exitcond_fu_442_p2))) then 
                phi_mul5_reg_274 <= next_mul6_fu_468_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                phi_mul5_reg_274 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_239 assign process. --
    phi_mul_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3) and not((ap_const_lv1_0 = tmp_6_reg_545)))) then 
                phi_mul_reg_239 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then 
                phi_mul_reg_239 <= next_mul_fu_424_p2;
            end if; 
        end if;
    end process;

    -- temp_reg_261 assign process. --
    temp_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_595_pp2_it7))) then 
                temp_reg_261 <= temp_1_fu_493_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                temp_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_reg_595))) then
                A_cached_row_load_reg_624 <= A_cached_row_q0;
                B_cached_load_reg_629 <= B_cached_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6)) then
                ap_reg_ppstg_exitcond_reg_595_pp2_it1 <= exitcond_reg_595;
                ap_reg_ppstg_tmp_14_reg_604_pp2_it1 <= tmp_14_reg_604;
                exitcond_reg_595 <= exitcond_fu_442_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_reg_595_pp2_it2 <= ap_reg_ppstg_exitcond_reg_595_pp2_it1;
                ap_reg_ppstg_exitcond_reg_595_pp2_it3 <= ap_reg_ppstg_exitcond_reg_595_pp2_it2;
                ap_reg_ppstg_exitcond_reg_595_pp2_it4 <= ap_reg_ppstg_exitcond_reg_595_pp2_it3;
                ap_reg_ppstg_exitcond_reg_595_pp2_it5 <= ap_reg_ppstg_exitcond_reg_595_pp2_it4;
                ap_reg_ppstg_exitcond_reg_595_pp2_it6 <= ap_reg_ppstg_exitcond_reg_595_pp2_it5;
                ap_reg_ppstg_exitcond_reg_595_pp2_it7 <= ap_reg_ppstg_exitcond_reg_595_pp2_it6;
                ap_reg_ppstg_tmp_14_reg_604_pp2_it2 <= ap_reg_ppstg_tmp_14_reg_604_pp2_it1;
                ap_reg_ppstg_tmp_14_reg_604_pp2_it3 <= ap_reg_ppstg_tmp_14_reg_604_pp2_it2;
                ap_reg_ppstg_tmp_14_reg_604_pp2_it4 <= ap_reg_ppstg_tmp_14_reg_604_pp2_it3;
                ap_reg_ppstg_tmp_14_reg_604_pp2_it5 <= ap_reg_ppstg_tmp_14_reg_604_pp2_it4;
                ap_reg_ppstg_tmp_14_reg_604_pp2_it6 <= ap_reg_ppstg_tmp_14_reg_604_pp2_it5;
                ap_reg_ppstg_tmp_14_reg_604_pp2_it7 <= ap_reg_ppstg_tmp_14_reg_604_pp2_it6;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                exitcond1_reg_571 <= exitcond1_fu_412_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond2_reg_557 <= exitcond2_fu_392_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_520 = ap_const_lv1_0)) and (exitcond_flatten_fu_316_p2 = ap_const_lv1_0))) then
                i_mid2_reg_540 <= i_mid2_fu_348_p3;
                j_mid2_reg_533 <= j_mid2_fu_334_p3;
                tmp_6_reg_545 <= tmp_6_fu_365_p2;
                tmp_s_reg_549 <= tmp_s_fu_380_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_520 = ap_const_lv1_0)))) then
                indvar_flatten_next_reg_528 <= indvar_flatten_next_fu_322_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                k_3_reg_561 <= k_3_fu_398_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then
                p_addr4_reg_585 <= p_addr4_fu_430_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3) and not((ap_const_lv1_0 = tmp_6_reg_545)))) then
                    tmp_11_trn_cast_reg_566(6 downto 0) <= tmp_11_trn_cast_fu_409_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then
                    tmp_13_trn_cast_reg_590(6 downto 0) <= tmp_13_trn_cast_fu_439_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_fu_442_p2))) then
                tmp_14_reg_604 <= tmp_14_fu_458_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_595_pp2_it6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_604_pp2_it6)))) then
                tmp_16_reg_634 <= grp_fu_484_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_4_reg_520 <= tmp_4_fu_310_p2;
            end if;
        end if;
    end process;
    tmp_11_trn_cast_reg_566(13 downto 7) <= "0000000";
    tmp_13_trn_cast_reg_590(13 downto 7) <= "0000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_4_reg_520, exitcond_flatten_fu_316_p2, tmp_6_reg_545, tmp_s_fu_380_p2, tmp_8_fu_386_p2, exitcond2_fu_392_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_118, ap_reg_ppiten_pp0_it1, exitcond1_fu_412_p2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_154, ap_reg_ppiten_pp1_it1, exitcond_fu_442_p2, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it7, ap_reg_ppiten_pp2_it8, ap_sig_bdd_278)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((tmp_4_reg_520 = ap_const_lv1_0) or not((exitcond_flatten_fu_316_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((tmp_4_reg_520 = ap_const_lv1_0)) and (exitcond_flatten_fu_316_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_fu_380_p2)) and (ap_const_lv1_0 = tmp_8_fu_386_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                elsif ((not((tmp_4_reg_520 = ap_const_lv1_0)) and (exitcond_flatten_fu_316_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_fu_380_p2)) and not((ap_const_lv1_0 = tmp_8_fu_386_p2)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_7;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_392_p2))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_392_p2)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st5_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_6_reg_545))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_5;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond1_fu_412_p2))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond1_fu_412_p2)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st8_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_6;
            when ap_ST_pp2_stg0_fsm_6 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it8) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it7)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = exitcond_fu_442_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_6;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = exitcond_fu_442_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_7;
                end if;
            when ap_ST_st18_fsm_7 => 
                if (not(ap_sig_bdd_278)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- A_cached_row_address0 assign process. --
    A_cached_row_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp2_stg0_fsm_6, ap_reg_ppiten_pp2_it0, tmp_10_fu_404_p1, tmp_15_fu_463_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            A_cached_row_address0 <= tmp_10_fu_404_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            A_cached_row_address0 <= tmp_15_fu_463_p1(7 - 1 downto 0);
        else 
            A_cached_row_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- A_cached_row_ce0 assign process. --
    A_cached_row_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_118, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp2_stg0_fsm_6, ap_reg_ppiten_pp2_it0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            A_cached_row_ce0 <= ap_const_logic_1;
        else 
            A_cached_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_cached_row_d0 <= A_dout;

    -- A_cached_row_we0 assign process. --
    A_cached_row_we0_assign_proc : process(exitcond2_reg_557, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_118, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond2_reg_557) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            A_cached_row_we0 <= ap_const_logic_1;
        else 
            A_cached_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_read assign process. --
    A_read_assign_proc : process(exitcond2_reg_557, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_118, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond2_reg_557) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_118 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_cached_address0 assign process. --
    B_cached_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp2_stg0_fsm_6, ap_reg_ppiten_pp2_it0, tmp_12_fu_435_p1, tmp_17_fu_479_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            B_cached_address0 <= tmp_12_fu_435_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            B_cached_address0 <= tmp_17_fu_479_p1(14 - 1 downto 0);
        else 
            B_cached_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- B_cached_ce0 assign process. --
    B_cached_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_154, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp2_stg0_fsm_6, ap_reg_ppiten_pp2_it0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            B_cached_ce0 <= ap_const_logic_1;
        else 
            B_cached_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_cached_d0 <= B_dout;

    -- B_cached_we0 assign process. --
    B_cached_we0_assign_proc : process(exitcond1_reg_571, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_154, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_reg_571) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            B_cached_we0 <= ap_const_logic_1;
        else 
            B_cached_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_read assign process. --
    B_read_assign_proc : process(exitcond1_reg_571, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_154, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_reg_571) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            B_read <= ap_const_logic_1;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= temp_reg_261;

    -- C_write assign process. --
    C_write_assign_proc : process(tmp_s_reg_549, ap_sig_cseq_ST_st18_fsm_7, ap_sig_bdd_278)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_7) and not((ap_const_lv1_0 = tmp_s_reg_549)) and not(ap_sig_bdd_278))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_4_reg_520, exitcond_flatten_fu_316_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_520 = ap_const_lv1_0) or not((exitcond_flatten_fu_316_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_4_reg_520, exitcond_flatten_fu_316_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_520 = ap_const_lv1_0) or not((exitcond_flatten_fu_316_p2 = ap_const_lv1_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_118 assign process. --
    ap_sig_bdd_118_assign_proc : process(A_empty_n, exitcond2_reg_557)
    begin
                ap_sig_bdd_118 <= ((A_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond2_reg_557));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_147 assign process. --
    ap_sig_bdd_147_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_147 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(B_empty_n, exitcond1_reg_571)
    begin
                ap_sig_bdd_154 <= ((B_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond1_reg_571));
    end process;


    -- ap_sig_bdd_178 assign process. --
    ap_sig_bdd_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_178 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_187 assign process. --
    ap_sig_bdd_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_187 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_24 assign process. --
    ap_sig_bdd_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_272 assign process. --
    ap_sig_bdd_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_272 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_278 assign process. --
    ap_sig_bdd_278_assign_proc : process(C_full_n, tmp_s_reg_549)
    begin
                ap_sig_bdd_278 <= ((C_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_s_reg_549)));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_147)
    begin
        if (ap_sig_bdd_147) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_6_assign_proc : process(ap_sig_bdd_187)
    begin
        if (ap_sig_bdd_187) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_7 assign process. --
    ap_sig_cseq_ST_st18_fsm_7_assign_proc : process(ap_sig_bdd_272)
    begin
        if (ap_sig_bdd_272) then 
            ap_sig_cseq_ST_st18_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_24)
    begin
        if (ap_sig_bdd_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_3 assign process. --
    ap_sig_cseq_ST_st5_fsm_3_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_5 assign process. --
    ap_sig_cseq_ST_st8_fsm_5_assign_proc : process(ap_sig_bdd_178)
    begin
        if (ap_sig_bdd_178) then 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_412_p2 <= "1" when (k_1_reg_228 = ap_const_lv7_64) else "0";
    exitcond2_fu_392_p2 <= "1" when (k_phi_fu_220_p4 = ap_const_lv7_64) else "0";
    exitcond3_fu_328_p2 <= "1" when (j_reg_205 = ap_const_lv7_64) else "0";
    exitcond_flatten_fu_316_p2 <= "1" when (indvar_flatten_reg_183 = ap_const_lv14_2710) else "0";
    exitcond_fu_442_p2 <= "1" when (k_2_reg_250 = ap_const_lv7_64) else "0";
    grp_fu_484_ce <= ap_const_logic_1;
    grp_fu_484_p0 <= B_cached_load_reg_629;
    grp_fu_484_p1 <= A_cached_row_load_reg_624;
    i_cast_fu_356_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_348_p3),8));
    i_mid2_fu_348_p3 <= 
        i_s_fu_342_p2 when (exitcond3_fu_328_p2(0) = '1') else 
        i_reg_194;
    i_s_fu_342_p2 <= std_logic_vector(unsigned(i_reg_194) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_322_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_183) + unsigned(ap_const_lv14_1));
    j_1_fu_500_p2 <= std_logic_vector(unsigned(j_mid2_reg_533) + unsigned(ap_const_lv7_1));
    j_cast_fu_371_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_334_p3),8));
    j_mid2_fu_334_p3 <= 
        ap_const_lv7_0 when (exitcond3_fu_328_p2(0) = '1') else 
        j_reg_205;
    k_2_cast_fu_454_p1 <= std_logic_vector(resize(unsigned(k_2_reg_250),8));
    k_3_fu_398_p2 <= std_logic_vector(unsigned(k_phi_fu_220_p4) + unsigned(ap_const_lv7_1));
    k_4_fu_418_p2 <= std_logic_vector(unsigned(k_1_reg_228) + unsigned(ap_const_lv7_1));
    k_5_fu_448_p2 <= std_logic_vector(unsigned(k_2_reg_250) + unsigned(ap_const_lv7_1));

    -- k_phi_fu_220_p4 assign process. --
    k_phi_fu_220_p4_assign_proc : process(k_reg_216, exitcond2_reg_557, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, k_3_reg_561)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond2_reg_557) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            k_phi_fu_220_p4 <= k_3_reg_561;
        else 
            k_phi_fu_220_p4 <= k_reg_216;
        end if; 
    end process;

    next_mul6_fu_468_p2 <= std_logic_vector(unsigned(phi_mul5_reg_274) + unsigned(ap_const_lv14_64));
    next_mul_fu_424_p2 <= std_logic_vector(unsigned(phi_mul_reg_239) + unsigned(ap_const_lv14_64));
    p_addr2_fu_474_p2 <= std_logic_vector(unsigned(tmp_13_trn_cast_reg_590) + unsigned(phi_mul5_reg_274));
    p_addr4_fu_430_p2 <= std_logic_vector(unsigned(tmp_11_trn_cast_reg_566) + unsigned(phi_mul_reg_239));
    temp_1_fu_493_p3 <= 
        temp_2_fu_488_p2 when (ap_reg_ppstg_tmp_14_reg_604_pp2_it7(0) = '1') else 
        temp_reg_261;
    temp_2_fu_488_p2 <= std_logic_vector(signed(tmp_16_reg_634) + signed(temp_reg_261));
    tmp1_fu_304_p2 <= (tmp_1_fu_292_p2 and tmp_3_fu_298_p2);
    tmp_10_fu_404_p1 <= std_logic_vector(resize(unsigned(k_reg_216),64));
    tmp_11_trn_cast_fu_409_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_533),14));
    tmp_12_fu_435_p1 <= std_logic_vector(resize(unsigned(p_addr4_reg_585),64));
    tmp_13_trn_cast_fu_439_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_533),14));
    tmp_14_fu_458_p2 <= "1" when (unsigned(k_2_cast_fu_454_p1) < unsigned(mB)) else "0";
    tmp_15_fu_463_p1 <= std_logic_vector(resize(unsigned(k_2_reg_250),64));
    tmp_17_fu_479_p1 <= std_logic_vector(resize(unsigned(p_addr2_fu_474_p2),64));
    tmp_1_fu_292_p2 <= "1" when (mA = mC) else "0";
    tmp_3_fu_298_p2 <= "1" when (nB = nC) else "0";
    tmp_4_fu_310_p2 <= (tmp1_fu_304_p2 and tmp_fu_286_p2);
    tmp_5_fu_360_p2 <= "1" when (unsigned(i_cast_fu_356_p1) < unsigned(mC)) else "0";
    tmp_6_fu_365_p2 <= "1" when (i_mid2_fu_348_p3 = ap_const_lv7_0) else "0";
    tmp_8_fu_386_p2 <= "1" when (j_mid2_fu_334_p3 = ap_const_lv7_0) else "0";
    tmp_9_fu_375_p2 <= "1" when (unsigned(j_cast_fu_371_p1) < unsigned(nC)) else "0";
    tmp_fu_286_p2 <= "1" when (nA = mB) else "0";
    tmp_s_fu_380_p2 <= (tmp_5_fu_360_p2 and tmp_9_fu_375_p2);
end behav;
