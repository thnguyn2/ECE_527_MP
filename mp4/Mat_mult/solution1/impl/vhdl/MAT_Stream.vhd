-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_arr_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_arr_empty_n : IN STD_LOGIC;
    in_arr_read : OUT STD_LOGIC;
    out_arr_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_arr_full_n : IN STD_LOGIC;
    out_arr_write : OUT STD_LOGIC;
    op_type : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MAT_Stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Stream,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1,HLS_SYN_LUT=1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_24 : BOOLEAN;
    signal ap_sig_bdd_30 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_30)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_sig_bdd_24 assign process. --
    ap_sig_bdd_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_30 assign process. --
    ap_sig_bdd_30_assign_proc : process(in_arr_empty_n, out_arr_full_n)
    begin
                ap_sig_bdd_30 <= ((in_arr_empty_n = ap_const_logic_0) or (out_arr_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_24)
    begin
        if (ap_sig_bdd_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- in_arr_read assign process. --
    in_arr_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_30)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_30))) then 
            in_arr_read <= ap_const_logic_1;
        else 
            in_arr_read <= ap_const_logic_0;
        end if; 
    end process;

    out_arr_din <= in_arr_dout;

    -- out_arr_write assign process. --
    out_arr_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_30)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_30))) then 
            out_arr_write <= ap_const_logic_1;
        else 
            out_arr_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
