// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "MAT_Multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic MAT_Multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic MAT_Multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> MAT_Multiply::ap_ST_st1_fsm_0 = "1";
const sc_lv<17> MAT_Multiply::ap_ST_st2_fsm_1 = "10";
const sc_lv<17> MAT_Multiply::ap_ST_st3_fsm_2 = "100";
const sc_lv<17> MAT_Multiply::ap_ST_st4_fsm_3 = "1000";
const sc_lv<17> MAT_Multiply::ap_ST_st5_fsm_4 = "10000";
const sc_lv<17> MAT_Multiply::ap_ST_st6_fsm_5 = "100000";
const sc_lv<17> MAT_Multiply::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<17> MAT_Multiply::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<17> MAT_Multiply::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<17> MAT_Multiply::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<17> MAT_Multiply::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<17> MAT_Multiply::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<17> MAT_Multiply::ap_ST_st13_fsm_12 = "1000000000000";
const sc_lv<17> MAT_Multiply::ap_ST_st14_fsm_13 = "10000000000000";
const sc_lv<17> MAT_Multiply::ap_ST_st15_fsm_14 = "100000000000000";
const sc_lv<17> MAT_Multiply::ap_ST_st16_fsm_15 = "1000000000000000";
const sc_lv<17> MAT_Multiply::ap_ST_st17_fsm_16 = "10000000000000000";
const sc_lv<32> MAT_Multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> MAT_Multiply::ap_const_lv1_1 = "1";
const sc_lv<32> MAT_Multiply::ap_const_lv32_1 = "1";
const sc_lv<1> MAT_Multiply::ap_const_lv1_0 = "0";
const sc_lv<32> MAT_Multiply::ap_const_lv32_2 = "10";
const sc_lv<32> MAT_Multiply::ap_const_lv32_3 = "11";
const sc_lv<32> MAT_Multiply::ap_const_lv32_5 = "101";
const sc_lv<32> MAT_Multiply::ap_const_lv32_7 = "111";
const sc_lv<32> MAT_Multiply::ap_const_lv32_8 = "1000";
const sc_lv<32> MAT_Multiply::ap_const_lv32_E = "1110";
const sc_lv<32> MAT_Multiply::ap_const_lv32_F = "1111";
const sc_lv<6> MAT_Multiply::ap_const_lv6_0 = "000000";
const sc_lv<12> MAT_Multiply::ap_const_lv12_0 = "000000000000";
const sc_lv<32> MAT_Multiply::ap_const_lv32_10 = "10000";
const sc_lv<32> MAT_Multiply::ap_const_lv32_4 = "100";
const sc_lv<32> MAT_Multiply::ap_const_lv32_6 = "110";
const sc_lv<64> MAT_Multiply::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<12> MAT_Multiply::ap_const_lv12_32 = "110010";
const sc_lv<6> MAT_Multiply::ap_const_lv6_32 = "110010";
const sc_lv<6> MAT_Multiply::ap_const_lv6_1 = "1";
const sc_lv<32> MAT_Multiply::ap_const_lv32_9 = "1001";

MAT_Multiply::MAT_Multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    A_cached_row_U = new MAT_Multiply_A_cached_row("A_cached_row_U");
    A_cached_row_U->clk(ap_clk);
    A_cached_row_U->reset(ap_rst);
    A_cached_row_U->address0(A_cached_row_address0);
    A_cached_row_U->ce0(A_cached_row_ce0);
    A_cached_row_U->we0(A_cached_row_we0);
    A_cached_row_U->d0(A_cached_row_d0);
    A_cached_row_U->q0(A_cached_row_q0);
    B_cached_U = new MAT_Multiply_B_cached("B_cached_U");
    B_cached_U->clk(ap_clk);
    B_cached_U->reset(ap_rst);
    B_cached_U->address0(B_cached_address0);
    B_cached_U->ce0(B_cached_ce0);
    B_cached_U->we0(B_cached_we0);
    B_cached_U->d0(B_cached_d0);
    B_cached_U->q0(B_cached_q0);
    MAT_Multiply_mul_32s_32s_32_6_U1 = new MAT_Multiply_mul_32s_32s_32_6<1,6,32,32,32>("MAT_Multiply_mul_32s_32s_32_6_U1");
    MAT_Multiply_mul_32s_32s_32_6_U1->clk(ap_clk);
    MAT_Multiply_mul_32s_32s_32_6_U1->reset(ap_rst);
    MAT_Multiply_mul_32s_32s_32_6_U1->din0(grp_fu_528_p0);
    MAT_Multiply_mul_32s_32s_32_6_U1->din1(grp_fu_528_p1);
    MAT_Multiply_mul_32s_32s_32_6_U1->ce(grp_fu_528_ce);
    MAT_Multiply_mul_32s_32s_32_6_U1->dout(grp_fu_528_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_11_fu_430_p1 );

    SC_METHOD(thread_A_cached_row_address0);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_10_fu_439_p1 );
    sensitive << ( tmp_14_fu_497_p1 );

    SC_METHOD(thread_A_cached_row_ce0);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_cached_row_d0);
    sensitive << ( A_q0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_cached_row_we0);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( tmp_12_fu_467_p1 );

    SC_METHOD(thread_B_cached_address0);
    sensitive << ( tmp_12_reg_645 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_15_fu_513_p1 );

    SC_METHOD(thread_B_cached_ce0);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_B_cached_d0);
    sensitive << ( B_q0 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_B_cached_we0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_C_address0);
    sensitive << ( ap_sig_cseq_ST_st17_fsm_16 );
    sensitive << ( tmp_18_fu_548_p1 );

    SC_METHOD(thread_C_ce0);
    sensitive << ( ap_sig_cseq_ST_st17_fsm_16 );

    SC_METHOD(thread_C_d0);
    sensitive << ( ap_sig_cseq_ST_st17_fsm_16 );
    sensitive << ( temp_2_reg_293 );

    SC_METHOD(thread_C_we0);
    sensitive << ( ap_sig_cseq_ST_st17_fsm_16 );

    SC_METHOD(thread_ap_done);
    sensitive << ( tmp_4_reg_567 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond4_fu_353_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_4_reg_567 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond4_fu_353_p2 );

    SC_METHOD(thread_ap_sig_bdd_108);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_128);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_155);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_180);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_209);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_220);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_232);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_272);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_281);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_295);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_421);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_83);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_9);
    sensitive << ( ap_sig_bdd_421 );

    SC_METHOD(thread_ap_sig_cseq_ST_st15_fsm_14);
    sensitive << ( ap_sig_bdd_220 );

    SC_METHOD(thread_ap_sig_cseq_ST_st16_fsm_15);
    sensitive << ( ap_sig_bdd_232 );

    SC_METHOD(thread_ap_sig_cseq_ST_st17_fsm_16);
    sensitive << ( ap_sig_bdd_272 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_33 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_83 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_108 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_128 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_281 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_155 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_bdd_295 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_bdd_180 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_bdd_209 );

    SC_METHOD(thread_exitcond1_fu_444_p2);
    sensitive << ( tmp_6_reg_594 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( k_1_reg_237 );

    SC_METHOD(thread_exitcond2_fu_408_p2);
    sensitive << ( tmp_8_reg_610 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( k_reg_225 );

    SC_METHOD(thread_exitcond3_fu_380_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_213 );

    SC_METHOD(thread_exitcond4_fu_353_p2);
    sensitive << ( tmp_4_reg_567 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_exitcond_fu_480_p2);
    sensitive << ( tmp_s_reg_606 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( k_2_reg_259 );

    SC_METHOD(thread_grp_fu_528_ce);

    SC_METHOD(thread_grp_fu_528_p0);
    sensitive << ( B_cached_load_reg_698 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_grp_fu_528_p1);
    sensitive << ( A_cached_row_load_reg_693 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_i_1_fu_359_p2);
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_i_cast6_fu_349_p1);
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_j_1_fu_386_p2);
    sensitive << ( j_reg_213 );

    SC_METHOD(thread_j_cast5_fu_376_p1);
    sensitive << ( j_reg_213 );

    SC_METHOD(thread_k_2_cast2_fu_476_p1);
    sensitive << ( k_2_reg_259 );

    SC_METHOD(thread_k_3_fu_414_p2);
    sensitive << ( k_reg_225 );

    SC_METHOD(thread_k_4_fu_450_p2);
    sensitive << ( k_1_reg_237 );

    SC_METHOD(thread_k_5_fu_486_p2);
    sensitive << ( k_2_reg_259 );

    SC_METHOD(thread_next_mul1_fu_337_p2);
    sensitive << ( phi_mul2_reg_201 );

    SC_METHOD(thread_next_mul2_fu_343_p2);
    sensitive << ( phi_mul1_reg_189 );

    SC_METHOD(thread_next_mul3_fu_502_p2);
    sensitive << ( phi_mul3_reg_282 );

    SC_METHOD(thread_next_mul_fu_456_p2);
    sensitive << ( phi_mul_reg_248 );

    SC_METHOD(thread_p_addr1_fu_508_p2);
    sensitive << ( tmp_13_trn_cast_reg_655 );
    sensitive << ( phi_mul3_reg_282 );

    SC_METHOD(thread_p_addr3_fu_522_p2);
    sensitive << ( phi_mul2_reg_201 );
    sensitive << ( tmp_15_trn_cast_fu_518_p1 );

    SC_METHOD(thread_p_addr5_fu_424_p2);
    sensitive << ( phi_mul1_reg_189 );
    sensitive << ( tmp_10_trn_cast_fu_420_p1 );

    SC_METHOD(thread_p_addr9_fu_462_p2);
    sensitive << ( tmp_11_trn7_cast_reg_627 );
    sensitive << ( phi_mul_reg_248 );

    SC_METHOD(thread_temp_1_fu_541_p3);
    sensitive << ( tmp_13_reg_668 );
    sensitive << ( temp_reg_270 );
    sensitive << ( temp_3_fu_535_p2 );

    SC_METHOD(thread_temp_3_fu_535_p2);
    sensitive << ( temp_reg_270 );
    sensitive << ( tmp_17_fu_532_p1 );

    SC_METHOD(thread_tmp1_fu_325_p2);
    sensitive << ( tmp_1_fu_313_p2 );
    sensitive << ( tmp_3_fu_319_p2 );

    SC_METHOD(thread_tmp_10_fu_439_p1);
    sensitive << ( k_reg_225 );

    SC_METHOD(thread_tmp_10_trn_cast_fu_420_p1);
    sensitive << ( k_reg_225 );

    SC_METHOD(thread_tmp_11_fu_430_p1);
    sensitive << ( p_addr5_fu_424_p2 );

    SC_METHOD(thread_tmp_11_trn7_cast_fu_435_p1);
    sensitive << ( j_reg_213 );

    SC_METHOD(thread_tmp_12_fu_467_p1);
    sensitive << ( p_addr9_fu_462_p2 );

    SC_METHOD(thread_tmp_13_fu_492_p2);
    sensitive << ( mB );
    sensitive << ( tmp_s_reg_606 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( exitcond_fu_480_p2 );
    sensitive << ( k_2_cast2_fu_476_p1 );

    SC_METHOD(thread_tmp_13_trn_cast_fu_472_p1);
    sensitive << ( j_reg_213 );

    SC_METHOD(thread_tmp_14_fu_497_p1);
    sensitive << ( k_2_reg_259 );

    SC_METHOD(thread_tmp_15_fu_513_p1);
    sensitive << ( p_addr1_fu_508_p2 );

    SC_METHOD(thread_tmp_15_trn_cast_fu_518_p1);
    sensitive << ( j_reg_213 );

    SC_METHOD(thread_tmp_17_fu_532_p1);
    sensitive << ( tmp_16_reg_703 );

    SC_METHOD(thread_tmp_18_fu_548_p1);
    sensitive << ( p_addr3_reg_688 );

    SC_METHOD(thread_tmp_1_fu_313_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( mA );
    sensitive << ( mC );

    SC_METHOD(thread_tmp_3_fu_319_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( nB );
    sensitive << ( nC );

    SC_METHOD(thread_tmp_4_fu_331_p2);
    sensitive << ( tmp1_fu_325_p2 );
    sensitive << ( tmp_fu_307_p2 );

    SC_METHOD(thread_tmp_5_fu_365_p2);
    sensitive << ( mC );
    sensitive << ( tmp_4_reg_567 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond4_fu_353_p2 );
    sensitive << ( i_cast6_fu_349_p1 );

    SC_METHOD(thread_tmp_6_fu_370_p2);
    sensitive << ( tmp_4_reg_567 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond4_fu_353_p2 );
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_tmp_8_fu_402_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_s_fu_397_p2 );
    sensitive << ( exitcond3_fu_380_p2 );
    sensitive << ( j_reg_213 );

    SC_METHOD(thread_tmp_9_fu_392_p2);
    sensitive << ( nC );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond3_fu_380_p2 );
    sensitive << ( j_cast5_fu_376_p1 );

    SC_METHOD(thread_tmp_fu_307_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( nA );
    sensitive << ( mB );

    SC_METHOD(thread_tmp_s_fu_397_p2);
    sensitive << ( tmp_5_reg_589 );
    sensitive << ( tmp_9_fu_392_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_4_reg_567 );
    sensitive << ( exitcond4_fu_353_p2 );
    sensitive << ( tmp_6_reg_594 );
    sensitive << ( tmp_s_fu_397_p2 );
    sensitive << ( tmp_s_reg_606 );
    sensitive << ( exitcond3_fu_380_p2 );
    sensitive << ( tmp_8_reg_610 );
    sensitive << ( exitcond2_fu_408_p2 );
    sensitive << ( exitcond1_fu_444_p2 );
    sensitive << ( exitcond_fu_480_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "MAT_Multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, C_address0, "(port)C_address0");
    sc_trace(mVcdFile, C_ce0, "(port)C_ce0");
    sc_trace(mVcdFile, C_we0, "(port)C_we0");
    sc_trace(mVcdFile, C_d0, "(port)C_d0");
    sc_trace(mVcdFile, mA, "(port)mA");
    sc_trace(mVcdFile, nA, "(port)nA");
    sc_trace(mVcdFile, mB, "(port)mB");
    sc_trace(mVcdFile, nB, "(port)nB");
    sc_trace(mVcdFile, mC, "(port)mC");
    sc_trace(mVcdFile, nC, "(port)nC");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_33, "ap_sig_bdd_33");
    sc_trace(mVcdFile, tmp_4_fu_331_p2, "tmp_4_fu_331_p2");
    sc_trace(mVcdFile, tmp_4_reg_567, "tmp_4_reg_567");
    sc_trace(mVcdFile, next_mul1_fu_337_p2, "next_mul1_fu_337_p2");
    sc_trace(mVcdFile, next_mul1_reg_571, "next_mul1_reg_571");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_83, "ap_sig_bdd_83");
    sc_trace(mVcdFile, next_mul2_fu_343_p2, "next_mul2_fu_343_p2");
    sc_trace(mVcdFile, next_mul2_reg_576, "next_mul2_reg_576");
    sc_trace(mVcdFile, i_1_fu_359_p2, "i_1_fu_359_p2");
    sc_trace(mVcdFile, i_1_reg_584, "i_1_reg_584");
    sc_trace(mVcdFile, tmp_5_fu_365_p2, "tmp_5_fu_365_p2");
    sc_trace(mVcdFile, tmp_5_reg_589, "tmp_5_reg_589");
    sc_trace(mVcdFile, exitcond4_fu_353_p2, "exitcond4_fu_353_p2");
    sc_trace(mVcdFile, tmp_6_fu_370_p2, "tmp_6_fu_370_p2");
    sc_trace(mVcdFile, tmp_6_reg_594, "tmp_6_reg_594");
    sc_trace(mVcdFile, j_1_fu_386_p2, "j_1_fu_386_p2");
    sc_trace(mVcdFile, j_1_reg_601, "j_1_reg_601");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_108, "ap_sig_bdd_108");
    sc_trace(mVcdFile, tmp_s_fu_397_p2, "tmp_s_fu_397_p2");
    sc_trace(mVcdFile, tmp_s_reg_606, "tmp_s_reg_606");
    sc_trace(mVcdFile, exitcond3_fu_380_p2, "exitcond3_fu_380_p2");
    sc_trace(mVcdFile, tmp_8_fu_402_p2, "tmp_8_fu_402_p2");
    sc_trace(mVcdFile, tmp_8_reg_610, "tmp_8_reg_610");
    sc_trace(mVcdFile, k_3_fu_414_p2, "k_3_fu_414_p2");
    sc_trace(mVcdFile, k_3_reg_617, "k_3_reg_617");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_128, "ap_sig_bdd_128");
    sc_trace(mVcdFile, exitcond2_fu_408_p2, "exitcond2_fu_408_p2");
    sc_trace(mVcdFile, tmp_11_trn7_cast_fu_435_p1, "tmp_11_trn7_cast_fu_435_p1");
    sc_trace(mVcdFile, tmp_11_trn7_cast_reg_627, "tmp_11_trn7_cast_reg_627");
    sc_trace(mVcdFile, k_4_fu_450_p2, "k_4_fu_450_p2");
    sc_trace(mVcdFile, k_4_reg_635, "k_4_reg_635");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_155, "ap_sig_bdd_155");
    sc_trace(mVcdFile, next_mul_fu_456_p2, "next_mul_fu_456_p2");
    sc_trace(mVcdFile, next_mul_reg_640, "next_mul_reg_640");
    sc_trace(mVcdFile, exitcond1_fu_444_p2, "exitcond1_fu_444_p2");
    sc_trace(mVcdFile, tmp_12_fu_467_p1, "tmp_12_fu_467_p1");
    sc_trace(mVcdFile, tmp_12_reg_645, "tmp_12_reg_645");
    sc_trace(mVcdFile, tmp_13_trn_cast_fu_472_p1, "tmp_13_trn_cast_fu_472_p1");
    sc_trace(mVcdFile, tmp_13_trn_cast_reg_655, "tmp_13_trn_cast_reg_655");
    sc_trace(mVcdFile, k_5_fu_486_p2, "k_5_fu_486_p2");
    sc_trace(mVcdFile, k_5_reg_663, "k_5_reg_663");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_180, "ap_sig_bdd_180");
    sc_trace(mVcdFile, tmp_13_fu_492_p2, "tmp_13_fu_492_p2");
    sc_trace(mVcdFile, tmp_13_reg_668, "tmp_13_reg_668");
    sc_trace(mVcdFile, exitcond_fu_480_p2, "exitcond_fu_480_p2");
    sc_trace(mVcdFile, next_mul3_fu_502_p2, "next_mul3_fu_502_p2");
    sc_trace(mVcdFile, next_mul3_reg_678, "next_mul3_reg_678");
    sc_trace(mVcdFile, p_addr3_fu_522_p2, "p_addr3_fu_522_p2");
    sc_trace(mVcdFile, p_addr3_reg_688, "p_addr3_reg_688");
    sc_trace(mVcdFile, A_cached_row_q0, "A_cached_row_q0");
    sc_trace(mVcdFile, A_cached_row_load_reg_693, "A_cached_row_load_reg_693");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_bdd_209, "ap_sig_bdd_209");
    sc_trace(mVcdFile, B_cached_q0, "B_cached_q0");
    sc_trace(mVcdFile, B_cached_load_reg_698, "B_cached_load_reg_698");
    sc_trace(mVcdFile, grp_fu_528_p2, "grp_fu_528_p2");
    sc_trace(mVcdFile, tmp_16_reg_703, "tmp_16_reg_703");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st15_fsm_14, "ap_sig_cseq_ST_st15_fsm_14");
    sc_trace(mVcdFile, ap_sig_bdd_220, "ap_sig_bdd_220");
    sc_trace(mVcdFile, temp_1_fu_541_p3, "temp_1_fu_541_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st16_fsm_15, "ap_sig_cseq_ST_st16_fsm_15");
    sc_trace(mVcdFile, ap_sig_bdd_232, "ap_sig_bdd_232");
    sc_trace(mVcdFile, A_cached_row_address0, "A_cached_row_address0");
    sc_trace(mVcdFile, A_cached_row_ce0, "A_cached_row_ce0");
    sc_trace(mVcdFile, A_cached_row_we0, "A_cached_row_we0");
    sc_trace(mVcdFile, A_cached_row_d0, "A_cached_row_d0");
    sc_trace(mVcdFile, B_cached_address0, "B_cached_address0");
    sc_trace(mVcdFile, B_cached_ce0, "B_cached_ce0");
    sc_trace(mVcdFile, B_cached_we0, "B_cached_we0");
    sc_trace(mVcdFile, B_cached_d0, "B_cached_d0");
    sc_trace(mVcdFile, i_reg_178, "i_reg_178");
    sc_trace(mVcdFile, phi_mul1_reg_189, "phi_mul1_reg_189");
    sc_trace(mVcdFile, phi_mul2_reg_201, "phi_mul2_reg_201");
    sc_trace(mVcdFile, j_reg_213, "j_reg_213");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st17_fsm_16, "ap_sig_cseq_ST_st17_fsm_16");
    sc_trace(mVcdFile, ap_sig_bdd_272, "ap_sig_bdd_272");
    sc_trace(mVcdFile, k_reg_225, "k_reg_225");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_281, "ap_sig_bdd_281");
    sc_trace(mVcdFile, k_1_reg_237, "k_1_reg_237");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_295, "ap_sig_bdd_295");
    sc_trace(mVcdFile, phi_mul_reg_248, "phi_mul_reg_248");
    sc_trace(mVcdFile, k_2_reg_259, "k_2_reg_259");
    sc_trace(mVcdFile, temp_reg_270, "temp_reg_270");
    sc_trace(mVcdFile, phi_mul3_reg_282, "phi_mul3_reg_282");
    sc_trace(mVcdFile, temp_2_reg_293, "temp_2_reg_293");
    sc_trace(mVcdFile, tmp_11_fu_430_p1, "tmp_11_fu_430_p1");
    sc_trace(mVcdFile, tmp_10_fu_439_p1, "tmp_10_fu_439_p1");
    sc_trace(mVcdFile, tmp_14_fu_497_p1, "tmp_14_fu_497_p1");
    sc_trace(mVcdFile, tmp_15_fu_513_p1, "tmp_15_fu_513_p1");
    sc_trace(mVcdFile, tmp_18_fu_548_p1, "tmp_18_fu_548_p1");
    sc_trace(mVcdFile, tmp_1_fu_313_p2, "tmp_1_fu_313_p2");
    sc_trace(mVcdFile, tmp_3_fu_319_p2, "tmp_3_fu_319_p2");
    sc_trace(mVcdFile, tmp1_fu_325_p2, "tmp1_fu_325_p2");
    sc_trace(mVcdFile, tmp_fu_307_p2, "tmp_fu_307_p2");
    sc_trace(mVcdFile, i_cast6_fu_349_p1, "i_cast6_fu_349_p1");
    sc_trace(mVcdFile, j_cast5_fu_376_p1, "j_cast5_fu_376_p1");
    sc_trace(mVcdFile, tmp_9_fu_392_p2, "tmp_9_fu_392_p2");
    sc_trace(mVcdFile, tmp_10_trn_cast_fu_420_p1, "tmp_10_trn_cast_fu_420_p1");
    sc_trace(mVcdFile, p_addr5_fu_424_p2, "p_addr5_fu_424_p2");
    sc_trace(mVcdFile, p_addr9_fu_462_p2, "p_addr9_fu_462_p2");
    sc_trace(mVcdFile, k_2_cast2_fu_476_p1, "k_2_cast2_fu_476_p1");
    sc_trace(mVcdFile, p_addr1_fu_508_p2, "p_addr1_fu_508_p2");
    sc_trace(mVcdFile, tmp_15_trn_cast_fu_518_p1, "tmp_15_trn_cast_fu_518_p1");
    sc_trace(mVcdFile, grp_fu_528_p0, "grp_fu_528_p0");
    sc_trace(mVcdFile, grp_fu_528_p1, "grp_fu_528_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_9, "ap_sig_cseq_ST_st10_fsm_9");
    sc_trace(mVcdFile, ap_sig_bdd_421, "ap_sig_bdd_421");
    sc_trace(mVcdFile, tmp_17_fu_532_p1, "tmp_17_fu_532_p1");
    sc_trace(mVcdFile, temp_3_fu_535_p2, "temp_3_fu_535_p2");
    sc_trace(mVcdFile, grp_fu_528_ce, "grp_fu_528_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("MAT_Multiply.hdltvin.dat");
    mHdltvoutHandle.open("MAT_Multiply.hdltvout.dat");
}

MAT_Multiply::~MAT_Multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete A_cached_row_U;
    delete B_cached_U;
    delete MAT_Multiply_mul_32s_32s_32_6_U1;
}

void MAT_Multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         !esl_seteq<1,1,1>(tmp_4_fu_331_p2.read(), ap_const_lv1_0))) {
        i_reg_178 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read()))) {
        i_reg_178 = i_1_reg_584.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read())) {
        j_reg_213 = j_1_reg_601.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                !esl_seteq<1,1,1>(tmp_4_reg_567.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_353_p2.read()))) {
        j_reg_213 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_610.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_408_p2.read()))))) {
        k_1_reg_237 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        k_1_reg_237 = k_4_reg_635.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_15.read())) {
        k_2_reg_259 = k_5_reg_663.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) || 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_444_p2.read())))) {
        k_2_reg_259 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_397_p2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_402_p2.read()))) {
        k_reg_225 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        k_reg_225 = k_3_reg_617.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         !esl_seteq<1,1,1>(tmp_4_fu_331_p2.read(), ap_const_lv1_0))) {
        phi_mul1_reg_189 = ap_const_lv12_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read()))) {
        phi_mul1_reg_189 = next_mul2_reg_576.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         !esl_seteq<1,1,1>(tmp_4_fu_331_p2.read(), ap_const_lv1_0))) {
        phi_mul2_reg_201 = ap_const_lv12_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read()))) {
        phi_mul2_reg_201 = next_mul1_reg_571.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_15.read())) {
        phi_mul3_reg_282 = next_mul3_reg_678.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) || 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_444_p2.read())))) {
        phi_mul3_reg_282 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_610.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_408_p2.read()))))) {
        phi_mul_reg_248 = ap_const_lv12_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        phi_mul_reg_248 = next_mul_reg_640.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_606.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_480_p2.read()))) {
        temp_2_reg_293 = temp_reg_270.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_397_p2.read()))) {
        temp_2_reg_293 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_15.read())) {
        temp_reg_270 = temp_1_fu_541_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) || 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_444_p2.read())))) {
        temp_reg_270 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        A_cached_row_load_reg_693 = A_cached_row_q0.read();
        B_cached_load_reg_698 = B_cached_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_4_reg_567.read(), ap_const_lv1_0))) {
        i_1_reg_584 = i_1_fu_359_p2.read();
        next_mul1_reg_571 = next_mul1_fu_337_p2.read();
        next_mul2_reg_576 = next_mul2_fu_343_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_1_reg_601 = j_1_fu_386_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_610.read()))) {
        k_3_reg_617 = k_3_fu_414_p2.read();
    }
    if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()))) {
        k_4_reg_635 = k_4_fu_450_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_606.read()))) {
        k_5_reg_663 = k_5_fu_486_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_606.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_480_p2.read()))) {
        next_mul3_reg_678 = next_mul3_fu_502_p2.read();
        tmp_13_reg_668 = tmp_13_fu_492_p2.read();
    }
    if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_444_p2.read()))) {
        next_mul_reg_640 = next_mul_fu_456_p2.read();
        tmp_12_reg_645 = tmp_12_fu_467_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_606.read()) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_480_p2.read())))) {
        p_addr3_reg_688 = p_addr3_fu_522_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_610.read()) && 
   !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read())) || 
  (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) && 
   !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_408_p2.read()))))) {
        tmp_11_trn7_cast_reg_627 = tmp_11_trn7_cast_fu_435_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_444_p2.read())))) {
        tmp_13_trn_cast_reg_655 = tmp_13_trn_cast_fu_472_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_14.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_13_reg_668.read()))) {
        tmp_16_reg_703 = grp_fu_528_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_4_reg_567 = tmp_4_fu_331_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_4_reg_567.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_353_p2.read()))) {
        tmp_5_reg_589 = tmp_5_fu_365_p2.read();
        tmp_6_reg_594 = tmp_6_fu_370_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_397_p2.read()))) {
        tmp_8_reg_610 = tmp_8_fu_402_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read()))) {
        tmp_s_reg_606 = tmp_s_fu_397_p2.read();
    }
}

void MAT_Multiply::thread_A_address0() {
    A_address0 =  (sc_lv<12>) (tmp_11_fu_430_p1.read());
}

void MAT_Multiply::thread_A_cached_row_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        A_cached_row_address0 =  (sc_lv<6>) (tmp_10_fu_439_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        A_cached_row_address0 =  (sc_lv<6>) (tmp_14_fu_497_p1.read());
    } else {
        A_cached_row_address0 = "XXXXXX";
    }
}

void MAT_Multiply::thread_A_cached_row_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        A_cached_row_ce0 = ap_const_logic_1;
    } else {
        A_cached_row_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_A_cached_row_d0() {
    A_cached_row_d0 = A_q0.read();
}

void MAT_Multiply::thread_A_cached_row_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        A_cached_row_we0 = ap_const_logic_1;
    } else {
        A_cached_row_we0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_B_address0() {
    B_address0 =  (sc_lv<12>) (tmp_12_fu_467_p1.read());
}

void MAT_Multiply::thread_B_cached_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        B_cached_address0 =  (sc_lv<12>) (tmp_12_reg_645.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        B_cached_address0 =  (sc_lv<12>) (tmp_15_fu_513_p1.read());
    } else {
        B_cached_address0 =  (sc_lv<12>) ("XXXXXXXXXXXX");
    }
}

void MAT_Multiply::thread_B_cached_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        B_cached_ce0 = ap_const_logic_1;
    } else {
        B_cached_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_B_cached_d0() {
    B_cached_d0 = B_q0.read();
}

void MAT_Multiply::thread_B_cached_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        B_cached_we0 = ap_const_logic_1;
    } else {
        B_cached_we0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_C_address0() {
    C_address0 =  (sc_lv<12>) (tmp_18_fu_548_p1.read());
}

void MAT_Multiply::thread_C_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read())) {
        C_ce0 = ap_const_logic_1;
    } else {
        C_ce0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_C_d0() {
    C_d0 = temp_2_reg_293.read();
}

void MAT_Multiply::thread_C_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read()))) {
        C_we0 = ap_const_logic_1;
    } else {
        C_we0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         (esl_seteq<1,1,1>(tmp_4_reg_567.read(), ap_const_lv1_0) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_353_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         (esl_seteq<1,1,1>(tmp_4_reg_567.read(), ap_const_lv1_0) || 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_353_p2.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_bdd_108() {
    ap_sig_bdd_108 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void MAT_Multiply::thread_ap_sig_bdd_128() {
    ap_sig_bdd_128 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void MAT_Multiply::thread_ap_sig_bdd_155() {
    ap_sig_bdd_155 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void MAT_Multiply::thread_ap_sig_bdd_180() {
    ap_sig_bdd_180 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void MAT_Multiply::thread_ap_sig_bdd_209() {
    ap_sig_bdd_209 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void MAT_Multiply::thread_ap_sig_bdd_220() {
    ap_sig_bdd_220 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(14, 14));
}

void MAT_Multiply::thread_ap_sig_bdd_232() {
    ap_sig_bdd_232 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(15, 15));
}

void MAT_Multiply::thread_ap_sig_bdd_272() {
    ap_sig_bdd_272 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(16, 16));
}

void MAT_Multiply::thread_ap_sig_bdd_281() {
    ap_sig_bdd_281 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void MAT_Multiply::thread_ap_sig_bdd_295() {
    ap_sig_bdd_295 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void MAT_Multiply::thread_ap_sig_bdd_33() {
    ap_sig_bdd_33 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void MAT_Multiply::thread_ap_sig_bdd_421() {
    ap_sig_bdd_421 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void MAT_Multiply::thread_ap_sig_bdd_83() {
    ap_sig_bdd_83 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st10_fsm_9() {
    if (ap_sig_bdd_421.read()) {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st15_fsm_14() {
    if (ap_sig_bdd_220.read()) {
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st16_fsm_15() {
    if (ap_sig_bdd_232.read()) {
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st17_fsm_16() {
    if (ap_sig_bdd_272.read()) {
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_33.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_83.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_108.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_128.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_281.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_155.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_bdd_295.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_bdd_180.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_bdd_209.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void MAT_Multiply::thread_exitcond1_fu_444_p2() {
    exitcond1_fu_444_p2 = (!k_1_reg_237.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(k_1_reg_237.read() == ap_const_lv6_32);
}

void MAT_Multiply::thread_exitcond2_fu_408_p2() {
    exitcond2_fu_408_p2 = (!k_reg_225.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_225.read() == ap_const_lv6_32);
}

void MAT_Multiply::thread_exitcond3_fu_380_p2() {
    exitcond3_fu_380_p2 = (!j_reg_213.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_213.read() == ap_const_lv6_32);
}

void MAT_Multiply::thread_exitcond4_fu_353_p2() {
    exitcond4_fu_353_p2 = (!i_reg_178.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_178.read() == ap_const_lv6_32);
}

void MAT_Multiply::thread_exitcond_fu_480_p2() {
    exitcond_fu_480_p2 = (!k_2_reg_259.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(k_2_reg_259.read() == ap_const_lv6_32);
}

void MAT_Multiply::thread_grp_fu_528_ce() {
    grp_fu_528_ce = ap_const_logic_1;
}

void MAT_Multiply::thread_grp_fu_528_p0() {
    grp_fu_528_p0 = B_cached_load_reg_698.read();
}

void MAT_Multiply::thread_grp_fu_528_p1() {
    grp_fu_528_p1 = A_cached_row_load_reg_693.read();
}

void MAT_Multiply::thread_i_1_fu_359_p2() {
    i_1_fu_359_p2 = (!i_reg_178.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_178.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void MAT_Multiply::thread_i_cast6_fu_349_p1() {
    i_cast6_fu_349_p1 = esl_zext<8,6>(i_reg_178.read());
}

void MAT_Multiply::thread_j_1_fu_386_p2() {
    j_1_fu_386_p2 = (!j_reg_213.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_reg_213.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void MAT_Multiply::thread_j_cast5_fu_376_p1() {
    j_cast5_fu_376_p1 = esl_zext<8,6>(j_reg_213.read());
}

void MAT_Multiply::thread_k_2_cast2_fu_476_p1() {
    k_2_cast2_fu_476_p1 = esl_zext<8,6>(k_2_reg_259.read());
}

void MAT_Multiply::thread_k_3_fu_414_p2() {
    k_3_fu_414_p2 = (!k_reg_225.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(k_reg_225.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void MAT_Multiply::thread_k_4_fu_450_p2() {
    k_4_fu_450_p2 = (!k_1_reg_237.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(k_1_reg_237.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void MAT_Multiply::thread_k_5_fu_486_p2() {
    k_5_fu_486_p2 = (!k_2_reg_259.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(k_2_reg_259.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void MAT_Multiply::thread_next_mul1_fu_337_p2() {
    next_mul1_fu_337_p2 = (!phi_mul2_reg_201.read().is_01() || !ap_const_lv12_32.is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul2_reg_201.read()) + sc_biguint<12>(ap_const_lv12_32));
}

void MAT_Multiply::thread_next_mul2_fu_343_p2() {
    next_mul2_fu_343_p2 = (!phi_mul1_reg_189.read().is_01() || !ap_const_lv12_32.is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul1_reg_189.read()) + sc_biguint<12>(ap_const_lv12_32));
}

void MAT_Multiply::thread_next_mul3_fu_502_p2() {
    next_mul3_fu_502_p2 = (!phi_mul3_reg_282.read().is_01() || !ap_const_lv12_32.is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul3_reg_282.read()) + sc_biguint<12>(ap_const_lv12_32));
}

void MAT_Multiply::thread_next_mul_fu_456_p2() {
    next_mul_fu_456_p2 = (!phi_mul_reg_248.read().is_01() || !ap_const_lv12_32.is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul_reg_248.read()) + sc_biguint<12>(ap_const_lv12_32));
}

void MAT_Multiply::thread_p_addr1_fu_508_p2() {
    p_addr1_fu_508_p2 = (!tmp_13_trn_cast_reg_655.read().is_01() || !phi_mul3_reg_282.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_13_trn_cast_reg_655.read()) + sc_biguint<12>(phi_mul3_reg_282.read()));
}

void MAT_Multiply::thread_p_addr3_fu_522_p2() {
    p_addr3_fu_522_p2 = (!tmp_15_trn_cast_fu_518_p1.read().is_01() || !phi_mul2_reg_201.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_15_trn_cast_fu_518_p1.read()) + sc_biguint<12>(phi_mul2_reg_201.read()));
}

void MAT_Multiply::thread_p_addr5_fu_424_p2() {
    p_addr5_fu_424_p2 = (!tmp_10_trn_cast_fu_420_p1.read().is_01() || !phi_mul1_reg_189.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_10_trn_cast_fu_420_p1.read()) + sc_biguint<12>(phi_mul1_reg_189.read()));
}

void MAT_Multiply::thread_p_addr9_fu_462_p2() {
    p_addr9_fu_462_p2 = (!tmp_11_trn7_cast_reg_627.read().is_01() || !phi_mul_reg_248.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_11_trn7_cast_reg_627.read()) + sc_biguint<12>(phi_mul_reg_248.read()));
}

void MAT_Multiply::thread_temp_1_fu_541_p3() {
    temp_1_fu_541_p3 = (!tmp_13_reg_668.read()[0].is_01())? sc_lv<64>(): ((tmp_13_reg_668.read()[0].to_bool())? temp_3_fu_535_p2.read(): temp_reg_270.read());
}

void MAT_Multiply::thread_temp_3_fu_535_p2() {
    temp_3_fu_535_p2 = (!temp_reg_270.read().is_01() || !tmp_17_fu_532_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(temp_reg_270.read()) + sc_bigint<64>(tmp_17_fu_532_p1.read()));
}

void MAT_Multiply::thread_tmp1_fu_325_p2() {
    tmp1_fu_325_p2 = (tmp_1_fu_313_p2.read() & tmp_3_fu_319_p2.read());
}

void MAT_Multiply::thread_tmp_10_fu_439_p1() {
    tmp_10_fu_439_p1 = esl_zext<64,6>(k_reg_225.read());
}

void MAT_Multiply::thread_tmp_10_trn_cast_fu_420_p1() {
    tmp_10_trn_cast_fu_420_p1 = esl_zext<12,6>(k_reg_225.read());
}

void MAT_Multiply::thread_tmp_11_fu_430_p1() {
    tmp_11_fu_430_p1 = esl_zext<64,12>(p_addr5_fu_424_p2.read());
}

void MAT_Multiply::thread_tmp_11_trn7_cast_fu_435_p1() {
    tmp_11_trn7_cast_fu_435_p1 = esl_zext<12,6>(j_reg_213.read());
}

void MAT_Multiply::thread_tmp_12_fu_467_p1() {
    tmp_12_fu_467_p1 = esl_zext<64,12>(p_addr9_fu_462_p2.read());
}

void MAT_Multiply::thread_tmp_13_fu_492_p2() {
    tmp_13_fu_492_p2 = (!k_2_cast2_fu_476_p1.read().is_01() || !mB.read().is_01())? sc_lv<1>(): (sc_biguint<8>(k_2_cast2_fu_476_p1.read()) < sc_biguint<8>(mB.read()));
}

void MAT_Multiply::thread_tmp_13_trn_cast_fu_472_p1() {
    tmp_13_trn_cast_fu_472_p1 = esl_zext<12,6>(j_reg_213.read());
}

void MAT_Multiply::thread_tmp_14_fu_497_p1() {
    tmp_14_fu_497_p1 = esl_zext<64,6>(k_2_reg_259.read());
}

void MAT_Multiply::thread_tmp_15_fu_513_p1() {
    tmp_15_fu_513_p1 = esl_zext<64,12>(p_addr1_fu_508_p2.read());
}

void MAT_Multiply::thread_tmp_15_trn_cast_fu_518_p1() {
    tmp_15_trn_cast_fu_518_p1 = esl_zext<12,6>(j_reg_213.read());
}

void MAT_Multiply::thread_tmp_17_fu_532_p1() {
    tmp_17_fu_532_p1 = esl_sext<64,32>(tmp_16_reg_703.read());
}

void MAT_Multiply::thread_tmp_18_fu_548_p1() {
    tmp_18_fu_548_p1 = esl_zext<64,12>(p_addr3_reg_688.read());
}

void MAT_Multiply::thread_tmp_1_fu_313_p2() {
    tmp_1_fu_313_p2 = (!mA.read().is_01() || !mC.read().is_01())? sc_lv<1>(): sc_lv<1>(mA.read() == mC.read());
}

void MAT_Multiply::thread_tmp_3_fu_319_p2() {
    tmp_3_fu_319_p2 = (!nB.read().is_01() || !nC.read().is_01())? sc_lv<1>(): sc_lv<1>(nB.read() == nC.read());
}

void MAT_Multiply::thread_tmp_4_fu_331_p2() {
    tmp_4_fu_331_p2 = (tmp1_fu_325_p2.read() & tmp_fu_307_p2.read());
}

void MAT_Multiply::thread_tmp_5_fu_365_p2() {
    tmp_5_fu_365_p2 = (!i_cast6_fu_349_p1.read().is_01() || !mC.read().is_01())? sc_lv<1>(): (sc_biguint<8>(i_cast6_fu_349_p1.read()) < sc_biguint<8>(mC.read()));
}

void MAT_Multiply::thread_tmp_6_fu_370_p2() {
    tmp_6_fu_370_p2 = (!i_reg_178.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_178.read() == ap_const_lv6_0);
}

void MAT_Multiply::thread_tmp_8_fu_402_p2() {
    tmp_8_fu_402_p2 = (!j_reg_213.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_213.read() == ap_const_lv6_0);
}

void MAT_Multiply::thread_tmp_9_fu_392_p2() {
    tmp_9_fu_392_p2 = (!j_cast5_fu_376_p1.read().is_01() || !nC.read().is_01())? sc_lv<1>(): (sc_biguint<8>(j_cast5_fu_376_p1.read()) < sc_biguint<8>(nC.read()));
}

void MAT_Multiply::thread_tmp_fu_307_p2() {
    tmp_fu_307_p2 = (!nA.read().is_01() || !mB.read().is_01())? sc_lv<1>(): sc_lv<1>(nA.read() == mB.read());
}

void MAT_Multiply::thread_tmp_s_fu_397_p2() {
    tmp_s_fu_397_p2 = (tmp_5_reg_589.read() & tmp_9_fu_392_p2.read());
}

void MAT_Multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_4_reg_567.read(), ap_const_lv1_0) || !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_353_p2.read()))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read())) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_380_p2.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_397_p2.read()))) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_610.read()) || !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_408_p2.read()))) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_594.read()) || !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_444_p2.read()))) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_606.read()) || !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_480_p2.read()))) {
                ap_NS_fsm = ap_ST_st17_fsm_16;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

void MAT_Multiply::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_address0\" :  \"" << C_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_ce0\" :  \"" << C_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_we0\" :  \"" << C_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_d0\" :  \"" << C_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mA\" :  \"" << mA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nA\" :  \"" << nA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mB\" :  \"" << mB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nB\" :  \"" << nB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mC\" :  \"" << mC.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nC\" :  \"" << nC.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

