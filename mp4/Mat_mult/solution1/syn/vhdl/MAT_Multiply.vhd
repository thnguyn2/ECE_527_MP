-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    mA : IN STD_LOGIC_VECTOR (7 downto 0);
    nA : IN STD_LOGIC_VECTOR (7 downto 0);
    mB : IN STD_LOGIC_VECTOR (7 downto 0);
    nB : IN STD_LOGIC_VECTOR (7 downto 0);
    mC : IN STD_LOGIC_VECTOR (7 downto 0);
    nC : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MAT_Multiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.309000,HLS_SYN_LAT=348801,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=4,HLS_SYN_FF=439,HLS_SYN_LUT=535}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_33 : BOOLEAN;
    signal tmp_4_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul1_fu_337_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul1_reg_571 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal next_mul2_fu_343_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul2_reg_576 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_fu_359_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_584 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_594 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_386_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_601 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_108 : BOOLEAN;
    signal tmp_s_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_414_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_3_reg_617 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal exitcond2_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_trn7_cast_fu_435_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_trn7_cast_reg_627 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_4_fu_450_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_4_reg_635 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_155 : BOOLEAN;
    signal next_mul_fu_456_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_640 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_trn_cast_fu_472_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_trn_cast_reg_655 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_5_fu_486_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_5_reg_663 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal tmp_13_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul3_fu_502_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul3_reg_678 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr3_fu_522_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr3_reg_688 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_cached_row_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_load_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_209 : BOOLEAN;
    signal B_cached_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_220 : BOOLEAN;
    signal temp_1_fu_541_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_232 : BOOLEAN;
    signal A_cached_row_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_cached_row_ce0 : STD_LOGIC;
    signal A_cached_row_we0 : STD_LOGIC;
    signal A_cached_row_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_cached_ce0 : STD_LOGIC;
    signal B_cached_we0 : STD_LOGIC;
    signal B_cached_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_178 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul1_reg_189 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul2_reg_201 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_reg_213 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_272 : BOOLEAN;
    signal k_reg_225 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_281 : BOOLEAN;
    signal k_1_reg_237 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_295 : BOOLEAN;
    signal phi_mul_reg_248 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_2_reg_259 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_reg_270 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul3_reg_282 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_2_reg_293 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast6_fu_349_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast5_fu_376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_trn_cast_fu_420_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr5_fu_424_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr9_fu_462_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_2_cast2_fu_476_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_508_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_trn_cast_fu_518_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_421 : BOOLEAN;
    signal tmp_17_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_3_fu_535_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component MAT_Multiply_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_A_cached_row IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_Multiply_B_cached IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_cached_row_U : component MAT_Multiply_A_cached_row
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_cached_row_address0,
        ce0 => A_cached_row_ce0,
        we0 => A_cached_row_we0,
        d0 => A_cached_row_d0,
        q0 => A_cached_row_q0);

    B_cached_U : component MAT_Multiply_B_cached
    generic map (
        DataWidth => 32,
        AddressRange => 2500,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_cached_address0,
        ce0 => B_cached_ce0,
        we0 => B_cached_we0,
        d0 => B_cached_d0,
        q0 => B_cached_q0);

    MAT_Multiply_mul_32s_32s_32_6_U1 : component MAT_Multiply_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_528_p0,
        din1 => grp_fu_528_p1,
        ce => grp_fu_528_ce,
        dout => grp_fu_528_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_178 assign process. --
    i_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_331_p2 = ap_const_lv1_0)))) then 
                i_reg_178 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_380_p2)))) then 
                i_reg_178 <= i_1_reg_584;
            end if; 
        end if;
    end process;

    -- j_reg_213 assign process. --
    j_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                j_reg_213 <= j_1_reg_601;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_567 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond4_fu_353_p2))) then 
                j_reg_213 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_237 assign process. --
    k_1_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (((ap_const_lv1_0 = tmp_8_reg_610) and not((ap_const_lv1_0 = tmp_6_reg_594))) or (not((ap_const_lv1_0 = tmp_6_reg_594)) and not((ap_const_lv1_0 = exitcond2_fu_408_p2)))))) then 
                k_1_reg_237 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                k_1_reg_237 <= k_4_reg_635;
            end if; 
        end if;
    end process;

    -- k_2_reg_259 assign process. --
    k_2_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                k_2_reg_259 <= k_5_reg_663;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and ((ap_const_lv1_0 = tmp_6_reg_594) or not((ap_const_lv1_0 = exitcond1_fu_444_p2))))) then 
                k_2_reg_259 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- k_reg_225 assign process. --
    k_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_380_p2) and not((ap_const_lv1_0 = tmp_s_fu_397_p2)) and not((ap_const_lv1_0 = tmp_8_fu_402_p2)))) then 
                k_reg_225 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                k_reg_225 <= k_3_reg_617;
            end if; 
        end if;
    end process;

    -- phi_mul1_reg_189 assign process. --
    phi_mul1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_331_p2 = ap_const_lv1_0)))) then 
                phi_mul1_reg_189 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_380_p2)))) then 
                phi_mul1_reg_189 <= next_mul2_reg_576;
            end if; 
        end if;
    end process;

    -- phi_mul2_reg_201 assign process. --
    phi_mul2_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_4_fu_331_p2 = ap_const_lv1_0)))) then 
                phi_mul2_reg_201 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_380_p2)))) then 
                phi_mul2_reg_201 <= next_mul1_reg_571;
            end if; 
        end if;
    end process;

    -- phi_mul3_reg_282 assign process. --
    phi_mul3_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                phi_mul3_reg_282 <= next_mul3_reg_678;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and ((ap_const_lv1_0 = tmp_6_reg_594) or not((ap_const_lv1_0 = exitcond1_fu_444_p2))))) then 
                phi_mul3_reg_282 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_248 assign process. --
    phi_mul_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (((ap_const_lv1_0 = tmp_8_reg_610) and not((ap_const_lv1_0 = tmp_6_reg_594))) or (not((ap_const_lv1_0 = tmp_6_reg_594)) and not((ap_const_lv1_0 = exitcond2_fu_408_p2)))))) then 
                phi_mul_reg_248 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                phi_mul_reg_248 <= next_mul_reg_640;
            end if; 
        end if;
    end process;

    -- temp_2_reg_293 assign process. --
    temp_2_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_s_reg_606)) and not((ap_const_lv1_0 = exitcond_fu_480_p2)))) then 
                temp_2_reg_293 <= temp_reg_270;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_380_p2) and (ap_const_lv1_0 = tmp_s_fu_397_p2))) then 
                temp_2_reg_293 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- temp_reg_270 assign process. --
    temp_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                temp_reg_270 <= temp_1_fu_541_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and ((ap_const_lv1_0 = tmp_6_reg_594) or not((ap_const_lv1_0 = exitcond1_fu_444_p2))))) then 
                temp_reg_270 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                A_cached_row_load_reg_693 <= A_cached_row_q0;
                B_cached_load_reg_698 <= B_cached_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_567 = ap_const_lv1_0)))) then
                i_1_reg_584 <= i_1_fu_359_p2;
                next_mul1_reg_571 <= next_mul1_fu_337_p2;
                next_mul2_reg_576 <= next_mul2_fu_343_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_601 <= j_1_fu_386_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_8_reg_610)))) then
                k_3_reg_617 <= k_3_fu_414_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_6_reg_594)) and (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then
                k_4_reg_635 <= k_4_fu_450_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_s_reg_606)))) then
                k_5_reg_663 <= k_5_fu_486_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_s_reg_606)) and (ap_const_lv1_0 = exitcond_fu_480_p2))) then
                next_mul3_reg_678 <= next_mul3_fu_502_p2;
                tmp_13_reg_668 <= tmp_13_fu_492_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_6_reg_594)) and (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_444_p2))) then
                next_mul_reg_640 <= next_mul_fu_456_p2;
                    tmp_12_reg_645(11 downto 0) <= tmp_12_fu_467_p1(11 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and ((ap_const_lv1_0 = tmp_s_reg_606) or not((ap_const_lv1_0 = exitcond_fu_480_p2))))) then
                p_addr3_reg_688 <= p_addr3_fu_522_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (((ap_const_lv1_0 = tmp_8_reg_610) and not((ap_const_lv1_0 = tmp_6_reg_594))) or (not((ap_const_lv1_0 = tmp_6_reg_594)) and not((ap_const_lv1_0 = exitcond2_fu_408_p2)))))) then
                    tmp_11_trn7_cast_reg_627(5 downto 0) <= tmp_11_trn7_cast_fu_435_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and ((ap_const_lv1_0 = tmp_6_reg_594) or not((ap_const_lv1_0 = exitcond1_fu_444_p2))))) then
                    tmp_13_trn_cast_reg_655(5 downto 0) <= tmp_13_trn_cast_fu_472_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = tmp_13_reg_668)))) then
                tmp_16_reg_703 <= grp_fu_528_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_4_reg_567 <= tmp_4_fu_331_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_4_reg_567 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond4_fu_353_p2))) then
                tmp_5_reg_589 <= tmp_5_fu_365_p2;
                tmp_6_reg_594 <= tmp_6_fu_370_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_380_p2) and not((ap_const_lv1_0 = tmp_s_fu_397_p2)))) then
                tmp_8_reg_610 <= tmp_8_fu_402_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_380_p2))) then
                tmp_s_reg_606 <= tmp_s_fu_397_p2;
            end if;
        end if;
    end process;
    tmp_11_trn7_cast_reg_627(11 downto 6) <= "000000";
    tmp_12_reg_645(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_13_trn_cast_reg_655(11 downto 6) <= "000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_4_reg_567, exitcond4_fu_353_p2, tmp_6_reg_594, tmp_s_fu_397_p2, tmp_s_reg_606, exitcond3_fu_380_p2, tmp_8_reg_610, exitcond2_fu_408_p2, exitcond1_fu_444_p2, exitcond_fu_480_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((tmp_4_reg_567 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_353_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_380_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((ap_const_lv1_0 = exitcond3_fu_380_p2) and not((ap_const_lv1_0 = tmp_s_fu_397_p2)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((ap_const_lv1_0 = tmp_8_reg_610) or not((ap_const_lv1_0 = exitcond2_fu_408_p2)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st6_fsm_5 => 
                if (((ap_const_lv1_0 = tmp_6_reg_594) or not((ap_const_lv1_0 = exitcond1_fu_444_p2)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st8_fsm_7 => 
                if (((ap_const_lv1_0 = tmp_s_reg_606) or not((ap_const_lv1_0 = exitcond_fu_480_p2)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_11_fu_430_p1(12 - 1 downto 0);

    -- A_cached_row_address0 assign process. --
    A_cached_row_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st5_fsm_4, tmp_10_fu_439_p1, tmp_14_fu_497_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            A_cached_row_address0 <= tmp_10_fu_439_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            A_cached_row_address0 <= tmp_14_fu_497_p1(6 - 1 downto 0);
        else 
            A_cached_row_address0 <= "XXXXXX";
        end if; 
    end process;


    -- A_cached_row_ce0 assign process. --
    A_cached_row_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            A_cached_row_ce0 <= ap_const_logic_1;
        else 
            A_cached_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_cached_row_d0 <= A_q0;

    -- A_cached_row_we0 assign process. --
    A_cached_row_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            A_cached_row_we0 <= ap_const_logic_1;
        else 
            A_cached_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_12_fu_467_p1(12 - 1 downto 0);

    -- B_cached_address0 assign process. --
    B_cached_address0_assign_proc : process(tmp_12_reg_645, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st7_fsm_6, tmp_15_fu_513_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            B_cached_address0 <= tmp_12_reg_645(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            B_cached_address0 <= tmp_15_fu_513_p1(12 - 1 downto 0);
        else 
            B_cached_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- B_cached_ce0 assign process. --
    B_cached_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            B_cached_ce0 <= ap_const_logic_1;
        else 
            B_cached_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_cached_d0 <= B_q0;

    -- B_cached_we0 assign process. --
    B_cached_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            B_cached_we0 <= ap_const_logic_1;
        else 
            B_cached_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_ce0 assign process. --
    B_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= tmp_18_fu_548_p1(12 - 1 downto 0);

    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= temp_2_reg_293;

    -- C_we0 assign process. --
    C_we0_assign_proc : process(ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_4_reg_567, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_353_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_567 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_353_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_4_reg_567, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_353_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((tmp_4_reg_567 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond4_fu_353_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_108 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_155 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_209 assign process. --
    ap_sig_bdd_209_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_209 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_220 assign process. --
    ap_sig_bdd_220_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_220 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_232 assign process. --
    ap_sig_bdd_232_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_232 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_272 assign process. --
    ap_sig_bdd_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_272 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_281 assign process. --
    ap_sig_bdd_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_281 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_295 assign process. --
    ap_sig_bdd_295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_295 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_33 assign process. --
    ap_sig_bdd_33_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_33 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_421 assign process. --
    ap_sig_bdd_421_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_421 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_421)
    begin
        if (ap_sig_bdd_421) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_220)
    begin
        if (ap_sig_bdd_220) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_232)
    begin
        if (ap_sig_bdd_232) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_272)
    begin
        if (ap_sig_bdd_272) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_33)
    begin
        if (ap_sig_bdd_33) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_108)
    begin
        if (ap_sig_bdd_108) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_281)
    begin
        if (ap_sig_bdd_281) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_155)
    begin
        if (ap_sig_bdd_155) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_295)
    begin
        if (ap_sig_bdd_295) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_209)
    begin
        if (ap_sig_bdd_209) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_444_p2 <= "1" when (k_1_reg_237 = ap_const_lv6_32) else "0";
    exitcond2_fu_408_p2 <= "1" when (k_reg_225 = ap_const_lv6_32) else "0";
    exitcond3_fu_380_p2 <= "1" when (j_reg_213 = ap_const_lv6_32) else "0";
    exitcond4_fu_353_p2 <= "1" when (i_reg_178 = ap_const_lv6_32) else "0";
    exitcond_fu_480_p2 <= "1" when (k_2_reg_259 = ap_const_lv6_32) else "0";
    grp_fu_528_ce <= ap_const_logic_1;
    grp_fu_528_p0 <= B_cached_load_reg_698;
    grp_fu_528_p1 <= A_cached_row_load_reg_693;
    i_1_fu_359_p2 <= std_logic_vector(unsigned(i_reg_178) + unsigned(ap_const_lv6_1));
    i_cast6_fu_349_p1 <= std_logic_vector(resize(unsigned(i_reg_178),8));
    j_1_fu_386_p2 <= std_logic_vector(unsigned(j_reg_213) + unsigned(ap_const_lv6_1));
    j_cast5_fu_376_p1 <= std_logic_vector(resize(unsigned(j_reg_213),8));
    k_2_cast2_fu_476_p1 <= std_logic_vector(resize(unsigned(k_2_reg_259),8));
    k_3_fu_414_p2 <= std_logic_vector(unsigned(k_reg_225) + unsigned(ap_const_lv6_1));
    k_4_fu_450_p2 <= std_logic_vector(unsigned(k_1_reg_237) + unsigned(ap_const_lv6_1));
    k_5_fu_486_p2 <= std_logic_vector(unsigned(k_2_reg_259) + unsigned(ap_const_lv6_1));
    next_mul1_fu_337_p2 <= std_logic_vector(unsigned(phi_mul2_reg_201) + unsigned(ap_const_lv12_32));
    next_mul2_fu_343_p2 <= std_logic_vector(unsigned(phi_mul1_reg_189) + unsigned(ap_const_lv12_32));
    next_mul3_fu_502_p2 <= std_logic_vector(unsigned(phi_mul3_reg_282) + unsigned(ap_const_lv12_32));
    next_mul_fu_456_p2 <= std_logic_vector(unsigned(phi_mul_reg_248) + unsigned(ap_const_lv12_32));
    p_addr1_fu_508_p2 <= std_logic_vector(unsigned(tmp_13_trn_cast_reg_655) + unsigned(phi_mul3_reg_282));
    p_addr3_fu_522_p2 <= std_logic_vector(unsigned(tmp_15_trn_cast_fu_518_p1) + unsigned(phi_mul2_reg_201));
    p_addr5_fu_424_p2 <= std_logic_vector(unsigned(tmp_10_trn_cast_fu_420_p1) + unsigned(phi_mul1_reg_189));
    p_addr9_fu_462_p2 <= std_logic_vector(unsigned(tmp_11_trn7_cast_reg_627) + unsigned(phi_mul_reg_248));
    temp_1_fu_541_p3 <= 
        temp_3_fu_535_p2 when (tmp_13_reg_668(0) = '1') else 
        temp_reg_270;
    temp_3_fu_535_p2 <= std_logic_vector(unsigned(temp_reg_270) + unsigned(tmp_17_fu_532_p1));
    tmp1_fu_325_p2 <= (tmp_1_fu_313_p2 and tmp_3_fu_319_p2);
    tmp_10_fu_439_p1 <= std_logic_vector(resize(unsigned(k_reg_225),64));
    tmp_10_trn_cast_fu_420_p1 <= std_logic_vector(resize(unsigned(k_reg_225),12));
    tmp_11_fu_430_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_424_p2),64));
    tmp_11_trn7_cast_fu_435_p1 <= std_logic_vector(resize(unsigned(j_reg_213),12));
    tmp_12_fu_467_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_462_p2),64));
    tmp_13_fu_492_p2 <= "1" when (unsigned(k_2_cast2_fu_476_p1) < unsigned(mB)) else "0";
    tmp_13_trn_cast_fu_472_p1 <= std_logic_vector(resize(unsigned(j_reg_213),12));
    tmp_14_fu_497_p1 <= std_logic_vector(resize(unsigned(k_2_reg_259),64));
    tmp_15_fu_513_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_508_p2),64));
    tmp_15_trn_cast_fu_518_p1 <= std_logic_vector(resize(unsigned(j_reg_213),12));
        tmp_17_fu_532_p1 <= std_logic_vector(resize(signed(tmp_16_reg_703),64));

    tmp_18_fu_548_p1 <= std_logic_vector(resize(unsigned(p_addr3_reg_688),64));
    tmp_1_fu_313_p2 <= "1" when (mA = mC) else "0";
    tmp_3_fu_319_p2 <= "1" when (nB = nC) else "0";
    tmp_4_fu_331_p2 <= (tmp1_fu_325_p2 and tmp_fu_307_p2);
    tmp_5_fu_365_p2 <= "1" when (unsigned(i_cast6_fu_349_p1) < unsigned(mC)) else "0";
    tmp_6_fu_370_p2 <= "1" when (i_reg_178 = ap_const_lv6_0) else "0";
    tmp_8_fu_402_p2 <= "1" when (j_reg_213 = ap_const_lv6_0) else "0";
    tmp_9_fu_392_p2 <= "1" when (unsigned(j_cast5_fu_376_p1) < unsigned(nC)) else "0";
    tmp_fu_307_p2 <= "1" when (nA = mB) else "0";
    tmp_s_fu_397_p2 <= (tmp_5_reg_589 and tmp_9_fu_392_p2);
end behav;
