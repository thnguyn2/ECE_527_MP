-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAT_Stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_arr_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_arr_empty_n : IN STD_LOGIC;
    in_arr_read : OUT STD_LOGIC;
    out_arr_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_arr_full_n : IN STD_LOGIC;
    out_arr_write : OUT STD_LOGIC;
    op_type : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MAT_Stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MAT_Stream,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=15,HLS_SYN_LUT=14}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal p_str3_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal debug_ready : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_38 : BOOLEAN;
    signal tmp_i_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_121 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_rec_i_fu_93_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_rec_i_reg_125 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_52 : BOOLEAN;
    signal ap_sig_bdd_62 : BOOLEAN;
    signal p_0_rec_i_reg_70 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_73 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal tmp_fu_107_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component MAT_Stream_p_str3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- debug_ready assign process. --
    debug_ready_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    -- p_0_rec_i_reg_70 assign process. --
    p_0_rec_i_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_fu_107_p1)))) then 
                p_0_rec_i_reg_70 <= p_rec_i_reg_125;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                p_0_rec_i_reg_70 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                p_rec_i_reg_125 <= p_rec_i_fu_93_p2;
                tmp_i_reg_121 <= tmp_i_fu_87_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, tmp_i_reg_121, ap_sig_bdd_62, tmp_fu_107_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if ((not((tmp_i_reg_121 = ap_const_lv1_0)) and not(ap_sig_bdd_62))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((tmp_i_reg_121 = ap_const_lv1_0) and not(ap_sig_bdd_62))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_fu_107_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_sig_bdd_38 assign process. --
    ap_sig_bdd_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_38 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_52 assign process. --
    ap_sig_bdd_52_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_52 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_62 assign process. --
    ap_sig_bdd_62_assign_proc : process(in_arr_empty_n, out_arr_full_n, tmp_i_reg_121)
    begin
                ap_sig_bdd_62 <= (((in_arr_empty_n = ap_const_logic_0) and not((tmp_i_reg_121 = ap_const_lv1_0))) or (not((tmp_i_reg_121 = ap_const_lv1_0)) and (out_arr_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_73 assign process. --
    ap_sig_bdd_73_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_73 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_73)
    begin
        if (ap_sig_bdd_73) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_38)
    begin
        if (ap_sig_bdd_38) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_52)
    begin
        if (ap_sig_bdd_52) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- in_arr_read assign process. --
    in_arr_read_assign_proc : process(tmp_i_reg_121, ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_62)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_i_reg_121 = ap_const_lv1_0)) and not(ap_sig_bdd_62))) then 
            in_arr_read <= ap_const_logic_1;
        else 
            in_arr_read <= ap_const_logic_0;
        end if; 
    end process;

    out_arr_din <= in_arr_dout;

    -- out_arr_write assign process. --
    out_arr_write_assign_proc : process(tmp_i_reg_121, ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_62)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_i_reg_121 = ap_const_lv1_0)) and not(ap_sig_bdd_62))) then 
            out_arr_write <= ap_const_logic_1;
        else 
            out_arr_write <= ap_const_logic_0;
        end if; 
    end process;

    p_rec_i_fu_93_p2 <= std_logic_vector(unsigned(p_0_rec_i_reg_70) + unsigned(ap_const_lv5_1));
    tmp_fu_107_p1 <= debug_ready(1 - 1 downto 0);
    tmp_i_fu_87_p2 <= "1" when (p_0_rec_i_reg_70 = ap_const_lv5_16) else "0";
end behav;
