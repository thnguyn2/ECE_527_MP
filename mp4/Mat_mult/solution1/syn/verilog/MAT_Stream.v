// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MAT_Stream,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=15,HLS_SYN_LUT=14}" *)

module MAT_Stream (
        ap_clk,
        ap_rst,
        in_arr_dout,
        in_arr_empty_n,
        in_arr_read,
        out_arr_din,
        out_arr_full_n,
        out_arr_write,
        op_type
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv5_16 = 5'b10110;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input  [31:0] in_arr_dout;
input   in_arr_empty_n;
output   in_arr_read;
output  [31:0] out_arr_din;
input   out_arr_full_n;
output   out_arr_write;
input  [7:0] op_type;

reg in_arr_read;
reg out_arr_write;
wire   [6:0] p_str3_q0;
reg   [7:0] debug_ready = 8'b00000000;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_38;
wire   [0:0] tmp_i_fu_87_p2;
reg   [0:0] tmp_i_reg_121;
wire   [4:0] p_rec_i_fu_93_p2;
reg   [4:0] p_rec_i_reg_125;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_52;
reg    ap_sig_bdd_62;
reg   [4:0] p_0_rec_i_reg_70;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_73;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_80;
wire   [0:0] tmp_fu_107_p1;
reg   [3:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == tmp_fu_107_p1))) begin
        p_0_rec_i_reg_70 <= p_rec_i_reg_125;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        p_0_rec_i_reg_70 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        p_rec_i_reg_125 <= p_rec_i_fu_93_p2;
        tmp_i_reg_121 <= tmp_i_fu_87_p2;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_73)
begin
    if (ap_sig_bdd_73) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_38)
begin
    if (ap_sig_bdd_38) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_52)
begin
    if (ap_sig_bdd_52) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_80)
begin
    if (ap_sig_bdd_80) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// in_arr_read assign process. ///
always @ (tmp_i_reg_121 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_62)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(tmp_i_reg_121 == ap_const_lv1_0) & ~ap_sig_bdd_62)) begin
        in_arr_read = ap_const_logic_1;
    end else begin
        in_arr_read = ap_const_logic_0;
    end
end

/// out_arr_write assign process. ///
always @ (tmp_i_reg_121 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_62)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(tmp_i_reg_121 == ap_const_lv1_0) & ~ap_sig_bdd_62)) begin
        out_arr_write = ap_const_logic_1;
    end else begin
        out_arr_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or tmp_i_reg_121 or ap_sig_bdd_62 or tmp_fu_107_p1)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((~(tmp_i_reg_121 == ap_const_lv1_0) & ~ap_sig_bdd_62)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((tmp_i_reg_121 == ap_const_lv1_0) & ~ap_sig_bdd_62)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == tmp_fu_107_p1)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_38 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_38 = (ap_CS_fsm[ap_const_lv32_1] == ap_const_lv1_1);
end

/// ap_sig_bdd_52 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_52 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_62 assign process. ///
always @ (in_arr_empty_n or out_arr_full_n or tmp_i_reg_121)
begin
    ap_sig_bdd_62 = (((in_arr_empty_n == ap_const_logic_0) & ~(tmp_i_reg_121 == ap_const_lv1_0)) | (~(tmp_i_reg_121 == ap_const_lv1_0) & (out_arr_full_n == ap_const_logic_0)));
end

/// ap_sig_bdd_73 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_73 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_0]);
end

/// ap_sig_bdd_80 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_80 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign out_arr_din = in_arr_dout;
assign p_rec_i_fu_93_p2 = (p_0_rec_i_reg_70 + ap_const_lv5_1);
assign tmp_fu_107_p1 = debug_ready[0:0];
assign tmp_i_fu_87_p2 = (p_0_rec_i_reg_70 == ap_const_lv5_16? 1'b1: 1'b0);


endmodule //MAT_Stream

