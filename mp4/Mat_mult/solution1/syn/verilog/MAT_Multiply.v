// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MAT_Multiply,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.309000,HLS_SYN_LAT=348801,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=4,HLS_SYN_FF=439,HLS_SYN_LUT=535}" *)

module MAT_Multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        mA,
        nA,
        mB,
        nB,
        mC,
        nC
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 17'b1;
parameter    ap_ST_st2_fsm_1 = 17'b10;
parameter    ap_ST_st3_fsm_2 = 17'b100;
parameter    ap_ST_st4_fsm_3 = 17'b1000;
parameter    ap_ST_st5_fsm_4 = 17'b10000;
parameter    ap_ST_st6_fsm_5 = 17'b100000;
parameter    ap_ST_st7_fsm_6 = 17'b1000000;
parameter    ap_ST_st8_fsm_7 = 17'b10000000;
parameter    ap_ST_st9_fsm_8 = 17'b100000000;
parameter    ap_ST_st10_fsm_9 = 17'b1000000000;
parameter    ap_ST_st11_fsm_10 = 17'b10000000000;
parameter    ap_ST_st12_fsm_11 = 17'b100000000000;
parameter    ap_ST_st13_fsm_12 = 17'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 17'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 17'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 17'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 17'b10000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv12_32 = 12'b110010;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [11:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [11:0] C_address0;
output   C_ce0;
output   C_we0;
output  [63:0] C_d0;
input  [7:0] mA;
input  [7:0] nA;
input  [7:0] mB;
input  [7:0] nB;
input  [7:0] mC;
input  [7:0] nC;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm = 17'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_33;
wire   [0:0] tmp_4_fu_331_p2;
reg   [0:0] tmp_4_reg_567;
wire   [11:0] next_mul1_fu_337_p2;
reg   [11:0] next_mul1_reg_571;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_83;
wire   [11:0] next_mul2_fu_343_p2;
reg   [11:0] next_mul2_reg_576;
wire   [5:0] i_1_fu_359_p2;
reg   [5:0] i_1_reg_584;
wire   [0:0] tmp_5_fu_365_p2;
reg   [0:0] tmp_5_reg_589;
wire   [0:0] exitcond4_fu_353_p2;
wire   [0:0] tmp_6_fu_370_p2;
reg   [0:0] tmp_6_reg_594;
wire   [5:0] j_1_fu_386_p2;
reg   [5:0] j_1_reg_601;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_108;
wire   [0:0] tmp_s_fu_397_p2;
reg   [0:0] tmp_s_reg_606;
wire   [0:0] exitcond3_fu_380_p2;
wire   [0:0] tmp_8_fu_402_p2;
reg   [0:0] tmp_8_reg_610;
wire   [5:0] k_3_fu_414_p2;
reg   [5:0] k_3_reg_617;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_128;
wire   [0:0] exitcond2_fu_408_p2;
wire   [11:0] tmp_11_trn7_cast_fu_435_p1;
reg   [11:0] tmp_11_trn7_cast_reg_627;
wire   [5:0] k_4_fu_450_p2;
reg   [5:0] k_4_reg_635;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_155;
wire   [11:0] next_mul_fu_456_p2;
reg   [11:0] next_mul_reg_640;
wire   [0:0] exitcond1_fu_444_p2;
wire   [63:0] tmp_12_fu_467_p1;
reg   [63:0] tmp_12_reg_645;
wire   [11:0] tmp_13_trn_cast_fu_472_p1;
reg   [11:0] tmp_13_trn_cast_reg_655;
wire   [5:0] k_5_fu_486_p2;
reg   [5:0] k_5_reg_663;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_180;
wire   [0:0] tmp_13_fu_492_p2;
reg   [0:0] tmp_13_reg_668;
wire   [0:0] exitcond_fu_480_p2;
wire   [11:0] next_mul3_fu_502_p2;
reg   [11:0] next_mul3_reg_678;
wire   [11:0] p_addr3_fu_522_p2;
reg   [11:0] p_addr3_reg_688;
wire   [31:0] A_cached_row_q0;
reg  signed [31:0] A_cached_row_load_reg_693;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_209;
wire   [31:0] B_cached_q0;
reg  signed [31:0] B_cached_load_reg_698;
wire  signed [31:0] grp_fu_528_p2;
reg  signed [31:0] tmp_16_reg_703;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_220;
wire   [63:0] temp_1_fu_541_p3;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_232;
reg   [5:0] A_cached_row_address0;
reg    A_cached_row_ce0;
reg    A_cached_row_we0;
wire   [31:0] A_cached_row_d0;
reg   [11:0] B_cached_address0;
reg    B_cached_ce0;
reg    B_cached_we0;
wire   [31:0] B_cached_d0;
reg   [5:0] i_reg_178;
reg   [11:0] phi_mul1_reg_189;
reg   [11:0] phi_mul2_reg_201;
reg   [5:0] j_reg_213;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_272;
reg   [5:0] k_reg_225;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_281;
reg   [5:0] k_1_reg_237;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_295;
reg   [11:0] phi_mul_reg_248;
reg   [5:0] k_2_reg_259;
reg   [63:0] temp_reg_270;
reg   [11:0] phi_mul3_reg_282;
reg   [63:0] temp_2_reg_293;
wire   [63:0] tmp_11_fu_430_p1;
wire   [63:0] tmp_10_fu_439_p1;
wire   [63:0] tmp_14_fu_497_p1;
wire   [63:0] tmp_15_fu_513_p1;
wire   [63:0] tmp_18_fu_548_p1;
wire   [0:0] tmp_1_fu_313_p2;
wire   [0:0] tmp_3_fu_319_p2;
wire   [0:0] tmp1_fu_325_p2;
wire   [0:0] tmp_fu_307_p2;
wire   [7:0] i_cast6_fu_349_p1;
wire   [7:0] j_cast5_fu_376_p1;
wire   [0:0] tmp_9_fu_392_p2;
wire   [11:0] tmp_10_trn_cast_fu_420_p1;
wire   [11:0] p_addr5_fu_424_p2;
wire   [11:0] p_addr9_fu_462_p2;
wire   [7:0] k_2_cast2_fu_476_p1;
wire   [11:0] p_addr1_fu_508_p2;
wire   [11:0] tmp_15_trn_cast_fu_518_p1;
wire  signed [31:0] grp_fu_528_p0;
wire  signed [31:0] grp_fu_528_p1;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_421;
wire  signed [63:0] tmp_17_fu_532_p1;
wire  signed [63:0] temp_3_fu_535_p2;
wire    grp_fu_528_ce;
reg   [16:0] ap_NS_fsm;


MAT_Multiply_A_cached_row #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
A_cached_row_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( A_cached_row_address0 ),
    .ce0( A_cached_row_ce0 ),
    .we0( A_cached_row_we0 ),
    .d0( A_cached_row_d0 ),
    .q0( A_cached_row_q0 )
);

MAT_Multiply_B_cached #(
    .DataWidth( 32 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
B_cached_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( B_cached_address0 ),
    .ce0( B_cached_ce0 ),
    .we0( B_cached_we0 ),
    .d0( B_cached_d0 ),
    .q0( B_cached_q0 )
);

MAT_Multiply_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MAT_Multiply_mul_32s_32s_32_6_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_528_p0 ),
    .din1( grp_fu_528_p1 ),
    .ce( grp_fu_528_ce ),
    .dout( grp_fu_528_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_4_fu_331_p2 == ap_const_lv1_0))) begin
        i_reg_178 <= ap_const_lv6_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond3_fu_380_p2))) begin
        i_reg_178 <= i_1_reg_584;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        j_reg_213 <= j_1_reg_601;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_4_reg_567 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond4_fu_353_p2))) begin
        j_reg_213 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (((ap_const_lv1_0 == tmp_8_reg_610) & ~(ap_const_lv1_0 == tmp_6_reg_594)) | (~(ap_const_lv1_0 == tmp_6_reg_594) & ~(ap_const_lv1_0 == exitcond2_fu_408_p2))))) begin
        k_1_reg_237 <= ap_const_lv6_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        k_1_reg_237 <= k_4_reg_635;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        k_2_reg_259 <= k_5_reg_663;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ((ap_const_lv1_0 == tmp_6_reg_594) | ~(ap_const_lv1_0 == exitcond1_fu_444_p2)))) begin
        k_2_reg_259 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond3_fu_380_p2) & ~(ap_const_lv1_0 == tmp_s_fu_397_p2) & ~(ap_const_lv1_0 == tmp_8_fu_402_p2))) begin
        k_reg_225 <= ap_const_lv6_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        k_reg_225 <= k_3_reg_617;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_4_fu_331_p2 == ap_const_lv1_0))) begin
        phi_mul1_reg_189 <= ap_const_lv12_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond3_fu_380_p2))) begin
        phi_mul1_reg_189 <= next_mul2_reg_576;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_4_fu_331_p2 == ap_const_lv1_0))) begin
        phi_mul2_reg_201 <= ap_const_lv12_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond3_fu_380_p2))) begin
        phi_mul2_reg_201 <= next_mul1_reg_571;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        phi_mul3_reg_282 <= next_mul3_reg_678;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ((ap_const_lv1_0 == tmp_6_reg_594) | ~(ap_const_lv1_0 == exitcond1_fu_444_p2)))) begin
        phi_mul3_reg_282 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (((ap_const_lv1_0 == tmp_8_reg_610) & ~(ap_const_lv1_0 == tmp_6_reg_594)) | (~(ap_const_lv1_0 == tmp_6_reg_594) & ~(ap_const_lv1_0 == exitcond2_fu_408_p2))))) begin
        phi_mul_reg_248 <= ap_const_lv12_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        phi_mul_reg_248 <= next_mul_reg_640;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_lv1_0 == tmp_s_reg_606) & ~(ap_const_lv1_0 == exitcond_fu_480_p2))) begin
        temp_2_reg_293 <= temp_reg_270;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond3_fu_380_p2) & (ap_const_lv1_0 == tmp_s_fu_397_p2))) begin
        temp_2_reg_293 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        temp_reg_270 <= temp_1_fu_541_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ((ap_const_lv1_0 == tmp_6_reg_594) | ~(ap_const_lv1_0 == exitcond1_fu_444_p2)))) begin
        temp_reg_270 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        A_cached_row_load_reg_693 <= A_cached_row_q0;
        B_cached_load_reg_698 <= B_cached_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_4_reg_567 == ap_const_lv1_0))) begin
        i_1_reg_584 <= i_1_fu_359_p2;
        next_mul1_reg_571 <= next_mul1_fu_337_p2;
        next_mul2_reg_576 <= next_mul2_fu_343_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_601 <= j_1_fu_386_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == tmp_8_reg_610))) begin
        k_3_reg_617 <= k_3_fu_414_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_lv1_0 == tmp_6_reg_594) & (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5))) begin
        k_4_reg_635 <= k_4_fu_450_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_lv1_0 == tmp_s_reg_606))) begin
        k_5_reg_663 <= k_5_fu_486_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_lv1_0 == tmp_s_reg_606) & (ap_const_lv1_0 == exitcond_fu_480_p2))) begin
        next_mul3_reg_678 <= next_mul3_fu_502_p2;
        tmp_13_reg_668 <= tmp_13_fu_492_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_lv1_0 == tmp_6_reg_594) & (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == exitcond1_fu_444_p2))) begin
        next_mul_reg_640 <= next_mul_fu_456_p2;
        tmp_12_reg_645[11 : 0] <= tmp_12_fu_467_p1[11 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ((ap_const_lv1_0 == tmp_s_reg_606) | ~(ap_const_lv1_0 == exitcond_fu_480_p2)))) begin
        p_addr3_reg_688 <= p_addr3_fu_522_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (((ap_const_lv1_0 == tmp_8_reg_610) & ~(ap_const_lv1_0 == tmp_6_reg_594)) | (~(ap_const_lv1_0 == tmp_6_reg_594) & ~(ap_const_lv1_0 == exitcond2_fu_408_p2))))) begin
        tmp_11_trn7_cast_reg_627[5 : 0] <= tmp_11_trn7_cast_fu_435_p1[5 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ((ap_const_lv1_0 == tmp_6_reg_594) | ~(ap_const_lv1_0 == exitcond1_fu_444_p2)))) begin
        tmp_13_trn_cast_reg_655[5 : 0] <= tmp_13_trn_cast_fu_472_p1[5 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_lv1_0 == tmp_13_reg_668))) begin
        tmp_16_reg_703 <= grp_fu_528_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_4_reg_567 <= tmp_4_fu_331_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_4_reg_567 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond4_fu_353_p2))) begin
        tmp_5_reg_589 <= tmp_5_fu_365_p2;
        tmp_6_reg_594 <= tmp_6_fu_370_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond3_fu_380_p2) & ~(ap_const_lv1_0 == tmp_s_fu_397_p2))) begin
        tmp_8_reg_610 <= tmp_8_fu_402_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond3_fu_380_p2))) begin
        tmp_s_reg_606 <= tmp_s_fu_397_p2;
    end
end

/// A_cached_row_address0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st5_fsm_4 or tmp_10_fu_439_p1 or tmp_14_fu_497_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        A_cached_row_address0 = tmp_10_fu_439_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        A_cached_row_address0 = tmp_14_fu_497_p1;
    end else begin
        A_cached_row_address0 = 'bx;
    end
end

/// A_cached_row_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        A_cached_row_ce0 = ap_const_logic_1;
    end else begin
        A_cached_row_ce0 = ap_const_logic_0;
    end
end

/// A_cached_row_we0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        A_cached_row_we0 = ap_const_logic_1;
    end else begin
        A_cached_row_we0 = ap_const_logic_0;
    end
end

/// A_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_ce0 = ap_const_logic_1;
    end else begin
        A_ce0 = ap_const_logic_0;
    end
end

/// B_cached_address0 assign process. ///
always @ (tmp_12_reg_645 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st7_fsm_6 or tmp_15_fu_513_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        B_cached_address0 = tmp_12_reg_645;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        B_cached_address0 = tmp_15_fu_513_p1;
    end else begin
        B_cached_address0 = 'bx;
    end
end

/// B_cached_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        B_cached_ce0 = ap_const_logic_1;
    end else begin
        B_cached_ce0 = ap_const_logic_0;
    end
end

/// B_cached_we0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        B_cached_we0 = ap_const_logic_1;
    end else begin
        B_cached_we0 = ap_const_logic_0;
    end
end

/// B_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

/// C_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        C_ce0 = ap_const_logic_1;
    end else begin
        C_ce0 = ap_const_logic_0;
    end
end

/// C_we0 assign process. ///
always @ (ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        C_we0 = ap_const_logic_1;
    end else begin
        C_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (tmp_4_reg_567 or ap_sig_cseq_ST_st2_fsm_1 or exitcond4_fu_353_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((tmp_4_reg_567 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond4_fu_353_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (tmp_4_reg_567 or ap_sig_cseq_ST_st2_fsm_1 or exitcond4_fu_353_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((tmp_4_reg_567 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond4_fu_353_p2)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_421)
begin
    if (ap_sig_bdd_421) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_220)
begin
    if (ap_sig_bdd_220) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_232)
begin
    if (ap_sig_bdd_232) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_272)
begin
    if (ap_sig_bdd_272) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_33)
begin
    if (ap_sig_bdd_33) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_83)
begin
    if (ap_sig_bdd_83) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_108)
begin
    if (ap_sig_bdd_108) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_128)
begin
    if (ap_sig_bdd_128) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_281)
begin
    if (ap_sig_bdd_281) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_155)
begin
    if (ap_sig_bdd_155) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_295)
begin
    if (ap_sig_bdd_295) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_180)
begin
    if (ap_sig_bdd_180) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_209)
begin
    if (ap_sig_bdd_209) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_4_reg_567 or exitcond4_fu_353_p2 or tmp_6_reg_594 or tmp_s_fu_397_p2 or tmp_s_reg_606 or exitcond3_fu_380_p2 or tmp_8_reg_610 or exitcond2_fu_408_p2 or exitcond1_fu_444_p2 or exitcond_fu_480_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (((tmp_4_reg_567 == ap_const_lv1_0) | ~(ap_const_lv1_0 == exitcond4_fu_353_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_380_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if (((ap_const_lv1_0 == exitcond3_fu_380_p2) & ~(ap_const_lv1_0 == tmp_s_fu_397_p2))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (((ap_const_lv1_0 == tmp_8_reg_610) | ~(ap_const_lv1_0 == exitcond2_fu_408_p2))) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (((ap_const_lv1_0 == tmp_6_reg_594) | ~(ap_const_lv1_0 == exitcond1_fu_444_p2))) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (((ap_const_lv1_0 == tmp_s_reg_606) | ~(ap_const_lv1_0 == exitcond_fu_480_p2))) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_11_fu_430_p1;
assign A_cached_row_d0 = A_q0;
assign B_address0 = tmp_12_fu_467_p1;
assign B_cached_d0 = B_q0;
assign C_address0 = tmp_18_fu_548_p1;
assign C_d0 = temp_2_reg_293;

/// ap_sig_bdd_108 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_108 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_128 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_128 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_155 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_155 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_180 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_180 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_209 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_209 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_220 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_220 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_232 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_232 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_272 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_272 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_281 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_281 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_295 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_295 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_33 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_33 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_421 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_421 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_83 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_83 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign exitcond1_fu_444_p2 = (k_1_reg_237 == ap_const_lv6_32? 1'b1: 1'b0);
assign exitcond2_fu_408_p2 = (k_reg_225 == ap_const_lv6_32? 1'b1: 1'b0);
assign exitcond3_fu_380_p2 = (j_reg_213 == ap_const_lv6_32? 1'b1: 1'b0);
assign exitcond4_fu_353_p2 = (i_reg_178 == ap_const_lv6_32? 1'b1: 1'b0);
assign exitcond_fu_480_p2 = (k_2_reg_259 == ap_const_lv6_32? 1'b1: 1'b0);
assign grp_fu_528_ce = ap_const_logic_1;
assign grp_fu_528_p0 = B_cached_load_reg_698;
assign grp_fu_528_p1 = A_cached_row_load_reg_693;
assign i_1_fu_359_p2 = (i_reg_178 + ap_const_lv6_1);
assign i_cast6_fu_349_p1 = i_reg_178;
assign j_1_fu_386_p2 = (j_reg_213 + ap_const_lv6_1);
assign j_cast5_fu_376_p1 = j_reg_213;
assign k_2_cast2_fu_476_p1 = k_2_reg_259;
assign k_3_fu_414_p2 = (k_reg_225 + ap_const_lv6_1);
assign k_4_fu_450_p2 = (k_1_reg_237 + ap_const_lv6_1);
assign k_5_fu_486_p2 = (k_2_reg_259 + ap_const_lv6_1);
assign next_mul1_fu_337_p2 = (phi_mul2_reg_201 + ap_const_lv12_32);
assign next_mul2_fu_343_p2 = (phi_mul1_reg_189 + ap_const_lv12_32);
assign next_mul3_fu_502_p2 = (phi_mul3_reg_282 + ap_const_lv12_32);
assign next_mul_fu_456_p2 = (phi_mul_reg_248 + ap_const_lv12_32);
assign p_addr1_fu_508_p2 = (tmp_13_trn_cast_reg_655 + phi_mul3_reg_282);
assign p_addr3_fu_522_p2 = (tmp_15_trn_cast_fu_518_p1 + phi_mul2_reg_201);
assign p_addr5_fu_424_p2 = (tmp_10_trn_cast_fu_420_p1 + phi_mul1_reg_189);
assign p_addr9_fu_462_p2 = (tmp_11_trn7_cast_reg_627 + phi_mul_reg_248);
assign temp_1_fu_541_p3 = ((tmp_13_reg_668[0:0]===1'b1)? temp_3_fu_535_p2: temp_reg_270);
assign temp_3_fu_535_p2 = ($signed(temp_reg_270) + $signed(tmp_17_fu_532_p1));
assign tmp1_fu_325_p2 = (tmp_1_fu_313_p2 & tmp_3_fu_319_p2);
assign tmp_10_fu_439_p1 = k_reg_225;
assign tmp_10_trn_cast_fu_420_p1 = k_reg_225;
assign tmp_11_fu_430_p1 = p_addr5_fu_424_p2;
assign tmp_11_trn7_cast_fu_435_p1 = j_reg_213;
assign tmp_12_fu_467_p1 = p_addr9_fu_462_p2;
assign tmp_13_fu_492_p2 = (k_2_cast2_fu_476_p1 < mB? 1'b1: 1'b0);
assign tmp_13_trn_cast_fu_472_p1 = j_reg_213;
assign tmp_14_fu_497_p1 = k_2_reg_259;
assign tmp_15_fu_513_p1 = p_addr1_fu_508_p2;
assign tmp_15_trn_cast_fu_518_p1 = j_reg_213;
assign tmp_17_fu_532_p1 = tmp_16_reg_703;
assign tmp_18_fu_548_p1 = p_addr3_reg_688;
assign tmp_1_fu_313_p2 = (mA == mC? 1'b1: 1'b0);
assign tmp_3_fu_319_p2 = (nB == nC? 1'b1: 1'b0);
assign tmp_4_fu_331_p2 = (tmp1_fu_325_p2 & tmp_fu_307_p2);
assign tmp_5_fu_365_p2 = (i_cast6_fu_349_p1 < mC? 1'b1: 1'b0);
assign tmp_6_fu_370_p2 = (i_reg_178 == ap_const_lv6_0? 1'b1: 1'b0);
assign tmp_8_fu_402_p2 = (j_reg_213 == ap_const_lv6_0? 1'b1: 1'b0);
assign tmp_9_fu_392_p2 = (j_cast5_fu_376_p1 < nC? 1'b1: 1'b0);
assign tmp_fu_307_p2 = (nA == mB? 1'b1: 1'b0);
assign tmp_s_fu_397_p2 = (tmp_5_reg_589 & tmp_9_fu_392_p2);
always @ (posedge ap_clk)
begin
    tmp_11_trn7_cast_reg_627[11:6] <= 6'b000000;
    tmp_12_reg_645[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_13_trn_cast_reg_655[11:6] <= 6'b000000;
end



endmodule //MAT_Multiply

