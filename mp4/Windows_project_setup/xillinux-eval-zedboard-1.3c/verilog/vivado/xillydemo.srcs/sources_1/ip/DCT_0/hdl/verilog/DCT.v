// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DCT,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.095000,HLS_SYN_LAT=81,HLS_SYN_TPT=82,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=51}" *)

module DCT (
        X_dout,
        X_empty_n,
        X_read,
        function_r,
        Y_din,
        Y_full_n,
        Y_write,
        ap_clk,
        ap_rst
);

parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;

input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
input  [7:0] function_r;
output  [31:0] Y_din;
input   Y_full_n;
output   Y_write;
input   ap_clk;
input   ap_rst;

wire    DCT_Loop_1_proc_U0_ap_start;
wire    DCT_Loop_1_proc_U0_ap_done;
wire    DCT_Loop_1_proc_U0_ap_continue;
wire    DCT_Loop_1_proc_U0_ap_idle;
wire    DCT_Loop_1_proc_U0_ap_ready;
wire   [31:0] DCT_Loop_1_proc_U0_Y_din;
wire    DCT_Loop_1_proc_U0_Y_full_n;
wire    DCT_Loop_1_proc_U0_Y_write;
wire    ap_sig_hs_continue;
reg    ap_CS;
reg    ap_sig_hs_done;


DCT_Loop_1_proc DCT_Loop_1_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( DCT_Loop_1_proc_U0_ap_start ),
    .ap_done( DCT_Loop_1_proc_U0_ap_done ),
    .ap_continue( DCT_Loop_1_proc_U0_ap_continue ),
    .ap_idle( DCT_Loop_1_proc_U0_ap_idle ),
    .ap_ready( DCT_Loop_1_proc_U0_ap_ready ),
    .Y_din( DCT_Loop_1_proc_U0_Y_din ),
    .Y_full_n( DCT_Loop_1_proc_U0_Y_full_n ),
    .Y_write( DCT_Loop_1_proc_U0_Y_write )
);



/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// ap_sig_hs_done assign process. ///
always @ (DCT_Loop_1_proc_U0_ap_done)
begin
    if ((DCT_Loop_1_proc_U0_ap_done == ap_const_logic_1)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end
assign DCT_Loop_1_proc_U0_Y_full_n = Y_full_n;
assign DCT_Loop_1_proc_U0_ap_continue = ap_const_logic_1;
assign DCT_Loop_1_proc_U0_ap_start = ap_const_logic_1;
assign X_read = ap_const_logic_0;
assign Y_din = DCT_Loop_1_proc_U0_Y_din;
assign Y_write = DCT_Loop_1_proc_U0_Y_write;
assign ap_sig_hs_continue = ap_const_logic_0;


endmodule //DCT

