// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Accelerator_MAT_Multiply2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 15'b1;
parameter    ap_ST_st2_fsm_1 = 15'b10;
parameter    ap_ST_st3_fsm_2 = 15'b100;
parameter    ap_ST_st4_fsm_3 = 15'b1000;
parameter    ap_ST_st5_fsm_4 = 15'b10000;
parameter    ap_ST_st6_fsm_5 = 15'b100000;
parameter    ap_ST_st7_fsm_6 = 15'b1000000;
parameter    ap_ST_st8_fsm_7 = 15'b10000000;
parameter    ap_ST_st9_fsm_8 = 15'b100000000;
parameter    ap_ST_st10_fsm_9 = 15'b1000000000;
parameter    ap_ST_st11_fsm_10 = 15'b10000000000;
parameter    ap_ST_st12_fsm_11 = 15'b100000000000;
parameter    ap_ST_st13_fsm_12 = 15'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 15'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 15'b100000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv28_4 = 28'b100;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [5:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [5:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm = 15'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_33;
wire   [3:0] tmp_1_fu_180_p2;
reg   [3:0] tmp_1_reg_300;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_64;
wire   [7:0] p_addr_cast_fu_194_p1;
reg   [7:0] p_addr_cast_reg_305;
wire   [0:0] exitcond3_fu_174_p2;
wire   [3:0] k_2_fu_204_p2;
reg   [3:0] k_2_reg_313;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_79;
wire   [0:0] exitcond2_fu_198_p2;
wire   [3:0] j_1_fu_235_p2;
reg   [3:0] j_1_reg_326;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_93;
wire   [7:0] tmp_trn_cast_fu_241_p1;
reg   [7:0] tmp_trn_cast_reg_331;
wire   [0:0] exitcond1_fu_229_p2;
wire   [3:0] k_3_fu_251_p2;
reg   [3:0] k_3_reg_339;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_107;
wire   [0:0] exitcond_fu_245_p2;
wire   [31:0] A_cached_row_q0;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_123;
wire   [31:0] grp_fu_168_p2;
reg   [31:0] tmp_4_reg_364;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_133;
wire   [31:0] grp_fu_163_p2;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_142;
reg   [2:0] A_cached_row_address0;
reg    A_cached_row_ce0;
reg    A_cached_row_we0;
wire   [31:0] A_cached_row_d0;
reg   [3:0] i_reg_103;
reg   [3:0] k_reg_114;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_168;
reg   [3:0] j_reg_126;
reg   [3:0] k_1_reg_138;
reg   [31:0] temp_reg_149;
wire   [63:0] tmp_7_fu_219_p1;
wire   [63:0] tmp_2_fu_224_p1;
wire   [63:0] tmp_3_fu_257_p1;
wire   [63:0] tmp_s_fu_279_p1;
wire   [63:0] tmp_8_fu_292_p1;
wire   [31:0] grp_fu_163_p0;
wire   [31:0] grp_fu_163_p1;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_197;
wire   [31:0] grp_fu_168_p0;
wire   [31:0] grp_fu_168_p1;
wire   [6:0] tmp_fu_186_p3;
wire   [7:0] tmp_2_trn_cast_fu_210_p1;
wire   [7:0] p_addr1_fu_214_p2;
wire   [6:0] tmp_9_fu_262_p3;
wire   [7:0] p_addr2_cast_fu_270_p1;
wire   [7:0] p_addr3_fu_274_p2;
wire   [31:0] p_addr4_fu_284_p3;
wire    grp_fu_163_ce;
wire    grp_fu_168_ce;
reg   [14:0] ap_NS_fsm;


Accelerator_MAT_Multiply2_A_cached_row #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
A_cached_row_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( A_cached_row_address0 ),
    .ce0( A_cached_row_ce0 ),
    .we0( A_cached_row_we0 ),
    .d0( A_cached_row_d0 ),
    .q0( A_cached_row_q0 )
);

Accelerator_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Accelerator_fadd_32ns_32ns_32_5_full_dsp_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_163_p0 ),
    .din1( grp_fu_163_p1 ),
    .ce( grp_fu_163_ce ),
    .dout( grp_fu_163_p2 )
);

Accelerator_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Accelerator_fmul_32ns_32ns_32_4_max_dsp_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_168_p0 ),
    .din1( grp_fu_168_p1 ),
    .ce( grp_fu_168_ce ),
    .dout( grp_fu_168_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond2_fu_198_p2))) begin
        i_reg_103 <= tmp_1_reg_300;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_103 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_174_p2 == ap_const_lv1_0))) begin
        j_reg_126 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == exitcond_fu_245_p2))) begin
        j_reg_126 <= j_1_reg_326;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        k_1_reg_138 <= k_3_reg_339;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond1_fu_229_p2))) begin
        k_1_reg_138 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_reg_114 <= k_2_reg_313;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_174_p2 == ap_const_lv1_0))) begin
        k_reg_114 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        temp_reg_149 <= grp_fu_163_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond1_fu_229_p2))) begin
        temp_reg_149 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        j_1_reg_326 <= j_1_fu_235_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        k_2_reg_313 <= k_2_fu_204_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        k_3_reg_339 <= k_3_fu_251_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_174_p2 == ap_const_lv1_0))) begin
        p_addr_cast_reg_305[6 : 3] <= p_addr_cast_fu_194_p1[6 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tmp_1_reg_300 <= tmp_1_fu_180_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_4_reg_364 <= grp_fu_168_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond1_fu_229_p2))) begin
        tmp_trn_cast_reg_331[3 : 0] <= tmp_trn_cast_fu_241_p1[3 : 0];
    end
end

/// A_cached_row_address0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st4_fsm_3 or tmp_2_fu_224_p1 or tmp_3_fu_257_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_cached_row_address0 = tmp_2_fu_224_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        A_cached_row_address0 = tmp_3_fu_257_p1;
    end else begin
        A_cached_row_address0 = 'bx;
    end
end

/// A_cached_row_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        A_cached_row_ce0 = ap_const_logic_1;
    end else begin
        A_cached_row_ce0 = ap_const_logic_0;
    end
end

/// A_cached_row_we0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_cached_row_we0 = ap_const_logic_1;
    end else begin
        A_cached_row_we0 = ap_const_logic_0;
    end
end

/// A_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        A_ce0 = ap_const_logic_1;
    end else begin
        A_ce0 = ap_const_logic_0;
    end
end

/// B_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

/// C_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        C_ce0 = ap_const_logic_1;
    end else begin
        C_ce0 = ap_const_logic_0;
    end
end

/// C_we0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or exitcond_fu_245_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == exitcond_fu_245_p2))) begin
        C_we0 = ap_const_logic_1;
    end else begin
        C_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st5_fsm_4 or exitcond1_fu_229_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond1_fu_229_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4 or exitcond1_fu_229_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond1_fu_229_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_133)
begin
    if (ap_sig_bdd_133) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_197)
begin
    if (ap_sig_bdd_197) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_142)
begin
    if (ap_sig_bdd_142) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_33)
begin
    if (ap_sig_bdd_33) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_64)
begin
    if (ap_sig_bdd_64) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_79)
begin
    if (ap_sig_bdd_79) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_168)
begin
    if (ap_sig_bdd_168) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_93)
begin
    if (ap_sig_bdd_93) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_107)
begin
    if (ap_sig_bdd_107) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_123)
begin
    if (ap_sig_bdd_123) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond3_fu_174_p2 or exitcond2_fu_198_p2 or exitcond1_fu_229_p2 or exitcond_fu_245_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((exitcond3_fu_174_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_198_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_229_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_245_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_7_fu_219_p1;
assign A_cached_row_d0 = A_q0;
assign B_address0 = tmp_s_fu_279_p1;
assign C_address0 = tmp_8_fu_292_p1;
assign C_d0 = temp_reg_149;

/// ap_sig_bdd_107 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_107 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_123 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_123 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_133 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_133 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_142 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_142 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_168 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_168 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_197 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_197 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_33 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_33 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_64 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_64 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_79 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_79 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_93 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_93 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end
assign exitcond1_fu_229_p2 = (j_reg_126 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond2_fu_198_p2 = (k_reg_114 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond3_fu_174_p2 = (i_reg_103 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_245_p2 = (k_1_reg_138 == ap_const_lv4_8? 1'b1: 1'b0);
assign grp_fu_163_ce = ap_const_logic_1;
assign grp_fu_163_p0 = temp_reg_149;
assign grp_fu_163_p1 = tmp_4_reg_364;
assign grp_fu_168_ce = ap_const_logic_1;
assign grp_fu_168_p0 = A_cached_row_q0;
assign grp_fu_168_p1 = B_q0;
assign j_1_fu_235_p2 = (j_reg_126 + ap_const_lv4_1);
assign k_2_fu_204_p2 = (k_reg_114 + ap_const_lv4_1);
assign k_3_fu_251_p2 = (k_1_reg_138 + ap_const_lv4_1);
assign p_addr1_fu_214_p2 = (tmp_2_trn_cast_fu_210_p1 + p_addr_cast_reg_305);
assign p_addr2_cast_fu_270_p1 = tmp_9_fu_262_p3;
assign p_addr3_fu_274_p2 = (tmp_trn_cast_reg_331 + p_addr2_cast_fu_270_p1);
assign p_addr4_fu_284_p3 = {{ap_const_lv28_4}, {j_reg_126}};
assign p_addr_cast_fu_194_p1 = tmp_fu_186_p3;
assign tmp_1_fu_180_p2 = (i_reg_103 + ap_const_lv4_1);
assign tmp_2_fu_224_p1 = k_reg_114;
assign tmp_2_trn_cast_fu_210_p1 = k_reg_114;
assign tmp_3_fu_257_p1 = k_1_reg_138;
assign tmp_7_fu_219_p1 = p_addr1_fu_214_p2;
assign tmp_8_fu_292_p1 = p_addr4_fu_284_p3;
assign tmp_9_fu_262_p3 = {{k_1_reg_138}, {ap_const_lv3_0}};
assign tmp_fu_186_p3 = {{i_reg_103}, {ap_const_lv3_0}};
assign tmp_s_fu_279_p1 = p_addr3_fu_274_p2;
assign tmp_trn_cast_fu_241_p1 = j_reg_126;
always @ (posedge ap_clk)
begin
    p_addr_cast_reg_305[2:0] <= 3'b000;
    p_addr_cast_reg_305[7] <= 1'b0;
    tmp_trn_cast_reg_331[7:4] <= 4'b0000;
end



endmodule //Accelerator_MAT_Multiply2

