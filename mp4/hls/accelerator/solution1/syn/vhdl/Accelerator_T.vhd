-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Accelerator_T_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Accelerator_T_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 7=> "00111110101101010000010011110011", 
    8 => "00111110111110110001010010111110", 
    9 => "00111110110101001101101100110001", 
    10 => "00111110100011100011100111011010", 
    11 => "00111101110001111100010111000010", 
    12 => "10111101110001111100010111000010", 
    13 => "10111110100011100011100111011010", 
    14 => "10111110110101001101101100110001", 
    15 => "10111110111110110001010010111110", 
    16 => "00111110111011001000001101011111", 
    17 => "00111110010000111110111100010101", 
    18 => "10111110010000111110111100010101", 
    19 to 20=> "10111110111011001000001101011111", 
    21 => "10111110010000111110111100010101", 
    22 => "00111110010000111110111100010101", 
    23 => "00111110111011001000001101011111", 
    24 => "00111110110101001101101100110001", 
    25 => "10111101110001111100010111000010", 
    26 => "10111110111110110001010010111110", 
    27 => "10111110100011100011100111011010", 
    28 => "00111110100011100011100111011010", 
    29 => "00111110111110110001010010111110", 
    30 => "00111101110001111100010111000010", 
    31 => "10111110110101001101101100110001", 
    32 => "00111110101101010000010011110011", 
    33 to 34=> "10111110101101010000010011110011", 
    35 to 36=> "00111110101101010000010011110011", 
    37 to 38=> "10111110101101010000010011110011", 
    39 => "00111110101101010000010011110011", 
    40 => "00111110100011100011100111011010", 
    41 => "10111110111110110001010010111110", 
    42 => "00111101110001111100010111000010", 
    43 => "00111110110101001101101100110001", 
    44 => "10111110110101001101101100110001", 
    45 => "10111101110001111100010111000010", 
    46 => "00111110111110110001010010111110", 
    47 => "10111110100011100011100111011010", 
    48 => "00111110010000111110111100010101", 
    49 => "10111110111011001000001101011111", 
    50 => "00111110111011001000001101011111", 
    51 to 52=> "10111110010000111110111100010101", 
    53 => "00111110111011001000001101011111", 
    54 => "10111110111011001000001101011111", 
    55 => "00111110010000111110111100010101", 
    56 => "00111101110001111100010111000010", 
    57 => "10111110100011100011100111011010", 
    58 => "00111110110101001101101100110001", 
    59 => "10111110111110110001010010111110", 
    60 => "00111110111110110001010010111110", 
    61 => "10111110110101001101101100110001", 
    62 => "00111110100011100011100111011010", 
    63 => "10111101110001111100010111000010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Accelerator_T is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Accelerator_T is
    component Accelerator_T_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Accelerator_T_rom_U :  component Accelerator_T_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


