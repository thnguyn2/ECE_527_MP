-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Accelerator_MAT_Multiply is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal i_2_fu_187_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_331 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_65 : BOOLEAN;
    signal p_addr8_cast_fu_201_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr8_cast_reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_211_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal tmp_3_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_349 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_237_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_362 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_96 : BOOLEAN;
    signal p_addr4_cast_fu_251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr4_cast_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_261_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_376 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal tmp_6_trn_cast_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_trn_cast_reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_390 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_124 : BOOLEAN;
    signal exitcond_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_139 : BOOLEAN;
    signal B_cached_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_159 : BOOLEAN;
    signal B_cached_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_cached_ce0 : STD_LOGIC;
    signal B_cached_we0 : STD_LOGIC;
    signal B_cached_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_101 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_185 : BOOLEAN;
    signal i_1_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_145 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_216 : BOOLEAN;
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_193_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_trn7_cast_fu_217_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr9_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_243_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_trn1_cast_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_297_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_309_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr7_fu_319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_170_ce : STD_LOGIC;
    signal grp_fu_175_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component Accelerator_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_MAT_Multiply_B_cached IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    B_cached_U : component Accelerator_MAT_Multiply_B_cached
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_cached_address0,
        ce0 => B_cached_ce0,
        we0 => B_cached_we0,
        d0 => B_cached_d0,
        q0 => B_cached_q0);

    Accelerator_fadd_32ns_32ns_32_5_full_dsp_U0 : component Accelerator_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_170_p0,
        din1 => grp_fu_170_p1,
        ce => grp_fu_170_ce,
        dout => grp_fu_170_p2);

    Accelerator_fmul_32ns_32ns_32_4_max_dsp_U1 : component Accelerator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        ce => grp_fu_175_ce,
        dout => grp_fu_175_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_123 assign process. --
    i_1_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_181_p2 = ap_const_lv1_0)))) then 
                i_1_reg_123 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond1_fu_255_p2)))) then 
                i_1_reg_123 <= i_3_reg_362;
            end if; 
        end if;
    end process;

    -- i_reg_101 assign process. --
    i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_205_p2)))) then 
                i_reg_101 <= i_2_reg_331;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_101 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_134 assign process. --
    j_1_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_271_p2)))) then 
                j_1_reg_134 <= j_3_reg_376;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_231_p2))) then 
                j_1_reg_134 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_112 assign process. --
    j_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                j_reg_112 <= j_2_reg_344;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_181_p2 = ap_const_lv1_0))) then 
                j_reg_112 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- k_reg_145 assign process. --
    k_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                k_reg_145 <= k_1_reg_390;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_255_p2))) then 
                k_reg_145 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- temp_reg_156 assign process. --
    temp_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                temp_reg_156 <= grp_fu_170_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_255_p2))) then 
                temp_reg_156 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_2_reg_331 <= i_2_fu_187_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_3_reg_362 <= i_3_fu_237_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_2_reg_344 <= j_2_fu_211_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                j_3_reg_376 <= j_3_fu_261_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                k_1_reg_390 <= k_1_fu_277_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_231_p2))) then
                    p_addr4_cast_reg_367(6 downto 3) <= p_addr4_cast_fu_251_p1(6 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_181_p2 = ap_const_lv1_0))) then
                    p_addr8_cast_reg_336(6 downto 3) <= p_addr8_cast_fu_201_p1(6 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_205_p2))) then
                    tmp_3_reg_349(7 downto 0) <= tmp_3_fu_226_p1(7 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_255_p2))) then
                    tmp_6_trn_cast_reg_381(3 downto 0) <= tmp_6_trn_cast_fu_267_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_9_reg_415 <= grp_fu_175_p2;
            end if;
        end if;
    end process;
    p_addr8_cast_reg_336(2 downto 0) <= "000";
    p_addr8_cast_reg_336(7) <= '0';
    tmp_3_reg_349(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    p_addr4_cast_reg_367(2 downto 0) <= "000";
    p_addr4_cast_reg_367(7) <= '0';
    tmp_6_trn_cast_reg_381(7 downto 4) <= "0000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond4_fu_181_p2, exitcond3_fu_205_p2, exitcond2_fu_231_p2, exitcond1_fu_255_p2, exitcond_fu_271_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond4_fu_181_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_205_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_231_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_255_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond_fu_271_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_6_fu_292_p1(6 - 1 downto 0);

    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_3_fu_226_p1(6 - 1 downto 0);

    -- B_cached_address0 assign process. --
    B_cached_address0_assign_proc : process(tmp_3_reg_349, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st4_fsm_3, tmp_8_fu_314_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            B_cached_address0 <= tmp_3_reg_349(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            B_cached_address0 <= tmp_8_fu_314_p1(6 - 1 downto 0);
        else 
            B_cached_address0 <= "XXXXXX";
        end if; 
    end process;


    -- B_cached_ce0 assign process. --
    B_cached_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            B_cached_ce0 <= ap_const_logic_1;
        else 
            B_cached_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_cached_d0 <= B_q0;

    -- B_cached_we0 assign process. --
    B_cached_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            B_cached_we0 <= ap_const_logic_1;
        else 
            B_cached_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_ce0 assign process. --
    B_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= tmp_4_fu_323_p1(6 - 1 downto 0);

    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= temp_reg_156;

    -- C_we0 assign process. --
    C_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, exitcond_fu_271_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_271_p2))))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st5_fsm_4, exitcond2_fu_231_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_231_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, exitcond2_fu_231_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_231_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_124 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_139 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_159 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_185 assign process. --
    ap_sig_bdd_185_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_185 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_216 assign process. --
    ap_sig_bdd_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_216 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_34 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_65 assign process. --
    ap_sig_bdd_65_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_65 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_96 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_216)
    begin
        if (ap_sig_bdd_216) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_159)
    begin
        if (ap_sig_bdd_159) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_65)
    begin
        if (ap_sig_bdd_65) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_185)
    begin
        if (ap_sig_bdd_185) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_96)
    begin
        if (ap_sig_bdd_96) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_124)
    begin
        if (ap_sig_bdd_124) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_139)
    begin
        if (ap_sig_bdd_139) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_255_p2 <= "1" when (j_1_reg_134 = ap_const_lv4_8) else "0";
    exitcond2_fu_231_p2 <= "1" when (i_1_reg_123 = ap_const_lv4_8) else "0";
    exitcond3_fu_205_p2 <= "1" when (j_reg_112 = ap_const_lv4_8) else "0";
    exitcond4_fu_181_p2 <= "1" when (i_reg_101 = ap_const_lv4_8) else "0";
    exitcond_fu_271_p2 <= "1" when (k_reg_145 = ap_const_lv4_8) else "0";
    grp_fu_170_ce <= ap_const_logic_1;
    grp_fu_170_p0 <= temp_reg_156;
    grp_fu_170_p1 <= tmp_9_reg_415;
    grp_fu_175_ce <= ap_const_logic_1;
    grp_fu_175_p0 <= A_q0;
    grp_fu_175_p1 <= B_cached_q0;
    i_2_fu_187_p2 <= std_logic_vector(unsigned(i_reg_101) + unsigned(ap_const_lv4_1));
    i_3_fu_237_p2 <= std_logic_vector(unsigned(i_1_reg_123) + unsigned(ap_const_lv4_1));
    j_2_fu_211_p2 <= std_logic_vector(unsigned(j_reg_112) + unsigned(ap_const_lv4_1));
    j_3_fu_261_p2 <= std_logic_vector(unsigned(j_1_reg_134) + unsigned(ap_const_lv4_1));
    k_1_fu_277_p2 <= std_logic_vector(unsigned(k_reg_145) + unsigned(ap_const_lv4_1));
    p_addr1_fu_309_p2 <= std_logic_vector(unsigned(tmp_6_trn_cast_reg_381) + unsigned(p_addr_cast_fu_305_p1));
    p_addr4_cast_fu_251_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_243_p3),8));
    p_addr5_fu_287_p2 <= std_logic_vector(unsigned(tmp_8_trn1_cast_fu_283_p1) + unsigned(p_addr4_cast_reg_367));
    p_addr7_fu_319_p2 <= std_logic_vector(unsigned(tmp_6_trn_cast_reg_381) + unsigned(p_addr4_cast_reg_367));
    p_addr8_cast_fu_201_p1 <= std_logic_vector(resize(unsigned(tmp_fu_193_p3),8));
    p_addr9_fu_221_p2 <= std_logic_vector(unsigned(tmp_3_trn7_cast_fu_217_p1) + unsigned(p_addr8_cast_reg_336));
    p_addr_cast_fu_305_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_297_p3),8));
    tmp_1_fu_243_p3 <= (i_1_reg_123 & ap_const_lv3_0);
    tmp_3_fu_226_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_221_p2),64));
    tmp_3_trn7_cast_fu_217_p1 <= std_logic_vector(resize(unsigned(j_reg_112),8));
    tmp_4_fu_323_p1 <= std_logic_vector(resize(unsigned(p_addr7_fu_319_p2),64));
    tmp_6_fu_292_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_287_p2),64));
    tmp_6_trn_cast_fu_267_p1 <= std_logic_vector(resize(unsigned(j_1_reg_134),8));
    tmp_7_fu_297_p3 <= (k_reg_145 & ap_const_lv3_0);
    tmp_8_fu_314_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_309_p2),64));
    tmp_8_trn1_cast_fu_283_p1 <= std_logic_vector(resize(unsigned(k_reg_145),8));
    tmp_fu_193_p3 <= (i_reg_101 & ap_const_lv3_0);
end behav;
