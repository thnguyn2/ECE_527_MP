// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Accelerator_HH_
#define _Accelerator_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Accelerator_Quant.h"
#include "Accelerator_MAT_Multiply.h"
#include "Accelerator_MAT_Multiply2.h"
#include "Accelerator_Tinv.h"
#include "Accelerator_T.h"
#include "Accelerator_MAT_Multiply_B_cached.h"
#include "Accelerator_temp_2.h"

namespace ap_rtl {

struct Accelerator : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > X_address0;
    sc_out< sc_logic > X_ce0;
    sc_in< sc_lv<32> > X_q0;
    sc_in< sc_lv<8> > function_r;
    sc_out< sc_lv<6> > Y_address0;
    sc_out< sc_logic > Y_ce0;
    sc_out< sc_logic > Y_we0;
    sc_out< sc_lv<32> > Y_d0;


    // Module declarations
    Accelerator(sc_module_name name);
    SC_HAS_PROCESS(Accelerator);

    ~Accelerator();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Accelerator_Tinv* Tinv_U;
    Accelerator_T* T_U;
    Accelerator_MAT_Multiply_B_cached* temp_1_U;
    Accelerator_MAT_Multiply_B_cached* temp_U;
    Accelerator_temp_2* temp_2_U;
    Accelerator_Quant* grp_Accelerator_Quant_fu_49;
    Accelerator_MAT_Multiply* grp_Accelerator_MAT_Multiply_fu_61;
    Accelerator_MAT_Multiply2* grp_Accelerator_MAT_Multiply2_fu_72;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_25;
    sc_signal< sc_lv<6> > Tinv_address0;
    sc_signal< sc_logic > Tinv_ce0;
    sc_signal< sc_lv<32> > Tinv_q0;
    sc_signal< sc_lv<6> > T_address0;
    sc_signal< sc_logic > T_ce0;
    sc_signal< sc_lv<32> > T_q0;
    sc_signal< sc_lv<1> > cond_fu_81_p2;
    sc_signal< sc_lv<1> > cond_reg_92;
    sc_signal< sc_lv<6> > temp_1_address0;
    sc_signal< sc_logic > temp_1_ce0;
    sc_signal< sc_logic > temp_1_we0;
    sc_signal< sc_lv<32> > temp_1_d0;
    sc_signal< sc_lv<32> > temp_1_q0;
    sc_signal< sc_lv<6> > temp_address0;
    sc_signal< sc_logic > temp_ce0;
    sc_signal< sc_logic > temp_we0;
    sc_signal< sc_lv<32> > temp_d0;
    sc_signal< sc_lv<32> > temp_q0;
    sc_signal< sc_lv<6> > temp_2_address0;
    sc_signal< sc_logic > temp_2_ce0;
    sc_signal< sc_logic > temp_2_we0;
    sc_signal< sc_lv<32> > temp_2_d0;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_49_ap_start;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_49_ap_done;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_49_ap_idle;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_49_ap_ready;
    sc_signal< sc_lv<6> > grp_Accelerator_Quant_fu_49_X_address0;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_49_X_ce0;
    sc_signal< sc_lv<32> > grp_Accelerator_Quant_fu_49_X_q0;
    sc_signal< sc_lv<8> > grp_Accelerator_Quant_fu_49_function_r;
    sc_signal< sc_lv<6> > grp_Accelerator_Quant_fu_49_Y_address0;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_49_Y_ce0;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_49_Y_we0;
    sc_signal< sc_lv<32> > grp_Accelerator_Quant_fu_49_Y_d0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_ap_start;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_ap_done;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_ap_idle;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_ap_ready;
    sc_signal< sc_lv<6> > grp_Accelerator_MAT_Multiply_fu_61_A_address0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_A_ce0;
    sc_signal< sc_lv<32> > grp_Accelerator_MAT_Multiply_fu_61_A_q0;
    sc_signal< sc_lv<6> > grp_Accelerator_MAT_Multiply_fu_61_B_address0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_B_ce0;
    sc_signal< sc_lv<32> > grp_Accelerator_MAT_Multiply_fu_61_B_q0;
    sc_signal< sc_lv<6> > grp_Accelerator_MAT_Multiply_fu_61_C_address0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_C_ce0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_C_we0;
    sc_signal< sc_lv<32> > grp_Accelerator_MAT_Multiply_fu_61_C_d0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_ap_start;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_ap_done;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_ap_idle;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_ap_ready;
    sc_signal< sc_lv<6> > grp_Accelerator_MAT_Multiply2_fu_72_A_address0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_A_ce0;
    sc_signal< sc_lv<32> > grp_Accelerator_MAT_Multiply2_fu_72_A_q0;
    sc_signal< sc_lv<6> > grp_Accelerator_MAT_Multiply2_fu_72_B_address0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_B_ce0;
    sc_signal< sc_lv<32> > grp_Accelerator_MAT_Multiply2_fu_72_B_q0;
    sc_signal< sc_lv<6> > grp_Accelerator_MAT_Multiply2_fu_72_C_address0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_C_ce0;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_C_we0;
    sc_signal< sc_lv<32> > grp_Accelerator_MAT_Multiply2_fu_72_C_d0;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_49_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_154;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_162;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_169;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply_fu_61_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_189;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_197;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_bdd_204;
    sc_signal< sc_logic > grp_Accelerator_MAT_Multiply2_fu_72_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_bdd_214;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_8;
    sc_signal< bool > ap_sig_bdd_222;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_st1_fsm_0;
    static const sc_lv<9> ap_ST_st2_fsm_1;
    static const sc_lv<9> ap_ST_st3_fsm_2;
    static const sc_lv<9> ap_ST_st4_fsm_3;
    static const sc_lv<9> ap_ST_st5_fsm_4;
    static const sc_lv<9> ap_ST_st6_fsm_5;
    static const sc_lv<9> ap_ST_st7_fsm_6;
    static const sc_lv<9> ap_ST_st8_fsm_7;
    static const sc_lv<9> ap_ST_st9_fsm_8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_T_address0();
    void thread_T_ce0();
    void thread_Tinv_address0();
    void thread_Tinv_ce0();
    void thread_X_address0();
    void thread_X_ce0();
    void thread_Y_address0();
    void thread_Y_ce0();
    void thread_Y_d0();
    void thread_Y_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_154();
    void thread_ap_sig_bdd_162();
    void thread_ap_sig_bdd_169();
    void thread_ap_sig_bdd_189();
    void thread_ap_sig_bdd_197();
    void thread_ap_sig_bdd_204();
    void thread_ap_sig_bdd_214();
    void thread_ap_sig_bdd_222();
    void thread_ap_sig_bdd_25();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_ap_sig_cseq_ST_st9_fsm_8();
    void thread_cond_fu_81_p2();
    void thread_grp_Accelerator_MAT_Multiply2_fu_72_A_q0();
    void thread_grp_Accelerator_MAT_Multiply2_fu_72_B_q0();
    void thread_grp_Accelerator_MAT_Multiply2_fu_72_ap_start();
    void thread_grp_Accelerator_MAT_Multiply_fu_61_A_q0();
    void thread_grp_Accelerator_MAT_Multiply_fu_61_B_q0();
    void thread_grp_Accelerator_MAT_Multiply_fu_61_ap_start();
    void thread_grp_Accelerator_Quant_fu_49_X_q0();
    void thread_grp_Accelerator_Quant_fu_49_ap_start();
    void thread_grp_Accelerator_Quant_fu_49_function_r();
    void thread_temp_1_address0();
    void thread_temp_1_ce0();
    void thread_temp_1_d0();
    void thread_temp_1_we0();
    void thread_temp_2_address0();
    void thread_temp_2_ce0();
    void thread_temp_2_d0();
    void thread_temp_2_we0();
    void thread_temp_address0();
    void thread_temp_ce0();
    void thread_temp_d0();
    void thread_temp_we0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
