

================================================================
== Vivado HLS Report for 'Accelerator_MAT_Multiply2_Loop_Col_proc'
================================================================
* Date:           Thu Oct 29 22:12:16 2015

* Version:        2015.1 (Build 1215546 on Mon Apr 27 19:24:50 PM 2015)
* Project:        accelerator
* Solution:       solution2opt
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.09|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   75|   75|   75|   75|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Col     |   73|   73|        46|          4|          1|     8|    yes   |
        +----------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 4, depth = 46


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 48
* Pipeline: 1
  Pipeline-0: II = 4, D = 46, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	48  / (exitcond1)
	3  / (!exitcond1)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	2  / true
48 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: A_cached_row_addr [1/1] 0.00ns
newFuncRoot:0  %A_cached_row_addr = getelementptr inbounds [8 x float]* %A_cached_row, i64 0, i64 0

ST_1: A_cached_row_addr_1 [1/1] 0.00ns
newFuncRoot:1  %A_cached_row_addr_1 = getelementptr inbounds [8 x float]* %A_cached_row, i64 0, i64 1

ST_1: A_cached_row_addr_2 [1/1] 0.00ns
newFuncRoot:2  %A_cached_row_addr_2 = getelementptr inbounds [8 x float]* %A_cached_row, i64 0, i64 2

ST_1: A_cached_row_addr_3 [1/1] 0.00ns
newFuncRoot:3  %A_cached_row_addr_3 = getelementptr inbounds [8 x float]* %A_cached_row, i64 0, i64 3

ST_1: A_cached_row_addr_4 [1/1] 0.00ns
newFuncRoot:4  %A_cached_row_addr_4 = getelementptr inbounds [8 x float]* %A_cached_row, i64 0, i64 4

ST_1: A_cached_row_addr_5 [1/1] 0.00ns
newFuncRoot:5  %A_cached_row_addr_5 = getelementptr inbounds [8 x float]* %A_cached_row, i64 0, i64 5

ST_1: A_cached_row_addr_6 [1/1] 0.00ns
newFuncRoot:6  %A_cached_row_addr_6 = getelementptr inbounds [8 x float]* %A_cached_row, i64 0, i64 6

ST_1: A_cached_row_addr_7 [1/1] 0.00ns
newFuncRoot:7  %A_cached_row_addr_7 = getelementptr inbounds [8 x float]* %A_cached_row, i64 0, i64 7

ST_1: stg_57 [1/1] 1.57ns
newFuncRoot:8  br label %.preheader


 <State 2>: 2.39ns
ST_2: j [1/1] 0.00ns
.preheader:0  %j = phi i4 [ %j_1, %0 ], [ 0, %newFuncRoot ]

ST_2: exitcond1 [1/1] 1.88ns
.preheader:1  %exitcond1 = icmp eq i4 %j, -8

ST_2: j_1 [1/1] 0.80ns
.preheader:2  %j_1 = add i4 %j, 1

ST_2: stg_61 [1/1] 0.00ns
.preheader:3  br i1 %exitcond1, label %.exitStub, label %0

ST_2: tmp_s [1/1] 0.00ns
:4  %tmp_s = zext i4 %j to i64

ST_2: A_cached_row_load [2/2] 2.39ns
:5  %A_cached_row_load = load float* %A_cached_row_addr, align 16

ST_2: B_0_addr [1/1] 0.00ns
:6  %B_0_addr = getelementptr [8 x float]* %B_0, i64 0, i64 %tmp_s

ST_2: B_0_load [2/2] 2.39ns
:7  %B_0_load = load float* %B_0_addr, align 4

ST_2: A_cached_row_load_1 [2/2] 2.39ns
:10  %A_cached_row_load_1 = load float* %A_cached_row_addr_1, align 4

ST_2: B_1_addr [1/1] 0.00ns
:11  %B_1_addr = getelementptr [8 x float]* %B_1, i64 0, i64 %tmp_s

ST_2: B_1_load [2/2] 2.39ns
:12  %B_1_load = load float* %B_1_addr, align 4


 <State 3>: 8.09ns
ST_3: A_cached_row_load [1/2] 2.39ns
:5  %A_cached_row_load = load float* %A_cached_row_addr, align 16

ST_3: B_0_load [1/2] 2.39ns
:7  %B_0_load = load float* %B_0_addr, align 4

ST_3: tmp_4 [4/4] 5.70ns
:8  %tmp_4 = fmul float %A_cached_row_load, %B_0_load

ST_3: A_cached_row_load_1 [1/2] 2.39ns
:10  %A_cached_row_load_1 = load float* %A_cached_row_addr_1, align 4

ST_3: B_1_load [1/2] 2.39ns
:12  %B_1_load = load float* %B_1_addr, align 4

ST_3: tmp_4_1 [4/4] 5.70ns
:13  %tmp_4_1 = fmul float %A_cached_row_load_1, %B_1_load

ST_3: A_cached_row_load_2 [2/2] 2.39ns
:15  %A_cached_row_load_2 = load float* %A_cached_row_addr_2, align 8

ST_3: B_2_addr [1/1] 0.00ns
:16  %B_2_addr = getelementptr [8 x float]* %B_2, i64 0, i64 %tmp_s

ST_3: B_2_load [2/2] 2.39ns
:17  %B_2_load = load float* %B_2_addr, align 4

ST_3: A_cached_row_load_3 [2/2] 2.39ns
:20  %A_cached_row_load_3 = load float* %A_cached_row_addr_3, align 4

ST_3: B_3_addr [1/1] 0.00ns
:21  %B_3_addr = getelementptr [8 x float]* %B_3, i64 0, i64 %tmp_s

ST_3: B_3_load [2/2] 2.39ns
:22  %B_3_load = load float* %B_3_addr, align 4


 <State 4>: 8.09ns
ST_4: tmp_4 [3/4] 5.70ns
:8  %tmp_4 = fmul float %A_cached_row_load, %B_0_load

ST_4: tmp_4_1 [3/4] 5.70ns
:13  %tmp_4_1 = fmul float %A_cached_row_load_1, %B_1_load

ST_4: A_cached_row_load_2 [1/2] 2.39ns
:15  %A_cached_row_load_2 = load float* %A_cached_row_addr_2, align 8

ST_4: B_2_load [1/2] 2.39ns
:17  %B_2_load = load float* %B_2_addr, align 4

ST_4: tmp_4_2 [4/4] 5.70ns
:18  %tmp_4_2 = fmul float %A_cached_row_load_2, %B_2_load

ST_4: A_cached_row_load_3 [1/2] 2.39ns
:20  %A_cached_row_load_3 = load float* %A_cached_row_addr_3, align 4

ST_4: B_3_load [1/2] 2.39ns
:22  %B_3_load = load float* %B_3_addr, align 4

ST_4: tmp_4_3 [4/4] 5.70ns
:23  %tmp_4_3 = fmul float %A_cached_row_load_3, %B_3_load

ST_4: A_cached_row_load_4 [2/2] 2.39ns
:25  %A_cached_row_load_4 = load float* %A_cached_row_addr_4, align 16

ST_4: B_4_addr [1/1] 0.00ns
:26  %B_4_addr = getelementptr [8 x float]* %B_4, i64 0, i64 %tmp_s

ST_4: B_4_load [2/2] 2.39ns
:27  %B_4_load = load float* %B_4_addr, align 4

ST_4: A_cached_row_load_5 [2/2] 2.39ns
:30  %A_cached_row_load_5 = load float* %A_cached_row_addr_5, align 4

ST_4: B_5_addr [1/1] 0.00ns
:31  %B_5_addr = getelementptr [8 x float]* %B_5, i64 0, i64 %tmp_s

ST_4: B_5_load [2/2] 2.39ns
:32  %B_5_load = load float* %B_5_addr, align 4


 <State 5>: 8.09ns
ST_5: tmp_4 [2/4] 5.70ns
:8  %tmp_4 = fmul float %A_cached_row_load, %B_0_load

ST_5: tmp_4_1 [2/4] 5.70ns
:13  %tmp_4_1 = fmul float %A_cached_row_load_1, %B_1_load

ST_5: tmp_4_2 [3/4] 5.70ns
:18  %tmp_4_2 = fmul float %A_cached_row_load_2, %B_2_load

ST_5: tmp_4_3 [3/4] 5.70ns
:23  %tmp_4_3 = fmul float %A_cached_row_load_3, %B_3_load

ST_5: A_cached_row_load_4 [1/2] 2.39ns
:25  %A_cached_row_load_4 = load float* %A_cached_row_addr_4, align 16

ST_5: B_4_load [1/2] 2.39ns
:27  %B_4_load = load float* %B_4_addr, align 4

ST_5: tmp_4_4 [4/4] 5.70ns
:28  %tmp_4_4 = fmul float %A_cached_row_load_4, %B_4_load

ST_5: A_cached_row_load_5 [1/2] 2.39ns
:30  %A_cached_row_load_5 = load float* %A_cached_row_addr_5, align 4

ST_5: B_5_load [1/2] 2.39ns
:32  %B_5_load = load float* %B_5_addr, align 4

ST_5: tmp_4_5 [4/4] 5.70ns
:33  %tmp_4_5 = fmul float %A_cached_row_load_5, %B_5_load

ST_5: A_cached_row_load_6 [2/2] 2.39ns
:35  %A_cached_row_load_6 = load float* %A_cached_row_addr_6, align 8

ST_5: B_6_addr [1/1] 0.00ns
:36  %B_6_addr = getelementptr [8 x float]* %B_6, i64 0, i64 %tmp_s

ST_5: B_6_load [2/2] 2.39ns
:37  %B_6_load = load float* %B_6_addr, align 4

ST_5: A_cached_row_load_7 [2/2] 2.39ns
:40  %A_cached_row_load_7 = load float* %A_cached_row_addr_7, align 4

ST_5: B_7_addr [1/1] 0.00ns
:41  %B_7_addr = getelementptr [8 x float]* %B_7, i64 0, i64 %tmp_s

ST_5: B_7_load [2/2] 2.39ns
:42  %B_7_load = load float* %B_7_addr, align 4


 <State 6>: 8.09ns
ST_6: tmp_4 [1/4] 5.70ns
:8  %tmp_4 = fmul float %A_cached_row_load, %B_0_load

ST_6: tmp_4_1 [1/4] 5.70ns
:13  %tmp_4_1 = fmul float %A_cached_row_load_1, %B_1_load

ST_6: tmp_4_2 [2/4] 5.70ns
:18  %tmp_4_2 = fmul float %A_cached_row_load_2, %B_2_load

ST_6: tmp_4_3 [2/4] 5.70ns
:23  %tmp_4_3 = fmul float %A_cached_row_load_3, %B_3_load

ST_6: tmp_4_4 [3/4] 5.70ns
:28  %tmp_4_4 = fmul float %A_cached_row_load_4, %B_4_load

ST_6: tmp_4_5 [3/4] 5.70ns
:33  %tmp_4_5 = fmul float %A_cached_row_load_5, %B_5_load

ST_6: A_cached_row_load_6 [1/2] 2.39ns
:35  %A_cached_row_load_6 = load float* %A_cached_row_addr_6, align 8

ST_6: B_6_load [1/2] 2.39ns
:37  %B_6_load = load float* %B_6_addr, align 4

ST_6: tmp_4_6 [4/4] 5.70ns
:38  %tmp_4_6 = fmul float %A_cached_row_load_6, %B_6_load

ST_6: A_cached_row_load_7 [1/2] 2.39ns
:40  %A_cached_row_load_7 = load float* %A_cached_row_addr_7, align 4

ST_6: B_7_load [1/2] 2.39ns
:42  %B_7_load = load float* %B_7_addr, align 4

ST_6: tmp_4_7 [4/4] 5.70ns
:43  %tmp_4_7 = fmul float %A_cached_row_load_7, %B_7_load


 <State 7>: 7.26ns
ST_7: temp_2 [5/5] 7.26ns
:9  %temp_2 = fadd float %tmp_4, 0.000000e+00

ST_7: tmp_4_2 [1/4] 5.70ns
:18  %tmp_4_2 = fmul float %A_cached_row_load_2, %B_2_load

ST_7: tmp_4_3 [1/4] 5.70ns
:23  %tmp_4_3 = fmul float %A_cached_row_load_3, %B_3_load

ST_7: tmp_4_4 [2/4] 5.70ns
:28  %tmp_4_4 = fmul float %A_cached_row_load_4, %B_4_load

ST_7: tmp_4_5 [2/4] 5.70ns
:33  %tmp_4_5 = fmul float %A_cached_row_load_5, %B_5_load

ST_7: tmp_4_6 [3/4] 5.70ns
:38  %tmp_4_6 = fmul float %A_cached_row_load_6, %B_6_load

ST_7: tmp_4_7 [3/4] 5.70ns
:43  %tmp_4_7 = fmul float %A_cached_row_load_7, %B_7_load


 <State 8>: 7.26ns
ST_8: temp_2 [4/5] 7.26ns
:9  %temp_2 = fadd float %tmp_4, 0.000000e+00

ST_8: tmp_4_4 [1/4] 5.70ns
:28  %tmp_4_4 = fmul float %A_cached_row_load_4, %B_4_load

ST_8: tmp_4_5 [1/4] 5.70ns
:33  %tmp_4_5 = fmul float %A_cached_row_load_5, %B_5_load

ST_8: tmp_4_6 [2/4] 5.70ns
:38  %tmp_4_6 = fmul float %A_cached_row_load_6, %B_6_load

ST_8: tmp_4_7 [2/4] 5.70ns
:43  %tmp_4_7 = fmul float %A_cached_row_load_7, %B_7_load


 <State 9>: 7.26ns
ST_9: temp_2 [3/5] 7.26ns
:9  %temp_2 = fadd float %tmp_4, 0.000000e+00

ST_9: tmp_4_6 [1/4] 5.70ns
:38  %tmp_4_6 = fmul float %A_cached_row_load_6, %B_6_load

ST_9: tmp_4_7 [1/4] 5.70ns
:43  %tmp_4_7 = fmul float %A_cached_row_load_7, %B_7_load


 <State 10>: 7.26ns
ST_10: temp_2 [2/5] 7.26ns
:9  %temp_2 = fadd float %tmp_4, 0.000000e+00


 <State 11>: 7.26ns
ST_11: temp_2 [1/5] 7.26ns
:9  %temp_2 = fadd float %tmp_4, 0.000000e+00


 <State 12>: 7.26ns
ST_12: temp_2_1 [5/5] 7.26ns
:14  %temp_2_1 = fadd float %temp_2, %tmp_4_1


 <State 13>: 7.26ns
ST_13: temp_2_1 [4/5] 7.26ns
:14  %temp_2_1 = fadd float %temp_2, %tmp_4_1


 <State 14>: 7.26ns
ST_14: temp_2_1 [3/5] 7.26ns
:14  %temp_2_1 = fadd float %temp_2, %tmp_4_1


 <State 15>: 7.26ns
ST_15: temp_2_1 [2/5] 7.26ns
:14  %temp_2_1 = fadd float %temp_2, %tmp_4_1


 <State 16>: 7.26ns
ST_16: temp_2_1 [1/5] 7.26ns
:14  %temp_2_1 = fadd float %temp_2, %tmp_4_1


 <State 17>: 7.26ns
ST_17: temp_2_2 [5/5] 7.26ns
:19  %temp_2_2 = fadd float %temp_2_1, %tmp_4_2


 <State 18>: 7.26ns
ST_18: temp_2_2 [4/5] 7.26ns
:19  %temp_2_2 = fadd float %temp_2_1, %tmp_4_2


 <State 19>: 7.26ns
ST_19: temp_2_2 [3/5] 7.26ns
:19  %temp_2_2 = fadd float %temp_2_1, %tmp_4_2


 <State 20>: 7.26ns
ST_20: temp_2_2 [2/5] 7.26ns
:19  %temp_2_2 = fadd float %temp_2_1, %tmp_4_2


 <State 21>: 7.26ns
ST_21: temp_2_2 [1/5] 7.26ns
:19  %temp_2_2 = fadd float %temp_2_1, %tmp_4_2


 <State 22>: 7.26ns
ST_22: temp_2_3 [5/5] 7.26ns
:24  %temp_2_3 = fadd float %temp_2_2, %tmp_4_3


 <State 23>: 7.26ns
ST_23: temp_2_3 [4/5] 7.26ns
:24  %temp_2_3 = fadd float %temp_2_2, %tmp_4_3


 <State 24>: 7.26ns
ST_24: temp_2_3 [3/5] 7.26ns
:24  %temp_2_3 = fadd float %temp_2_2, %tmp_4_3


 <State 25>: 7.26ns
ST_25: temp_2_3 [2/5] 7.26ns
:24  %temp_2_3 = fadd float %temp_2_2, %tmp_4_3


 <State 26>: 7.26ns
ST_26: temp_2_3 [1/5] 7.26ns
:24  %temp_2_3 = fadd float %temp_2_2, %tmp_4_3


 <State 27>: 7.26ns
ST_27: temp_2_4 [5/5] 7.26ns
:29  %temp_2_4 = fadd float %temp_2_3, %tmp_4_4


 <State 28>: 7.26ns
ST_28: temp_2_4 [4/5] 7.26ns
:29  %temp_2_4 = fadd float %temp_2_3, %tmp_4_4


 <State 29>: 7.26ns
ST_29: temp_2_4 [3/5] 7.26ns
:29  %temp_2_4 = fadd float %temp_2_3, %tmp_4_4


 <State 30>: 7.26ns
ST_30: temp_2_4 [2/5] 7.26ns
:29  %temp_2_4 = fadd float %temp_2_3, %tmp_4_4


 <State 31>: 7.26ns
ST_31: temp_2_4 [1/5] 7.26ns
:29  %temp_2_4 = fadd float %temp_2_3, %tmp_4_4


 <State 32>: 7.26ns
ST_32: temp_2_5 [5/5] 7.26ns
:34  %temp_2_5 = fadd float %temp_2_4, %tmp_4_5


 <State 33>: 7.26ns
ST_33: temp_2_5 [4/5] 7.26ns
:34  %temp_2_5 = fadd float %temp_2_4, %tmp_4_5


 <State 34>: 7.26ns
ST_34: temp_2_5 [3/5] 7.26ns
:34  %temp_2_5 = fadd float %temp_2_4, %tmp_4_5


 <State 35>: 7.26ns
ST_35: temp_2_5 [2/5] 7.26ns
:34  %temp_2_5 = fadd float %temp_2_4, %tmp_4_5


 <State 36>: 7.26ns
ST_36: temp_2_5 [1/5] 7.26ns
:34  %temp_2_5 = fadd float %temp_2_4, %tmp_4_5


 <State 37>: 7.26ns
ST_37: temp_2_6 [5/5] 7.26ns
:39  %temp_2_6 = fadd float %temp_2_5, %tmp_4_6


 <State 38>: 7.26ns
ST_38: temp_2_6 [4/5] 7.26ns
:39  %temp_2_6 = fadd float %temp_2_5, %tmp_4_6


 <State 39>: 7.26ns
ST_39: temp_2_6 [3/5] 7.26ns
:39  %temp_2_6 = fadd float %temp_2_5, %tmp_4_6


 <State 40>: 7.26ns
ST_40: temp_2_6 [2/5] 7.26ns
:39  %temp_2_6 = fadd float %temp_2_5, %tmp_4_6


 <State 41>: 7.26ns
ST_41: temp_2_6 [1/5] 7.26ns
:39  %temp_2_6 = fadd float %temp_2_5, %tmp_4_6


 <State 42>: 7.26ns
ST_42: temp_2_7 [5/5] 7.26ns
:44  %temp_2_7 = fadd float %temp_2_6, %tmp_4_7


 <State 43>: 7.26ns
ST_43: temp_2_7 [4/5] 7.26ns
:44  %temp_2_7 = fadd float %temp_2_6, %tmp_4_7


 <State 44>: 7.26ns
ST_44: temp_2_7 [3/5] 7.26ns
:44  %temp_2_7 = fadd float %temp_2_6, %tmp_4_7


 <State 45>: 7.26ns
ST_45: temp_2_7 [2/5] 7.26ns
:44  %temp_2_7 = fadd float %temp_2_6, %tmp_4_7


 <State 46>: 7.26ns
ST_46: temp_2_7 [1/5] 7.26ns
:44  %temp_2_7 = fadd float %temp_2_6, %tmp_4_7


 <State 47>: 2.71ns
ST_47: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_47: stg_176 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str5) nounwind

ST_47: tmp_1 [1/1] 0.00ns
:2  %tmp_1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str5)

ST_47: stg_178 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str12) nounwind

ST_47: p_addr [1/1] 0.00ns
:45  %p_addr = call i32 @_ssdm_op_BitConcatenate.i32.i28.i4(i28 4, i4 %j)

ST_47: tmp [1/1] 0.00ns
:46  %tmp = zext i32 %p_addr to i64

ST_47: C_addr [1/1] 0.00ns
:47  %C_addr = getelementptr [64 x float]* %C, i64 0, i64 %tmp

ST_47: stg_182 [1/1] 2.71ns
:48  store float %temp_2_7, float* %C_addr, align 4

ST_47: empty_6 [1/1] 0.00ns
:49  %empty_6 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str5, i32 %tmp_1)

ST_47: stg_184 [1/1] 0.00ns
:50  br label %.preheader


 <State 48>: 0.00ns
ST_48: stg_185 [1/1] 0.00ns
.exitStub:0  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
