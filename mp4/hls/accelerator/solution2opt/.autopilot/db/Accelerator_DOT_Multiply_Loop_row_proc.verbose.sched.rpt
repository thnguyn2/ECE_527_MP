

================================================================
== Vivado HLS Report for 'Accelerator_DOT_Multiply_Loop_row_proc'
================================================================
* Date:           Thu Oct 29 22:12:18 2015

* Version:        2015.1 (Build 1215546 on Mon Apr 27 19:24:50 PM 2015)
* Project:        accelerator
* Solution:       solution2opt
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      7.64|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   71|   71|   71|   71|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- row     |   69|   69|        14|          8|          1|     8|    yes   |
        +----------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 8, depth = 14


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 16
* Pipeline: 1
  Pipeline-0: II = 8, D = 14, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	16  / (exitcond1_i_i)
	3  / (!exitcond1_i_i)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	2  / true
16 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_17 [1/1] 0.00ns
newFuncRoot:0  call void (...)* @_ssdm_op_SpecInterface(float* %C, [8 x i8]* @p_str112, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str11, [1 x i8]* @p_str11, [1 x i8]* @p_str11)

ST_1: stg_18 [1/1] 0.00ns
newFuncRoot:1  call void (...)* @_ssdm_op_SpecInterface(float* %A, [8 x i8]* @p_str112, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str11, [1 x i8]* @p_str11, [1 x i8]* @p_str11)

ST_1: stg_19 [1/1] 1.57ns
newFuncRoot:2  br label %0


 <State 2>: 1.88ns
ST_2: i_0_i_i [1/1] 0.00ns
:0  %i_0_i_i = phi i4 [ 0, %newFuncRoot ], [ %i, %1 ]

ST_2: exitcond1_i_i [1/1] 1.88ns
:1  %exitcond1_i_i = icmp eq i4 %i_0_i_i, -8

ST_2: i [1/1] 0.80ns
:2  %i = add i4 %i_0_i_i, 1

ST_2: stg_23 [1/1] 0.00ns
:3  br i1 %exitcond1_i_i, label %DOT_Multiply_.exit2.exitStub, label %1

ST_2: tmp_25 [1/1] 0.00ns
:5  %tmp_25 = trunc i4 %i_0_i_i to i3


 <State 3>: 4.38ns
ST_3: A_read [1/1] 4.38ns
:4  %A_read = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 4>: 7.64ns
ST_4: tmp_s [1/1] 1.94ns
:6  %tmp_s = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 1.600000e+01, float 1.200000e+01, float 1.400000e+01, float 1.400000e+01, float 1.800000e+01, float 2.400000e+01, float 4.900000e+01, float 7.200000e+01, i3 %tmp_25)

ST_4: tmp_5_i [4/4] 5.70ns
:7  %tmp_5_i = fmul float %A_read, %tmp_s

ST_4: A_read_8 [1/1] 4.38ns
:9  %A_read_8 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 5>: 7.64ns
ST_5: tmp_5_i [3/4] 5.70ns
:7  %tmp_5_i = fmul float %A_read, %tmp_s

ST_5: tmp_18 [1/1] 1.94ns
:10  %tmp_18 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 1.100000e+01, float 1.200000e+01, float 1.300000e+01, float 1.700000e+01, float 2.200000e+01, float 3.500000e+01, float 6.400000e+01, float 9.200000e+01, i3 %tmp_25)

ST_5: tmp_5_i_1 [4/4] 5.70ns
:11  %tmp_5_i_1 = fmul float %A_read_8, %tmp_18

ST_5: A_read_9 [1/1] 4.38ns
:13  %A_read_9 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 6>: 7.64ns
ST_6: tmp_5_i [2/4] 5.70ns
:7  %tmp_5_i = fmul float %A_read, %tmp_s

ST_6: tmp_5_i_1 [3/4] 5.70ns
:11  %tmp_5_i_1 = fmul float %A_read_8, %tmp_18

ST_6: tmp_19 [1/1] 1.94ns
:14  %tmp_19 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 1.000000e+01, float 1.400000e+01, float 1.600000e+01, float 2.200000e+01, float 3.700000e+01, float 5.500000e+01, float 7.800000e+01, float 9.500000e+01, i3 %tmp_25)

ST_6: tmp_5_i_2 [4/4] 5.70ns
:15  %tmp_5_i_2 = fmul float %A_read_9, %tmp_19

ST_6: A_read_10 [1/1] 4.38ns
:17  %A_read_10 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 7>: 7.64ns
ST_7: tmp_5_i [1/4] 5.70ns
:7  %tmp_5_i = fmul float %A_read, %tmp_s

ST_7: tmp_5_i_1 [2/4] 5.70ns
:11  %tmp_5_i_1 = fmul float %A_read_8, %tmp_18

ST_7: tmp_5_i_2 [3/4] 5.70ns
:15  %tmp_5_i_2 = fmul float %A_read_9, %tmp_19

ST_7: tmp_20 [1/1] 1.94ns
:18  %tmp_20 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 1.600000e+01, float 1.900000e+01, float 2.400000e+01, float 2.900000e+01, float 5.600000e+01, float 6.400000e+01, float 8.700000e+01, float 9.800000e+01, i3 %tmp_25)

ST_7: tmp_5_i_3 [4/4] 5.70ns
:19  %tmp_5_i_3 = fmul float %A_read_10, %tmp_20

ST_7: A_read_11 [1/1] 4.38ns
:21  %A_read_11 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 8>: 7.64ns
ST_8: stg_44 [1/1] 4.38ns
:8  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_5_i)

ST_8: tmp_5_i_1 [1/4] 5.70ns
:11  %tmp_5_i_1 = fmul float %A_read_8, %tmp_18

ST_8: tmp_5_i_2 [2/4] 5.70ns
:15  %tmp_5_i_2 = fmul float %A_read_9, %tmp_19

ST_8: tmp_5_i_3 [3/4] 5.70ns
:19  %tmp_5_i_3 = fmul float %A_read_10, %tmp_20

ST_8: tmp_21 [1/1] 1.94ns
:22  %tmp_21 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 2.400000e+01, float 2.600000e+01, float 4.000000e+01, float 5.100000e+01, float 6.800000e+01, float 8.100000e+01, float 1.030000e+02, float 1.120000e+02, i3 %tmp_25)

ST_8: tmp_5_i_4 [4/4] 5.70ns
:23  %tmp_5_i_4 = fmul float %A_read_11, %tmp_21

ST_8: A_read_12 [1/1] 4.38ns
:25  %A_read_12 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 9>: 7.64ns
ST_9: stg_51 [1/1] 4.38ns
:12  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_5_i_1)

ST_9: tmp_5_i_2 [1/4] 5.70ns
:15  %tmp_5_i_2 = fmul float %A_read_9, %tmp_19

ST_9: tmp_5_i_3 [2/4] 5.70ns
:19  %tmp_5_i_3 = fmul float %A_read_10, %tmp_20

ST_9: tmp_5_i_4 [3/4] 5.70ns
:23  %tmp_5_i_4 = fmul float %A_read_11, %tmp_21

ST_9: tmp_22 [1/1] 1.94ns
:26  %tmp_22 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 4.000000e+01, float 5.800000e+01, float 5.700000e+01, float 8.700000e+01, float 1.090000e+02, float 1.040000e+02, float 1.210000e+02, float 1.000000e+02, i3 %tmp_25)

ST_9: tmp_5_i_5 [4/4] 5.70ns
:27  %tmp_5_i_5 = fmul float %A_read_12, %tmp_22

ST_9: A_read_13 [1/1] 4.38ns
:29  %A_read_13 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 10>: 7.64ns
ST_10: stg_58 [1/1] 4.38ns
:16  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_5_i_2)

ST_10: tmp_5_i_3 [1/4] 5.70ns
:19  %tmp_5_i_3 = fmul float %A_read_10, %tmp_20

ST_10: tmp_5_i_4 [2/4] 5.70ns
:23  %tmp_5_i_4 = fmul float %A_read_11, %tmp_21

ST_10: tmp_5_i_5 [3/4] 5.70ns
:27  %tmp_5_i_5 = fmul float %A_read_12, %tmp_22

ST_10: tmp_23 [1/1] 1.94ns
:30  %tmp_23 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 5.100000e+01, float 6.000000e+01, float 6.900000e+01, float 8.000000e+01, float 1.030000e+02, float 1.130000e+02, float 1.200000e+02, float 1.030000e+02, i3 %tmp_25)

ST_10: tmp_5_i_6 [4/4] 5.70ns
:31  %tmp_5_i_6 = fmul float %A_read_13, %tmp_23

ST_10: A_read_14 [1/1] 4.38ns
:33  %A_read_14 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 11>: 7.64ns
ST_11: stg_65 [1/1] 4.38ns
:20  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_5_i_3)

ST_11: tmp_5_i_4 [1/4] 5.70ns
:23  %tmp_5_i_4 = fmul float %A_read_11, %tmp_21

ST_11: tmp_5_i_5 [2/4] 5.70ns
:27  %tmp_5_i_5 = fmul float %A_read_12, %tmp_22

ST_11: tmp_5_i_6 [3/4] 5.70ns
:31  %tmp_5_i_6 = fmul float %A_read_13, %tmp_23

ST_11: tmp_24 [1/1] 1.94ns
:34  %tmp_24 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 6.100000e+01, float 5.500000e+01, float 5.600000e+01, float 6.200000e+01, float 7.700000e+01, float 9.200000e+01, float 1.010000e+02, float 9.900000e+01, i3 %tmp_25)

ST_11: tmp_5_i_7 [4/4] 5.70ns
:35  %tmp_5_i_7 = fmul float %A_read_14, %tmp_24


 <State 12>: 5.70ns
ST_12: stg_71 [1/1] 4.38ns
:24  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_5_i_4)

ST_12: tmp_5_i_5 [1/4] 5.70ns
:27  %tmp_5_i_5 = fmul float %A_read_12, %tmp_22

ST_12: tmp_5_i_6 [2/4] 5.70ns
:31  %tmp_5_i_6 = fmul float %A_read_13, %tmp_23

ST_12: tmp_5_i_7 [3/4] 5.70ns
:35  %tmp_5_i_7 = fmul float %A_read_14, %tmp_24


 <State 13>: 5.70ns
ST_13: stg_75 [1/1] 4.38ns
:28  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_5_i_5)

ST_13: tmp_5_i_6 [1/4] 5.70ns
:31  %tmp_5_i_6 = fmul float %A_read_13, %tmp_23

ST_13: tmp_5_i_7 [2/4] 5.70ns
:35  %tmp_5_i_7 = fmul float %A_read_14, %tmp_24


 <State 14>: 5.70ns
ST_14: stg_78 [1/1] 4.38ns
:32  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_5_i_6)

ST_14: tmp_5_i_7 [1/4] 5.70ns
:35  %tmp_5_i_7 = fmul float %A_read_14, %tmp_24


 <State 15>: 4.38ns
ST_15: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_15: stg_81 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str8) nounwind

ST_15: tmp [1/1] 0.00ns
:2  %tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str8)

ST_15: stg_83 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str12) nounwind

ST_15: stg_84 [1/1] 4.38ns
:36  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_5_i_7)

ST_15: empty_8 [1/1] 0.00ns
:37  %empty_8 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str8, i32 %tmp)

ST_15: stg_86 [1/1] 0.00ns
:38  br label %0


 <State 16>: 0.00ns
ST_16: stg_87 [1/1] 0.00ns
DOT_Multiply_.exit2.exitStub:0  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
