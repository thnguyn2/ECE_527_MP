

================================================================
== Vivado HLS Report for 'Accelerator_DOT_Divide_Loop_row_proc'
================================================================
* Date:           Thu Oct 29 22:12:17 2015

* Version:        2015.1 (Build 1215546 on Mon Apr 27 19:24:50 PM 2015)
* Project:        accelerator
* Solution:       solution2opt
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.01|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   83|   83|   83|   83|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- row     |   81|   81|        26|          8|          1|     8|    yes   |
        +----------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 8, depth = 26


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 28
* Pipeline: 1
  Pipeline-0: II = 8, D = 26, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	28  / (exitcond1_i_i)
	3  / (!exitcond1_i_i)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	2  / true
28 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_29 [1/1] 0.00ns
newFuncRoot:0  call void (...)* @_ssdm_op_SpecInterface(float* %C, [8 x i8]* @p_str112, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str11, [1 x i8]* @p_str11, [1 x i8]* @p_str11)

ST_1: stg_30 [1/1] 0.00ns
newFuncRoot:1  call void (...)* @_ssdm_op_SpecInterface(float* %A, [8 x i8]* @p_str112, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str11, [1 x i8]* @p_str11, [1 x i8]* @p_str11)

ST_1: stg_31 [1/1] 1.57ns
newFuncRoot:2  br label %0


 <State 2>: 1.88ns
ST_2: i_0_i_i [1/1] 0.00ns
:0  %i_0_i_i = phi i4 [ 0, %newFuncRoot ], [ %i, %1 ]

ST_2: exitcond1_i_i [1/1] 1.88ns
:1  %exitcond1_i_i = icmp eq i4 %i_0_i_i, -8

ST_2: i [1/1] 0.80ns
:2  %i = add i4 %i_0_i_i, 1

ST_2: stg_35 [1/1] 0.00ns
:3  br i1 %exitcond1_i_i, label %DOT_Divide_.exit2.exitStub, label %1

ST_2: tmp_18 [1/1] 0.00ns
:5  %tmp_18 = trunc i4 %i_0_i_i to i3


 <State 3>: 4.38ns
ST_3: A_read [1/1] 4.38ns
:4  %A_read = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 4>: 8.01ns
ST_4: tmp_s [1/1] 1.94ns
:6  %tmp_s = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 1.600000e+01, float 1.200000e+01, float 1.400000e+01, float 1.400000e+01, float 1.800000e+01, float 2.400000e+01, float 4.900000e+01, float 7.200000e+01, i3 %tmp_18)

ST_4: tmp_6_i [16/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_4: A_read_1 [1/1] 4.38ns
:9  %A_read_1 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 5>: 8.01ns
ST_5: tmp_6_i [15/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_5: tmp_11 [1/1] 1.94ns
:10  %tmp_11 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 1.100000e+01, float 1.200000e+01, float 1.300000e+01, float 1.700000e+01, float 2.200000e+01, float 3.500000e+01, float 6.400000e+01, float 9.200000e+01, i3 %tmp_18)

ST_5: tmp_6_i_1 [16/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_5: A_read_2 [1/1] 4.38ns
:13  %A_read_2 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 6>: 8.01ns
ST_6: tmp_6_i [14/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_6: tmp_6_i_1 [15/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_6: tmp_12 [1/1] 1.94ns
:14  %tmp_12 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 1.000000e+01, float 1.400000e+01, float 1.600000e+01, float 2.200000e+01, float 3.700000e+01, float 5.500000e+01, float 7.800000e+01, float 9.500000e+01, i3 %tmp_18)

ST_6: tmp_6_i_2 [16/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_6: A_read_3 [1/1] 4.38ns
:17  %A_read_3 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 7>: 8.01ns
ST_7: tmp_6_i [13/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_7: tmp_6_i_1 [14/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_7: tmp_6_i_2 [15/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_7: tmp_13 [1/1] 1.94ns
:18  %tmp_13 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 1.600000e+01, float 1.900000e+01, float 2.400000e+01, float 2.900000e+01, float 5.600000e+01, float 6.400000e+01, float 8.700000e+01, float 9.800000e+01, i3 %tmp_18)

ST_7: tmp_6_i_3 [16/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_7: A_read_4 [1/1] 4.38ns
:21  %A_read_4 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 8>: 8.01ns
ST_8: tmp_6_i [12/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_8: tmp_6_i_1 [13/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_8: tmp_6_i_2 [14/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_8: tmp_6_i_3 [15/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_8: tmp_14 [1/1] 1.94ns
:22  %tmp_14 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 2.400000e+01, float 2.600000e+01, float 4.000000e+01, float 5.100000e+01, float 6.800000e+01, float 8.100000e+01, float 1.030000e+02, float 1.120000e+02, i3 %tmp_18)

ST_8: tmp_6_i_4 [16/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_8: A_read_5 [1/1] 4.38ns
:25  %A_read_5 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 9>: 8.01ns
ST_9: tmp_6_i [11/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_9: tmp_6_i_1 [12/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_9: tmp_6_i_2 [13/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_9: tmp_6_i_3 [14/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_9: tmp_6_i_4 [15/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_9: tmp_15 [1/1] 1.94ns
:26  %tmp_15 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 4.000000e+01, float 5.800000e+01, float 5.700000e+01, float 8.700000e+01, float 1.090000e+02, float 1.040000e+02, float 1.210000e+02, float 1.000000e+02, i3 %tmp_18)

ST_9: tmp_6_i_5 [16/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_9: A_read_6 [1/1] 4.38ns
:29  %A_read_6 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 10>: 8.01ns
ST_10: tmp_6_i [10/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_10: tmp_6_i_1 [11/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_10: tmp_6_i_2 [12/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_10: tmp_6_i_3 [13/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_10: tmp_6_i_4 [14/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_10: tmp_6_i_5 [15/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_10: tmp_16 [1/1] 1.94ns
:30  %tmp_16 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 5.100000e+01, float 6.000000e+01, float 6.900000e+01, float 8.000000e+01, float 1.030000e+02, float 1.130000e+02, float 1.200000e+02, float 1.030000e+02, i3 %tmp_18)

ST_10: tmp_6_i_6 [16/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_10: A_read_7 [1/1] 4.38ns
:33  %A_read_7 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %A)


 <State 11>: 8.01ns
ST_11: tmp_6_i [9/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_11: tmp_6_i_1 [10/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_11: tmp_6_i_2 [11/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_11: tmp_6_i_3 [12/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_11: tmp_6_i_4 [13/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_11: tmp_6_i_5 [14/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_11: tmp_6_i_6 [15/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_11: tmp_17 [1/1] 1.94ns
:34  %tmp_17 = call float @_ssdm_op_Mux.ap_auto.8float.i3(float 6.100000e+01, float 5.500000e+01, float 5.600000e+01, float 6.200000e+01, float 7.700000e+01, float 9.200000e+01, float 1.010000e+02, float 9.900000e+01, i3 %tmp_18)

ST_11: tmp_6_i_7 [16/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 12>: 6.08ns
ST_12: tmp_6_i [8/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_12: tmp_6_i_1 [9/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_12: tmp_6_i_2 [10/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_12: tmp_6_i_3 [11/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_12: tmp_6_i_4 [12/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_12: tmp_6_i_5 [13/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_12: tmp_6_i_6 [14/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_12: tmp_6_i_7 [15/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 13>: 6.08ns
ST_13: tmp_6_i [7/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_13: tmp_6_i_1 [8/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_13: tmp_6_i_2 [9/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_13: tmp_6_i_3 [10/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_13: tmp_6_i_4 [11/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_13: tmp_6_i_5 [12/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_13: tmp_6_i_6 [13/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_13: tmp_6_i_7 [14/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 14>: 6.08ns
ST_14: tmp_6_i [6/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_14: tmp_6_i_1 [7/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_14: tmp_6_i_2 [8/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_14: tmp_6_i_3 [9/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_14: tmp_6_i_4 [10/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_14: tmp_6_i_5 [11/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_14: tmp_6_i_6 [12/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_14: tmp_6_i_7 [13/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 15>: 6.08ns
ST_15: tmp_6_i [5/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_15: tmp_6_i_1 [6/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_15: tmp_6_i_2 [7/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_15: tmp_6_i_3 [8/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_15: tmp_6_i_4 [9/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_15: tmp_6_i_5 [10/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_15: tmp_6_i_6 [11/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_15: tmp_6_i_7 [12/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 16>: 6.08ns
ST_16: tmp_6_i [4/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_16: tmp_6_i_1 [5/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_16: tmp_6_i_2 [6/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_16: tmp_6_i_3 [7/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_16: tmp_6_i_4 [8/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_16: tmp_6_i_5 [9/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_16: tmp_6_i_6 [10/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_16: tmp_6_i_7 [11/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 17>: 6.08ns
ST_17: tmp_6_i [3/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_17: tmp_6_i_1 [4/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_17: tmp_6_i_2 [5/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_17: tmp_6_i_3 [6/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_17: tmp_6_i_4 [7/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_17: tmp_6_i_5 [8/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_17: tmp_6_i_6 [9/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_17: tmp_6_i_7 [10/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 18>: 6.08ns
ST_18: tmp_6_i [2/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_18: tmp_6_i_1 [3/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_18: tmp_6_i_2 [4/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_18: tmp_6_i_3 [5/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_18: tmp_6_i_4 [6/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_18: tmp_6_i_5 [7/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_18: tmp_6_i_6 [8/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_18: tmp_6_i_7 [9/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 19>: 6.08ns
ST_19: tmp_6_i [1/16] 6.08ns
:7  %tmp_6_i = fdiv float %A_read, %tmp_s

ST_19: tmp_6_i_1 [2/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_19: tmp_6_i_2 [3/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_19: tmp_6_i_3 [4/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_19: tmp_6_i_4 [5/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_19: tmp_6_i_5 [6/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_19: tmp_6_i_6 [7/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_19: tmp_6_i_7 [8/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 20>: 6.08ns
ST_20: stg_153 [1/1] 4.38ns
:8  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_6_i)

ST_20: tmp_6_i_1 [1/16] 6.08ns
:11  %tmp_6_i_1 = fdiv float %A_read_1, %tmp_11

ST_20: tmp_6_i_2 [2/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_20: tmp_6_i_3 [3/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_20: tmp_6_i_4 [4/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_20: tmp_6_i_5 [5/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_20: tmp_6_i_6 [6/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_20: tmp_6_i_7 [7/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 21>: 6.08ns
ST_21: stg_161 [1/1] 4.38ns
:12  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_6_i_1)

ST_21: tmp_6_i_2 [1/16] 6.08ns
:15  %tmp_6_i_2 = fdiv float %A_read_2, %tmp_12

ST_21: tmp_6_i_3 [2/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_21: tmp_6_i_4 [3/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_21: tmp_6_i_5 [4/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_21: tmp_6_i_6 [5/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_21: tmp_6_i_7 [6/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 22>: 6.08ns
ST_22: stg_168 [1/1] 4.38ns
:16  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_6_i_2)

ST_22: tmp_6_i_3 [1/16] 6.08ns
:19  %tmp_6_i_3 = fdiv float %A_read_3, %tmp_13

ST_22: tmp_6_i_4 [2/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_22: tmp_6_i_5 [3/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_22: tmp_6_i_6 [4/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_22: tmp_6_i_7 [5/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 23>: 6.08ns
ST_23: stg_174 [1/1] 4.38ns
:20  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_6_i_3)

ST_23: tmp_6_i_4 [1/16] 6.08ns
:23  %tmp_6_i_4 = fdiv float %A_read_4, %tmp_14

ST_23: tmp_6_i_5 [2/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_23: tmp_6_i_6 [3/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_23: tmp_6_i_7 [4/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 24>: 6.08ns
ST_24: stg_179 [1/1] 4.38ns
:24  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_6_i_4)

ST_24: tmp_6_i_5 [1/16] 6.08ns
:27  %tmp_6_i_5 = fdiv float %A_read_5, %tmp_15

ST_24: tmp_6_i_6 [2/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_24: tmp_6_i_7 [3/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 25>: 6.08ns
ST_25: stg_183 [1/1] 4.38ns
:28  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_6_i_5)

ST_25: tmp_6_i_6 [1/16] 6.08ns
:31  %tmp_6_i_6 = fdiv float %A_read_6, %tmp_16

ST_25: tmp_6_i_7 [2/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 26>: 6.08ns
ST_26: stg_186 [1/1] 4.38ns
:32  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_6_i_6)

ST_26: tmp_6_i_7 [1/16] 6.08ns
:35  %tmp_6_i_7 = fdiv float %A_read_7, %tmp_17


 <State 27>: 4.38ns
ST_27: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_27: stg_189 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str8) nounwind

ST_27: tmp [1/1] 0.00ns
:2  %tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str8)

ST_27: stg_191 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str12) nounwind

ST_27: stg_192 [1/1] 4.38ns
:36  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %C, float %tmp_6_i_7)

ST_27: empty_7 [1/1] 0.00ns
:37  %empty_7 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str8, i32 %tmp)

ST_27: stg_194 [1/1] 0.00ns
:38  br label %0


 <State 28>: 0.00ns
ST_28: stg_195 [1/1] 0.00ns
DOT_Divide_.exit2.exitStub:0  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
