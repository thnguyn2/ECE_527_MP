// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Accelerator_MAT_Multiply_HH_
#define _Accelerator_MAT_Multiply_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Accelerator_MAT_Multiply_Loop_LoadRow_proc.h"
#include "Accelerator_MAT_Multiply_Loop_Row_proc.h"
#include "Accelerator_MAT_Multiply_B_cached.h"

namespace ap_rtl {

struct Accelerator_MAT_Multiply : public sc_module {
    // Port declarations 116
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<3> > A_0_address0;
    sc_out< sc_logic > A_0_ce0;
    sc_out< sc_lv<32> > A_0_d0;
    sc_in< sc_lv<32> > A_0_q0;
    sc_out< sc_logic > A_0_we0;
    sc_out< sc_lv<3> > A_0_address1;
    sc_out< sc_logic > A_0_ce1;
    sc_out< sc_lv<32> > A_0_d1;
    sc_in< sc_lv<32> > A_0_q1;
    sc_out< sc_logic > A_0_we1;
    sc_out< sc_lv<3> > A_1_address0;
    sc_out< sc_logic > A_1_ce0;
    sc_out< sc_lv<32> > A_1_d0;
    sc_in< sc_lv<32> > A_1_q0;
    sc_out< sc_logic > A_1_we0;
    sc_out< sc_lv<3> > A_1_address1;
    sc_out< sc_logic > A_1_ce1;
    sc_out< sc_lv<32> > A_1_d1;
    sc_in< sc_lv<32> > A_1_q1;
    sc_out< sc_logic > A_1_we1;
    sc_out< sc_lv<3> > A_2_address0;
    sc_out< sc_logic > A_2_ce0;
    sc_out< sc_lv<32> > A_2_d0;
    sc_in< sc_lv<32> > A_2_q0;
    sc_out< sc_logic > A_2_we0;
    sc_out< sc_lv<3> > A_2_address1;
    sc_out< sc_logic > A_2_ce1;
    sc_out< sc_lv<32> > A_2_d1;
    sc_in< sc_lv<32> > A_2_q1;
    sc_out< sc_logic > A_2_we1;
    sc_out< sc_lv<3> > A_3_address0;
    sc_out< sc_logic > A_3_ce0;
    sc_out< sc_lv<32> > A_3_d0;
    sc_in< sc_lv<32> > A_3_q0;
    sc_out< sc_logic > A_3_we0;
    sc_out< sc_lv<3> > A_3_address1;
    sc_out< sc_logic > A_3_ce1;
    sc_out< sc_lv<32> > A_3_d1;
    sc_in< sc_lv<32> > A_3_q1;
    sc_out< sc_logic > A_3_we1;
    sc_out< sc_lv<3> > A_4_address0;
    sc_out< sc_logic > A_4_ce0;
    sc_out< sc_lv<32> > A_4_d0;
    sc_in< sc_lv<32> > A_4_q0;
    sc_out< sc_logic > A_4_we0;
    sc_out< sc_lv<3> > A_4_address1;
    sc_out< sc_logic > A_4_ce1;
    sc_out< sc_lv<32> > A_4_d1;
    sc_in< sc_lv<32> > A_4_q1;
    sc_out< sc_logic > A_4_we1;
    sc_out< sc_lv<3> > A_5_address0;
    sc_out< sc_logic > A_5_ce0;
    sc_out< sc_lv<32> > A_5_d0;
    sc_in< sc_lv<32> > A_5_q0;
    sc_out< sc_logic > A_5_we0;
    sc_out< sc_lv<3> > A_5_address1;
    sc_out< sc_logic > A_5_ce1;
    sc_out< sc_lv<32> > A_5_d1;
    sc_in< sc_lv<32> > A_5_q1;
    sc_out< sc_logic > A_5_we1;
    sc_out< sc_lv<3> > A_6_address0;
    sc_out< sc_logic > A_6_ce0;
    sc_out< sc_lv<32> > A_6_d0;
    sc_in< sc_lv<32> > A_6_q0;
    sc_out< sc_logic > A_6_we0;
    sc_out< sc_lv<3> > A_6_address1;
    sc_out< sc_logic > A_6_ce1;
    sc_out< sc_lv<32> > A_6_d1;
    sc_in< sc_lv<32> > A_6_q1;
    sc_out< sc_logic > A_6_we1;
    sc_out< sc_lv<3> > A_7_address0;
    sc_out< sc_logic > A_7_ce0;
    sc_out< sc_lv<32> > A_7_d0;
    sc_in< sc_lv<32> > A_7_q0;
    sc_out< sc_logic > A_7_we0;
    sc_out< sc_lv<3> > A_7_address1;
    sc_out< sc_logic > A_7_ce1;
    sc_out< sc_lv<32> > A_7_d1;
    sc_in< sc_lv<32> > A_7_q1;
    sc_out< sc_logic > A_7_we1;
    sc_in< sc_lv<32> > B_dout;
    sc_in< sc_logic > B_empty_n;
    sc_out< sc_logic > B_read;
    sc_out< sc_lv<6> > C_address0;
    sc_out< sc_logic > C_ce0;
    sc_out< sc_lv<32> > C_d0;
    sc_in< sc_lv<32> > C_q0;
    sc_out< sc_logic > C_we0;
    sc_out< sc_lv<6> > C_address1;
    sc_out< sc_logic > C_ce1;
    sc_out< sc_lv<32> > C_d1;
    sc_in< sc_lv<32> > C_q1;
    sc_out< sc_logic > C_we1;
    sc_in< sc_logic > A_0_pipo_status;
    sc_out< sc_logic > A_0_pipo_update;
    sc_in< sc_logic > A_1_pipo_status;
    sc_out< sc_logic > A_1_pipo_update;
    sc_in< sc_logic > A_2_pipo_status;
    sc_out< sc_logic > A_2_pipo_update;
    sc_in< sc_logic > A_3_pipo_status;
    sc_out< sc_logic > A_3_pipo_update;
    sc_in< sc_logic > A_4_pipo_status;
    sc_out< sc_logic > A_4_pipo_update;
    sc_in< sc_logic > A_5_pipo_status;
    sc_out< sc_logic > A_5_pipo_update;
    sc_in< sc_logic > A_6_pipo_status;
    sc_out< sc_logic > A_6_pipo_update;
    sc_in< sc_logic > A_7_pipo_status;
    sc_out< sc_logic > A_7_pipo_update;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;


    // Module declarations
    Accelerator_MAT_Multiply(sc_module_name name);
    SC_HAS_PROCESS(Accelerator_MAT_Multiply);

    ~Accelerator_MAT_Multiply();

    sc_trace_file* mVcdFile;

    Accelerator_MAT_Multiply_B_cached* B_cached_U;
    Accelerator_MAT_Multiply_Loop_LoadRow_proc* Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0;
    Accelerator_MAT_Multiply_Loop_Row_proc* Accelerator_MAT_Multiply_Loop_Row_proc_U0;
    sc_signal< sc_lv<6> > B_cached_i_address0;
    sc_signal< sc_logic > B_cached_i_ce0;
    sc_signal< sc_logic > B_cached_i_we0;
    sc_signal< sc_lv<32> > B_cached_i_d0;
    sc_signal< sc_lv<32> > B_cached_i_q0;
    sc_signal< sc_lv<6> > B_cached_i_address1;
    sc_signal< sc_logic > B_cached_i_ce1;
    sc_signal< sc_lv<32> > B_cached_i_q1;
    sc_signal< sc_lv<6> > B_cached_t_address0;
    sc_signal< sc_logic > B_cached_t_ce0;
    sc_signal< sc_logic > B_cached_t_we0;
    sc_signal< sc_lv<32> > B_cached_t_d0;
    sc_signal< sc_lv<32> > B_cached_t_q0;
    sc_signal< sc_lv<6> > B_cached_t_address1;
    sc_signal< sc_logic > B_cached_t_ce1;
    sc_signal< sc_lv<32> > B_cached_t_q1;
    sc_signal< sc_logic > B_cached_U_ap_dummy_ce;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read;
    sc_signal< sc_lv<6> > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0;
    sc_signal< sc_logic > ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0;
    sc_signal< sc_lv<3> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1;
    sc_signal< sc_lv<6> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0;
    sc_signal< sc_lv<6> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1;
    sc_signal< sc_lv<6> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0;
    sc_signal< sc_lv<32> > Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status;
    sc_signal< sc_logic > Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > B_cached_i_full_n;
    sc_signal< sc_logic > B_cached_i_write;
    sc_signal< sc_logic > B_cached_t_empty_n;
    sc_signal< sc_logic > B_cached_t_read;
    sc_signal< sc_lv<32> > B_cached_t_d1;
    sc_signal< sc_logic > B_cached_t_we1;
    sc_signal< sc_logic > ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_top_allready;
    sc_signal< sc_logic > ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
    sc_signal< sc_logic > ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const bool ap_true;
    static const sc_lv<6> ap_const_lv6_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_0_address0();
    void thread_A_0_address1();
    void thread_A_0_ce0();
    void thread_A_0_ce1();
    void thread_A_0_d0();
    void thread_A_0_d1();
    void thread_A_0_pipo_update();
    void thread_A_0_we0();
    void thread_A_0_we1();
    void thread_A_1_address0();
    void thread_A_1_address1();
    void thread_A_1_ce0();
    void thread_A_1_ce1();
    void thread_A_1_d0();
    void thread_A_1_d1();
    void thread_A_1_pipo_update();
    void thread_A_1_we0();
    void thread_A_1_we1();
    void thread_A_2_address0();
    void thread_A_2_address1();
    void thread_A_2_ce0();
    void thread_A_2_ce1();
    void thread_A_2_d0();
    void thread_A_2_d1();
    void thread_A_2_pipo_update();
    void thread_A_2_we0();
    void thread_A_2_we1();
    void thread_A_3_address0();
    void thread_A_3_address1();
    void thread_A_3_ce0();
    void thread_A_3_ce1();
    void thread_A_3_d0();
    void thread_A_3_d1();
    void thread_A_3_pipo_update();
    void thread_A_3_we0();
    void thread_A_3_we1();
    void thread_A_4_address0();
    void thread_A_4_address1();
    void thread_A_4_ce0();
    void thread_A_4_ce1();
    void thread_A_4_d0();
    void thread_A_4_d1();
    void thread_A_4_pipo_update();
    void thread_A_4_we0();
    void thread_A_4_we1();
    void thread_A_5_address0();
    void thread_A_5_address1();
    void thread_A_5_ce0();
    void thread_A_5_ce1();
    void thread_A_5_d0();
    void thread_A_5_d1();
    void thread_A_5_pipo_update();
    void thread_A_5_we0();
    void thread_A_5_we1();
    void thread_A_6_address0();
    void thread_A_6_address1();
    void thread_A_6_ce0();
    void thread_A_6_ce1();
    void thread_A_6_d0();
    void thread_A_6_d1();
    void thread_A_6_pipo_update();
    void thread_A_6_we0();
    void thread_A_6_we1();
    void thread_A_7_address0();
    void thread_A_7_address1();
    void thread_A_7_ce0();
    void thread_A_7_ce1();
    void thread_A_7_d0();
    void thread_A_7_d1();
    void thread_A_7_pipo_update();
    void thread_A_7_we0();
    void thread_A_7_we1();
    void thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout();
    void thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n();
    void thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue();
    void thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue();
    void thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start();
    void thread_B_cached_U_ap_dummy_ce();
    void thread_B_cached_i_address0();
    void thread_B_cached_i_address1();
    void thread_B_cached_i_ce0();
    void thread_B_cached_i_ce1();
    void thread_B_cached_i_d0();
    void thread_B_cached_i_we0();
    void thread_B_cached_i_write();
    void thread_B_cached_t_address0();
    void thread_B_cached_t_address1();
    void thread_B_cached_t_ce0();
    void thread_B_cached_t_ce1();
    void thread_B_cached_t_d0();
    void thread_B_cached_t_d1();
    void thread_B_cached_t_read();
    void thread_B_cached_t_we0();
    void thread_B_cached_t_we1();
    void thread_B_read();
    void thread_C_address0();
    void thread_C_address1();
    void thread_C_ce0();
    void thread_C_ce1();
    void thread_C_d0();
    void thread_C_d1();
    void thread_C_we0();
    void thread_C_we1();
    void thread_ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready();
    void thread_ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready();
    void thread_ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start();
    void thread_ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start();
    void thread_ap_sig_top_allready();
};

}

using namespace ap_rtl;

#endif
