// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Accelerator_MAT_Multiply2_Loop_Row_proc_HH_
#define _Accelerator_MAT_Multiply2_Loop_Row_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Accelerator_MAT_Multiply2_Loop_Row_proc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<3> > A_cached_row_address0;
    sc_out< sc_logic > A_cached_row_ce0;
    sc_out< sc_logic > A_cached_row_we0;
    sc_out< sc_lv<32> > A_cached_row_d0;


    // Module declarations
    Accelerator_MAT_Multiply2_Loop_Row_proc(sc_module_name name);
    SC_HAS_PROCESS(Accelerator_MAT_Multiply2_Loop_Row_proc);

    ~Accelerator_MAT_Multiply2_Loop_Row_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<7> > indvar_flatten_reg_69;
    sc_signal< sc_lv<4> > i_0_i_i_reg_80;
    sc_signal< sc_lv<4> > k_0_i_i_reg_91;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_103_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_180;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_55;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<7> > indvar_flatten_next_fu_109_p2;
    sc_signal< sc_lv<4> > k_0_i_i_mid2_fu_121_p3;
    sc_signal< sc_lv<4> > k_0_i_i_mid2_reg_189;
    sc_signal< sc_lv<4> > i_0_i_i_mid2_fu_135_p3;
    sc_signal< sc_lv<4> > i_0_i_i_mid2_reg_194;
    sc_signal< sc_lv<4> > k_fu_170_p2;
    sc_signal< bool > ap_sig_bdd_79;
    sc_signal< sc_lv<4> > i_0_i_i_phi_fu_84_p4;
    sc_signal< sc_lv<64> > tmp_20_fu_165_p1;
    sc_signal< sc_lv<64> > tmp_2_i_fu_176_p1;
    sc_signal< sc_lv<1> > exitcond2_i_i_fu_115_p2;
    sc_signal< sc_lv<4> > tmp_1_i_dup_fu_129_p2;
    sc_signal< sc_lv<7> > tmp_fu_147_p3;
    sc_signal< sc_lv<8> > tmp_2_i_trn_cast_fu_143_p1;
    sc_signal< sc_lv<8> > p_addr_cast_fu_155_p1;
    sc_signal< sc_lv<8> > p_addr1_fu_159_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_2;
    sc_signal< bool > ap_sig_bdd_150;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st4_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_cached_row_address0();
    void thread_A_cached_row_ce0();
    void thread_A_cached_row_d0();
    void thread_A_cached_row_we0();
    void thread_A_ce0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_150();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_55();
    void thread_ap_sig_bdd_79();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st4_fsm_2();
    void thread_exitcond2_i_i_fu_115_p2();
    void thread_exitcond_flatten_fu_103_p2();
    void thread_i_0_i_i_mid2_fu_135_p3();
    void thread_i_0_i_i_phi_fu_84_p4();
    void thread_indvar_flatten_next_fu_109_p2();
    void thread_k_0_i_i_mid2_fu_121_p3();
    void thread_k_fu_170_p2();
    void thread_p_addr1_fu_159_p2();
    void thread_p_addr_cast_fu_155_p1();
    void thread_tmp_1_i_dup_fu_129_p2();
    void thread_tmp_20_fu_165_p1();
    void thread_tmp_2_i_fu_176_p1();
    void thread_tmp_2_i_trn_cast_fu_143_p1();
    void thread_tmp_fu_147_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
