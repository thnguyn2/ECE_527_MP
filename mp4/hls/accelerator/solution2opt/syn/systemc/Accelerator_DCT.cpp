// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "Accelerator_DCT.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Accelerator_DCT::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> Accelerator_DCT::ap_const_lv6_0 = "000000";
const sc_lv<32> Accelerator_DCT::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic Accelerator_DCT::ap_const_logic_1 = sc_dt::Log_1;
const bool Accelerator_DCT::ap_true = true;
const sc_lv<32> Accelerator_DCT::ap_const_lv32_1 = "1";

Accelerator_DCT::Accelerator_DCT(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Accelerator_DCT_Block_proc_U0 = new Accelerator_DCT_Block_proc("Accelerator_DCT_Block_proc_U0");
    Accelerator_DCT_Block_proc_U0->ap_clk(ap_clk);
    Accelerator_DCT_Block_proc_U0->ap_rst(ap_rst);
    Accelerator_DCT_Block_proc_U0->function_r(Accelerator_DCT_Block_proc_U0_function_r);
    Accelerator_DCT_Block_proc_U0->X_dout(Accelerator_DCT_Block_proc_U0_X_dout);
    Accelerator_DCT_Block_proc_U0->X_empty_n(Accelerator_DCT_Block_proc_U0_X_empty_n);
    Accelerator_DCT_Block_proc_U0->X_read(Accelerator_DCT_Block_proc_U0_X_read);
    Accelerator_DCT_Block_proc_U0->Y_address0(Accelerator_DCT_Block_proc_U0_Y_address0);
    Accelerator_DCT_Block_proc_U0->Y_ce0(Accelerator_DCT_Block_proc_U0_Y_ce0);
    Accelerator_DCT_Block_proc_U0->Y_d0(Accelerator_DCT_Block_proc_U0_Y_d0);
    Accelerator_DCT_Block_proc_U0->Y_q0(Accelerator_DCT_Block_proc_U0_Y_q0);
    Accelerator_DCT_Block_proc_U0->Y_we0(Accelerator_DCT_Block_proc_U0_Y_we0);
    Accelerator_DCT_Block_proc_U0->Y_address1(Accelerator_DCT_Block_proc_U0_Y_address1);
    Accelerator_DCT_Block_proc_U0->Y_ce1(Accelerator_DCT_Block_proc_U0_Y_ce1);
    Accelerator_DCT_Block_proc_U0->Y_d1(Accelerator_DCT_Block_proc_U0_Y_d1);
    Accelerator_DCT_Block_proc_U0->Y_q1(Accelerator_DCT_Block_proc_U0_Y_q1);
    Accelerator_DCT_Block_proc_U0->Y_we1(Accelerator_DCT_Block_proc_U0_Y_we1);
    Accelerator_DCT_Block_proc_U0->ap_start(Accelerator_DCT_Block_proc_U0_ap_start);
    Accelerator_DCT_Block_proc_U0->ap_continue(Accelerator_DCT_Block_proc_U0_ap_continue);
    Accelerator_DCT_Block_proc_U0->ap_done(Accelerator_DCT_Block_proc_U0_ap_done);
    Accelerator_DCT_Block_proc_U0->ap_idle(Accelerator_DCT_Block_proc_U0_ap_idle);
    Accelerator_DCT_Block_proc_U0->ap_ready(Accelerator_DCT_Block_proc_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_X_dout);
    sensitive << ( X_dout );

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_X_empty_n);
    sensitive << ( X_empty_n );

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_Y_q0);

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_Y_q1);

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_function_r);
    sensitive << ( function_r );

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_function_r_ap_ack);

    SC_METHOD(thread_Accelerator_DCT_Block_proc_U0_function_r_ap_vld);
    sensitive << ( function_r_ap_vld );

    SC_METHOD(thread_X_read);
    sensitive << ( Accelerator_DCT_Block_proc_U0_X_read );

    SC_METHOD(thread_Y_address0);
    sensitive << ( Accelerator_DCT_Block_proc_U0_Y_address0 );

    SC_METHOD(thread_Y_address1);

    SC_METHOD(thread_Y_ce0);
    sensitive << ( Accelerator_DCT_Block_proc_U0_Y_ce0 );

    SC_METHOD(thread_Y_ce1);

    SC_METHOD(thread_Y_d0);
    sensitive << ( Accelerator_DCT_Block_proc_U0_Y_d0 );

    SC_METHOD(thread_Y_d1);

    SC_METHOD(thread_Y_we0);
    sensitive << ( Accelerator_DCT_Block_proc_U0_Y_we0 );

    SC_METHOD(thread_Y_we1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Accelerator_DCT_Block_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( Accelerator_DCT_Block_proc_U0_ap_done );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( Accelerator_DCT_Block_proc_U0_ap_ready );

    SC_METHOD(thread_function_r_ap_ack);
    sensitive << ( Accelerator_DCT_Block_proc_U0_function_r_ap_ack );

    ap_reg_procdone_Accelerator_DCT_Block_proc_U0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Accelerator_DCT_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, X_dout, "(port)X_dout");
    sc_trace(mVcdFile, X_empty_n, "(port)X_empty_n");
    sc_trace(mVcdFile, X_read, "(port)X_read");
    sc_trace(mVcdFile, function_r, "(port)function_r");
    sc_trace(mVcdFile, Y_address0, "(port)Y_address0");
    sc_trace(mVcdFile, Y_ce0, "(port)Y_ce0");
    sc_trace(mVcdFile, Y_d0, "(port)Y_d0");
    sc_trace(mVcdFile, Y_q0, "(port)Y_q0");
    sc_trace(mVcdFile, Y_we0, "(port)Y_we0");
    sc_trace(mVcdFile, Y_address1, "(port)Y_address1");
    sc_trace(mVcdFile, Y_ce1, "(port)Y_ce1");
    sc_trace(mVcdFile, Y_d1, "(port)Y_d1");
    sc_trace(mVcdFile, Y_q1, "(port)Y_q1");
    sc_trace(mVcdFile, Y_we1, "(port)Y_we1");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, function_r_ap_vld, "(port)function_r_ap_vld");
    sc_trace(mVcdFile, function_r_ap_ack, "(port)function_r_ap_ack");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_function_r, "Accelerator_DCT_Block_proc_U0_function_r");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_X_dout, "Accelerator_DCT_Block_proc_U0_X_dout");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_X_empty_n, "Accelerator_DCT_Block_proc_U0_X_empty_n");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_X_read, "Accelerator_DCT_Block_proc_U0_X_read");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_address0, "Accelerator_DCT_Block_proc_U0_Y_address0");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_ce0, "Accelerator_DCT_Block_proc_U0_Y_ce0");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_d0, "Accelerator_DCT_Block_proc_U0_Y_d0");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_q0, "Accelerator_DCT_Block_proc_U0_Y_q0");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_we0, "Accelerator_DCT_Block_proc_U0_Y_we0");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_address1, "Accelerator_DCT_Block_proc_U0_Y_address1");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_ce1, "Accelerator_DCT_Block_proc_U0_Y_ce1");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_d1, "Accelerator_DCT_Block_proc_U0_Y_d1");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_q1, "Accelerator_DCT_Block_proc_U0_Y_q1");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_Y_we1, "Accelerator_DCT_Block_proc_U0_Y_we1");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_ap_start, "Accelerator_DCT_Block_proc_U0_ap_start");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_ap_continue, "Accelerator_DCT_Block_proc_U0_ap_continue");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_ap_done, "Accelerator_DCT_Block_proc_U0_ap_done");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_ap_idle, "Accelerator_DCT_Block_proc_U0_ap_idle");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_ap_ready, "Accelerator_DCT_Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_function_r_ap_vld, "Accelerator_DCT_Block_proc_U0_function_r_ap_vld");
    sc_trace(mVcdFile, Accelerator_DCT_Block_proc_U0_function_r_ap_ack, "Accelerator_DCT_Block_proc_U0_function_r_ap_ack");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, ap_reg_procdone_Accelerator_DCT_Block_proc_U0, "ap_reg_procdone_Accelerator_DCT_Block_proc_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
#endif

    }
}

Accelerator_DCT::~Accelerator_DCT() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete Accelerator_DCT_Block_proc_U0;
}

void Accelerator_DCT::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_Accelerator_DCT_Block_proc_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_Accelerator_DCT_Block_proc_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(Accelerator_DCT_Block_proc_U0_ap_done.read(), ap_const_logic_1)) {
            ap_reg_procdone_Accelerator_DCT_Block_proc_U0 = ap_const_logic_1;
        }
    }
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_X_dout() {
    Accelerator_DCT_Block_proc_U0_X_dout = X_dout.read();
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_X_empty_n() {
    Accelerator_DCT_Block_proc_U0_X_empty_n = X_empty_n.read();
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_Y_q0() {
    Accelerator_DCT_Block_proc_U0_Y_q0 = ap_const_lv32_0;
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_Y_q1() {
    Accelerator_DCT_Block_proc_U0_Y_q1 = ap_const_lv32_0;
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_ap_continue() {
    Accelerator_DCT_Block_proc_U0_ap_continue = ap_sig_hs_continue.read();
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_ap_start() {
    Accelerator_DCT_Block_proc_U0_ap_start = ap_start.read();
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_function_r() {
    Accelerator_DCT_Block_proc_U0_function_r = function_r.read();
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_function_r_ap_ack() {
    Accelerator_DCT_Block_proc_U0_function_r_ap_ack = ap_const_logic_0;
}

void Accelerator_DCT::thread_Accelerator_DCT_Block_proc_U0_function_r_ap_vld() {
    Accelerator_DCT_Block_proc_U0_function_r_ap_vld = function_r_ap_vld.read();
}

void Accelerator_DCT::thread_X_read() {
    X_read = Accelerator_DCT_Block_proc_U0_X_read.read();
}

void Accelerator_DCT::thread_Y_address0() {
    Y_address0 = Accelerator_DCT_Block_proc_U0_Y_address0.read();
}

void Accelerator_DCT::thread_Y_address1() {
    Y_address1 = ap_const_lv6_0;
}

void Accelerator_DCT::thread_Y_ce0() {
    Y_ce0 = Accelerator_DCT_Block_proc_U0_Y_ce0.read();
}

void Accelerator_DCT::thread_Y_ce1() {
    Y_ce1 = ap_const_logic_0;
}

void Accelerator_DCT::thread_Y_d0() {
    Y_d0 = Accelerator_DCT_Block_proc_U0_Y_d0.read();
}

void Accelerator_DCT::thread_Y_d1() {
    Y_d1 = ap_const_lv32_0;
}

void Accelerator_DCT::thread_Y_we0() {
    Y_we0 = Accelerator_DCT_Block_proc_U0_Y_we0.read();
}

void Accelerator_DCT::thread_Y_we1() {
    Y_we1 = ap_const_logic_0;
}

void Accelerator_DCT::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void Accelerator_DCT::thread_ap_idle() {
    if (esl_seteq<1,1,1>(Accelerator_DCT_Block_proc_U0_ap_idle.read(), ap_const_logic_1)) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Accelerator_DCT::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void Accelerator_DCT::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void Accelerator_DCT::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(Accelerator_DCT_Block_proc_U0_ap_done.read(), ap_const_logic_1)) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void Accelerator_DCT::thread_ap_sig_top_allready() {
    ap_sig_top_allready = Accelerator_DCT_Block_proc_U0_ap_ready.read();
}

void Accelerator_DCT::thread_function_r_ap_ack() {
    function_r_ap_ack = Accelerator_DCT_Block_proc_U0_function_r_ap_ack.read();
}

}

