// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "Accelerator_MAT_Multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Accelerator_MAT_Multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<3> Accelerator_MAT_Multiply::ap_const_lv3_0 = "000";
const sc_logic Accelerator_MAT_Multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> Accelerator_MAT_Multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<6> Accelerator_MAT_Multiply::ap_const_lv6_0 = "000000";
const bool Accelerator_MAT_Multiply::ap_true = true;
const sc_lv<6> Accelerator_MAT_Multiply::ap_const_lv6_1 = "1";

Accelerator_MAT_Multiply::Accelerator_MAT_Multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    B_cached_U = new Accelerator_MAT_Multiply_B_cached("B_cached_U");
    B_cached_U->clk(ap_clk);
    B_cached_U->reset(ap_rst);
    B_cached_U->i_address0(B_cached_i_address0);
    B_cached_U->i_ce0(B_cached_i_ce0);
    B_cached_U->i_we0(B_cached_i_we0);
    B_cached_U->i_d0(B_cached_i_d0);
    B_cached_U->i_q0(B_cached_i_q0);
    B_cached_U->i_address1(B_cached_i_address1);
    B_cached_U->i_ce1(B_cached_i_ce1);
    B_cached_U->i_q1(B_cached_i_q1);
    B_cached_U->t_address0(B_cached_t_address0);
    B_cached_U->t_ce0(B_cached_t_ce0);
    B_cached_U->t_we0(B_cached_t_we0);
    B_cached_U->t_d0(B_cached_t_d0);
    B_cached_U->t_q0(B_cached_t_q0);
    B_cached_U->t_address1(B_cached_t_address1);
    B_cached_U->t_ce1(B_cached_t_ce1);
    B_cached_U->t_q1(B_cached_t_q1);
    B_cached_U->i_ce(B_cached_U_ap_dummy_ce);
    B_cached_U->t_ce(B_cached_U_ap_dummy_ce);
    B_cached_U->i_full_n(B_cached_i_full_n);
    B_cached_U->i_write(B_cached_i_write);
    B_cached_U->t_empty_n(B_cached_t_empty_n);
    B_cached_U->t_read(B_cached_t_read);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 = new Accelerator_MAT_Multiply_Loop_LoadRow_proc("Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0");
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->ap_clk(ap_clk);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->ap_rst(ap_rst);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->ap_start(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->ap_done(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->ap_continue(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->ap_idle(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->ap_ready(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->B_dout(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->B_empty_n(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->B_read(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->B_cached_address0(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->B_cached_ce0(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->B_cached_we0(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0);
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0->B_cached_d0(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0 = new Accelerator_MAT_Multiply_Loop_Row_proc("Accelerator_MAT_Multiply_Loop_Row_proc_U0");
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->ap_clk(ap_clk);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->ap_rst(ap_rst);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->ap_start(Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->ap_done(Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->ap_continue(Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->ap_idle(Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->ap_ready(Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_0_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_0_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_0_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_0_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_0_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_0_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_1_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_1_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_1_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_1_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_1_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_1_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_2_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_2_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_2_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_2_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_2_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_2_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_3_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_3_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_3_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_3_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_3_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_3_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_4_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_4_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_4_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_4_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_4_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_4_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_5_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_5_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_5_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_5_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_5_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_5_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_6_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_6_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_6_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_6_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_6_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_6_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_7_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_7_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_7_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_7_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_7_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->A_7_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->B_cached_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->B_cached_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->B_cached_q0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->B_cached_address1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->B_cached_ce1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->B_cached_q1(Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->C_address0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->C_ce0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->C_we0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0);
    Accelerator_MAT_Multiply_Loop_Row_proc_U0->C_d0(Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_0_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0 );

    SC_METHOD(thread_A_0_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1 );

    SC_METHOD(thread_A_0_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0 );

    SC_METHOD(thread_A_0_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1 );

    SC_METHOD(thread_A_0_d0);

    SC_METHOD(thread_A_0_d1);

    SC_METHOD(thread_A_0_pipo_update);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update );

    SC_METHOD(thread_A_0_we0);

    SC_METHOD(thread_A_0_we1);

    SC_METHOD(thread_A_1_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0 );

    SC_METHOD(thread_A_1_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1 );

    SC_METHOD(thread_A_1_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0 );

    SC_METHOD(thread_A_1_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1 );

    SC_METHOD(thread_A_1_d0);

    SC_METHOD(thread_A_1_d1);

    SC_METHOD(thread_A_1_pipo_update);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update );

    SC_METHOD(thread_A_1_we0);

    SC_METHOD(thread_A_1_we1);

    SC_METHOD(thread_A_2_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0 );

    SC_METHOD(thread_A_2_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1 );

    SC_METHOD(thread_A_2_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0 );

    SC_METHOD(thread_A_2_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1 );

    SC_METHOD(thread_A_2_d0);

    SC_METHOD(thread_A_2_d1);

    SC_METHOD(thread_A_2_pipo_update);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update );

    SC_METHOD(thread_A_2_we0);

    SC_METHOD(thread_A_2_we1);

    SC_METHOD(thread_A_3_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0 );

    SC_METHOD(thread_A_3_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1 );

    SC_METHOD(thread_A_3_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0 );

    SC_METHOD(thread_A_3_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1 );

    SC_METHOD(thread_A_3_d0);

    SC_METHOD(thread_A_3_d1);

    SC_METHOD(thread_A_3_pipo_update);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update );

    SC_METHOD(thread_A_3_we0);

    SC_METHOD(thread_A_3_we1);

    SC_METHOD(thread_A_4_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0 );

    SC_METHOD(thread_A_4_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1 );

    SC_METHOD(thread_A_4_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0 );

    SC_METHOD(thread_A_4_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1 );

    SC_METHOD(thread_A_4_d0);

    SC_METHOD(thread_A_4_d1);

    SC_METHOD(thread_A_4_pipo_update);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update );

    SC_METHOD(thread_A_4_we0);

    SC_METHOD(thread_A_4_we1);

    SC_METHOD(thread_A_5_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0 );

    SC_METHOD(thread_A_5_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1 );

    SC_METHOD(thread_A_5_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0 );

    SC_METHOD(thread_A_5_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1 );

    SC_METHOD(thread_A_5_d0);

    SC_METHOD(thread_A_5_d1);

    SC_METHOD(thread_A_5_pipo_update);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update );

    SC_METHOD(thread_A_5_we0);

    SC_METHOD(thread_A_5_we1);

    SC_METHOD(thread_A_6_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0 );

    SC_METHOD(thread_A_6_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1 );

    SC_METHOD(thread_A_6_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0 );

    SC_METHOD(thread_A_6_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1 );

    SC_METHOD(thread_A_6_d0);

    SC_METHOD(thread_A_6_d1);

    SC_METHOD(thread_A_6_pipo_update);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update );

    SC_METHOD(thread_A_6_we0);

    SC_METHOD(thread_A_6_we1);

    SC_METHOD(thread_A_7_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0 );

    SC_METHOD(thread_A_7_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1 );

    SC_METHOD(thread_A_7_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0 );

    SC_METHOD(thread_A_7_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1 );

    SC_METHOD(thread_A_7_d0);

    SC_METHOD(thread_A_7_d1);

    SC_METHOD(thread_A_7_pipo_update);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update );

    SC_METHOD(thread_A_7_we0);

    SC_METHOD(thread_A_7_we1);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status);
    sensitive << ( B_cached_i_full_n );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout);
    sensitive << ( B_dout );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n);
    sensitive << ( B_empty_n );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start);
    sensitive << ( ap_rst );
    sensitive << ( ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status);
    sensitive << ( A_0_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0);
    sensitive << ( A_0_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1);
    sensitive << ( A_0_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status);
    sensitive << ( A_1_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0);
    sensitive << ( A_1_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1);
    sensitive << ( A_1_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status);
    sensitive << ( A_2_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0);
    sensitive << ( A_2_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1);
    sensitive << ( A_2_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status);
    sensitive << ( A_3_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0);
    sensitive << ( A_3_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1);
    sensitive << ( A_3_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status);
    sensitive << ( A_4_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0);
    sensitive << ( A_4_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1);
    sensitive << ( A_4_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status);
    sensitive << ( A_5_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0);
    sensitive << ( A_5_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1);
    sensitive << ( A_5_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status);
    sensitive << ( A_6_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0);
    sensitive << ( A_6_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1);
    sensitive << ( A_6_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status);
    sensitive << ( A_7_pipo_status );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update);

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0);
    sensitive << ( A_7_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1);
    sensitive << ( A_7_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0);
    sensitive << ( B_cached_t_q0 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1);
    sensitive << ( B_cached_t_q1 );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start);
    sensitive << ( B_cached_t_empty_n );
    sensitive << ( ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start );

    SC_METHOD(thread_B_cached_U_ap_dummy_ce);

    SC_METHOD(thread_B_cached_i_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0 );

    SC_METHOD(thread_B_cached_i_address1);

    SC_METHOD(thread_B_cached_i_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0 );

    SC_METHOD(thread_B_cached_i_ce1);

    SC_METHOD(thread_B_cached_i_d0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0 );

    SC_METHOD(thread_B_cached_i_we0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0 );

    SC_METHOD(thread_B_cached_i_write);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done );

    SC_METHOD(thread_B_cached_t_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0 );

    SC_METHOD(thread_B_cached_t_address1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1 );

    SC_METHOD(thread_B_cached_t_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0 );

    SC_METHOD(thread_B_cached_t_ce1);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1 );

    SC_METHOD(thread_B_cached_t_d0);

    SC_METHOD(thread_B_cached_t_d1);

    SC_METHOD(thread_B_cached_t_read);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready );

    SC_METHOD(thread_B_cached_t_we0);

    SC_METHOD(thread_B_cached_t_we1);

    SC_METHOD(thread_B_read);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read );

    SC_METHOD(thread_C_address0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0 );

    SC_METHOD(thread_C_address1);

    SC_METHOD(thread_C_ce0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0 );

    SC_METHOD(thread_C_ce1);

    SC_METHOD(thread_C_d0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0 );

    SC_METHOD(thread_C_d1);

    SC_METHOD(thread_C_we0);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0 );

    SC_METHOD(thread_C_we1);

    SC_METHOD(thread_ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle );
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle );
    sensitive << ( B_cached_t_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_sig_hs_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done );

    SC_METHOD(thread_ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready);
    sensitive << ( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready );
    sensitive << ( ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready);
    sensitive << ( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready );
    sensitive << ( ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready );
    sensitive << ( ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready );

    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 = SC_LOGIC_0;
    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 = SC_LOGIC_0;
    ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = SC_LOGIC_0;
    ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Accelerator_MAT_Multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, A_0_address0, "(port)A_0_address0");
    sc_trace(mVcdFile, A_0_ce0, "(port)A_0_ce0");
    sc_trace(mVcdFile, A_0_d0, "(port)A_0_d0");
    sc_trace(mVcdFile, A_0_q0, "(port)A_0_q0");
    sc_trace(mVcdFile, A_0_we0, "(port)A_0_we0");
    sc_trace(mVcdFile, A_0_address1, "(port)A_0_address1");
    sc_trace(mVcdFile, A_0_ce1, "(port)A_0_ce1");
    sc_trace(mVcdFile, A_0_d1, "(port)A_0_d1");
    sc_trace(mVcdFile, A_0_q1, "(port)A_0_q1");
    sc_trace(mVcdFile, A_0_we1, "(port)A_0_we1");
    sc_trace(mVcdFile, A_1_address0, "(port)A_1_address0");
    sc_trace(mVcdFile, A_1_ce0, "(port)A_1_ce0");
    sc_trace(mVcdFile, A_1_d0, "(port)A_1_d0");
    sc_trace(mVcdFile, A_1_q0, "(port)A_1_q0");
    sc_trace(mVcdFile, A_1_we0, "(port)A_1_we0");
    sc_trace(mVcdFile, A_1_address1, "(port)A_1_address1");
    sc_trace(mVcdFile, A_1_ce1, "(port)A_1_ce1");
    sc_trace(mVcdFile, A_1_d1, "(port)A_1_d1");
    sc_trace(mVcdFile, A_1_q1, "(port)A_1_q1");
    sc_trace(mVcdFile, A_1_we1, "(port)A_1_we1");
    sc_trace(mVcdFile, A_2_address0, "(port)A_2_address0");
    sc_trace(mVcdFile, A_2_ce0, "(port)A_2_ce0");
    sc_trace(mVcdFile, A_2_d0, "(port)A_2_d0");
    sc_trace(mVcdFile, A_2_q0, "(port)A_2_q0");
    sc_trace(mVcdFile, A_2_we0, "(port)A_2_we0");
    sc_trace(mVcdFile, A_2_address1, "(port)A_2_address1");
    sc_trace(mVcdFile, A_2_ce1, "(port)A_2_ce1");
    sc_trace(mVcdFile, A_2_d1, "(port)A_2_d1");
    sc_trace(mVcdFile, A_2_q1, "(port)A_2_q1");
    sc_trace(mVcdFile, A_2_we1, "(port)A_2_we1");
    sc_trace(mVcdFile, A_3_address0, "(port)A_3_address0");
    sc_trace(mVcdFile, A_3_ce0, "(port)A_3_ce0");
    sc_trace(mVcdFile, A_3_d0, "(port)A_3_d0");
    sc_trace(mVcdFile, A_3_q0, "(port)A_3_q0");
    sc_trace(mVcdFile, A_3_we0, "(port)A_3_we0");
    sc_trace(mVcdFile, A_3_address1, "(port)A_3_address1");
    sc_trace(mVcdFile, A_3_ce1, "(port)A_3_ce1");
    sc_trace(mVcdFile, A_3_d1, "(port)A_3_d1");
    sc_trace(mVcdFile, A_3_q1, "(port)A_3_q1");
    sc_trace(mVcdFile, A_3_we1, "(port)A_3_we1");
    sc_trace(mVcdFile, A_4_address0, "(port)A_4_address0");
    sc_trace(mVcdFile, A_4_ce0, "(port)A_4_ce0");
    sc_trace(mVcdFile, A_4_d0, "(port)A_4_d0");
    sc_trace(mVcdFile, A_4_q0, "(port)A_4_q0");
    sc_trace(mVcdFile, A_4_we0, "(port)A_4_we0");
    sc_trace(mVcdFile, A_4_address1, "(port)A_4_address1");
    sc_trace(mVcdFile, A_4_ce1, "(port)A_4_ce1");
    sc_trace(mVcdFile, A_4_d1, "(port)A_4_d1");
    sc_trace(mVcdFile, A_4_q1, "(port)A_4_q1");
    sc_trace(mVcdFile, A_4_we1, "(port)A_4_we1");
    sc_trace(mVcdFile, A_5_address0, "(port)A_5_address0");
    sc_trace(mVcdFile, A_5_ce0, "(port)A_5_ce0");
    sc_trace(mVcdFile, A_5_d0, "(port)A_5_d0");
    sc_trace(mVcdFile, A_5_q0, "(port)A_5_q0");
    sc_trace(mVcdFile, A_5_we0, "(port)A_5_we0");
    sc_trace(mVcdFile, A_5_address1, "(port)A_5_address1");
    sc_trace(mVcdFile, A_5_ce1, "(port)A_5_ce1");
    sc_trace(mVcdFile, A_5_d1, "(port)A_5_d1");
    sc_trace(mVcdFile, A_5_q1, "(port)A_5_q1");
    sc_trace(mVcdFile, A_5_we1, "(port)A_5_we1");
    sc_trace(mVcdFile, A_6_address0, "(port)A_6_address0");
    sc_trace(mVcdFile, A_6_ce0, "(port)A_6_ce0");
    sc_trace(mVcdFile, A_6_d0, "(port)A_6_d0");
    sc_trace(mVcdFile, A_6_q0, "(port)A_6_q0");
    sc_trace(mVcdFile, A_6_we0, "(port)A_6_we0");
    sc_trace(mVcdFile, A_6_address1, "(port)A_6_address1");
    sc_trace(mVcdFile, A_6_ce1, "(port)A_6_ce1");
    sc_trace(mVcdFile, A_6_d1, "(port)A_6_d1");
    sc_trace(mVcdFile, A_6_q1, "(port)A_6_q1");
    sc_trace(mVcdFile, A_6_we1, "(port)A_6_we1");
    sc_trace(mVcdFile, A_7_address0, "(port)A_7_address0");
    sc_trace(mVcdFile, A_7_ce0, "(port)A_7_ce0");
    sc_trace(mVcdFile, A_7_d0, "(port)A_7_d0");
    sc_trace(mVcdFile, A_7_q0, "(port)A_7_q0");
    sc_trace(mVcdFile, A_7_we0, "(port)A_7_we0");
    sc_trace(mVcdFile, A_7_address1, "(port)A_7_address1");
    sc_trace(mVcdFile, A_7_ce1, "(port)A_7_ce1");
    sc_trace(mVcdFile, A_7_d1, "(port)A_7_d1");
    sc_trace(mVcdFile, A_7_q1, "(port)A_7_q1");
    sc_trace(mVcdFile, A_7_we1, "(port)A_7_we1");
    sc_trace(mVcdFile, B_dout, "(port)B_dout");
    sc_trace(mVcdFile, B_empty_n, "(port)B_empty_n");
    sc_trace(mVcdFile, B_read, "(port)B_read");
    sc_trace(mVcdFile, C_address0, "(port)C_address0");
    sc_trace(mVcdFile, C_ce0, "(port)C_ce0");
    sc_trace(mVcdFile, C_d0, "(port)C_d0");
    sc_trace(mVcdFile, C_q0, "(port)C_q0");
    sc_trace(mVcdFile, C_we0, "(port)C_we0");
    sc_trace(mVcdFile, C_address1, "(port)C_address1");
    sc_trace(mVcdFile, C_ce1, "(port)C_ce1");
    sc_trace(mVcdFile, C_d1, "(port)C_d1");
    sc_trace(mVcdFile, C_q1, "(port)C_q1");
    sc_trace(mVcdFile, C_we1, "(port)C_we1");
    sc_trace(mVcdFile, A_0_pipo_status, "(port)A_0_pipo_status");
    sc_trace(mVcdFile, A_0_pipo_update, "(port)A_0_pipo_update");
    sc_trace(mVcdFile, A_1_pipo_status, "(port)A_1_pipo_status");
    sc_trace(mVcdFile, A_1_pipo_update, "(port)A_1_pipo_update");
    sc_trace(mVcdFile, A_2_pipo_status, "(port)A_2_pipo_status");
    sc_trace(mVcdFile, A_2_pipo_update, "(port)A_2_pipo_update");
    sc_trace(mVcdFile, A_3_pipo_status, "(port)A_3_pipo_status");
    sc_trace(mVcdFile, A_3_pipo_update, "(port)A_3_pipo_update");
    sc_trace(mVcdFile, A_4_pipo_status, "(port)A_4_pipo_status");
    sc_trace(mVcdFile, A_4_pipo_update, "(port)A_4_pipo_update");
    sc_trace(mVcdFile, A_5_pipo_status, "(port)A_5_pipo_status");
    sc_trace(mVcdFile, A_5_pipo_update, "(port)A_5_pipo_update");
    sc_trace(mVcdFile, A_6_pipo_status, "(port)A_6_pipo_status");
    sc_trace(mVcdFile, A_6_pipo_update, "(port)A_6_pipo_update");
    sc_trace(mVcdFile, A_7_pipo_status, "(port)A_7_pipo_status");
    sc_trace(mVcdFile, A_7_pipo_update, "(port)A_7_pipo_update");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, B_cached_i_address0, "B_cached_i_address0");
    sc_trace(mVcdFile, B_cached_i_ce0, "B_cached_i_ce0");
    sc_trace(mVcdFile, B_cached_i_we0, "B_cached_i_we0");
    sc_trace(mVcdFile, B_cached_i_d0, "B_cached_i_d0");
    sc_trace(mVcdFile, B_cached_i_q0, "B_cached_i_q0");
    sc_trace(mVcdFile, B_cached_i_address1, "B_cached_i_address1");
    sc_trace(mVcdFile, B_cached_i_ce1, "B_cached_i_ce1");
    sc_trace(mVcdFile, B_cached_i_q1, "B_cached_i_q1");
    sc_trace(mVcdFile, B_cached_t_address0, "B_cached_t_address0");
    sc_trace(mVcdFile, B_cached_t_ce0, "B_cached_t_ce0");
    sc_trace(mVcdFile, B_cached_t_we0, "B_cached_t_we0");
    sc_trace(mVcdFile, B_cached_t_d0, "B_cached_t_d0");
    sc_trace(mVcdFile, B_cached_t_q0, "B_cached_t_q0");
    sc_trace(mVcdFile, B_cached_t_address1, "B_cached_t_address1");
    sc_trace(mVcdFile, B_cached_t_ce1, "B_cached_t_ce1");
    sc_trace(mVcdFile, B_cached_t_q1, "B_cached_t_q1");
    sc_trace(mVcdFile, B_cached_U_ap_dummy_ce, "B_cached_U_ap_dummy_ce");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0");
    sc_trace(mVcdFile, ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached, "ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status, "Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status");
    sc_trace(mVcdFile, Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update, "Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, B_cached_i_full_n, "B_cached_i_full_n");
    sc_trace(mVcdFile, B_cached_i_write, "B_cached_i_write");
    sc_trace(mVcdFile, B_cached_t_empty_n, "B_cached_t_empty_n");
    sc_trace(mVcdFile, B_cached_t_read, "B_cached_t_read");
    sc_trace(mVcdFile, B_cached_t_d1, "B_cached_t_d1");
    sc_trace(mVcdFile, B_cached_t_we1, "B_cached_t_we1");
    sc_trace(mVcdFile, ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0, "ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0, "ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
    sc_trace(mVcdFile, ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready, "ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready, "ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start, "ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start");
    sc_trace(mVcdFile, ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready, "ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready, "ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start, "ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start");
#endif

    }
}

Accelerator_MAT_Multiply::~Accelerator_MAT_Multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete B_cached_U;
    delete Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0;
    delete Accelerator_MAT_Multiply_Loop_Row_proc_U0;
}

void Accelerator_MAT_Multiply::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done.read())) {
            ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done.read())) {
            ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_top_allready.read()))) {
            ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready.read())) {
            ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_top_allready.read()))) {
            ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready.read())) {
            ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = ap_const_logic_1;
        }
    }
}

void Accelerator_MAT_Multiply::thread_A_0_address0() {
    A_0_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0.read();
}

void Accelerator_MAT_Multiply::thread_A_0_address1() {
    A_0_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1.read();
}

void Accelerator_MAT_Multiply::thread_A_0_ce0() {
    A_0_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0.read();
}

void Accelerator_MAT_Multiply::thread_A_0_ce1() {
    A_0_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1.read();
}

void Accelerator_MAT_Multiply::thread_A_0_d0() {
    A_0_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_0_d1() {
    A_0_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_0_pipo_update() {
    A_0_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update.read();
}

void Accelerator_MAT_Multiply::thread_A_0_we0() {
    A_0_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_0_we1() {
    A_0_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_1_address0() {
    A_1_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0.read();
}

void Accelerator_MAT_Multiply::thread_A_1_address1() {
    A_1_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1.read();
}

void Accelerator_MAT_Multiply::thread_A_1_ce0() {
    A_1_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0.read();
}

void Accelerator_MAT_Multiply::thread_A_1_ce1() {
    A_1_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1.read();
}

void Accelerator_MAT_Multiply::thread_A_1_d0() {
    A_1_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_1_d1() {
    A_1_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_1_pipo_update() {
    A_1_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update.read();
}

void Accelerator_MAT_Multiply::thread_A_1_we0() {
    A_1_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_1_we1() {
    A_1_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_2_address0() {
    A_2_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0.read();
}

void Accelerator_MAT_Multiply::thread_A_2_address1() {
    A_2_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1.read();
}

void Accelerator_MAT_Multiply::thread_A_2_ce0() {
    A_2_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0.read();
}

void Accelerator_MAT_Multiply::thread_A_2_ce1() {
    A_2_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1.read();
}

void Accelerator_MAT_Multiply::thread_A_2_d0() {
    A_2_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_2_d1() {
    A_2_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_2_pipo_update() {
    A_2_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update.read();
}

void Accelerator_MAT_Multiply::thread_A_2_we0() {
    A_2_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_2_we1() {
    A_2_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_3_address0() {
    A_3_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0.read();
}

void Accelerator_MAT_Multiply::thread_A_3_address1() {
    A_3_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1.read();
}

void Accelerator_MAT_Multiply::thread_A_3_ce0() {
    A_3_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0.read();
}

void Accelerator_MAT_Multiply::thread_A_3_ce1() {
    A_3_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1.read();
}

void Accelerator_MAT_Multiply::thread_A_3_d0() {
    A_3_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_3_d1() {
    A_3_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_3_pipo_update() {
    A_3_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update.read();
}

void Accelerator_MAT_Multiply::thread_A_3_we0() {
    A_3_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_3_we1() {
    A_3_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_4_address0() {
    A_4_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0.read();
}

void Accelerator_MAT_Multiply::thread_A_4_address1() {
    A_4_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1.read();
}

void Accelerator_MAT_Multiply::thread_A_4_ce0() {
    A_4_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0.read();
}

void Accelerator_MAT_Multiply::thread_A_4_ce1() {
    A_4_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1.read();
}

void Accelerator_MAT_Multiply::thread_A_4_d0() {
    A_4_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_4_d1() {
    A_4_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_4_pipo_update() {
    A_4_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update.read();
}

void Accelerator_MAT_Multiply::thread_A_4_we0() {
    A_4_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_4_we1() {
    A_4_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_5_address0() {
    A_5_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0.read();
}

void Accelerator_MAT_Multiply::thread_A_5_address1() {
    A_5_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1.read();
}

void Accelerator_MAT_Multiply::thread_A_5_ce0() {
    A_5_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0.read();
}

void Accelerator_MAT_Multiply::thread_A_5_ce1() {
    A_5_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1.read();
}

void Accelerator_MAT_Multiply::thread_A_5_d0() {
    A_5_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_5_d1() {
    A_5_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_5_pipo_update() {
    A_5_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update.read();
}

void Accelerator_MAT_Multiply::thread_A_5_we0() {
    A_5_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_5_we1() {
    A_5_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_6_address0() {
    A_6_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0.read();
}

void Accelerator_MAT_Multiply::thread_A_6_address1() {
    A_6_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1.read();
}

void Accelerator_MAT_Multiply::thread_A_6_ce0() {
    A_6_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0.read();
}

void Accelerator_MAT_Multiply::thread_A_6_ce1() {
    A_6_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1.read();
}

void Accelerator_MAT_Multiply::thread_A_6_d0() {
    A_6_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_6_d1() {
    A_6_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_6_pipo_update() {
    A_6_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update.read();
}

void Accelerator_MAT_Multiply::thread_A_6_we0() {
    A_6_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_6_we1() {
    A_6_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_7_address0() {
    A_7_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0.read();
}

void Accelerator_MAT_Multiply::thread_A_7_address1() {
    A_7_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1.read();
}

void Accelerator_MAT_Multiply::thread_A_7_ce0() {
    A_7_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0.read();
}

void Accelerator_MAT_Multiply::thread_A_7_ce1() {
    A_7_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1.read();
}

void Accelerator_MAT_Multiply::thread_A_7_d0() {
    A_7_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_7_d1() {
    A_7_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_A_7_pipo_update() {
    A_7_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update.read();
}

void Accelerator_MAT_Multiply::thread_A_7_we0() {
    A_7_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_A_7_we1() {
    A_7_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status() {
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status = B_cached_i_full_n.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout() {
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout = B_dout.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n() {
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n = B_empty_n.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue() {
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start() {
    if ( ap_rst.read() == ap_const_logic_1) {
        Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_const_logic_0;
    } else {
        Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start.read();
    }
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status = A_0_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 = A_0_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 = A_0_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status = A_1_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 = A_1_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 = A_1_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status = A_2_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 = A_2_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 = A_2_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status = A_3_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 = A_3_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 = A_3_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status = A_4_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 = A_4_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 = A_4_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status = A_5_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 = A_5_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 = A_5_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status = A_6_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 = A_6_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 = A_6_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status = A_7_pipo_status.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 = A_7_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 = A_7_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0 = B_cached_t_q0.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1 = B_cached_t_q1.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue = ap_sig_hs_continue.read();
}

void Accelerator_MAT_Multiply::thread_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start() {
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start = (B_cached_t_empty_n.read() & ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start.read());
}

void Accelerator_MAT_Multiply::thread_B_cached_U_ap_dummy_ce() {
    B_cached_U_ap_dummy_ce = ap_const_logic_1;
}

void Accelerator_MAT_Multiply::thread_B_cached_i_address0() {
    B_cached_i_address0 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_i_address1() {
    B_cached_i_address1 = ap_const_lv6_0;
}

void Accelerator_MAT_Multiply::thread_B_cached_i_ce0() {
    B_cached_i_ce0 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_i_ce1() {
    B_cached_i_ce1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_B_cached_i_d0() {
    B_cached_i_d0 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_i_we0() {
    B_cached_i_we0 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_i_write() {
    B_cached_i_write = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_t_address0() {
    B_cached_t_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_t_address1() {
    B_cached_t_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_t_ce0() {
    B_cached_t_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_t_ce1() {
    B_cached_t_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_t_d0() {
    B_cached_t_d0 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_B_cached_t_d1() {
    B_cached_t_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_B_cached_t_read() {
    B_cached_t_read = Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready.read();
}

void Accelerator_MAT_Multiply::thread_B_cached_t_we0() {
    B_cached_t_we0 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_B_cached_t_we1() {
    B_cached_t_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_B_read() {
    B_read = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read.read();
}

void Accelerator_MAT_Multiply::thread_C_address0() {
    C_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0.read();
}

void Accelerator_MAT_Multiply::thread_C_address1() {
    C_address1 = ap_const_lv6_0;
}

void Accelerator_MAT_Multiply::thread_C_ce0() {
    C_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0.read();
}

void Accelerator_MAT_Multiply::thread_C_ce1() {
    C_ce1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_C_d0() {
    C_d0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0.read();
}

void Accelerator_MAT_Multiply::thread_C_d1() {
    C_d1 = ap_const_lv32_0;
}

void Accelerator_MAT_Multiply::thread_C_we0() {
    C_we0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0.read();
}

void Accelerator_MAT_Multiply::thread_C_we1() {
    C_we1 = ap_const_logic_0;
}

void Accelerator_MAT_Multiply::thread_ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached() {
    ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done.read();
}

void Accelerator_MAT_Multiply::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void Accelerator_MAT_Multiply::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, B_cached_t_empty_n.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Accelerator_MAT_Multiply::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void Accelerator_MAT_Multiply::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_continue.read();
}

void Accelerator_MAT_Multiply::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done.read())) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void Accelerator_MAT_Multiply::thread_ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready.read())) {
        ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready.read();
    } else {
        ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = ap_const_logic_1;
    }
}

void Accelerator_MAT_Multiply::thread_ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready.read())) {
        ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready.read();
    } else {
        ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = ap_const_logic_1;
    }
}

void Accelerator_MAT_Multiply::thread_ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_const_logic_1;
    } else {
        ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_const_logic_0;
    }
}

void Accelerator_MAT_Multiply::thread_ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready.read()))) {
        ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start = ap_const_logic_1;
    } else {
        ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start = ap_const_logic_0;
    }
}

void Accelerator_MAT_Multiply::thread_ap_sig_top_allready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready.read()))) {
        ap_sig_top_allready = ap_const_logic_1;
    } else {
        ap_sig_top_allready = ap_const_logic_0;
    }
}

}

