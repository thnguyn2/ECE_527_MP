// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Accelerator_Block_proc_HH_
#define _Accelerator_Block_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Accelerator_DCT.h"
#include "Accelerator_Quant.h"
#include "Accelerator_Block_proc_temp.h"

namespace ap_rtl {

struct Accelerator_Block_proc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > function_r;
    sc_in< sc_lv<32> > X_dout;
    sc_in< sc_logic > X_empty_n;
    sc_out< sc_logic > X_read;
    sc_out< sc_lv<32> > Y_din;
    sc_in< sc_logic > Y_full_n;
    sc_out< sc_logic > Y_write;


    // Module declarations
    Accelerator_Block_proc(sc_module_name name);
    SC_HAS_PROCESS(Accelerator_Block_proc);

    ~Accelerator_Block_proc();

    sc_trace_file* mVcdFile;

    Accelerator_Block_proc_temp* temp_U;
    Accelerator_DCT* grp_Accelerator_DCT_fu_67;
    Accelerator_Quant* grp_Accelerator_Quant_fu_110;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_25;
    sc_signal< bool > ap_sig_bdd_46;
    sc_signal< sc_lv<1> > cond_fu_120_p2;
    sc_signal< sc_lv<1> > cond_reg_132;
    sc_signal< sc_lv<6> > temp_address0;
    sc_signal< sc_logic > temp_ce0;
    sc_signal< sc_logic > temp_we0;
    sc_signal< sc_lv<32> > temp_d0;
    sc_signal< sc_lv<32> > grp_Accelerator_DCT_fu_67_X_dout;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_X_empty_n;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_X_read;
    sc_signal< sc_lv<8> > grp_Accelerator_DCT_fu_67_function_r;
    sc_signal< sc_lv<6> > grp_Accelerator_DCT_fu_67_Y_address0;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_Y_ce0;
    sc_signal< sc_lv<32> > grp_Accelerator_DCT_fu_67_Y_d0;
    sc_signal< sc_lv<32> > grp_Accelerator_DCT_fu_67_Y_q0;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_Y_we0;
    sc_signal< sc_lv<6> > grp_Accelerator_DCT_fu_67_Y_address1;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_Y_ce1;
    sc_signal< sc_lv<32> > grp_Accelerator_DCT_fu_67_Y_d1;
    sc_signal< sc_lv<32> > grp_Accelerator_DCT_fu_67_Y_q1;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_Y_we1;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_function_r_ap_vld;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_function_r_ap_ack;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_ap_done;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_ap_start;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_ap_idle;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_ap_ready;
    sc_signal< sc_lv<32> > grp_Accelerator_Quant_fu_110_X_dout;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_X_empty_n;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_X_read;
    sc_signal< sc_lv<8> > grp_Accelerator_Quant_fu_110_function_r;
    sc_signal< sc_lv<32> > grp_Accelerator_Quant_fu_110_Y_din;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_Y_full_n;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_Y_write;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_function_r_ap_ack;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_ap_done;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_ap_start;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_ap_idle;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_ap_ready;
    sc_signal< sc_logic > grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready;
    sc_signal< sc_logic > ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_108;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_123;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_131;
    sc_signal< sc_logic > grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready;
    sc_signal< sc_logic > ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_402;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_416;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_st1_fsm_0;
    static const sc_lv<6> ap_ST_st2_fsm_1;
    static const sc_lv<6> ap_ST_st3_fsm_2;
    static const sc_lv<6> ap_ST_st4_fsm_3;
    static const sc_lv<6> ap_ST_st5_fsm_4;
    static const sc_lv<6> ap_ST_st6_fsm_5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_X_read();
    void thread_Y_din();
    void thread_Y_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_108();
    void thread_ap_sig_bdd_123();
    void thread_ap_sig_bdd_131();
    void thread_ap_sig_bdd_25();
    void thread_ap_sig_bdd_402();
    void thread_ap_sig_bdd_416();
    void thread_ap_sig_bdd_46();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready();
    void thread_ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready();
    void thread_cond_fu_120_p2();
    void thread_grp_Accelerator_DCT_fu_67_X_dout();
    void thread_grp_Accelerator_DCT_fu_67_X_empty_n();
    void thread_grp_Accelerator_DCT_fu_67_Y_q0();
    void thread_grp_Accelerator_DCT_fu_67_Y_q1();
    void thread_grp_Accelerator_DCT_fu_67_ap_start();
    void thread_grp_Accelerator_DCT_fu_67_function_r();
    void thread_grp_Accelerator_DCT_fu_67_function_r_ap_vld();
    void thread_grp_Accelerator_Quant_fu_110_X_dout();
    void thread_grp_Accelerator_Quant_fu_110_X_empty_n();
    void thread_grp_Accelerator_Quant_fu_110_Y_full_n();
    void thread_grp_Accelerator_Quant_fu_110_ap_start();
    void thread_grp_Accelerator_Quant_fu_110_function_r();
    void thread_temp_address0();
    void thread_temp_ce0();
    void thread_temp_d0();
    void thread_temp_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
