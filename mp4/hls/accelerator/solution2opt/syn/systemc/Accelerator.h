// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Accelerator_HH_
#define _Accelerator_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Accelerator_Block_proc.h"

namespace ap_rtl {

struct Accelerator : public sc_module {
    // Port declarations 13
    sc_in< sc_lv<32> > X_dout;
    sc_in< sc_logic > X_empty_n;
    sc_out< sc_logic > X_read;
    sc_in< sc_lv<8> > function_r;
    sc_out< sc_lv<32> > Y_din;
    sc_in< sc_logic > Y_full_n;
    sc_out< sc_logic > Y_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;


    // Module declarations
    Accelerator(sc_module_name name);
    SC_HAS_PROCESS(Accelerator);

    ~Accelerator();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Accelerator_Block_proc* Accelerator_Block_proc_U0;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_ap_start;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_ap_done;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_ap_continue;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_ap_idle;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_ap_ready;
    sc_signal< sc_lv<8> > Accelerator_Block_proc_U0_function_r;
    sc_signal< sc_lv<32> > Accelerator_Block_proc_U0_X_dout;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_X_empty_n;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_X_read;
    sc_signal< sc_lv<32> > Accelerator_Block_proc_U0_Y_din;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_Y_full_n;
    sc_signal< sc_logic > Accelerator_Block_proc_U0_Y_write;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > ap_reg_procdone_Accelerator_Block_proc_U0;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_top_allready;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Accelerator_Block_proc_U0_X_dout();
    void thread_Accelerator_Block_proc_U0_X_empty_n();
    void thread_Accelerator_Block_proc_U0_Y_full_n();
    void thread_Accelerator_Block_proc_U0_ap_continue();
    void thread_Accelerator_Block_proc_U0_ap_start();
    void thread_Accelerator_Block_proc_U0_function_r();
    void thread_X_read();
    void thread_Y_din();
    void thread_Y_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_top_allready();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
