// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "Accelerator_Quant_Block_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Accelerator_Quant_Block_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Accelerator_Quant_Block_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> Accelerator_Quant_Block_proc::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> Accelerator_Quant_Block_proc::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> Accelerator_Quant_Block_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Accelerator_Quant_Block_proc::ap_const_lv1_1 = "1";
const sc_lv<1> Accelerator_Quant_Block_proc::ap_const_lv1_0 = "0";
const sc_lv<32> Accelerator_Quant_Block_proc::ap_const_lv32_1 = "1";
const sc_lv<8> Accelerator_Quant_Block_proc::ap_const_lv8_1 = "1";

Accelerator_Quant_Block_proc::Accelerator_Quant_Block_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_Accelerator_DOT_Divide_fu_29 = new Accelerator_DOT_Divide("grp_Accelerator_DOT_Divide_fu_29");
    grp_Accelerator_DOT_Divide_fu_29->A_dout(grp_Accelerator_DOT_Divide_fu_29_A_dout);
    grp_Accelerator_DOT_Divide_fu_29->A_empty_n(grp_Accelerator_DOT_Divide_fu_29_A_empty_n);
    grp_Accelerator_DOT_Divide_fu_29->A_read(grp_Accelerator_DOT_Divide_fu_29_A_read);
    grp_Accelerator_DOT_Divide_fu_29->C_din(grp_Accelerator_DOT_Divide_fu_29_C_din);
    grp_Accelerator_DOT_Divide_fu_29->C_full_n(grp_Accelerator_DOT_Divide_fu_29_C_full_n);
    grp_Accelerator_DOT_Divide_fu_29->C_write(grp_Accelerator_DOT_Divide_fu_29_C_write);
    grp_Accelerator_DOT_Divide_fu_29->ap_clk(ap_clk);
    grp_Accelerator_DOT_Divide_fu_29->ap_rst(ap_rst);
    grp_Accelerator_DOT_Divide_fu_29->ap_done(grp_Accelerator_DOT_Divide_fu_29_ap_done);
    grp_Accelerator_DOT_Divide_fu_29->ap_start(grp_Accelerator_DOT_Divide_fu_29_ap_start);
    grp_Accelerator_DOT_Divide_fu_29->ap_idle(grp_Accelerator_DOT_Divide_fu_29_ap_idle);
    grp_Accelerator_DOT_Divide_fu_29->ap_ready(grp_Accelerator_DOT_Divide_fu_29_ap_ready);
    grp_Accelerator_DOT_Multiply_fu_37 = new Accelerator_DOT_Multiply("grp_Accelerator_DOT_Multiply_fu_37");
    grp_Accelerator_DOT_Multiply_fu_37->A_dout(grp_Accelerator_DOT_Multiply_fu_37_A_dout);
    grp_Accelerator_DOT_Multiply_fu_37->A_empty_n(grp_Accelerator_DOT_Multiply_fu_37_A_empty_n);
    grp_Accelerator_DOT_Multiply_fu_37->A_read(grp_Accelerator_DOT_Multiply_fu_37_A_read);
    grp_Accelerator_DOT_Multiply_fu_37->C_din(grp_Accelerator_DOT_Multiply_fu_37_C_din);
    grp_Accelerator_DOT_Multiply_fu_37->C_full_n(grp_Accelerator_DOT_Multiply_fu_37_C_full_n);
    grp_Accelerator_DOT_Multiply_fu_37->C_write(grp_Accelerator_DOT_Multiply_fu_37_C_write);
    grp_Accelerator_DOT_Multiply_fu_37->ap_clk(ap_clk);
    grp_Accelerator_DOT_Multiply_fu_37->ap_rst(ap_rst);
    grp_Accelerator_DOT_Multiply_fu_37->ap_done(grp_Accelerator_DOT_Multiply_fu_37_ap_done);
    grp_Accelerator_DOT_Multiply_fu_37->ap_start(grp_Accelerator_DOT_Multiply_fu_37_ap_start);
    grp_Accelerator_DOT_Multiply_fu_37->ap_idle(grp_Accelerator_DOT_Multiply_fu_37_ap_idle);
    grp_Accelerator_DOT_Multiply_fu_37->ap_ready(grp_Accelerator_DOT_Multiply_fu_37_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_X_read);
    sensitive << ( cond_reg_51 );
    sensitive << ( grp_Accelerator_DOT_Divide_fu_29_A_read );
    sensitive << ( grp_Accelerator_DOT_Multiply_fu_37_A_read );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_Y_din);
    sensitive << ( cond_reg_51 );
    sensitive << ( grp_Accelerator_DOT_Divide_fu_29_C_din );
    sensitive << ( grp_Accelerator_DOT_Multiply_fu_37_C_din );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_Y_write);
    sensitive << ( cond_reg_51 );
    sensitive << ( grp_Accelerator_DOT_Divide_fu_29_C_write );
    sensitive << ( grp_Accelerator_DOT_Multiply_fu_37_C_write );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( cond_reg_51 );
    sensitive << ( grp_Accelerator_DOT_Divide_fu_29_ap_done );
    sensitive << ( grp_Accelerator_DOT_Multiply_fu_37_ap_done );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( cond_reg_51 );
    sensitive << ( grp_Accelerator_DOT_Divide_fu_29_ap_done );
    sensitive << ( grp_Accelerator_DOT_Multiply_fu_37_ap_done );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_sig_bdd_106);
    sensitive << ( cond_reg_51 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_sig_bdd_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_42);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_bdd_81);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_85);
    sensitive << ( cond_reg_51 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_21 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready);
    sensitive << ( grp_Accelerator_DOT_Divide_fu_29_ap_ready );
    sensitive << ( ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready );

    SC_METHOD(thread_ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready);
    sensitive << ( grp_Accelerator_DOT_Multiply_fu_37_ap_ready );
    sensitive << ( ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready );

    SC_METHOD(thread_cond_fu_45_p2);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( function_r );
    sensitive << ( ap_sig_bdd_42 );

    SC_METHOD(thread_grp_Accelerator_DOT_Divide_fu_29_A_dout);
    sensitive << ( X_dout );
    sensitive << ( cond_reg_51 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Accelerator_DOT_Divide_fu_29_A_empty_n);
    sensitive << ( X_empty_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Accelerator_DOT_Divide_fu_29_C_full_n);
    sensitive << ( Y_full_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Accelerator_DOT_Divide_fu_29_ap_start);
    sensitive << ( grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg );

    SC_METHOD(thread_grp_Accelerator_DOT_Multiply_fu_37_A_dout);
    sensitive << ( X_dout );
    sensitive << ( cond_reg_51 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Accelerator_DOT_Multiply_fu_37_A_empty_n);
    sensitive << ( X_empty_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Accelerator_DOT_Multiply_fu_37_C_full_n);
    sensitive << ( Y_full_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Accelerator_DOT_Multiply_fu_37_ap_start);
    sensitive << ( grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( cond_reg_51 );
    sensitive << ( ap_sig_bdd_42 );
    sensitive << ( grp_Accelerator_DOT_Divide_fu_29_ap_done );
    sensitive << ( grp_Accelerator_DOT_Multiply_fu_37_ap_done );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg = SC_LOGIC_0;
    ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = SC_LOGIC_0;
    grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg = SC_LOGIC_0;
    ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Accelerator_Quant_Block_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, function_r, "(port)function_r");
    sc_trace(mVcdFile, X_dout, "(port)X_dout");
    sc_trace(mVcdFile, X_empty_n, "(port)X_empty_n");
    sc_trace(mVcdFile, X_read, "(port)X_read");
    sc_trace(mVcdFile, Y_din, "(port)Y_din");
    sc_trace(mVcdFile, Y_full_n, "(port)Y_full_n");
    sc_trace(mVcdFile, Y_write, "(port)Y_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_21, "ap_sig_bdd_21");
    sc_trace(mVcdFile, cond_fu_45_p2, "cond_fu_45_p2");
    sc_trace(mVcdFile, cond_reg_51, "cond_reg_51");
    sc_trace(mVcdFile, ap_sig_bdd_42, "ap_sig_bdd_42");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_A_dout, "grp_Accelerator_DOT_Divide_fu_29_A_dout");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_A_empty_n, "grp_Accelerator_DOT_Divide_fu_29_A_empty_n");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_A_read, "grp_Accelerator_DOT_Divide_fu_29_A_read");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_C_din, "grp_Accelerator_DOT_Divide_fu_29_C_din");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_C_full_n, "grp_Accelerator_DOT_Divide_fu_29_C_full_n");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_C_write, "grp_Accelerator_DOT_Divide_fu_29_C_write");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_ap_done, "grp_Accelerator_DOT_Divide_fu_29_ap_done");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_ap_start, "grp_Accelerator_DOT_Divide_fu_29_ap_start");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_ap_idle, "grp_Accelerator_DOT_Divide_fu_29_ap_idle");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_ap_ready, "grp_Accelerator_DOT_Divide_fu_29_ap_ready");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_A_dout, "grp_Accelerator_DOT_Multiply_fu_37_A_dout");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_A_empty_n, "grp_Accelerator_DOT_Multiply_fu_37_A_empty_n");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_A_read, "grp_Accelerator_DOT_Multiply_fu_37_A_read");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_C_din, "grp_Accelerator_DOT_Multiply_fu_37_C_din");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_C_full_n, "grp_Accelerator_DOT_Multiply_fu_37_C_full_n");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_C_write, "grp_Accelerator_DOT_Multiply_fu_37_C_write");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_ap_done, "grp_Accelerator_DOT_Multiply_fu_37_ap_done");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_ap_start, "grp_Accelerator_DOT_Multiply_fu_37_ap_start");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_ap_idle, "grp_Accelerator_DOT_Multiply_fu_37_ap_idle");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_ap_ready, "grp_Accelerator_DOT_Multiply_fu_37_ap_ready");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg, "grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg");
    sc_trace(mVcdFile, ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready, "ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready");
    sc_trace(mVcdFile, ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready, "ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_81, "ap_sig_bdd_81");
    sc_trace(mVcdFile, grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg, "grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg");
    sc_trace(mVcdFile, ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready, "ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready");
    sc_trace(mVcdFile, ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready, "ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_85, "ap_sig_bdd_85");
    sc_trace(mVcdFile, ap_sig_bdd_106, "ap_sig_bdd_106");
#endif

    }
}

Accelerator_Quant_Block_proc::~Accelerator_Quant_Block_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_Accelerator_DOT_Divide_fu_29;
    delete grp_Accelerator_DOT_Multiply_fu_37;
}

void Accelerator_Quant_Block_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                    !((esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Divide_fu_29_ap_done.read())) || (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Multiply_fu_37_ap_done.read()))))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_85.read()) {
            if (!((esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Divide_fu_29_ap_done.read())) || (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Multiply_fu_37_ap_done.read())))) {
                ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Accelerator_DOT_Divide_fu_29_ap_ready.read())) {
                ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_106.read()) {
            if (!((esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Divide_fu_29_ap_done.read())) || (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Multiply_fu_37_ap_done.read())))) {
                ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Accelerator_DOT_Multiply_fu_37_ap_ready.read())) {
                ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
              !ap_sig_bdd_42.read() && 
              esl_seteq<1,1,1>(cond_fu_45_p2.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
              esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready.read())))) {
            grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Accelerator_DOT_Divide_fu_29_ap_ready.read())) {
            grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
              !ap_sig_bdd_42.read() && 
              !esl_seteq<1,1,1>(cond_fu_45_p2.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
              !esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready.read())))) {
            grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Accelerator_DOT_Multiply_fu_37_ap_ready.read())) {
            grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !ap_sig_bdd_42.read())) {
        cond_reg_51 = cond_fu_45_p2.read();
    }
}

void Accelerator_Quant_Block_proc::thread_X_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        if (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0)) {
            X_read = grp_Accelerator_DOT_Multiply_fu_37_A_read.read();
        } else if (esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0)) {
            X_read = grp_Accelerator_DOT_Divide_fu_29_A_read.read();
        } else {
            X_read = ap_const_logic_0;
        }
    } else {
        X_read = ap_const_logic_0;
    }
}

void Accelerator_Quant_Block_proc::thread_Y_din() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        if (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0)) {
            Y_din = grp_Accelerator_DOT_Multiply_fu_37_C_din.read();
        } else if (esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0)) {
            Y_din = grp_Accelerator_DOT_Divide_fu_29_C_din.read();
        } else {
            Y_din = grp_Accelerator_DOT_Multiply_fu_37_C_din.read();
        }
    } else {
        Y_din = grp_Accelerator_DOT_Multiply_fu_37_C_din.read();
    }
}

void Accelerator_Quant_Block_proc::thread_Y_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        if (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0)) {
            Y_write = grp_Accelerator_DOT_Multiply_fu_37_C_write.read();
        } else if (esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0)) {
            Y_write = grp_Accelerator_DOT_Divide_fu_29_C_write.read();
        } else {
            Y_write = ap_const_logic_0;
        }
    } else {
        Y_write = ap_const_logic_0;
    }
}

void Accelerator_Quant_Block_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !((esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Divide_fu_29_ap_done.read())) || (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Multiply_fu_37_ap_done.read())))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Accelerator_Quant_Block_proc::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Accelerator_Quant_Block_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !((esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Divide_fu_29_ap_done.read())) || (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Multiply_fu_37_ap_done.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Accelerator_Quant_Block_proc::thread_ap_sig_bdd_106() {
    ap_sig_bdd_106 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0));
}

void Accelerator_Quant_Block_proc::thread_ap_sig_bdd_21() {
    ap_sig_bdd_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void Accelerator_Quant_Block_proc::thread_ap_sig_bdd_42() {
    ap_sig_bdd_42 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Accelerator_Quant_Block_proc::thread_ap_sig_bdd_81() {
    ap_sig_bdd_81 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void Accelerator_Quant_Block_proc::thread_ap_sig_bdd_85() {
    ap_sig_bdd_85 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0));
}

void Accelerator_Quant_Block_proc::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void Accelerator_Quant_Block_proc::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_81.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void Accelerator_Quant_Block_proc::thread_ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready.read())) {
        ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = grp_Accelerator_DOT_Divide_fu_29_ap_ready.read();
    } else {
        ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = ap_const_logic_1;
    }
}

void Accelerator_Quant_Block_proc::thread_ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready.read())) {
        ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = grp_Accelerator_DOT_Multiply_fu_37_ap_ready.read();
    } else {
        ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = ap_const_logic_1;
    }
}

void Accelerator_Quant_Block_proc::thread_cond_fu_45_p2() {
    cond_fu_45_p2 = (!function_r.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<1>(): sc_lv<1>(function_r.read() == ap_const_lv8_1);
}

void Accelerator_Quant_Block_proc::thread_grp_Accelerator_DOT_Divide_fu_29_A_dout() {
    grp_Accelerator_DOT_Divide_fu_29_A_dout = X_dout.read();
}

void Accelerator_Quant_Block_proc::thread_grp_Accelerator_DOT_Divide_fu_29_A_empty_n() {
    grp_Accelerator_DOT_Divide_fu_29_A_empty_n = X_empty_n.read();
}

void Accelerator_Quant_Block_proc::thread_grp_Accelerator_DOT_Divide_fu_29_C_full_n() {
    grp_Accelerator_DOT_Divide_fu_29_C_full_n = Y_full_n.read();
}

void Accelerator_Quant_Block_proc::thread_grp_Accelerator_DOT_Divide_fu_29_ap_start() {
    grp_Accelerator_DOT_Divide_fu_29_ap_start = grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg.read();
}

void Accelerator_Quant_Block_proc::thread_grp_Accelerator_DOT_Multiply_fu_37_A_dout() {
    grp_Accelerator_DOT_Multiply_fu_37_A_dout = X_dout.read();
}

void Accelerator_Quant_Block_proc::thread_grp_Accelerator_DOT_Multiply_fu_37_A_empty_n() {
    grp_Accelerator_DOT_Multiply_fu_37_A_empty_n = X_empty_n.read();
}

void Accelerator_Quant_Block_proc::thread_grp_Accelerator_DOT_Multiply_fu_37_C_full_n() {
    grp_Accelerator_DOT_Multiply_fu_37_C_full_n = Y_full_n.read();
}

void Accelerator_Quant_Block_proc::thread_grp_Accelerator_DOT_Multiply_fu_37_ap_start() {
    grp_Accelerator_DOT_Multiply_fu_37_ap_start = grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg.read();
}

void Accelerator_Quant_Block_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_bdd_42.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!((esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Divide_fu_29_ap_done.read())) || (!esl_seteq<1,1,1>(cond_reg_51.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_Accelerator_DOT_Multiply_fu_37_ap_done.read())))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

