// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Accelerator_Quant_Block_proc_HH_
#define _Accelerator_Quant_Block_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Accelerator_DOT_Divide.h"
#include "Accelerator_DOT_Multiply.h"

namespace ap_rtl {

struct Accelerator_Quant_Block_proc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > function_r;
    sc_in< sc_lv<32> > X_dout;
    sc_in< sc_logic > X_empty_n;
    sc_out< sc_logic > X_read;
    sc_out< sc_lv<32> > Y_din;
    sc_in< sc_logic > Y_full_n;
    sc_out< sc_logic > Y_write;


    // Module declarations
    Accelerator_Quant_Block_proc(sc_module_name name);
    SC_HAS_PROCESS(Accelerator_Quant_Block_proc);

    ~Accelerator_Quant_Block_proc();

    sc_trace_file* mVcdFile;

    Accelerator_DOT_Divide* grp_Accelerator_DOT_Divide_fu_29;
    Accelerator_DOT_Multiply* grp_Accelerator_DOT_Multiply_fu_37;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_21;
    sc_signal< sc_lv<1> > cond_fu_45_p2;
    sc_signal< sc_lv<1> > cond_reg_51;
    sc_signal< bool > ap_sig_bdd_42;
    sc_signal< sc_lv<32> > grp_Accelerator_DOT_Divide_fu_29_A_dout;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_A_empty_n;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_A_read;
    sc_signal< sc_lv<32> > grp_Accelerator_DOT_Divide_fu_29_C_din;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_C_full_n;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_C_write;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_ap_done;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_ap_start;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_ap_idle;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_ap_ready;
    sc_signal< sc_lv<32> > grp_Accelerator_DOT_Multiply_fu_37_A_dout;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_A_empty_n;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_A_read;
    sc_signal< sc_lv<32> > grp_Accelerator_DOT_Multiply_fu_37_C_din;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_C_full_n;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_C_write;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_ap_done;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_ap_start;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_ap_idle;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_ap_ready;
    sc_signal< sc_logic > grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready;
    sc_signal< sc_logic > ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_81;
    sc_signal< sc_logic > grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready;
    sc_signal< sc_logic > ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_85;
    sc_signal< bool > ap_sig_bdd_106;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_X_read();
    void thread_Y_din();
    void thread_Y_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_106();
    void thread_ap_sig_bdd_21();
    void thread_ap_sig_bdd_42();
    void thread_ap_sig_bdd_81();
    void thread_ap_sig_bdd_85();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready();
    void thread_ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready();
    void thread_cond_fu_45_p2();
    void thread_grp_Accelerator_DOT_Divide_fu_29_A_dout();
    void thread_grp_Accelerator_DOT_Divide_fu_29_A_empty_n();
    void thread_grp_Accelerator_DOT_Divide_fu_29_C_full_n();
    void thread_grp_Accelerator_DOT_Divide_fu_29_ap_start();
    void thread_grp_Accelerator_DOT_Multiply_fu_37_A_dout();
    void thread_grp_Accelerator_DOT_Multiply_fu_37_A_empty_n();
    void thread_grp_Accelerator_DOT_Multiply_fu_37_C_full_n();
    void thread_grp_Accelerator_DOT_Multiply_fu_37_ap_start();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
