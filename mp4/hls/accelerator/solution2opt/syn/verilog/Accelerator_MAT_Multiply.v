// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Accelerator_MAT_Multiply (
        ap_clk,
        ap_rst,
        A_0_address0,
        A_0_ce0,
        A_0_d0,
        A_0_q0,
        A_0_we0,
        A_0_address1,
        A_0_ce1,
        A_0_d1,
        A_0_q1,
        A_0_we1,
        A_1_address0,
        A_1_ce0,
        A_1_d0,
        A_1_q0,
        A_1_we0,
        A_1_address1,
        A_1_ce1,
        A_1_d1,
        A_1_q1,
        A_1_we1,
        A_2_address0,
        A_2_ce0,
        A_2_d0,
        A_2_q0,
        A_2_we0,
        A_2_address1,
        A_2_ce1,
        A_2_d1,
        A_2_q1,
        A_2_we1,
        A_3_address0,
        A_3_ce0,
        A_3_d0,
        A_3_q0,
        A_3_we0,
        A_3_address1,
        A_3_ce1,
        A_3_d1,
        A_3_q1,
        A_3_we1,
        A_4_address0,
        A_4_ce0,
        A_4_d0,
        A_4_q0,
        A_4_we0,
        A_4_address1,
        A_4_ce1,
        A_4_d1,
        A_4_q1,
        A_4_we1,
        A_5_address0,
        A_5_ce0,
        A_5_d0,
        A_5_q0,
        A_5_we0,
        A_5_address1,
        A_5_ce1,
        A_5_d1,
        A_5_q1,
        A_5_we1,
        A_6_address0,
        A_6_ce0,
        A_6_d0,
        A_6_q0,
        A_6_we0,
        A_6_address1,
        A_6_ce1,
        A_6_d1,
        A_6_q1,
        A_6_we1,
        A_7_address0,
        A_7_ce0,
        A_7_d0,
        A_7_q0,
        A_7_we0,
        A_7_address1,
        A_7_ce1,
        A_7_d1,
        A_7_q1,
        A_7_we1,
        B_dout,
        B_empty_n,
        B_read,
        C_address0,
        C_ce0,
        C_d0,
        C_q0,
        C_we0,
        C_address1,
        C_ce1,
        C_d1,
        C_q1,
        C_we1,
        A_0_pipo_status,
        A_0_pipo_update,
        A_1_pipo_status,
        A_1_pipo_update,
        A_2_pipo_status,
        A_2_pipo_update,
        A_3_pipo_status,
        A_3_pipo_update,
        A_4_pipo_status,
        A_4_pipo_update,
        A_5_pipo_status,
        A_5_pipo_update,
        A_6_pipo_status,
        A_6_pipo_update,
        A_7_pipo_status,
        A_7_pipo_update,
        ap_continue,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_true = 1'b1;
parameter    ap_const_lv6_1 = 6'b1;

input   ap_clk;
input   ap_rst;
output  [2:0] A_0_address0;
output   A_0_ce0;
output  [31:0] A_0_d0;
input  [31:0] A_0_q0;
output   A_0_we0;
output  [2:0] A_0_address1;
output   A_0_ce1;
output  [31:0] A_0_d1;
input  [31:0] A_0_q1;
output   A_0_we1;
output  [2:0] A_1_address0;
output   A_1_ce0;
output  [31:0] A_1_d0;
input  [31:0] A_1_q0;
output   A_1_we0;
output  [2:0] A_1_address1;
output   A_1_ce1;
output  [31:0] A_1_d1;
input  [31:0] A_1_q1;
output   A_1_we1;
output  [2:0] A_2_address0;
output   A_2_ce0;
output  [31:0] A_2_d0;
input  [31:0] A_2_q0;
output   A_2_we0;
output  [2:0] A_2_address1;
output   A_2_ce1;
output  [31:0] A_2_d1;
input  [31:0] A_2_q1;
output   A_2_we1;
output  [2:0] A_3_address0;
output   A_3_ce0;
output  [31:0] A_3_d0;
input  [31:0] A_3_q0;
output   A_3_we0;
output  [2:0] A_3_address1;
output   A_3_ce1;
output  [31:0] A_3_d1;
input  [31:0] A_3_q1;
output   A_3_we1;
output  [2:0] A_4_address0;
output   A_4_ce0;
output  [31:0] A_4_d0;
input  [31:0] A_4_q0;
output   A_4_we0;
output  [2:0] A_4_address1;
output   A_4_ce1;
output  [31:0] A_4_d1;
input  [31:0] A_4_q1;
output   A_4_we1;
output  [2:0] A_5_address0;
output   A_5_ce0;
output  [31:0] A_5_d0;
input  [31:0] A_5_q0;
output   A_5_we0;
output  [2:0] A_5_address1;
output   A_5_ce1;
output  [31:0] A_5_d1;
input  [31:0] A_5_q1;
output   A_5_we1;
output  [2:0] A_6_address0;
output   A_6_ce0;
output  [31:0] A_6_d0;
input  [31:0] A_6_q0;
output   A_6_we0;
output  [2:0] A_6_address1;
output   A_6_ce1;
output  [31:0] A_6_d1;
input  [31:0] A_6_q1;
output   A_6_we1;
output  [2:0] A_7_address0;
output   A_7_ce0;
output  [31:0] A_7_d0;
input  [31:0] A_7_q0;
output   A_7_we0;
output  [2:0] A_7_address1;
output   A_7_ce1;
output  [31:0] A_7_d1;
input  [31:0] A_7_q1;
output   A_7_we1;
input  [31:0] B_dout;
input   B_empty_n;
output   B_read;
output  [5:0] C_address0;
output   C_ce0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output   C_we0;
output  [5:0] C_address1;
output   C_ce1;
output  [31:0] C_d1;
input  [31:0] C_q1;
output   C_we1;
input   A_0_pipo_status;
output   A_0_pipo_update;
input   A_1_pipo_status;
output   A_1_pipo_update;
input   A_2_pipo_status;
output   A_2_pipo_update;
input   A_3_pipo_status;
output   A_3_pipo_update;
input   A_4_pipo_status;
output   A_4_pipo_update;
input   A_5_pipo_status;
output   A_5_pipo_update;
input   A_6_pipo_status;
output   A_6_pipo_update;
input   A_7_pipo_status;
output   A_7_pipo_update;
input   ap_continue;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire   [5:0] B_cached_i_address0;
wire    B_cached_i_ce0;
wire    B_cached_i_we0;
wire   [31:0] B_cached_i_d0;
wire   [31:0] B_cached_i_q0;
wire   [5:0] B_cached_i_address1;
wire    B_cached_i_ce1;
wire   [31:0] B_cached_i_q1;
wire   [5:0] B_cached_t_address0;
wire    B_cached_t_ce0;
wire    B_cached_t_we0;
wire   [31:0] B_cached_t_d0;
wire   [31:0] B_cached_t_q0;
wire   [5:0] B_cached_t_address1;
wire    B_cached_t_ce1;
wire   [31:0] B_cached_t_q1;
wire    B_cached_U_ap_dummy_ce;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
wire   [31:0] Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read;
wire   [5:0] Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0;
wire    ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached;
wire    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0;
wire   [2:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1;
wire   [5:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0;
wire   [5:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1;
wire   [5:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0;
wire   [31:0] Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status;
wire    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update;
wire    ap_sig_hs_continue;
wire    B_cached_i_full_n;
wire    B_cached_i_write;
wire    B_cached_t_empty_n;
wire    B_cached_t_read;
wire   [31:0] B_cached_t_d1;
wire    B_cached_t_we1;
reg    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 = 1'b0;
reg    ap_CS;
reg    ap_sig_top_allready;
reg    ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
reg    ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
reg    ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
reg    ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start;


Accelerator_MAT_Multiply_B_cached #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
B_cached_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .i_address0( B_cached_i_address0 ),
    .i_ce0( B_cached_i_ce0 ),
    .i_we0( B_cached_i_we0 ),
    .i_d0( B_cached_i_d0 ),
    .i_q0( B_cached_i_q0 ),
    .i_address1( B_cached_i_address1 ),
    .i_ce1( B_cached_i_ce1 ),
    .i_q1( B_cached_i_q1 ),
    .t_address0( B_cached_t_address0 ),
    .t_ce0( B_cached_t_ce0 ),
    .t_we0( B_cached_t_we0 ),
    .t_d0( B_cached_t_d0 ),
    .t_q0( B_cached_t_q0 ),
    .t_address1( B_cached_t_address1 ),
    .t_ce1( B_cached_t_ce1 ),
    .t_q1( B_cached_t_q1 ),
    .i_ce( B_cached_U_ap_dummy_ce ),
    .t_ce( B_cached_U_ap_dummy_ce ),
    .i_full_n( B_cached_i_full_n ),
    .i_write( B_cached_i_write ),
    .t_empty_n( B_cached_t_empty_n ),
    .t_read( B_cached_t_read )
);

Accelerator_MAT_Multiply_Loop_LoadRow_proc Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start ),
    .ap_done( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done ),
    .ap_continue( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue ),
    .ap_idle( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle ),
    .ap_ready( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready ),
    .B_dout( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout ),
    .B_empty_n( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n ),
    .B_read( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read ),
    .B_cached_address0( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0 ),
    .B_cached_ce0( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0 ),
    .B_cached_we0( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0 ),
    .B_cached_d0( Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0 )
);

Accelerator_MAT_Multiply_Loop_Row_proc Accelerator_MAT_Multiply_Loop_Row_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start ),
    .ap_done( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done ),
    .ap_continue( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue ),
    .ap_idle( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle ),
    .ap_ready( Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready ),
    .A_0_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0 ),
    .A_0_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0 ),
    .A_0_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 ),
    .A_0_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1 ),
    .A_0_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1 ),
    .A_0_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 ),
    .A_1_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0 ),
    .A_1_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0 ),
    .A_1_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 ),
    .A_1_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1 ),
    .A_1_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1 ),
    .A_1_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 ),
    .A_2_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0 ),
    .A_2_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0 ),
    .A_2_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 ),
    .A_2_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1 ),
    .A_2_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1 ),
    .A_2_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 ),
    .A_3_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0 ),
    .A_3_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0 ),
    .A_3_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 ),
    .A_3_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1 ),
    .A_3_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1 ),
    .A_3_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 ),
    .A_4_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0 ),
    .A_4_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0 ),
    .A_4_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 ),
    .A_4_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1 ),
    .A_4_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1 ),
    .A_4_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 ),
    .A_5_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0 ),
    .A_5_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0 ),
    .A_5_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 ),
    .A_5_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1 ),
    .A_5_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1 ),
    .A_5_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 ),
    .A_6_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0 ),
    .A_6_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0 ),
    .A_6_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 ),
    .A_6_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1 ),
    .A_6_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1 ),
    .A_6_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 ),
    .A_7_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0 ),
    .A_7_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0 ),
    .A_7_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 ),
    .A_7_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1 ),
    .A_7_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1 ),
    .A_7_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 ),
    .B_cached_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0 ),
    .B_cached_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0 ),
    .B_cached_q0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0 ),
    .B_cached_address1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1 ),
    .B_cached_ce1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1 ),
    .B_cached_q1( Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1 ),
    .C_address0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0 ),
    .C_ce0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0 ),
    .C_we0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0 ),
    .C_d0( Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0 )
);



/// ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)) begin
            ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)) begin
            ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// ap_idle assign process. ///
always @ (Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle or Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle or B_cached_t_empty_n)
begin
    if (((ap_const_logic_1 == Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle) & (ap_const_logic_1 == Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle) & (ap_const_logic_0 == B_cached_t_empty_n))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done)
begin
    if ((ap_const_logic_1 == Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready assign process. ///
always @ (Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready or ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready assign process. ///
always @ (Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready or ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)
begin
    if (((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready) & (ap_const_logic_1 == ap_start))) begin
        ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready))) begin
        ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_top_allready assign process. ///
always @ (ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready or ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready))) begin
        ap_sig_top_allready = ap_const_logic_1;
    end else begin
        ap_sig_top_allready = ap_const_logic_0;
    end
end
assign A_0_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0;
assign A_0_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1;
assign A_0_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0;
assign A_0_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1;
assign A_0_d0 = ap_const_lv32_0;
assign A_0_d1 = ap_const_lv32_0;
assign A_0_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update;
assign A_0_we0 = ap_const_logic_0;
assign A_0_we1 = ap_const_logic_0;
assign A_1_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0;
assign A_1_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1;
assign A_1_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0;
assign A_1_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1;
assign A_1_d0 = ap_const_lv32_0;
assign A_1_d1 = ap_const_lv32_0;
assign A_1_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update;
assign A_1_we0 = ap_const_logic_0;
assign A_1_we1 = ap_const_logic_0;
assign A_2_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0;
assign A_2_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1;
assign A_2_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0;
assign A_2_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1;
assign A_2_d0 = ap_const_lv32_0;
assign A_2_d1 = ap_const_lv32_0;
assign A_2_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update;
assign A_2_we0 = ap_const_logic_0;
assign A_2_we1 = ap_const_logic_0;
assign A_3_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0;
assign A_3_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1;
assign A_3_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0;
assign A_3_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1;
assign A_3_d0 = ap_const_lv32_0;
assign A_3_d1 = ap_const_lv32_0;
assign A_3_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update;
assign A_3_we0 = ap_const_logic_0;
assign A_3_we1 = ap_const_logic_0;
assign A_4_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0;
assign A_4_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1;
assign A_4_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0;
assign A_4_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1;
assign A_4_d0 = ap_const_lv32_0;
assign A_4_d1 = ap_const_lv32_0;
assign A_4_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update;
assign A_4_we0 = ap_const_logic_0;
assign A_4_we1 = ap_const_logic_0;
assign A_5_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0;
assign A_5_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1;
assign A_5_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0;
assign A_5_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1;
assign A_5_d0 = ap_const_lv32_0;
assign A_5_d1 = ap_const_lv32_0;
assign A_5_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update;
assign A_5_we0 = ap_const_logic_0;
assign A_5_we1 = ap_const_logic_0;
assign A_6_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0;
assign A_6_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1;
assign A_6_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0;
assign A_6_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1;
assign A_6_d0 = ap_const_lv32_0;
assign A_6_d1 = ap_const_lv32_0;
assign A_6_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update;
assign A_6_we0 = ap_const_logic_0;
assign A_6_we1 = ap_const_logic_0;
assign A_7_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0;
assign A_7_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1;
assign A_7_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0;
assign A_7_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1;
assign A_7_d0 = ap_const_lv32_0;
assign A_7_d1 = ap_const_lv32_0;
assign A_7_pipo_update = Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update;
assign A_7_we0 = ap_const_logic_0;
assign A_7_we1 = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status = B_cached_i_full_n;
assign Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout = B_dout;
assign Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n = B_empty_n;
assign Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status;
assign Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status = A_0_pipo_status;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 = A_0_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 = A_0_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status = A_1_pipo_status;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 = A_1_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 = A_1_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status = A_2_pipo_status;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 = A_2_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 = A_2_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status = A_3_pipo_status;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 = A_3_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 = A_3_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status = A_4_pipo_status;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 = A_4_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 = A_4_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status = A_5_pipo_status;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 = A_5_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 = A_5_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status = A_6_pipo_status;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 = A_6_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 = A_6_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status = A_7_pipo_status;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update = ap_const_logic_0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 = A_7_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 = A_7_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0 = B_cached_t_q0;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1 = B_cached_t_q1;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue = ap_sig_hs_continue;
assign Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start = (B_cached_t_empty_n & ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start);
assign B_cached_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_i_address0 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0;
assign B_cached_i_address1 = ap_const_lv6_0;
assign B_cached_i_ce0 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0;
assign B_cached_i_ce1 = ap_const_logic_0;
assign B_cached_i_d0 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0;
assign B_cached_i_we0 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0;
assign B_cached_i_write = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
assign B_cached_t_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0;
assign B_cached_t_address1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1;
assign B_cached_t_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0;
assign B_cached_t_ce1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1;
assign B_cached_t_d0 = ap_const_lv32_0;
assign B_cached_t_d1 = ap_const_lv32_0;
assign B_cached_t_read = Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_t_we0 = ap_const_logic_0;
assign B_cached_t_we1 = ap_const_logic_0;
assign B_read = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read;
assign C_address0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0;
assign C_address1 = ap_const_lv6_0;
assign C_ce0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0;
assign C_ce1 = ap_const_logic_0;
assign C_d0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0;
assign C_d1 = ap_const_lv32_0;
assign C_we0 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0;
assign C_we1 = ap_const_logic_0;
assign ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_continue;


endmodule //Accelerator_MAT_Multiply

