// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Accelerator_Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        function_r,
        X_dout,
        X_empty_n,
        X_read,
        Y_din,
        Y_full_n,
        Y_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] function_r;
input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
output  [31:0] Y_din;
input   Y_full_n;
output   Y_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_read;
reg Y_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm = 6'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
reg    ap_sig_bdd_46;
wire   [0:0] cond_fu_120_p2;
reg   [0:0] cond_reg_132;
wire   [5:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
wire   [31:0] temp_d0;
wire   [31:0] grp_Accelerator_DCT_fu_67_X_dout;
wire    grp_Accelerator_DCT_fu_67_X_empty_n;
wire    grp_Accelerator_DCT_fu_67_X_read;
reg   [7:0] grp_Accelerator_DCT_fu_67_function_r;
wire   [5:0] grp_Accelerator_DCT_fu_67_Y_address0;
wire    grp_Accelerator_DCT_fu_67_Y_ce0;
wire   [31:0] grp_Accelerator_DCT_fu_67_Y_d0;
wire   [31:0] grp_Accelerator_DCT_fu_67_Y_q0;
wire    grp_Accelerator_DCT_fu_67_Y_we0;
wire   [5:0] grp_Accelerator_DCT_fu_67_Y_address1;
wire    grp_Accelerator_DCT_fu_67_Y_ce1;
wire   [31:0] grp_Accelerator_DCT_fu_67_Y_d1;
wire   [31:0] grp_Accelerator_DCT_fu_67_Y_q1;
wire    grp_Accelerator_DCT_fu_67_Y_we1;
wire    grp_Accelerator_DCT_fu_67_function_r_ap_vld;
wire    grp_Accelerator_DCT_fu_67_function_r_ap_ack;
wire    grp_Accelerator_DCT_fu_67_ap_done;
wire    grp_Accelerator_DCT_fu_67_ap_start;
wire    grp_Accelerator_DCT_fu_67_ap_idle;
wire    grp_Accelerator_DCT_fu_67_ap_ready;
wire   [31:0] grp_Accelerator_Quant_fu_110_X_dout;
wire    grp_Accelerator_Quant_fu_110_X_empty_n;
wire    grp_Accelerator_Quant_fu_110_X_read;
reg   [7:0] grp_Accelerator_Quant_fu_110_function_r;
wire   [31:0] grp_Accelerator_Quant_fu_110_Y_din;
wire    grp_Accelerator_Quant_fu_110_Y_full_n;
wire    grp_Accelerator_Quant_fu_110_Y_write;
wire    grp_Accelerator_Quant_fu_110_function_r_ap_ack;
wire    grp_Accelerator_Quant_fu_110_ap_done;
wire    grp_Accelerator_Quant_fu_110_ap_start;
wire    grp_Accelerator_Quant_fu_110_ap_idle;
wire    grp_Accelerator_Quant_fu_110_ap_ready;
reg    grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg = 1'b0;
reg    ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready = 1'b0;
reg    ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_108;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_123;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_131;
reg    grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg = 1'b0;
reg    ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready = 1'b0;
reg    ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_402;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_416;
reg   [5:0] ap_NS_fsm;


Accelerator_Block_proc_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( temp_address0 ),
    .ce0( temp_ce0 ),
    .we0( temp_we0 ),
    .d0( temp_d0 )
);

Accelerator_DCT grp_Accelerator_DCT_fu_67(
    .X_dout( grp_Accelerator_DCT_fu_67_X_dout ),
    .X_empty_n( grp_Accelerator_DCT_fu_67_X_empty_n ),
    .X_read( grp_Accelerator_DCT_fu_67_X_read ),
    .function_r( grp_Accelerator_DCT_fu_67_function_r ),
    .Y_address0( grp_Accelerator_DCT_fu_67_Y_address0 ),
    .Y_ce0( grp_Accelerator_DCT_fu_67_Y_ce0 ),
    .Y_d0( grp_Accelerator_DCT_fu_67_Y_d0 ),
    .Y_q0( grp_Accelerator_DCT_fu_67_Y_q0 ),
    .Y_we0( grp_Accelerator_DCT_fu_67_Y_we0 ),
    .Y_address1( grp_Accelerator_DCT_fu_67_Y_address1 ),
    .Y_ce1( grp_Accelerator_DCT_fu_67_Y_ce1 ),
    .Y_d1( grp_Accelerator_DCT_fu_67_Y_d1 ),
    .Y_q1( grp_Accelerator_DCT_fu_67_Y_q1 ),
    .Y_we1( grp_Accelerator_DCT_fu_67_Y_we1 ),
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .function_r_ap_vld( grp_Accelerator_DCT_fu_67_function_r_ap_vld ),
    .function_r_ap_ack( grp_Accelerator_DCT_fu_67_function_r_ap_ack ),
    .ap_done( grp_Accelerator_DCT_fu_67_ap_done ),
    .ap_start( grp_Accelerator_DCT_fu_67_ap_start ),
    .ap_idle( grp_Accelerator_DCT_fu_67_ap_idle ),
    .ap_ready( grp_Accelerator_DCT_fu_67_ap_ready )
);

Accelerator_Quant grp_Accelerator_Quant_fu_110(
    .X_dout( grp_Accelerator_Quant_fu_110_X_dout ),
    .X_empty_n( grp_Accelerator_Quant_fu_110_X_empty_n ),
    .X_read( grp_Accelerator_Quant_fu_110_X_read ),
    .function_r( grp_Accelerator_Quant_fu_110_function_r ),
    .Y_din( grp_Accelerator_Quant_fu_110_Y_din ),
    .Y_full_n( grp_Accelerator_Quant_fu_110_Y_full_n ),
    .Y_write( grp_Accelerator_Quant_fu_110_Y_write ),
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .function_r_ap_ack( grp_Accelerator_Quant_fu_110_function_r_ap_ack ),
    .ap_done( grp_Accelerator_Quant_fu_110_ap_done ),
    .ap_start( grp_Accelerator_Quant_fu_110_ap_start ),
    .ap_idle( grp_Accelerator_Quant_fu_110_ap_idle ),
    .ap_ready( grp_Accelerator_Quant_fu_110_ap_ready )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(((cond_reg_132 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_Quant_fu_110_ap_done)) | ((ap_const_logic_0 == grp_Accelerator_DCT_fu_67_ap_done) & ~(cond_reg_132 == ap_const_lv1_0))))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_Accelerator_DCT_fu_67_ap_done)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_132 == ap_const_lv1_0) & ~(((cond_reg_132 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_Quant_fu_110_ap_done)) | ((ap_const_logic_0 == grp_Accelerator_DCT_fu_67_ap_done) & ~(cond_reg_132 == ap_const_lv1_0)))))) begin
            ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready <= ap_const_logic_0;
        end else if ((((ap_const_logic_1 == grp_Accelerator_DCT_fu_67_ap_ready) & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) | ((ap_const_logic_1 == grp_Accelerator_DCT_fu_67_ap_ready) & (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_132 == ap_const_lv1_0)))) begin
            ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_logic_0 == grp_Accelerator_Quant_fu_110_ap_done)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_132 == ap_const_lv1_0) & ~(((cond_reg_132 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_Quant_fu_110_ap_done)) | ((ap_const_logic_0 == grp_Accelerator_DCT_fu_67_ap_done) & ~(cond_reg_132 == ap_const_lv1_0)))))) begin
            ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready <= ap_const_logic_0;
        end else if ((((ap_const_logic_1 == grp_Accelerator_Quant_fu_110_ap_ready) & (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_132 == ap_const_lv1_0) & (ap_const_logic_1 == grp_Accelerator_Quant_fu_110_ap_ready)))) begin
            ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready <= ap_const_logic_1;
        end
    end
end

/// grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_46 & (cond_fu_120_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_logic_0 == ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready)) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_0 == ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready) & (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_132 == ap_const_lv1_0)))) begin
            grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_Accelerator_DCT_fu_67_ap_ready)) begin
            grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_46 & ~(cond_fu_120_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_logic_0 == ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready)) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_132 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready)))) begin
            grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_Accelerator_Quant_fu_110_ap_ready)) begin
            grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_46)) begin
        cond_reg_132 <= cond_fu_120_p2;
    end
end

/// X_read assign process. ///
always @ (cond_reg_132 or grp_Accelerator_DCT_fu_67_X_read or grp_Accelerator_Quant_fu_110_X_read or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_132 == ap_const_lv1_0)))) begin
        X_read = grp_Accelerator_Quant_fu_110_X_read;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_132 == ap_const_lv1_0)))) begin
        X_read = grp_Accelerator_DCT_fu_67_X_read;
    end else begin
        X_read = ap_const_logic_0;
    end
end

/// Y_write assign process. ///
always @ (cond_reg_132 or grp_Accelerator_Quant_fu_110_Y_write or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_132 == ap_const_lv1_0)))) begin
        Y_write = grp_Accelerator_Quant_fu_110_Y_write;
    end else begin
        Y_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or cond_reg_132 or grp_Accelerator_DCT_fu_67_ap_done or grp_Accelerator_Quant_fu_110_ap_done or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(((cond_reg_132 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_Quant_fu_110_ap_done)) | ((ap_const_logic_0 == grp_Accelerator_DCT_fu_67_ap_done) & ~(cond_reg_132 == ap_const_lv1_0)))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (cond_reg_132 or grp_Accelerator_DCT_fu_67_ap_done or grp_Accelerator_Quant_fu_110_ap_done or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(((cond_reg_132 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_Quant_fu_110_ap_done)) | ((ap_const_logic_0 == grp_Accelerator_DCT_fu_67_ap_done) & ~(cond_reg_132 == ap_const_lv1_0))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_25)
begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_108)
begin
    if (ap_sig_bdd_108) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_416)
begin
    if (ap_sig_bdd_416) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_131)
begin
    if (ap_sig_bdd_131) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_402)
begin
    if (ap_sig_bdd_402) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_123)
begin
    if (ap_sig_bdd_123) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready assign process. ///
always @ (grp_Accelerator_DCT_fu_67_ap_ready or ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready)) begin
        ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready = grp_Accelerator_DCT_fu_67_ap_ready;
    end else begin
        ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready assign process. ///
always @ (grp_Accelerator_Quant_fu_110_ap_ready or ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready)) begin
        ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready = grp_Accelerator_Quant_fu_110_ap_ready;
    end else begin
        ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready = ap_const_logic_1;
    end
end

/// grp_Accelerator_DCT_fu_67_function_r assign process. ///
always @ (function_r or cond_reg_132 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_132 == ap_const_lv1_0))) begin
        grp_Accelerator_DCT_fu_67_function_r = ap_const_lv8_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_Accelerator_DCT_fu_67_function_r = function_r;
    end else begin
        grp_Accelerator_DCT_fu_67_function_r = 'bx;
    end
end

/// grp_Accelerator_Quant_fu_110_function_r assign process. ///
always @ (function_r or cond_reg_132 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_132 == ap_const_lv1_0))) begin
        grp_Accelerator_Quant_fu_110_function_r = function_r;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_Accelerator_Quant_fu_110_function_r = ap_const_lv8_1;
    end else begin
        grp_Accelerator_Quant_fu_110_function_r = 'bx;
    end
end

/// temp_ce0 assign process. ///
always @ (cond_reg_132 or grp_Accelerator_DCT_fu_67_Y_ce0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_132 == ap_const_lv1_0)))) begin
        temp_ce0 = grp_Accelerator_DCT_fu_67_Y_ce0;
    end else begin
        temp_ce0 = ap_const_logic_0;
    end
end

/// temp_we0 assign process. ///
always @ (cond_reg_132 or grp_Accelerator_DCT_fu_67_Y_we0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_132 == ap_const_lv1_0)))) begin
        temp_we0 = grp_Accelerator_DCT_fu_67_Y_we0;
    end else begin
        temp_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_46 or cond_fu_120_p2 or cond_reg_132 or grp_Accelerator_DCT_fu_67_ap_done or grp_Accelerator_Quant_fu_110_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~ap_sig_bdd_46 & ~(cond_fu_120_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else if ((~ap_sig_bdd_46 & (cond_fu_120_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_Accelerator_DCT_fu_67_ap_done)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(((cond_reg_132 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_Quant_fu_110_ap_done)) | ((ap_const_logic_0 == grp_Accelerator_DCT_fu_67_ap_done) & ~(cond_reg_132 == ap_const_lv1_0)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_logic_0 == grp_Accelerator_Quant_fu_110_ap_done)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Y_din = grp_Accelerator_Quant_fu_110_Y_din;

/// ap_sig_bdd_108 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_108 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_123 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_123 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_131 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_131 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_25 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_402 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_402 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_416 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_416 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_46 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_46 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign cond_fu_120_p2 = (function_r == ap_const_lv8_1? 1'b1: 1'b0);
assign grp_Accelerator_DCT_fu_67_X_dout = X_dout;
assign grp_Accelerator_DCT_fu_67_X_empty_n = X_empty_n;
assign grp_Accelerator_DCT_fu_67_Y_q0 = ap_const_lv32_0;
assign grp_Accelerator_DCT_fu_67_Y_q1 = ap_const_lv32_0;
assign grp_Accelerator_DCT_fu_67_ap_start = grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg;
assign grp_Accelerator_DCT_fu_67_function_r_ap_vld = ap_const_logic_1;
assign grp_Accelerator_Quant_fu_110_X_dout = X_dout;
assign grp_Accelerator_Quant_fu_110_X_empty_n = X_empty_n;
assign grp_Accelerator_Quant_fu_110_Y_full_n = Y_full_n;
assign grp_Accelerator_Quant_fu_110_ap_start = grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg;
assign temp_address0 = grp_Accelerator_DCT_fu_67_Y_address0;
assign temp_d0 = grp_Accelerator_DCT_fu_67_Y_d0;


endmodule //Accelerator_Block_proc

