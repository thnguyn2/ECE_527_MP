// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Accelerator_MAT_Multiply_Loop_LoadRow_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        B_dout,
        B_empty_n,
        B_read,
        B_cached_address0,
        B_cached_ce0,
        B_cached_we0,
        B_cached_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 10'b10;
parameter    ap_ST_pp0_stg1_fsm_2 = 10'b100;
parameter    ap_ST_pp0_stg2_fsm_3 = 10'b1000;
parameter    ap_ST_pp0_stg3_fsm_4 = 10'b10000;
parameter    ap_ST_pp0_stg4_fsm_5 = 10'b100000;
parameter    ap_ST_pp0_stg5_fsm_6 = 10'b1000000;
parameter    ap_ST_pp0_stg6_fsm_7 = 10'b10000000;
parameter    ap_ST_pp0_stg7_fsm_8 = 10'b100000000;
parameter    ap_ST_st11_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv25_0 = 25'b0000000000000000000000000;
parameter    ap_const_lv7_2 = 7'b10;
parameter    ap_const_lv7_3 = 7'b11;
parameter    ap_const_lv7_4 = 7'b100;
parameter    ap_const_lv7_5 = 7'b101;
parameter    ap_const_lv7_6 = 7'b110;
parameter    ap_const_lv7_7 = 7'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] B_dout;
input   B_empty_n;
output   B_read;
output  [5:0] B_cached_address0;
output   B_cached_ce0;
output   B_cached_we0;
output  [31:0] B_cached_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg B_read;
reg[5:0] B_cached_address0;
reg B_cached_ce0;
reg B_cached_we0;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_29;
reg   [3:0] i_0_i_i_reg_137;
wire   [0:0] exitcond4_i_i_fu_149_p2;
reg   [0:0] exitcond4_i_i_reg_299;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_56;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_64;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [3:0] i_fu_155_p2;
reg   [3:0] i_reg_303;
wire   [6:0] tmp_21_fu_161_p3;
reg   [6:0] tmp_21_reg_308;
reg    ap_sig_bdd_81;
reg    ap_sig_cseq_ST_pp0_stg7_fsm_8;
reg    ap_sig_bdd_91;
reg   [3:0] i_0_i_i_phi_fu_141_p4;
wire   [63:0] tmp_22_fu_169_p1;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_2;
reg    ap_sig_bdd_113;
wire   [63:0] tmp_24_fu_186_p1;
reg    ap_sig_cseq_ST_pp0_stg2_fsm_3;
reg    ap_sig_bdd_124;
wire   [63:0] tmp_25_fu_204_p1;
reg    ap_sig_cseq_ST_pp0_stg3_fsm_4;
reg    ap_sig_bdd_135;
wire   [63:0] tmp_27_fu_222_p1;
reg    ap_sig_cseq_ST_pp0_stg4_fsm_5;
reg    ap_sig_bdd_146;
wire   [63:0] tmp_29_fu_240_p1;
reg    ap_sig_cseq_ST_pp0_stg5_fsm_6;
reg    ap_sig_bdd_157;
wire   [63:0] tmp_31_fu_258_p1;
reg    ap_sig_cseq_ST_pp0_stg6_fsm_7;
reg    ap_sig_bdd_168;
wire   [63:0] tmp_33_fu_276_p1;
wire   [63:0] tmp_35_fu_294_p1;
wire   [6:0] tmp_23_fu_173_p2;
wire   [31:0] p_addr_fu_178_p3;
wire   [6:0] tmp_s_fu_191_p2;
wire   [31:0] p_addr9_fu_196_p3;
wire   [6:0] tmp_26_fu_209_p2;
wire   [31:0] p_addr1_fu_214_p3;
wire   [6:0] tmp_28_fu_227_p2;
wire   [31:0] p_addr2_fu_232_p3;
wire   [6:0] tmp_30_fu_245_p2;
wire   [31:0] p_addr3_fu_250_p3;
wire   [6:0] tmp_32_fu_263_p2;
wire   [31:0] p_addr4_fu_268_p3;
wire   [6:0] tmp_34_fu_281_p2;
wire   [31:0] p_addr5_fu_286_p3;
reg    ap_sig_cseq_ST_st11_fsm_9;
reg    ap_sig_bdd_312;
reg   [9:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_9)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_i_fu_149_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_81)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((exitcond4_i_i_reg_299 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_81) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & ~(exitcond4_i_i_reg_299 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        i_0_i_i_reg_137 <= i_reg_303;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_81)) begin
        i_0_i_i_reg_137 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        exitcond4_i_i_reg_299 <= exitcond4_i_i_fu_149_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        i_reg_303 <= i_fu_155_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond4_i_i_fu_149_p2 == ap_const_lv1_0))) begin
        tmp_21_reg_308[6 : 3] <= tmp_21_fu_161_p3[6 : 3];
    end
end

/// B_cached_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg7_fsm_8 or tmp_22_fu_169_p1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or tmp_24_fu_186_p1 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or tmp_25_fu_204_p1 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or tmp_27_fu_222_p1 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or tmp_29_fu_240_p1 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or tmp_31_fu_258_p1 or ap_sig_cseq_ST_pp0_stg6_fsm_7 or tmp_33_fu_276_p1 or tmp_35_fu_294_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        B_cached_address0 = tmp_35_fu_294_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8))) begin
        B_cached_address0 = tmp_33_fu_276_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7))) begin
        B_cached_address0 = tmp_31_fu_258_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6))) begin
        B_cached_address0 = tmp_29_fu_240_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        B_cached_address0 = tmp_27_fu_222_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        B_cached_address0 = tmp_25_fu_204_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        B_cached_address0 = tmp_24_fu_186_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        B_cached_address0 = tmp_22_fu_169_p1;
    end else begin
        B_cached_address0 = 'bx;
    end
end

/// B_cached_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_64 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg7_fsm_8 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or ap_sig_cseq_ST_pp0_stg6_fsm_7)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)))) begin
        B_cached_ce0 = ap_const_logic_1;
    end else begin
        B_cached_ce0 = ap_const_logic_0;
    end
end

/// B_cached_we0 assign process. ///
always @ (exitcond4_i_i_reg_299 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_64 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg7_fsm_8 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or ap_sig_cseq_ST_pp0_stg6_fsm_7)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)))) begin
        B_cached_we0 = ap_const_logic_1;
    end else begin
        B_cached_we0 = ap_const_logic_0;
    end
end

/// B_read assign process. ///
always @ (exitcond4_i_i_reg_299 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_64 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg7_fsm_8 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or ap_sig_cseq_ST_pp0_stg6_fsm_7)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)))) begin
        B_read = ap_const_logic_1;
    end else begin
        B_read = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st11_fsm_9)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_9))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st11_fsm_9)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_9)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_56)
begin
    if (ap_sig_bdd_56) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. ///
always @ (ap_sig_bdd_113)
begin
    if (ap_sig_bdd_113) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. ///
always @ (ap_sig_bdd_124)
begin
    if (ap_sig_bdd_124) begin
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. ///
always @ (ap_sig_bdd_135)
begin
    if (ap_sig_bdd_135) begin
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. ///
always @ (ap_sig_bdd_146)
begin
    if (ap_sig_bdd_146) begin
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg5_fsm_6 assign process. ///
always @ (ap_sig_bdd_157)
begin
    if (ap_sig_bdd_157) begin
        ap_sig_cseq_ST_pp0_stg5_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg5_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg6_fsm_7 assign process. ///
always @ (ap_sig_bdd_168)
begin
    if (ap_sig_bdd_168) begin
        ap_sig_cseq_ST_pp0_stg6_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg6_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg7_fsm_8 assign process. ///
always @ (ap_sig_bdd_91)
begin
    if (ap_sig_bdd_91) begin
        ap_sig_cseq_ST_pp0_stg7_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg7_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_9 assign process. ///
always @ (ap_sig_bdd_312)
begin
    if (ap_sig_bdd_312) begin
        ap_sig_cseq_ST_st11_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_29)
begin
    if (ap_sig_bdd_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// i_0_i_i_phi_fu_141_p4 assign process. ///
always @ (i_0_i_i_reg_137 or exitcond4_i_i_reg_299 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or i_reg_303)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_299 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        i_0_i_i_phi_fu_141_p4 = i_reg_303;
    end else begin
        i_0_i_i_phi_fu_141_p4 = i_0_i_i_reg_137;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond4_i_i_fu_149_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_64 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_81)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_81) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_i_fu_149_p2 == ap_const_lv1_0)))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_i_fu_149_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st11_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_pp0_stg1_fsm_2 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)) begin
                ap_NS_fsm = ap_ST_pp0_stg2_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            end
        end
        ap_ST_pp0_stg2_fsm_3 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)) begin
                ap_NS_fsm = ap_ST_pp0_stg3_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg2_fsm_3;
            end
        end
        ap_ST_pp0_stg3_fsm_4 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)) begin
                ap_NS_fsm = ap_ST_pp0_stg4_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg3_fsm_4;
            end
        end
        ap_ST_pp0_stg4_fsm_5 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)) begin
                ap_NS_fsm = ap_ST_pp0_stg5_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg4_fsm_5;
            end
        end
        ap_ST_pp0_stg5_fsm_6 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)) begin
                ap_NS_fsm = ap_ST_pp0_stg6_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg5_fsm_6;
            end
        end
        ap_ST_pp0_stg6_fsm_7 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)) begin
                ap_NS_fsm = ap_ST_pp0_stg7_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg6_fsm_7;
            end
        end
        ap_ST_pp0_stg7_fsm_8 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_64)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg7_fsm_8;
            end
        end
        ap_ST_st11_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_cached_d0 = B_dout;

/// ap_sig_bdd_113 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_113 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_124 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_124 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_135 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_135 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_146 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_146 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_157 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_157 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_168 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_168 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_29 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_29 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_312 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_312 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_56 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_56 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_64 assign process. ///
always @ (B_empty_n or exitcond4_i_i_reg_299)
begin
    ap_sig_bdd_64 = ((B_empty_n == ap_const_logic_0) & (exitcond4_i_i_reg_299 == ap_const_lv1_0));
end

/// ap_sig_bdd_81 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_81 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_91 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_91 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end
assign exitcond4_i_i_fu_149_p2 = (i_0_i_i_phi_fu_141_p4 == ap_const_lv4_8? 1'b1: 1'b0);
assign i_fu_155_p2 = (i_0_i_i_phi_fu_141_p4 + ap_const_lv4_1);
assign p_addr1_fu_214_p3 = {{ap_const_lv25_0}, {tmp_26_fu_209_p2}};
assign p_addr2_fu_232_p3 = {{ap_const_lv25_0}, {tmp_28_fu_227_p2}};
assign p_addr3_fu_250_p3 = {{ap_const_lv25_0}, {tmp_30_fu_245_p2}};
assign p_addr4_fu_268_p3 = {{ap_const_lv25_0}, {tmp_32_fu_263_p2}};
assign p_addr5_fu_286_p3 = {{ap_const_lv25_0}, {tmp_34_fu_281_p2}};
assign p_addr9_fu_196_p3 = {{ap_const_lv25_0}, {tmp_s_fu_191_p2}};
assign p_addr_fu_178_p3 = {{ap_const_lv25_0}, {tmp_23_fu_173_p2}};
assign tmp_21_fu_161_p3 = {{i_0_i_i_phi_fu_141_p4}, {ap_const_lv3_0}};
assign tmp_22_fu_169_p1 = tmp_21_reg_308;
assign tmp_23_fu_173_p2 = (tmp_21_reg_308 | ap_const_lv7_1);
assign tmp_24_fu_186_p1 = p_addr_fu_178_p3;
assign tmp_25_fu_204_p1 = p_addr9_fu_196_p3;
assign tmp_26_fu_209_p2 = (tmp_21_reg_308 | ap_const_lv7_3);
assign tmp_27_fu_222_p1 = p_addr1_fu_214_p3;
assign tmp_28_fu_227_p2 = (tmp_21_reg_308 | ap_const_lv7_4);
assign tmp_29_fu_240_p1 = p_addr2_fu_232_p3;
assign tmp_30_fu_245_p2 = (tmp_21_reg_308 | ap_const_lv7_5);
assign tmp_31_fu_258_p1 = p_addr3_fu_250_p3;
assign tmp_32_fu_263_p2 = (tmp_21_reg_308 | ap_const_lv7_6);
assign tmp_33_fu_276_p1 = p_addr4_fu_268_p3;
assign tmp_34_fu_281_p2 = (tmp_21_reg_308 | ap_const_lv7_7);
assign tmp_35_fu_294_p1 = p_addr5_fu_286_p3;
assign tmp_s_fu_191_p2 = (tmp_21_reg_308 | ap_const_lv7_2);
always @ (posedge ap_clk)
begin
    tmp_21_reg_308[2:0] <= 3'b000;
end



endmodule //Accelerator_MAT_Multiply_Loop_LoadRow_proc

