// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Accelerator_DCT_Block_proc (
        ap_clk,
        ap_rst,
        function_r,
        X_dout,
        X_empty_n,
        X_read,
        Y_address0,
        Y_ce0,
        Y_d0,
        Y_q0,
        Y_we0,
        Y_address1,
        Y_ce1,
        Y_d1,
        Y_q1,
        Y_we1,
        ap_start,
        ap_continue,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst;
input  [7:0] function_r;
input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
output  [5:0] Y_address0;
output   Y_ce0;
output  [31:0] Y_d0;
input  [31:0] Y_q0;
output   Y_we0;
output  [5:0] Y_address1;
output   Y_ce1;
output  [31:0] Y_d1;
input  [31:0] Y_q1;
output   Y_we1;
input   ap_start;
input   ap_continue;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire   [2:0] A_cached_row_i1_address0;
wire    A_cached_row_i1_ce0;
wire    A_cached_row_i1_we0;
wire   [31:0] A_cached_row_i1_d0;
wire   [31:0] A_cached_row_i1_q0;
wire   [2:0] A_cached_row_i1_address1;
wire    A_cached_row_i1_ce1;
wire   [31:0] A_cached_row_i1_q1;
wire   [2:0] A_cached_row_i_address0;
wire    A_cached_row_i_ce0;
wire    A_cached_row_i_we0;
wire   [31:0] A_cached_row_i_d0;
wire   [31:0] A_cached_row_i_q0;
wire   [2:0] A_cached_row_i_address1;
wire    A_cached_row_i_ce1;
wire   [31:0] A_cached_row_i_q1;
wire   [5:0] temp_address0;
wire    temp_ce0;
wire    temp_we0;
wire   [31:0] temp_d0;
wire   [31:0] temp_q0;
wire   [2:0] Tinv_0_address0;
wire    Tinv_0_ce0;
wire   [31:0] Tinv_0_q0;
wire   [2:0] Tinv_0_address1;
wire    Tinv_0_ce1;
wire   [31:0] Tinv_0_q1;
wire   [2:0] Tinv_1_address0;
wire    Tinv_1_ce0;
wire   [31:0] Tinv_1_q0;
wire   [2:0] Tinv_1_address1;
wire    Tinv_1_ce1;
wire   [31:0] Tinv_1_q1;
wire   [2:0] Tinv_2_address0;
wire    Tinv_2_ce0;
wire   [31:0] Tinv_2_q0;
wire   [2:0] Tinv_2_address1;
wire    Tinv_2_ce1;
wire   [31:0] Tinv_2_q1;
wire   [2:0] Tinv_3_address0;
wire    Tinv_3_ce0;
wire   [31:0] Tinv_3_q0;
wire   [2:0] Tinv_3_address1;
wire    Tinv_3_ce1;
wire   [31:0] Tinv_3_q1;
wire   [2:0] Tinv_4_address0;
wire    Tinv_4_ce0;
wire   [31:0] Tinv_4_q0;
wire   [2:0] Tinv_4_address1;
wire    Tinv_4_ce1;
wire   [31:0] Tinv_4_q1;
wire   [2:0] Tinv_5_address0;
wire    Tinv_5_ce0;
wire   [31:0] Tinv_5_q0;
wire   [2:0] Tinv_5_address1;
wire    Tinv_5_ce1;
wire   [31:0] Tinv_5_q1;
wire   [2:0] Tinv_6_address0;
wire    Tinv_6_ce0;
wire   [31:0] Tinv_6_q0;
wire   [2:0] Tinv_6_address1;
wire    Tinv_6_ce1;
wire   [31:0] Tinv_6_q1;
wire   [2:0] Tinv_7_address0;
wire    Tinv_7_ce0;
wire   [31:0] Tinv_7_q0;
wire   [2:0] Tinv_7_address1;
wire    Tinv_7_ce1;
wire   [31:0] Tinv_7_q1;
wire   [2:0] T_0_address0;
wire    T_0_ce0;
wire   [31:0] T_0_q0;
wire   [2:0] T_0_address1;
wire    T_0_ce1;
wire   [31:0] T_0_q1;
wire   [2:0] T_1_address0;
wire    T_1_ce0;
wire   [31:0] T_1_q0;
wire   [2:0] T_1_address1;
wire    T_1_ce1;
wire   [31:0] T_1_q1;
wire   [2:0] T_2_address0;
wire    T_2_ce0;
wire   [31:0] T_2_q0;
wire   [2:0] T_2_address1;
wire    T_2_ce1;
wire   [31:0] T_2_q1;
wire   [2:0] T_3_address0;
wire    T_3_ce0;
wire   [31:0] T_3_q0;
wire   [2:0] T_3_address1;
wire    T_3_ce1;
wire   [31:0] T_3_q1;
wire   [2:0] T_4_address0;
wire    T_4_ce0;
wire   [31:0] T_4_q0;
wire   [2:0] T_4_address1;
wire    T_4_ce1;
wire   [31:0] T_4_q1;
wire   [2:0] T_5_address0;
wire    T_5_ce0;
wire   [31:0] T_5_q0;
wire   [2:0] T_5_address1;
wire    T_5_ce1;
wire   [31:0] T_5_q1;
wire   [2:0] T_6_address0;
wire    T_6_ce0;
wire   [31:0] T_6_q0;
wire   [2:0] T_6_address1;
wire    T_6_ce1;
wire   [31:0] T_6_q1;
wire   [2:0] T_7_address0;
wire    T_7_ce0;
wire   [31:0] T_7_q0;
wire   [2:0] T_7_address1;
wire    T_7_ce1;
wire   [31:0] T_7_q1;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_0_address0;
wire    Accelerator_MAT_Multiply_U0_A_0_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_0_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_0_q0;
wire    Accelerator_MAT_Multiply_U0_A_0_we0;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_0_address1;
wire    Accelerator_MAT_Multiply_U0_A_0_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_0_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_0_q1;
wire    Accelerator_MAT_Multiply_U0_A_0_we1;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_1_address0;
wire    Accelerator_MAT_Multiply_U0_A_1_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_1_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_1_q0;
wire    Accelerator_MAT_Multiply_U0_A_1_we0;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_1_address1;
wire    Accelerator_MAT_Multiply_U0_A_1_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_1_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_1_q1;
wire    Accelerator_MAT_Multiply_U0_A_1_we1;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_2_address0;
wire    Accelerator_MAT_Multiply_U0_A_2_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_2_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_2_q0;
wire    Accelerator_MAT_Multiply_U0_A_2_we0;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_2_address1;
wire    Accelerator_MAT_Multiply_U0_A_2_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_2_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_2_q1;
wire    Accelerator_MAT_Multiply_U0_A_2_we1;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_3_address0;
wire    Accelerator_MAT_Multiply_U0_A_3_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_3_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_3_q0;
wire    Accelerator_MAT_Multiply_U0_A_3_we0;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_3_address1;
wire    Accelerator_MAT_Multiply_U0_A_3_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_3_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_3_q1;
wire    Accelerator_MAT_Multiply_U0_A_3_we1;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_4_address0;
wire    Accelerator_MAT_Multiply_U0_A_4_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_4_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_4_q0;
wire    Accelerator_MAT_Multiply_U0_A_4_we0;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_4_address1;
wire    Accelerator_MAT_Multiply_U0_A_4_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_4_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_4_q1;
wire    Accelerator_MAT_Multiply_U0_A_4_we1;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_5_address0;
wire    Accelerator_MAT_Multiply_U0_A_5_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_5_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_5_q0;
wire    Accelerator_MAT_Multiply_U0_A_5_we0;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_5_address1;
wire    Accelerator_MAT_Multiply_U0_A_5_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_5_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_5_q1;
wire    Accelerator_MAT_Multiply_U0_A_5_we1;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_6_address0;
wire    Accelerator_MAT_Multiply_U0_A_6_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_6_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_6_q0;
wire    Accelerator_MAT_Multiply_U0_A_6_we0;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_6_address1;
wire    Accelerator_MAT_Multiply_U0_A_6_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_6_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_6_q1;
wire    Accelerator_MAT_Multiply_U0_A_6_we1;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_7_address0;
wire    Accelerator_MAT_Multiply_U0_A_7_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_7_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_7_q0;
wire    Accelerator_MAT_Multiply_U0_A_7_we0;
wire   [2:0] Accelerator_MAT_Multiply_U0_A_7_address1;
wire    Accelerator_MAT_Multiply_U0_A_7_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_7_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_A_7_q1;
wire    Accelerator_MAT_Multiply_U0_A_7_we1;
wire   [31:0] Accelerator_MAT_Multiply_U0_B_dout;
wire    Accelerator_MAT_Multiply_U0_B_empty_n;
wire    Accelerator_MAT_Multiply_U0_B_read;
wire   [5:0] Accelerator_MAT_Multiply_U0_C_address0;
wire    Accelerator_MAT_Multiply_U0_C_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U0_C_d0;
wire   [31:0] Accelerator_MAT_Multiply_U0_C_q0;
wire    Accelerator_MAT_Multiply_U0_C_we0;
wire   [5:0] Accelerator_MAT_Multiply_U0_C_address1;
wire    Accelerator_MAT_Multiply_U0_C_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U0_C_d1;
wire   [31:0] Accelerator_MAT_Multiply_U0_C_q1;
wire    Accelerator_MAT_Multiply_U0_C_we1;
wire    Accelerator_MAT_Multiply_U0_A_0_pipo_status;
wire    Accelerator_MAT_Multiply_U0_A_0_pipo_update;
wire    Accelerator_MAT_Multiply_U0_A_1_pipo_status;
wire    Accelerator_MAT_Multiply_U0_A_1_pipo_update;
wire    Accelerator_MAT_Multiply_U0_A_2_pipo_status;
wire    Accelerator_MAT_Multiply_U0_A_2_pipo_update;
wire    Accelerator_MAT_Multiply_U0_A_3_pipo_status;
wire    Accelerator_MAT_Multiply_U0_A_3_pipo_update;
wire    Accelerator_MAT_Multiply_U0_A_4_pipo_status;
wire    Accelerator_MAT_Multiply_U0_A_4_pipo_update;
wire    Accelerator_MAT_Multiply_U0_A_5_pipo_status;
wire    Accelerator_MAT_Multiply_U0_A_5_pipo_update;
wire    Accelerator_MAT_Multiply_U0_A_6_pipo_status;
wire    Accelerator_MAT_Multiply_U0_A_6_pipo_update;
wire    Accelerator_MAT_Multiply_U0_A_7_pipo_status;
wire    Accelerator_MAT_Multiply_U0_A_7_pipo_update;
reg    Accelerator_MAT_Multiply_U0_ap_continue;
wire    Accelerator_MAT_Multiply_U0_ap_done;
wire    Accelerator_MAT_Multiply_U0_ap_start;
wire    Accelerator_MAT_Multiply_U0_ap_idle;
wire    Accelerator_MAT_Multiply_U0_ap_ready;
reg    ap_chn_write_Accelerator_MAT_Multiply_U0_T_7;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply_U0_T_2;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply_U0_T_6;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply_U0_T_5;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply_U0_T_4;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply_U0_T_3;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply_U0_T_0;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply_U0_T_1;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_start;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_continue;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_idle;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_ready;
wire   [5:0] Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_address0;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_address0;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_ce0;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_we0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_d0;
wire    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_i1;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_pipo_status;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_start;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
reg    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_idle;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_ready;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address1;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce1;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q1;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_q0;
wire   [5:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_ce0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_we0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_d0;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status;
reg    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status;
reg    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_0_address0;
wire    Accelerator_MAT_Multiply_U1_1_A_0_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_0_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_0_q0;
wire    Accelerator_MAT_Multiply_U1_1_A_0_we0;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_0_address1;
wire    Accelerator_MAT_Multiply_U1_1_A_0_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_0_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_0_q1;
wire    Accelerator_MAT_Multiply_U1_1_A_0_we1;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_1_address0;
wire    Accelerator_MAT_Multiply_U1_1_A_1_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_1_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_1_q0;
wire    Accelerator_MAT_Multiply_U1_1_A_1_we0;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_1_address1;
wire    Accelerator_MAT_Multiply_U1_1_A_1_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_1_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_1_q1;
wire    Accelerator_MAT_Multiply_U1_1_A_1_we1;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_2_address0;
wire    Accelerator_MAT_Multiply_U1_1_A_2_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_2_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_2_q0;
wire    Accelerator_MAT_Multiply_U1_1_A_2_we0;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_2_address1;
wire    Accelerator_MAT_Multiply_U1_1_A_2_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_2_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_2_q1;
wire    Accelerator_MAT_Multiply_U1_1_A_2_we1;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_3_address0;
wire    Accelerator_MAT_Multiply_U1_1_A_3_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_3_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_3_q0;
wire    Accelerator_MAT_Multiply_U1_1_A_3_we0;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_3_address1;
wire    Accelerator_MAT_Multiply_U1_1_A_3_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_3_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_3_q1;
wire    Accelerator_MAT_Multiply_U1_1_A_3_we1;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_4_address0;
wire    Accelerator_MAT_Multiply_U1_1_A_4_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_4_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_4_q0;
wire    Accelerator_MAT_Multiply_U1_1_A_4_we0;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_4_address1;
wire    Accelerator_MAT_Multiply_U1_1_A_4_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_4_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_4_q1;
wire    Accelerator_MAT_Multiply_U1_1_A_4_we1;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_5_address0;
wire    Accelerator_MAT_Multiply_U1_1_A_5_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_5_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_5_q0;
wire    Accelerator_MAT_Multiply_U1_1_A_5_we0;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_5_address1;
wire    Accelerator_MAT_Multiply_U1_1_A_5_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_5_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_5_q1;
wire    Accelerator_MAT_Multiply_U1_1_A_5_we1;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_6_address0;
wire    Accelerator_MAT_Multiply_U1_1_A_6_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_6_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_6_q0;
wire    Accelerator_MAT_Multiply_U1_1_A_6_we0;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_6_address1;
wire    Accelerator_MAT_Multiply_U1_1_A_6_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_6_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_6_q1;
wire    Accelerator_MAT_Multiply_U1_1_A_6_we1;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_7_address0;
wire    Accelerator_MAT_Multiply_U1_1_A_7_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_7_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_7_q0;
wire    Accelerator_MAT_Multiply_U1_1_A_7_we0;
wire   [2:0] Accelerator_MAT_Multiply_U1_1_A_7_address1;
wire    Accelerator_MAT_Multiply_U1_1_A_7_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_7_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_A_7_q1;
wire    Accelerator_MAT_Multiply_U1_1_A_7_we1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_B_dout;
wire    Accelerator_MAT_Multiply_U1_1_B_empty_n;
wire    Accelerator_MAT_Multiply_U1_1_B_read;
wire   [5:0] Accelerator_MAT_Multiply_U1_1_C_address0;
wire    Accelerator_MAT_Multiply_U1_1_C_ce0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_C_d0;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_C_q0;
wire    Accelerator_MAT_Multiply_U1_1_C_we0;
wire   [5:0] Accelerator_MAT_Multiply_U1_1_C_address1;
wire    Accelerator_MAT_Multiply_U1_1_C_ce1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_C_d1;
wire   [31:0] Accelerator_MAT_Multiply_U1_1_C_q1;
wire    Accelerator_MAT_Multiply_U1_1_C_we1;
wire    Accelerator_MAT_Multiply_U1_1_A_0_pipo_status;
wire    Accelerator_MAT_Multiply_U1_1_A_0_pipo_update;
wire    Accelerator_MAT_Multiply_U1_1_A_1_pipo_status;
wire    Accelerator_MAT_Multiply_U1_1_A_1_pipo_update;
wire    Accelerator_MAT_Multiply_U1_1_A_2_pipo_status;
wire    Accelerator_MAT_Multiply_U1_1_A_2_pipo_update;
wire    Accelerator_MAT_Multiply_U1_1_A_3_pipo_status;
wire    Accelerator_MAT_Multiply_U1_1_A_3_pipo_update;
wire    Accelerator_MAT_Multiply_U1_1_A_4_pipo_status;
wire    Accelerator_MAT_Multiply_U1_1_A_4_pipo_update;
wire    Accelerator_MAT_Multiply_U1_1_A_5_pipo_status;
wire    Accelerator_MAT_Multiply_U1_1_A_5_pipo_update;
wire    Accelerator_MAT_Multiply_U1_1_A_6_pipo_status;
wire    Accelerator_MAT_Multiply_U1_1_A_6_pipo_update;
wire    Accelerator_MAT_Multiply_U1_1_A_7_pipo_status;
wire    Accelerator_MAT_Multiply_U1_1_A_7_pipo_update;
wire    Accelerator_MAT_Multiply_U1_1_ap_continue;
wire    Accelerator_MAT_Multiply_U1_1_ap_done;
wire    Accelerator_MAT_Multiply_U1_1_ap_start;
wire    Accelerator_MAT_Multiply_U1_1_ap_idle;
wire    Accelerator_MAT_Multiply_U1_1_ap_ready;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_start;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_continue;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_idle;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_ready;
wire   [5:0] Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_address0;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_address0;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_ce0;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_we0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_d0;
wire    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_i;
wire    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_pipo_status;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_start;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_done;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_continue;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_idle;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address1;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce1;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q1;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_q0;
wire   [2:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_ce0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_q0;
wire   [5:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_address0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_ce0;
wire    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_we0;
wire   [31:0] Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_d0;
wire    T_0_i_full_n;
wire    T_0_i_write;
wire    T_0_t_empty_n;
wire    T_0_t_read;
wire   [2:0] T_0_i_address0;
wire    T_0_i_ce0;
wire   [31:0] T_0_i_d0;
wire   [31:0] T_0_i_q0;
wire    T_0_i_we0;
wire   [2:0] T_0_i_address1;
wire    T_0_i_ce1;
wire   [31:0] T_0_i_d1;
wire   [31:0] T_0_i_q1;
wire    T_0_i_we1;
wire   [2:0] T_0_t_address0;
wire    T_0_t_ce0;
wire   [31:0] T_0_t_d0;
wire   [31:0] T_0_t_q0;
wire    T_0_t_we0;
wire    T_1_i_full_n;
wire    T_1_i_write;
wire    T_1_t_empty_n;
wire    T_1_t_read;
wire   [2:0] T_1_i_address0;
wire    T_1_i_ce0;
wire   [31:0] T_1_i_d0;
wire   [31:0] T_1_i_q0;
wire    T_1_i_we0;
wire   [2:0] T_1_i_address1;
wire    T_1_i_ce1;
wire   [31:0] T_1_i_d1;
wire   [31:0] T_1_i_q1;
wire    T_1_i_we1;
wire   [2:0] T_1_t_address0;
wire    T_1_t_ce0;
wire   [31:0] T_1_t_d0;
wire   [31:0] T_1_t_q0;
wire    T_1_t_we0;
wire    T_2_i_full_n;
wire    T_2_i_write;
wire    T_2_t_empty_n;
wire    T_2_t_read;
wire   [2:0] T_2_i_address0;
wire    T_2_i_ce0;
wire   [31:0] T_2_i_d0;
wire   [31:0] T_2_i_q0;
wire    T_2_i_we0;
wire   [2:0] T_2_i_address1;
wire    T_2_i_ce1;
wire   [31:0] T_2_i_d1;
wire   [31:0] T_2_i_q1;
wire    T_2_i_we1;
wire   [2:0] T_2_t_address0;
wire    T_2_t_ce0;
wire   [31:0] T_2_t_d0;
wire   [31:0] T_2_t_q0;
wire    T_2_t_we0;
wire    T_3_i_full_n;
wire    T_3_i_write;
wire    T_3_t_empty_n;
wire    T_3_t_read;
wire   [2:0] T_3_i_address0;
wire    T_3_i_ce0;
wire   [31:0] T_3_i_d0;
wire   [31:0] T_3_i_q0;
wire    T_3_i_we0;
wire   [2:0] T_3_i_address1;
wire    T_3_i_ce1;
wire   [31:0] T_3_i_d1;
wire   [31:0] T_3_i_q1;
wire    T_3_i_we1;
wire   [2:0] T_3_t_address0;
wire    T_3_t_ce0;
wire   [31:0] T_3_t_d0;
wire   [31:0] T_3_t_q0;
wire    T_3_t_we0;
wire    T_4_i_full_n;
wire    T_4_i_write;
wire    T_4_t_empty_n;
wire    T_4_t_read;
wire   [2:0] T_4_i_address0;
wire    T_4_i_ce0;
wire   [31:0] T_4_i_d0;
wire   [31:0] T_4_i_q0;
wire    T_4_i_we0;
wire   [2:0] T_4_i_address1;
wire    T_4_i_ce1;
wire   [31:0] T_4_i_d1;
wire   [31:0] T_4_i_q1;
wire    T_4_i_we1;
wire   [2:0] T_4_t_address0;
wire    T_4_t_ce0;
wire   [31:0] T_4_t_d0;
wire   [31:0] T_4_t_q0;
wire    T_4_t_we0;
wire    T_5_i_full_n;
wire    T_5_i_write;
wire    T_5_t_empty_n;
wire    T_5_t_read;
wire   [2:0] T_5_i_address0;
wire    T_5_i_ce0;
wire   [31:0] T_5_i_d0;
wire   [31:0] T_5_i_q0;
wire    T_5_i_we0;
wire   [2:0] T_5_i_address1;
wire    T_5_i_ce1;
wire   [31:0] T_5_i_d1;
wire   [31:0] T_5_i_q1;
wire    T_5_i_we1;
wire   [2:0] T_5_t_address0;
wire    T_5_t_ce0;
wire   [31:0] T_5_t_d0;
wire   [31:0] T_5_t_q0;
wire    T_5_t_we0;
wire    T_6_i_full_n;
wire    T_6_i_write;
wire    T_6_t_empty_n;
wire    T_6_t_read;
wire   [2:0] T_6_i_address0;
wire    T_6_i_ce0;
wire   [31:0] T_6_i_d0;
wire   [31:0] T_6_i_q0;
wire    T_6_i_we0;
wire   [2:0] T_6_i_address1;
wire    T_6_i_ce1;
wire   [31:0] T_6_i_d1;
wire   [31:0] T_6_i_q1;
wire    T_6_i_we1;
wire   [2:0] T_6_t_address0;
wire    T_6_t_ce0;
wire   [31:0] T_6_t_d0;
wire   [31:0] T_6_t_q0;
wire    T_6_t_we0;
wire    T_7_i_full_n;
wire    T_7_i_write;
wire    T_7_t_empty_n;
wire    T_7_t_read;
wire   [2:0] T_7_i_address0;
wire    T_7_i_ce0;
wire   [31:0] T_7_i_d0;
wire   [31:0] T_7_i_q0;
wire    T_7_i_we0;
wire   [2:0] T_7_i_address1;
wire    T_7_i_ce1;
wire   [31:0] T_7_i_d1;
wire   [31:0] T_7_i_q1;
wire    T_7_i_we1;
wire   [2:0] T_7_t_address0;
wire    T_7_t_ce0;
wire   [31:0] T_7_t_d0;
wire   [31:0] T_7_t_q0;
wire    T_7_t_we0;
wire    A_cached_row_i1_i_full_n;
wire    A_cached_row_i1_i_write;
wire    A_cached_row_i1_t_empty_n;
wire    A_cached_row_i1_t_read;
wire   [2:0] A_cached_row_i1_i_address0;
wire    A_cached_row_i1_i_ce0;
wire   [31:0] A_cached_row_i1_i_d0;
wire    A_cached_row_i1_i_we0;
wire   [2:0] A_cached_row_i1_t_address0;
wire    A_cached_row_i1_t_ce0;
wire   [31:0] A_cached_row_i1_t_d0;
wire   [31:0] A_cached_row_i1_t_q0;
wire    A_cached_row_i1_t_we0;
wire   [2:0] A_cached_row_i1_t_address1;
wire    A_cached_row_i1_t_ce1;
wire   [31:0] A_cached_row_i1_t_d1;
wire   [31:0] A_cached_row_i1_t_q1;
wire    A_cached_row_i1_t_we1;
wire    Tinv_0_i_full_n;
wire    Tinv_0_i_write;
wire    Tinv_0_t_empty_n;
wire    Tinv_0_t_read;
wire   [2:0] Tinv_0_i_address0;
wire    Tinv_0_i_ce0;
wire   [31:0] Tinv_0_i_d0;
wire   [31:0] Tinv_0_i_q0;
wire    Tinv_0_i_we0;
wire   [2:0] Tinv_0_t_address0;
wire    Tinv_0_t_ce0;
wire   [31:0] Tinv_0_t_d0;
wire   [31:0] Tinv_0_t_q0;
wire    Tinv_0_t_we0;
wire   [2:0] Tinv_0_t_address1;
wire    Tinv_0_t_ce1;
wire   [31:0] Tinv_0_t_d1;
wire   [31:0] Tinv_0_t_q1;
wire    Tinv_0_t_we1;
wire    Tinv_1_i_full_n;
wire    Tinv_1_i_write;
wire    Tinv_1_t_empty_n;
wire    Tinv_1_t_read;
wire   [2:0] Tinv_1_i_address0;
wire    Tinv_1_i_ce0;
wire   [31:0] Tinv_1_i_d0;
wire   [31:0] Tinv_1_i_q0;
wire    Tinv_1_i_we0;
wire   [2:0] Tinv_1_t_address0;
wire    Tinv_1_t_ce0;
wire   [31:0] Tinv_1_t_d0;
wire   [31:0] Tinv_1_t_q0;
wire    Tinv_1_t_we0;
wire   [2:0] Tinv_1_t_address1;
wire    Tinv_1_t_ce1;
wire   [31:0] Tinv_1_t_d1;
wire   [31:0] Tinv_1_t_q1;
wire    Tinv_1_t_we1;
wire    Tinv_2_i_full_n;
wire    Tinv_2_i_write;
wire    Tinv_2_t_empty_n;
wire    Tinv_2_t_read;
wire   [2:0] Tinv_2_i_address0;
wire    Tinv_2_i_ce0;
wire   [31:0] Tinv_2_i_d0;
wire   [31:0] Tinv_2_i_q0;
wire    Tinv_2_i_we0;
wire   [2:0] Tinv_2_t_address0;
wire    Tinv_2_t_ce0;
wire   [31:0] Tinv_2_t_d0;
wire   [31:0] Tinv_2_t_q0;
wire    Tinv_2_t_we0;
wire   [2:0] Tinv_2_t_address1;
wire    Tinv_2_t_ce1;
wire   [31:0] Tinv_2_t_d1;
wire   [31:0] Tinv_2_t_q1;
wire    Tinv_2_t_we1;
wire    Tinv_3_i_full_n;
wire    Tinv_3_i_write;
wire    Tinv_3_t_empty_n;
wire    Tinv_3_t_read;
wire   [2:0] Tinv_3_i_address0;
wire    Tinv_3_i_ce0;
wire   [31:0] Tinv_3_i_d0;
wire   [31:0] Tinv_3_i_q0;
wire    Tinv_3_i_we0;
wire   [2:0] Tinv_3_t_address0;
wire    Tinv_3_t_ce0;
wire   [31:0] Tinv_3_t_d0;
wire   [31:0] Tinv_3_t_q0;
wire    Tinv_3_t_we0;
wire   [2:0] Tinv_3_t_address1;
wire    Tinv_3_t_ce1;
wire   [31:0] Tinv_3_t_d1;
wire   [31:0] Tinv_3_t_q1;
wire    Tinv_3_t_we1;
wire    Tinv_4_i_full_n;
wire    Tinv_4_i_write;
wire    Tinv_4_t_empty_n;
wire    Tinv_4_t_read;
wire   [2:0] Tinv_4_i_address0;
wire    Tinv_4_i_ce0;
wire   [31:0] Tinv_4_i_d0;
wire   [31:0] Tinv_4_i_q0;
wire    Tinv_4_i_we0;
wire   [2:0] Tinv_4_t_address0;
wire    Tinv_4_t_ce0;
wire   [31:0] Tinv_4_t_d0;
wire   [31:0] Tinv_4_t_q0;
wire    Tinv_4_t_we0;
wire   [2:0] Tinv_4_t_address1;
wire    Tinv_4_t_ce1;
wire   [31:0] Tinv_4_t_d1;
wire   [31:0] Tinv_4_t_q1;
wire    Tinv_4_t_we1;
wire    Tinv_5_i_full_n;
wire    Tinv_5_i_write;
wire    Tinv_5_t_empty_n;
wire    Tinv_5_t_read;
wire   [2:0] Tinv_5_i_address0;
wire    Tinv_5_i_ce0;
wire   [31:0] Tinv_5_i_d0;
wire   [31:0] Tinv_5_i_q0;
wire    Tinv_5_i_we0;
wire   [2:0] Tinv_5_t_address0;
wire    Tinv_5_t_ce0;
wire   [31:0] Tinv_5_t_d0;
wire   [31:0] Tinv_5_t_q0;
wire    Tinv_5_t_we0;
wire   [2:0] Tinv_5_t_address1;
wire    Tinv_5_t_ce1;
wire   [31:0] Tinv_5_t_d1;
wire   [31:0] Tinv_5_t_q1;
wire    Tinv_5_t_we1;
wire    Tinv_6_i_full_n;
wire    Tinv_6_i_write;
wire    Tinv_6_t_empty_n;
wire    Tinv_6_t_read;
wire   [2:0] Tinv_6_i_address0;
wire    Tinv_6_i_ce0;
wire   [31:0] Tinv_6_i_d0;
wire   [31:0] Tinv_6_i_q0;
wire    Tinv_6_i_we0;
wire   [2:0] Tinv_6_t_address0;
wire    Tinv_6_t_ce0;
wire   [31:0] Tinv_6_t_d0;
wire   [31:0] Tinv_6_t_q0;
wire    Tinv_6_t_we0;
wire   [2:0] Tinv_6_t_address1;
wire    Tinv_6_t_ce1;
wire   [31:0] Tinv_6_t_d1;
wire   [31:0] Tinv_6_t_q1;
wire    Tinv_6_t_we1;
wire    Tinv_7_i_full_n;
wire    Tinv_7_i_write;
wire    Tinv_7_t_empty_n;
wire    Tinv_7_t_read;
wire   [2:0] Tinv_7_i_address0;
wire    Tinv_7_i_ce0;
wire   [31:0] Tinv_7_i_d0;
wire   [31:0] Tinv_7_i_q0;
wire    Tinv_7_i_we0;
wire   [2:0] Tinv_7_t_address0;
wire    Tinv_7_t_ce0;
wire   [31:0] Tinv_7_t_d0;
wire   [31:0] Tinv_7_t_q0;
wire    Tinv_7_t_we0;
wire   [2:0] Tinv_7_t_address1;
wire    Tinv_7_t_ce1;
wire   [31:0] Tinv_7_t_d1;
wire   [31:0] Tinv_7_t_q1;
wire    Tinv_7_t_we1;
wire    Y_i_full_n;
wire    Y_i_write;
wire    Y_t_empty_n;
wire    Y_t_read;
wire   [5:0] Y_i_address0;
wire    Y_i_ce0;
wire   [31:0] Y_i_d0;
wire    Y_i_we0;
wire   [5:0] Y_t_address0;
wire    Y_t_ce0;
wire   [31:0] Y_t_d0;
wire    Y_t_we0;
wire    A_cached_row_i_i_full_n;
wire    A_cached_row_i_i_write;
wire    A_cached_row_i_t_empty_n;
wire    A_cached_row_i_t_read;
wire   [2:0] A_cached_row_i_i_address0;
wire    A_cached_row_i_i_ce0;
wire   [31:0] A_cached_row_i_i_d0;
wire    A_cached_row_i_i_we0;
wire   [2:0] A_cached_row_i_t_address0;
wire    A_cached_row_i_t_ce0;
wire   [31:0] A_cached_row_i_t_d0;
wire   [31:0] A_cached_row_i_t_q0;
wire    A_cached_row_i_t_we0;
wire   [2:0] A_cached_row_i_t_address1;
wire    A_cached_row_i_t_ce1;
wire   [31:0] A_cached_row_i_t_d1;
wire   [31:0] A_cached_row_i_t_q1;
wire    A_cached_row_i_t_we1;
reg    ap_reg_procdone_Accelerator_MAT_Multiply_U0 = 1'b0;
wire    ap_sig_hs_done;
reg    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 = 1'b0;
reg    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 = 1'b0;
reg    ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 = 1'b0;
reg    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 = 1'b0;
reg    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 = 1'b0;
reg    ap_CS;
reg    ap_sig_top_allready;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready;
reg    ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start;
reg    ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready = 1'b0;
reg    ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready;
reg    ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start;
wire    ap_sig_hs_continue;


Accelerator_DCT_Block_proc_A_cached_row_i1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
A_cached_row_i1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( A_cached_row_i1_address0 ),
    .ce0( A_cached_row_i1_ce0 ),
    .we0( A_cached_row_i1_we0 ),
    .d0( A_cached_row_i1_d0 ),
    .q0( A_cached_row_i1_q0 ),
    .address1( A_cached_row_i1_address1 ),
    .ce1( A_cached_row_i1_ce1 ),
    .q1( A_cached_row_i1_q1 ),
    .i_full_n( A_cached_row_i1_i_full_n ),
    .i_write( A_cached_row_i1_i_write ),
    .t_empty_n( A_cached_row_i1_t_empty_n ),
    .t_read( A_cached_row_i1_t_read )
);

Accelerator_DCT_Block_proc_A_cached_row_i1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
A_cached_row_i_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( A_cached_row_i_address0 ),
    .ce0( A_cached_row_i_ce0 ),
    .we0( A_cached_row_i_we0 ),
    .d0( A_cached_row_i_d0 ),
    .q0( A_cached_row_i_q0 ),
    .address1( A_cached_row_i_address1 ),
    .ce1( A_cached_row_i_ce1 ),
    .q1( A_cached_row_i_q1 ),
    .i_full_n( A_cached_row_i_i_full_n ),
    .i_write( A_cached_row_i_i_write ),
    .t_empty_n( A_cached_row_i_t_empty_n ),
    .t_read( A_cached_row_i_t_read )
);

Accelerator_DCT_Block_proc_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( temp_address0 ),
    .ce0( temp_ce0 ),
    .we0( temp_we0 ),
    .d0( temp_d0 ),
    .q0( temp_q0 )
);

Accelerator_DCT_Block_proc_Tinv_0 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Tinv_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_0_address0 ),
    .ce0( Tinv_0_ce0 ),
    .q0( Tinv_0_q0 ),
    .address1( Tinv_0_address1 ),
    .ce1( Tinv_0_ce1 ),
    .q1( Tinv_0_q1 ),
    .i_full_n( Tinv_0_i_full_n ),
    .i_write( Tinv_0_i_write ),
    .t_empty_n( Tinv_0_t_empty_n ),
    .t_read( Tinv_0_t_read )
);

Accelerator_DCT_Block_proc_Tinv_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Tinv_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_1_address0 ),
    .ce0( Tinv_1_ce0 ),
    .q0( Tinv_1_q0 ),
    .address1( Tinv_1_address1 ),
    .ce1( Tinv_1_ce1 ),
    .q1( Tinv_1_q1 ),
    .i_full_n( Tinv_1_i_full_n ),
    .i_write( Tinv_1_i_write ),
    .t_empty_n( Tinv_1_t_empty_n ),
    .t_read( Tinv_1_t_read )
);

Accelerator_DCT_Block_proc_Tinv_2 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Tinv_2_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_2_address0 ),
    .ce0( Tinv_2_ce0 ),
    .q0( Tinv_2_q0 ),
    .address1( Tinv_2_address1 ),
    .ce1( Tinv_2_ce1 ),
    .q1( Tinv_2_q1 ),
    .i_full_n( Tinv_2_i_full_n ),
    .i_write( Tinv_2_i_write ),
    .t_empty_n( Tinv_2_t_empty_n ),
    .t_read( Tinv_2_t_read )
);

Accelerator_DCT_Block_proc_Tinv_3 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Tinv_3_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_3_address0 ),
    .ce0( Tinv_3_ce0 ),
    .q0( Tinv_3_q0 ),
    .address1( Tinv_3_address1 ),
    .ce1( Tinv_3_ce1 ),
    .q1( Tinv_3_q1 ),
    .i_full_n( Tinv_3_i_full_n ),
    .i_write( Tinv_3_i_write ),
    .t_empty_n( Tinv_3_t_empty_n ),
    .t_read( Tinv_3_t_read )
);

Accelerator_DCT_Block_proc_Tinv_4 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Tinv_4_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_4_address0 ),
    .ce0( Tinv_4_ce0 ),
    .q0( Tinv_4_q0 ),
    .address1( Tinv_4_address1 ),
    .ce1( Tinv_4_ce1 ),
    .q1( Tinv_4_q1 ),
    .i_full_n( Tinv_4_i_full_n ),
    .i_write( Tinv_4_i_write ),
    .t_empty_n( Tinv_4_t_empty_n ),
    .t_read( Tinv_4_t_read )
);

Accelerator_DCT_Block_proc_Tinv_5 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Tinv_5_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_5_address0 ),
    .ce0( Tinv_5_ce0 ),
    .q0( Tinv_5_q0 ),
    .address1( Tinv_5_address1 ),
    .ce1( Tinv_5_ce1 ),
    .q1( Tinv_5_q1 ),
    .i_full_n( Tinv_5_i_full_n ),
    .i_write( Tinv_5_i_write ),
    .t_empty_n( Tinv_5_t_empty_n ),
    .t_read( Tinv_5_t_read )
);

Accelerator_DCT_Block_proc_Tinv_6 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Tinv_6_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_6_address0 ),
    .ce0( Tinv_6_ce0 ),
    .q0( Tinv_6_q0 ),
    .address1( Tinv_6_address1 ),
    .ce1( Tinv_6_ce1 ),
    .q1( Tinv_6_q1 ),
    .i_full_n( Tinv_6_i_full_n ),
    .i_write( Tinv_6_i_write ),
    .t_empty_n( Tinv_6_t_empty_n ),
    .t_read( Tinv_6_t_read )
);

Accelerator_DCT_Block_proc_Tinv_7 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Tinv_7_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_7_address0 ),
    .ce0( Tinv_7_ce0 ),
    .q0( Tinv_7_q0 ),
    .address1( Tinv_7_address1 ),
    .ce1( Tinv_7_ce1 ),
    .q1( Tinv_7_q1 ),
    .i_full_n( Tinv_7_i_full_n ),
    .i_write( Tinv_7_i_write ),
    .t_empty_n( Tinv_7_t_empty_n ),
    .t_read( Tinv_7_t_read )
);

Accelerator_DCT_Block_proc_T_0 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
T_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_0_address0 ),
    .ce0( T_0_ce0 ),
    .q0( T_0_q0 ),
    .address1( T_0_address1 ),
    .ce1( T_0_ce1 ),
    .q1( T_0_q1 ),
    .i_full_n( T_0_i_full_n ),
    .i_write( T_0_i_write ),
    .t_empty_n( T_0_t_empty_n ),
    .t_read( T_0_t_read )
);

Accelerator_DCT_Block_proc_T_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
T_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_1_address0 ),
    .ce0( T_1_ce0 ),
    .q0( T_1_q0 ),
    .address1( T_1_address1 ),
    .ce1( T_1_ce1 ),
    .q1( T_1_q1 ),
    .i_full_n( T_1_i_full_n ),
    .i_write( T_1_i_write ),
    .t_empty_n( T_1_t_empty_n ),
    .t_read( T_1_t_read )
);

Accelerator_DCT_Block_proc_T_2 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
T_2_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_2_address0 ),
    .ce0( T_2_ce0 ),
    .q0( T_2_q0 ),
    .address1( T_2_address1 ),
    .ce1( T_2_ce1 ),
    .q1( T_2_q1 ),
    .i_full_n( T_2_i_full_n ),
    .i_write( T_2_i_write ),
    .t_empty_n( T_2_t_empty_n ),
    .t_read( T_2_t_read )
);

Accelerator_DCT_Block_proc_T_3 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
T_3_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_3_address0 ),
    .ce0( T_3_ce0 ),
    .q0( T_3_q0 ),
    .address1( T_3_address1 ),
    .ce1( T_3_ce1 ),
    .q1( T_3_q1 ),
    .i_full_n( T_3_i_full_n ),
    .i_write( T_3_i_write ),
    .t_empty_n( T_3_t_empty_n ),
    .t_read( T_3_t_read )
);

Accelerator_DCT_Block_proc_T_4 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
T_4_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_4_address0 ),
    .ce0( T_4_ce0 ),
    .q0( T_4_q0 ),
    .address1( T_4_address1 ),
    .ce1( T_4_ce1 ),
    .q1( T_4_q1 ),
    .i_full_n( T_4_i_full_n ),
    .i_write( T_4_i_write ),
    .t_empty_n( T_4_t_empty_n ),
    .t_read( T_4_t_read )
);

Accelerator_DCT_Block_proc_T_5 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
T_5_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_5_address0 ),
    .ce0( T_5_ce0 ),
    .q0( T_5_q0 ),
    .address1( T_5_address1 ),
    .ce1( T_5_ce1 ),
    .q1( T_5_q1 ),
    .i_full_n( T_5_i_full_n ),
    .i_write( T_5_i_write ),
    .t_empty_n( T_5_t_empty_n ),
    .t_read( T_5_t_read )
);

Accelerator_DCT_Block_proc_T_6 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
T_6_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_6_address0 ),
    .ce0( T_6_ce0 ),
    .q0( T_6_q0 ),
    .address1( T_6_address1 ),
    .ce1( T_6_ce1 ),
    .q1( T_6_q1 ),
    .i_full_n( T_6_i_full_n ),
    .i_write( T_6_i_write ),
    .t_empty_n( T_6_t_empty_n ),
    .t_read( T_6_t_read )
);

Accelerator_DCT_Block_proc_T_7 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
T_7_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_7_address0 ),
    .ce0( T_7_ce0 ),
    .q0( T_7_q0 ),
    .address1( T_7_address1 ),
    .ce1( T_7_ce1 ),
    .q1( T_7_q1 ),
    .i_full_n( T_7_i_full_n ),
    .i_write( T_7_i_write ),
    .t_empty_n( T_7_t_empty_n ),
    .t_read( T_7_t_read )
);

Accelerator_MAT_Multiply Accelerator_MAT_Multiply_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .A_0_address0( Accelerator_MAT_Multiply_U0_A_0_address0 ),
    .A_0_ce0( Accelerator_MAT_Multiply_U0_A_0_ce0 ),
    .A_0_d0( Accelerator_MAT_Multiply_U0_A_0_d0 ),
    .A_0_q0( Accelerator_MAT_Multiply_U0_A_0_q0 ),
    .A_0_we0( Accelerator_MAT_Multiply_U0_A_0_we0 ),
    .A_0_address1( Accelerator_MAT_Multiply_U0_A_0_address1 ),
    .A_0_ce1( Accelerator_MAT_Multiply_U0_A_0_ce1 ),
    .A_0_d1( Accelerator_MAT_Multiply_U0_A_0_d1 ),
    .A_0_q1( Accelerator_MAT_Multiply_U0_A_0_q1 ),
    .A_0_we1( Accelerator_MAT_Multiply_U0_A_0_we1 ),
    .A_1_address0( Accelerator_MAT_Multiply_U0_A_1_address0 ),
    .A_1_ce0( Accelerator_MAT_Multiply_U0_A_1_ce0 ),
    .A_1_d0( Accelerator_MAT_Multiply_U0_A_1_d0 ),
    .A_1_q0( Accelerator_MAT_Multiply_U0_A_1_q0 ),
    .A_1_we0( Accelerator_MAT_Multiply_U0_A_1_we0 ),
    .A_1_address1( Accelerator_MAT_Multiply_U0_A_1_address1 ),
    .A_1_ce1( Accelerator_MAT_Multiply_U0_A_1_ce1 ),
    .A_1_d1( Accelerator_MAT_Multiply_U0_A_1_d1 ),
    .A_1_q1( Accelerator_MAT_Multiply_U0_A_1_q1 ),
    .A_1_we1( Accelerator_MAT_Multiply_U0_A_1_we1 ),
    .A_2_address0( Accelerator_MAT_Multiply_U0_A_2_address0 ),
    .A_2_ce0( Accelerator_MAT_Multiply_U0_A_2_ce0 ),
    .A_2_d0( Accelerator_MAT_Multiply_U0_A_2_d0 ),
    .A_2_q0( Accelerator_MAT_Multiply_U0_A_2_q0 ),
    .A_2_we0( Accelerator_MAT_Multiply_U0_A_2_we0 ),
    .A_2_address1( Accelerator_MAT_Multiply_U0_A_2_address1 ),
    .A_2_ce1( Accelerator_MAT_Multiply_U0_A_2_ce1 ),
    .A_2_d1( Accelerator_MAT_Multiply_U0_A_2_d1 ),
    .A_2_q1( Accelerator_MAT_Multiply_U0_A_2_q1 ),
    .A_2_we1( Accelerator_MAT_Multiply_U0_A_2_we1 ),
    .A_3_address0( Accelerator_MAT_Multiply_U0_A_3_address0 ),
    .A_3_ce0( Accelerator_MAT_Multiply_U0_A_3_ce0 ),
    .A_3_d0( Accelerator_MAT_Multiply_U0_A_3_d0 ),
    .A_3_q0( Accelerator_MAT_Multiply_U0_A_3_q0 ),
    .A_3_we0( Accelerator_MAT_Multiply_U0_A_3_we0 ),
    .A_3_address1( Accelerator_MAT_Multiply_U0_A_3_address1 ),
    .A_3_ce1( Accelerator_MAT_Multiply_U0_A_3_ce1 ),
    .A_3_d1( Accelerator_MAT_Multiply_U0_A_3_d1 ),
    .A_3_q1( Accelerator_MAT_Multiply_U0_A_3_q1 ),
    .A_3_we1( Accelerator_MAT_Multiply_U0_A_3_we1 ),
    .A_4_address0( Accelerator_MAT_Multiply_U0_A_4_address0 ),
    .A_4_ce0( Accelerator_MAT_Multiply_U0_A_4_ce0 ),
    .A_4_d0( Accelerator_MAT_Multiply_U0_A_4_d0 ),
    .A_4_q0( Accelerator_MAT_Multiply_U0_A_4_q0 ),
    .A_4_we0( Accelerator_MAT_Multiply_U0_A_4_we0 ),
    .A_4_address1( Accelerator_MAT_Multiply_U0_A_4_address1 ),
    .A_4_ce1( Accelerator_MAT_Multiply_U0_A_4_ce1 ),
    .A_4_d1( Accelerator_MAT_Multiply_U0_A_4_d1 ),
    .A_4_q1( Accelerator_MAT_Multiply_U0_A_4_q1 ),
    .A_4_we1( Accelerator_MAT_Multiply_U0_A_4_we1 ),
    .A_5_address0( Accelerator_MAT_Multiply_U0_A_5_address0 ),
    .A_5_ce0( Accelerator_MAT_Multiply_U0_A_5_ce0 ),
    .A_5_d0( Accelerator_MAT_Multiply_U0_A_5_d0 ),
    .A_5_q0( Accelerator_MAT_Multiply_U0_A_5_q0 ),
    .A_5_we0( Accelerator_MAT_Multiply_U0_A_5_we0 ),
    .A_5_address1( Accelerator_MAT_Multiply_U0_A_5_address1 ),
    .A_5_ce1( Accelerator_MAT_Multiply_U0_A_5_ce1 ),
    .A_5_d1( Accelerator_MAT_Multiply_U0_A_5_d1 ),
    .A_5_q1( Accelerator_MAT_Multiply_U0_A_5_q1 ),
    .A_5_we1( Accelerator_MAT_Multiply_U0_A_5_we1 ),
    .A_6_address0( Accelerator_MAT_Multiply_U0_A_6_address0 ),
    .A_6_ce0( Accelerator_MAT_Multiply_U0_A_6_ce0 ),
    .A_6_d0( Accelerator_MAT_Multiply_U0_A_6_d0 ),
    .A_6_q0( Accelerator_MAT_Multiply_U0_A_6_q0 ),
    .A_6_we0( Accelerator_MAT_Multiply_U0_A_6_we0 ),
    .A_6_address1( Accelerator_MAT_Multiply_U0_A_6_address1 ),
    .A_6_ce1( Accelerator_MAT_Multiply_U0_A_6_ce1 ),
    .A_6_d1( Accelerator_MAT_Multiply_U0_A_6_d1 ),
    .A_6_q1( Accelerator_MAT_Multiply_U0_A_6_q1 ),
    .A_6_we1( Accelerator_MAT_Multiply_U0_A_6_we1 ),
    .A_7_address0( Accelerator_MAT_Multiply_U0_A_7_address0 ),
    .A_7_ce0( Accelerator_MAT_Multiply_U0_A_7_ce0 ),
    .A_7_d0( Accelerator_MAT_Multiply_U0_A_7_d0 ),
    .A_7_q0( Accelerator_MAT_Multiply_U0_A_7_q0 ),
    .A_7_we0( Accelerator_MAT_Multiply_U0_A_7_we0 ),
    .A_7_address1( Accelerator_MAT_Multiply_U0_A_7_address1 ),
    .A_7_ce1( Accelerator_MAT_Multiply_U0_A_7_ce1 ),
    .A_7_d1( Accelerator_MAT_Multiply_U0_A_7_d1 ),
    .A_7_q1( Accelerator_MAT_Multiply_U0_A_7_q1 ),
    .A_7_we1( Accelerator_MAT_Multiply_U0_A_7_we1 ),
    .B_dout( Accelerator_MAT_Multiply_U0_B_dout ),
    .B_empty_n( Accelerator_MAT_Multiply_U0_B_empty_n ),
    .B_read( Accelerator_MAT_Multiply_U0_B_read ),
    .C_address0( Accelerator_MAT_Multiply_U0_C_address0 ),
    .C_ce0( Accelerator_MAT_Multiply_U0_C_ce0 ),
    .C_d0( Accelerator_MAT_Multiply_U0_C_d0 ),
    .C_q0( Accelerator_MAT_Multiply_U0_C_q0 ),
    .C_we0( Accelerator_MAT_Multiply_U0_C_we0 ),
    .C_address1( Accelerator_MAT_Multiply_U0_C_address1 ),
    .C_ce1( Accelerator_MAT_Multiply_U0_C_ce1 ),
    .C_d1( Accelerator_MAT_Multiply_U0_C_d1 ),
    .C_q1( Accelerator_MAT_Multiply_U0_C_q1 ),
    .C_we1( Accelerator_MAT_Multiply_U0_C_we1 ),
    .A_0_pipo_status( Accelerator_MAT_Multiply_U0_A_0_pipo_status ),
    .A_0_pipo_update( Accelerator_MAT_Multiply_U0_A_0_pipo_update ),
    .A_1_pipo_status( Accelerator_MAT_Multiply_U0_A_1_pipo_status ),
    .A_1_pipo_update( Accelerator_MAT_Multiply_U0_A_1_pipo_update ),
    .A_2_pipo_status( Accelerator_MAT_Multiply_U0_A_2_pipo_status ),
    .A_2_pipo_update( Accelerator_MAT_Multiply_U0_A_2_pipo_update ),
    .A_3_pipo_status( Accelerator_MAT_Multiply_U0_A_3_pipo_status ),
    .A_3_pipo_update( Accelerator_MAT_Multiply_U0_A_3_pipo_update ),
    .A_4_pipo_status( Accelerator_MAT_Multiply_U0_A_4_pipo_status ),
    .A_4_pipo_update( Accelerator_MAT_Multiply_U0_A_4_pipo_update ),
    .A_5_pipo_status( Accelerator_MAT_Multiply_U0_A_5_pipo_status ),
    .A_5_pipo_update( Accelerator_MAT_Multiply_U0_A_5_pipo_update ),
    .A_6_pipo_status( Accelerator_MAT_Multiply_U0_A_6_pipo_status ),
    .A_6_pipo_update( Accelerator_MAT_Multiply_U0_A_6_pipo_update ),
    .A_7_pipo_status( Accelerator_MAT_Multiply_U0_A_7_pipo_status ),
    .A_7_pipo_update( Accelerator_MAT_Multiply_U0_A_7_pipo_update ),
    .ap_continue( Accelerator_MAT_Multiply_U0_ap_continue ),
    .ap_done( Accelerator_MAT_Multiply_U0_ap_done ),
    .ap_start( Accelerator_MAT_Multiply_U0_ap_start ),
    .ap_idle( Accelerator_MAT_Multiply_U0_ap_idle ),
    .ap_ready( Accelerator_MAT_Multiply_U0_ap_ready )
);

Accelerator_MAT_Multiply2_Loop_Row_proc Accelerator_MAT_Multiply2_Loop_Row_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_start ),
    .ap_done( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done ),
    .ap_continue( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_continue ),
    .ap_idle( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_idle ),
    .ap_ready( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_ready ),
    .A_address0( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_address0 ),
    .A_ce0( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_ce0 ),
    .A_q0( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_q0 ),
    .A_cached_row_address0( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_address0 ),
    .A_cached_row_ce0( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_ce0 ),
    .A_cached_row_we0( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_we0 ),
    .A_cached_row_d0( Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_d0 )
);

Accelerator_MAT_Multiply2_Loop_Col_proc Accelerator_MAT_Multiply2_Loop_Col_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_start ),
    .ap_done( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done ),
    .ap_continue( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue ),
    .ap_idle( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_idle ),
    .ap_ready( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_ready ),
    .A_cached_row_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address0 ),
    .A_cached_row_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce0 ),
    .A_cached_row_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q0 ),
    .A_cached_row_address1( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address1 ),
    .A_cached_row_ce1( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce1 ),
    .A_cached_row_q1( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q1 ),
    .B_0_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_address0 ),
    .B_0_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_ce0 ),
    .B_0_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_q0 ),
    .B_1_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_address0 ),
    .B_1_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_ce0 ),
    .B_1_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_q0 ),
    .B_2_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_address0 ),
    .B_2_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_ce0 ),
    .B_2_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_q0 ),
    .B_3_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_address0 ),
    .B_3_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_ce0 ),
    .B_3_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_q0 ),
    .B_4_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_address0 ),
    .B_4_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_ce0 ),
    .B_4_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_q0 ),
    .B_5_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_address0 ),
    .B_5_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_ce0 ),
    .B_5_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_q0 ),
    .B_6_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_address0 ),
    .B_6_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_ce0 ),
    .B_6_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_q0 ),
    .B_7_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_address0 ),
    .B_7_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_ce0 ),
    .B_7_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_q0 ),
    .C_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_address0 ),
    .C_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_ce0 ),
    .C_we0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_we0 ),
    .C_d0( Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_d0 )
);

Accelerator_MAT_Multiply Accelerator_MAT_Multiply_U1_1(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .A_0_address0( Accelerator_MAT_Multiply_U1_1_A_0_address0 ),
    .A_0_ce0( Accelerator_MAT_Multiply_U1_1_A_0_ce0 ),
    .A_0_d0( Accelerator_MAT_Multiply_U1_1_A_0_d0 ),
    .A_0_q0( Accelerator_MAT_Multiply_U1_1_A_0_q0 ),
    .A_0_we0( Accelerator_MAT_Multiply_U1_1_A_0_we0 ),
    .A_0_address1( Accelerator_MAT_Multiply_U1_1_A_0_address1 ),
    .A_0_ce1( Accelerator_MAT_Multiply_U1_1_A_0_ce1 ),
    .A_0_d1( Accelerator_MAT_Multiply_U1_1_A_0_d1 ),
    .A_0_q1( Accelerator_MAT_Multiply_U1_1_A_0_q1 ),
    .A_0_we1( Accelerator_MAT_Multiply_U1_1_A_0_we1 ),
    .A_1_address0( Accelerator_MAT_Multiply_U1_1_A_1_address0 ),
    .A_1_ce0( Accelerator_MAT_Multiply_U1_1_A_1_ce0 ),
    .A_1_d0( Accelerator_MAT_Multiply_U1_1_A_1_d0 ),
    .A_1_q0( Accelerator_MAT_Multiply_U1_1_A_1_q0 ),
    .A_1_we0( Accelerator_MAT_Multiply_U1_1_A_1_we0 ),
    .A_1_address1( Accelerator_MAT_Multiply_U1_1_A_1_address1 ),
    .A_1_ce1( Accelerator_MAT_Multiply_U1_1_A_1_ce1 ),
    .A_1_d1( Accelerator_MAT_Multiply_U1_1_A_1_d1 ),
    .A_1_q1( Accelerator_MAT_Multiply_U1_1_A_1_q1 ),
    .A_1_we1( Accelerator_MAT_Multiply_U1_1_A_1_we1 ),
    .A_2_address0( Accelerator_MAT_Multiply_U1_1_A_2_address0 ),
    .A_2_ce0( Accelerator_MAT_Multiply_U1_1_A_2_ce0 ),
    .A_2_d0( Accelerator_MAT_Multiply_U1_1_A_2_d0 ),
    .A_2_q0( Accelerator_MAT_Multiply_U1_1_A_2_q0 ),
    .A_2_we0( Accelerator_MAT_Multiply_U1_1_A_2_we0 ),
    .A_2_address1( Accelerator_MAT_Multiply_U1_1_A_2_address1 ),
    .A_2_ce1( Accelerator_MAT_Multiply_U1_1_A_2_ce1 ),
    .A_2_d1( Accelerator_MAT_Multiply_U1_1_A_2_d1 ),
    .A_2_q1( Accelerator_MAT_Multiply_U1_1_A_2_q1 ),
    .A_2_we1( Accelerator_MAT_Multiply_U1_1_A_2_we1 ),
    .A_3_address0( Accelerator_MAT_Multiply_U1_1_A_3_address0 ),
    .A_3_ce0( Accelerator_MAT_Multiply_U1_1_A_3_ce0 ),
    .A_3_d0( Accelerator_MAT_Multiply_U1_1_A_3_d0 ),
    .A_3_q0( Accelerator_MAT_Multiply_U1_1_A_3_q0 ),
    .A_3_we0( Accelerator_MAT_Multiply_U1_1_A_3_we0 ),
    .A_3_address1( Accelerator_MAT_Multiply_U1_1_A_3_address1 ),
    .A_3_ce1( Accelerator_MAT_Multiply_U1_1_A_3_ce1 ),
    .A_3_d1( Accelerator_MAT_Multiply_U1_1_A_3_d1 ),
    .A_3_q1( Accelerator_MAT_Multiply_U1_1_A_3_q1 ),
    .A_3_we1( Accelerator_MAT_Multiply_U1_1_A_3_we1 ),
    .A_4_address0( Accelerator_MAT_Multiply_U1_1_A_4_address0 ),
    .A_4_ce0( Accelerator_MAT_Multiply_U1_1_A_4_ce0 ),
    .A_4_d0( Accelerator_MAT_Multiply_U1_1_A_4_d0 ),
    .A_4_q0( Accelerator_MAT_Multiply_U1_1_A_4_q0 ),
    .A_4_we0( Accelerator_MAT_Multiply_U1_1_A_4_we0 ),
    .A_4_address1( Accelerator_MAT_Multiply_U1_1_A_4_address1 ),
    .A_4_ce1( Accelerator_MAT_Multiply_U1_1_A_4_ce1 ),
    .A_4_d1( Accelerator_MAT_Multiply_U1_1_A_4_d1 ),
    .A_4_q1( Accelerator_MAT_Multiply_U1_1_A_4_q1 ),
    .A_4_we1( Accelerator_MAT_Multiply_U1_1_A_4_we1 ),
    .A_5_address0( Accelerator_MAT_Multiply_U1_1_A_5_address0 ),
    .A_5_ce0( Accelerator_MAT_Multiply_U1_1_A_5_ce0 ),
    .A_5_d0( Accelerator_MAT_Multiply_U1_1_A_5_d0 ),
    .A_5_q0( Accelerator_MAT_Multiply_U1_1_A_5_q0 ),
    .A_5_we0( Accelerator_MAT_Multiply_U1_1_A_5_we0 ),
    .A_5_address1( Accelerator_MAT_Multiply_U1_1_A_5_address1 ),
    .A_5_ce1( Accelerator_MAT_Multiply_U1_1_A_5_ce1 ),
    .A_5_d1( Accelerator_MAT_Multiply_U1_1_A_5_d1 ),
    .A_5_q1( Accelerator_MAT_Multiply_U1_1_A_5_q1 ),
    .A_5_we1( Accelerator_MAT_Multiply_U1_1_A_5_we1 ),
    .A_6_address0( Accelerator_MAT_Multiply_U1_1_A_6_address0 ),
    .A_6_ce0( Accelerator_MAT_Multiply_U1_1_A_6_ce0 ),
    .A_6_d0( Accelerator_MAT_Multiply_U1_1_A_6_d0 ),
    .A_6_q0( Accelerator_MAT_Multiply_U1_1_A_6_q0 ),
    .A_6_we0( Accelerator_MAT_Multiply_U1_1_A_6_we0 ),
    .A_6_address1( Accelerator_MAT_Multiply_U1_1_A_6_address1 ),
    .A_6_ce1( Accelerator_MAT_Multiply_U1_1_A_6_ce1 ),
    .A_6_d1( Accelerator_MAT_Multiply_U1_1_A_6_d1 ),
    .A_6_q1( Accelerator_MAT_Multiply_U1_1_A_6_q1 ),
    .A_6_we1( Accelerator_MAT_Multiply_U1_1_A_6_we1 ),
    .A_7_address0( Accelerator_MAT_Multiply_U1_1_A_7_address0 ),
    .A_7_ce0( Accelerator_MAT_Multiply_U1_1_A_7_ce0 ),
    .A_7_d0( Accelerator_MAT_Multiply_U1_1_A_7_d0 ),
    .A_7_q0( Accelerator_MAT_Multiply_U1_1_A_7_q0 ),
    .A_7_we0( Accelerator_MAT_Multiply_U1_1_A_7_we0 ),
    .A_7_address1( Accelerator_MAT_Multiply_U1_1_A_7_address1 ),
    .A_7_ce1( Accelerator_MAT_Multiply_U1_1_A_7_ce1 ),
    .A_7_d1( Accelerator_MAT_Multiply_U1_1_A_7_d1 ),
    .A_7_q1( Accelerator_MAT_Multiply_U1_1_A_7_q1 ),
    .A_7_we1( Accelerator_MAT_Multiply_U1_1_A_7_we1 ),
    .B_dout( Accelerator_MAT_Multiply_U1_1_B_dout ),
    .B_empty_n( Accelerator_MAT_Multiply_U1_1_B_empty_n ),
    .B_read( Accelerator_MAT_Multiply_U1_1_B_read ),
    .C_address0( Accelerator_MAT_Multiply_U1_1_C_address0 ),
    .C_ce0( Accelerator_MAT_Multiply_U1_1_C_ce0 ),
    .C_d0( Accelerator_MAT_Multiply_U1_1_C_d0 ),
    .C_q0( Accelerator_MAT_Multiply_U1_1_C_q0 ),
    .C_we0( Accelerator_MAT_Multiply_U1_1_C_we0 ),
    .C_address1( Accelerator_MAT_Multiply_U1_1_C_address1 ),
    .C_ce1( Accelerator_MAT_Multiply_U1_1_C_ce1 ),
    .C_d1( Accelerator_MAT_Multiply_U1_1_C_d1 ),
    .C_q1( Accelerator_MAT_Multiply_U1_1_C_q1 ),
    .C_we1( Accelerator_MAT_Multiply_U1_1_C_we1 ),
    .A_0_pipo_status( Accelerator_MAT_Multiply_U1_1_A_0_pipo_status ),
    .A_0_pipo_update( Accelerator_MAT_Multiply_U1_1_A_0_pipo_update ),
    .A_1_pipo_status( Accelerator_MAT_Multiply_U1_1_A_1_pipo_status ),
    .A_1_pipo_update( Accelerator_MAT_Multiply_U1_1_A_1_pipo_update ),
    .A_2_pipo_status( Accelerator_MAT_Multiply_U1_1_A_2_pipo_status ),
    .A_2_pipo_update( Accelerator_MAT_Multiply_U1_1_A_2_pipo_update ),
    .A_3_pipo_status( Accelerator_MAT_Multiply_U1_1_A_3_pipo_status ),
    .A_3_pipo_update( Accelerator_MAT_Multiply_U1_1_A_3_pipo_update ),
    .A_4_pipo_status( Accelerator_MAT_Multiply_U1_1_A_4_pipo_status ),
    .A_4_pipo_update( Accelerator_MAT_Multiply_U1_1_A_4_pipo_update ),
    .A_5_pipo_status( Accelerator_MAT_Multiply_U1_1_A_5_pipo_status ),
    .A_5_pipo_update( Accelerator_MAT_Multiply_U1_1_A_5_pipo_update ),
    .A_6_pipo_status( Accelerator_MAT_Multiply_U1_1_A_6_pipo_status ),
    .A_6_pipo_update( Accelerator_MAT_Multiply_U1_1_A_6_pipo_update ),
    .A_7_pipo_status( Accelerator_MAT_Multiply_U1_1_A_7_pipo_status ),
    .A_7_pipo_update( Accelerator_MAT_Multiply_U1_1_A_7_pipo_update ),
    .ap_continue( Accelerator_MAT_Multiply_U1_1_ap_continue ),
    .ap_done( Accelerator_MAT_Multiply_U1_1_ap_done ),
    .ap_start( Accelerator_MAT_Multiply_U1_1_ap_start ),
    .ap_idle( Accelerator_MAT_Multiply_U1_1_ap_idle ),
    .ap_ready( Accelerator_MAT_Multiply_U1_1_ap_ready )
);

Accelerator_MAT_Multiply2_Loop_Row_proc Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_start ),
    .ap_done( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done ),
    .ap_continue( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_continue ),
    .ap_idle( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_idle ),
    .ap_ready( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_ready ),
    .A_address0( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_address0 ),
    .A_ce0( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_ce0 ),
    .A_q0( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_q0 ),
    .A_cached_row_address0( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_address0 ),
    .A_cached_row_ce0( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_ce0 ),
    .A_cached_row_we0( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_we0 ),
    .A_cached_row_d0( Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_d0 )
);

Accelerator_MAT_Multiply2_Loop_Col_proc Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_start ),
    .ap_done( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_done ),
    .ap_continue( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_continue ),
    .ap_idle( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_idle ),
    .ap_ready( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready ),
    .A_cached_row_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address0 ),
    .A_cached_row_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce0 ),
    .A_cached_row_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q0 ),
    .A_cached_row_address1( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address1 ),
    .A_cached_row_ce1( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce1 ),
    .A_cached_row_q1( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q1 ),
    .B_0_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_address0 ),
    .B_0_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_ce0 ),
    .B_0_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_q0 ),
    .B_1_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_address0 ),
    .B_1_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_ce0 ),
    .B_1_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_q0 ),
    .B_2_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_address0 ),
    .B_2_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_ce0 ),
    .B_2_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_q0 ),
    .B_3_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_address0 ),
    .B_3_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_ce0 ),
    .B_3_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_q0 ),
    .B_4_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_address0 ),
    .B_4_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_ce0 ),
    .B_4_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_q0 ),
    .B_5_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_address0 ),
    .B_5_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_ce0 ),
    .B_5_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_q0 ),
    .B_6_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_address0 ),
    .B_6_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_ce0 ),
    .B_6_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_q0 ),
    .B_7_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_address0 ),
    .B_7_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_ce0 ),
    .B_7_q0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_q0 ),
    .C_address0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_address0 ),
    .C_ce0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_ce0 ),
    .C_we0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_we0 ),
    .C_d0( Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_d0 )
);

Accelerator_DCT_Block_proc_Y #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
Y_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Y_address0 ),
    .ce0( Y_ce0 ),
    .we0( Y_we0 ),
    .d0( Y_d0 ),
    .i_full_n( Y_i_full_n ),
    .i_write( Y_i_write ),
    .t_empty_n( Y_t_empty_n ),
    .t_read( Y_t_read )
);



/// ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Accelerator_MAT_Multiply_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_MAT_Multiply_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_MAT_Multiply_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply_U0 <= ap_const_logic_0;
        end else if ((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_MAT_Multiply_U1_1
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply_U1_1_ap_done)) begin
            ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status))) begin
            ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status <= ap_const_logic_0;
    end else begin
        if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status <= ap_const_logic_0;
        end else if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_A_0_pipo_status == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status <= ap_const_logic_0;
    end else begin
        if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status <= ap_const_logic_0;
        end else if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_A_1_pipo_status == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status <= ap_const_logic_0;
    end else begin
        if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status <= ap_const_logic_0;
        end else if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_A_2_pipo_status == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status <= ap_const_logic_0;
    end else begin
        if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status <= ap_const_logic_0;
        end else if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_A_3_pipo_status == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status <= ap_const_logic_0;
    end else begin
        if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status <= ap_const_logic_0;
        end else if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_A_4_pipo_status == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status <= ap_const_logic_0;
    end else begin
        if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status <= ap_const_logic_0;
        end else if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_A_5_pipo_status == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status <= ap_const_logic_0;
    end else begin
        if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status <= ap_const_logic_0;
        end else if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_A_6_pipo_status == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status <= ap_const_logic_0;
    end else begin
        if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status <= ap_const_logic_0;
        end else if (((Accelerator_MAT_Multiply_U0_ap_done == ap_const_logic_1) & (Accelerator_MAT_Multiply_U0_A_7_pipo_status == ap_const_logic_1))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready <= ap_const_logic_0;
        end else if ((Accelerator_MAT_Multiply_U0_ap_ready == ap_const_logic_1)) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == Accelerator_MAT_Multiply_U1_1_ap_ready)) begin
            ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue assign process. ///
always @ (ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)
begin
    if (((ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status))) begin
        Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue = ap_const_logic_1;
    end else begin
        Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue = ap_const_logic_0;
    end
end

/// Accelerator_MAT_Multiply_U0_ap_continue assign process. ///
always @ (ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status or ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)
begin
    if (((ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status))) begin
        Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1;
    end else begin
        Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_0;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0 assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1 assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2 assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3 assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4 assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5 assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6 assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7 assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply_U0_T_0 assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_0 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_0 = Accelerator_MAT_Multiply_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply_U0_T_1 assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_1 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_1 = Accelerator_MAT_Multiply_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply_U0_T_2 assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_2 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_2 = Accelerator_MAT_Multiply_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply_U0_T_3 assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_3 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_3 = Accelerator_MAT_Multiply_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply_U0_T_4 assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_4 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_4 = Accelerator_MAT_Multiply_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply_U0_T_5 assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_5 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_5 = Accelerator_MAT_Multiply_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply_U0_T_6 assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_6 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_6 = Accelerator_MAT_Multiply_U0_ap_done;
    end
end

/// ap_chn_write_Accelerator_MAT_Multiply_U0_T_7 assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_done or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status)
begin
    if ((ap_const_logic_1 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status)) begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_7 = ap_const_logic_0;
    end else begin
        ap_chn_write_Accelerator_MAT_Multiply_U0_T_7 = Accelerator_MAT_Multiply_U0_ap_done;
    end
end

/// ap_idle assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_idle or Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_idle or Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_idle or Accelerator_MAT_Multiply_U1_1_ap_idle or Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_idle or Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_idle or T_0_t_empty_n or T_1_t_empty_n or T_2_t_empty_n or T_3_t_empty_n or T_4_t_empty_n or T_5_t_empty_n or T_6_t_empty_n or T_7_t_empty_n or A_cached_row_i1_t_empty_n or Tinv_0_t_empty_n or Tinv_1_t_empty_n or Tinv_2_t_empty_n or Tinv_3_t_empty_n or Tinv_4_t_empty_n or Tinv_5_t_empty_n or Tinv_6_t_empty_n or Tinv_7_t_empty_n or Y_t_empty_n or A_cached_row_i_t_empty_n)
begin
    if (((Accelerator_MAT_Multiply_U0_ap_idle == ap_const_logic_1) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_idle) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_idle) & (ap_const_logic_1 == Accelerator_MAT_Multiply_U1_1_ap_idle) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_idle) & (ap_const_logic_1 == Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_idle) & (ap_const_logic_0 == T_0_t_empty_n) & (ap_const_logic_0 == T_1_t_empty_n) & (ap_const_logic_0 == T_2_t_empty_n) & (ap_const_logic_0 == T_3_t_empty_n) & (ap_const_logic_0 == T_4_t_empty_n) & (ap_const_logic_0 == T_5_t_empty_n) & (ap_const_logic_0 == T_6_t_empty_n) & (ap_const_logic_0 == T_7_t_empty_n) & (ap_const_logic_0 == A_cached_row_i1_t_empty_n) & (ap_const_logic_0 == Tinv_0_t_empty_n) & (ap_const_logic_0 == Tinv_1_t_empty_n) & (ap_const_logic_0 == Tinv_2_t_empty_n) & (ap_const_logic_0 == Tinv_3_t_empty_n) & (ap_const_logic_0 == Tinv_4_t_empty_n) & (ap_const_logic_0 == Tinv_5_t_empty_n) & (ap_const_logic_0 == Tinv_6_t_empty_n) & (ap_const_logic_0 == Tinv_7_t_empty_n) & (ap_const_logic_0 == Y_t_empty_n) & (ap_const_logic_0 == A_cached_row_i_t_empty_n))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

assign ap_sig_hs_done = ap_const_logic_1;

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply_U0_A_0_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status = Accelerator_MAT_Multiply_U0_A_0_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply_U0_A_1_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status = Accelerator_MAT_Multiply_U0_A_1_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply_U0_A_2_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status = Accelerator_MAT_Multiply_U0_A_2_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply_U0_A_3_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status = Accelerator_MAT_Multiply_U0_A_3_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply_U0_A_4_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status = Accelerator_MAT_Multiply_U0_A_4_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply_U0_A_5_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status = Accelerator_MAT_Multiply_U0_A_5_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply_U0_A_6_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status = Accelerator_MAT_Multiply_U0_A_6_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status assign process. ///
always @ (Accelerator_MAT_Multiply_U0_A_7_pipo_status or ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status = Accelerator_MAT_Multiply_U0_A_7_pipo_status;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready assign process. ///
always @ (Accelerator_MAT_Multiply_U0_ap_ready or ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready = Accelerator_MAT_Multiply_U0_ap_ready;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready assign process. ///
always @ (Accelerator_MAT_Multiply_U1_1_ap_ready or ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready)) begin
        ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready = Accelerator_MAT_Multiply_U1_1_ap_ready;
    end else begin
        ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready)
begin
    if (((ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready) & (ap_const_logic_1 == ap_start))) begin
        ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready))) begin
        ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_top_allready assign process. ///
always @ (ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready or ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready)
begin
    if (((ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready))) begin
        ap_sig_top_allready = ap_const_logic_1;
    end else begin
        ap_sig_top_allready = ap_const_logic_0;
    end
end
assign A_cached_row_i1_address0 = ap_const_lv3_0;
assign A_cached_row_i1_address1 = ap_const_lv3_0;
assign A_cached_row_i1_ce0 = ap_const_logic_0;
assign A_cached_row_i1_ce1 = ap_const_logic_0;
assign A_cached_row_i1_d0 = ap_const_lv32_0;
assign A_cached_row_i1_i_address0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_address0;
assign A_cached_row_i1_i_ce0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_ce0;
assign A_cached_row_i1_i_d0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_d0;
assign A_cached_row_i1_i_we0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_we0;
assign A_cached_row_i1_i_write = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
assign A_cached_row_i1_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address0;
assign A_cached_row_i1_t_address1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address1;
assign A_cached_row_i1_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce0;
assign A_cached_row_i1_t_ce1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce1;
assign A_cached_row_i1_t_d0 = ap_const_lv32_0;
assign A_cached_row_i1_t_d1 = ap_const_lv32_0;
assign A_cached_row_i1_t_q0 = ap_const_lv32_0;
assign A_cached_row_i1_t_q1 = ap_const_lv32_0;
assign A_cached_row_i1_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_ready;
assign A_cached_row_i1_t_we0 = ap_const_logic_0;
assign A_cached_row_i1_t_we1 = ap_const_logic_0;
assign A_cached_row_i1_we0 = ap_const_logic_0;
assign A_cached_row_i_address0 = ap_const_lv3_0;
assign A_cached_row_i_address1 = ap_const_lv3_0;
assign A_cached_row_i_ce0 = ap_const_logic_0;
assign A_cached_row_i_ce1 = ap_const_logic_0;
assign A_cached_row_i_d0 = ap_const_lv32_0;
assign A_cached_row_i_i_address0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_address0;
assign A_cached_row_i_i_ce0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_ce0;
assign A_cached_row_i_i_d0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_d0;
assign A_cached_row_i_i_we0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_we0;
assign A_cached_row_i_i_write = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done;
assign A_cached_row_i_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address0;
assign A_cached_row_i_t_address1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address1;
assign A_cached_row_i_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce0;
assign A_cached_row_i_t_ce1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce1;
assign A_cached_row_i_t_d0 = ap_const_lv32_0;
assign A_cached_row_i_t_d1 = ap_const_lv32_0;
assign A_cached_row_i_t_q0 = ap_const_lv32_0;
assign A_cached_row_i_t_q1 = ap_const_lv32_0;
assign A_cached_row_i_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign A_cached_row_i_t_we0 = ap_const_logic_0;
assign A_cached_row_i_t_we1 = ap_const_logic_0;
assign A_cached_row_i_we0 = ap_const_logic_0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q0 = A_cached_row_i1_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q1 = A_cached_row_i1_t_q1;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status = Tinv_0_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_q0 = Tinv_0_i_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status = Tinv_1_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_q0 = Tinv_1_i_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status = Tinv_2_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_q0 = Tinv_2_i_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status = Tinv_3_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_q0 = Tinv_3_i_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status = Tinv_4_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_q0 = Tinv_4_i_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status = Tinv_5_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_q0 = Tinv_5_i_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status = Tinv_6_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_q0 = Tinv_6_i_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status = Tinv_7_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_q0 = Tinv_7_i_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status = Y_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_start = A_cached_row_i1_t_empty_n;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q0 = A_cached_row_i_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q1 = A_cached_row_i_t_q1;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_q0 = T_0_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_q0 = T_1_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_q0 = T_2_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_q0 = T_3_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_q0 = T_4_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_q0 = T_5_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_q0 = T_6_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_q0 = T_7_t_q0;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_continue = ap_const_logic_1;
assign Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_start = (T_0_t_empty_n & T_1_t_empty_n & T_2_t_empty_n & T_3_t_empty_n & T_4_t_empty_n & T_5_t_empty_n & T_6_t_empty_n & T_7_t_empty_n & Y_t_empty_n & A_cached_row_i_t_empty_n);
assign Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_pipo_status = A_cached_row_i1_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_q0 = temp_q0;
assign Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_pipo_status;
assign Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_start = ap_const_logic_1;
assign Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_pipo_status = A_cached_row_i_i_full_n;
assign Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_q0 = temp_q0;
assign Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_continue = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_pipo_status;
assign Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_start = ap_const_logic_1;
assign Accelerator_MAT_Multiply_U0_A_0_pipo_status = T_0_i_full_n;
assign Accelerator_MAT_Multiply_U0_A_0_q0 = T_0_i_q0;
assign Accelerator_MAT_Multiply_U0_A_0_q1 = T_0_i_q1;
assign Accelerator_MAT_Multiply_U0_A_1_pipo_status = T_1_i_full_n;
assign Accelerator_MAT_Multiply_U0_A_1_q0 = T_1_i_q0;
assign Accelerator_MAT_Multiply_U0_A_1_q1 = T_1_i_q1;
assign Accelerator_MAT_Multiply_U0_A_2_pipo_status = T_2_i_full_n;
assign Accelerator_MAT_Multiply_U0_A_2_q0 = T_2_i_q0;
assign Accelerator_MAT_Multiply_U0_A_2_q1 = T_2_i_q1;
assign Accelerator_MAT_Multiply_U0_A_3_pipo_status = T_3_i_full_n;
assign Accelerator_MAT_Multiply_U0_A_3_q0 = T_3_i_q0;
assign Accelerator_MAT_Multiply_U0_A_3_q1 = T_3_i_q1;
assign Accelerator_MAT_Multiply_U0_A_4_pipo_status = T_4_i_full_n;
assign Accelerator_MAT_Multiply_U0_A_4_q0 = T_4_i_q0;
assign Accelerator_MAT_Multiply_U0_A_4_q1 = T_4_i_q1;
assign Accelerator_MAT_Multiply_U0_A_5_pipo_status = T_5_i_full_n;
assign Accelerator_MAT_Multiply_U0_A_5_q0 = T_5_i_q0;
assign Accelerator_MAT_Multiply_U0_A_5_q1 = T_5_i_q1;
assign Accelerator_MAT_Multiply_U0_A_6_pipo_status = T_6_i_full_n;
assign Accelerator_MAT_Multiply_U0_A_6_q0 = T_6_i_q0;
assign Accelerator_MAT_Multiply_U0_A_6_q1 = T_6_i_q1;
assign Accelerator_MAT_Multiply_U0_A_7_pipo_status = T_7_i_full_n;
assign Accelerator_MAT_Multiply_U0_A_7_q0 = T_7_i_q0;
assign Accelerator_MAT_Multiply_U0_A_7_q1 = T_7_i_q1;
assign Accelerator_MAT_Multiply_U0_B_dout = X_dout;
assign Accelerator_MAT_Multiply_U0_B_empty_n = X_empty_n;
assign Accelerator_MAT_Multiply_U0_C_q0 = ap_const_lv32_0;
assign Accelerator_MAT_Multiply_U0_C_q1 = ap_const_lv32_0;
assign Accelerator_MAT_Multiply_U0_ap_start = ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start;
assign Accelerator_MAT_Multiply_U1_1_A_0_pipo_status = ap_const_logic_0;
assign Accelerator_MAT_Multiply_U1_1_A_0_q0 = Tinv_0_t_q0;
assign Accelerator_MAT_Multiply_U1_1_A_0_q1 = Tinv_0_t_q1;
assign Accelerator_MAT_Multiply_U1_1_A_1_pipo_status = ap_const_logic_0;
assign Accelerator_MAT_Multiply_U1_1_A_1_q0 = Tinv_1_t_q0;
assign Accelerator_MAT_Multiply_U1_1_A_1_q1 = Tinv_1_t_q1;
assign Accelerator_MAT_Multiply_U1_1_A_2_pipo_status = ap_const_logic_0;
assign Accelerator_MAT_Multiply_U1_1_A_2_q0 = Tinv_2_t_q0;
assign Accelerator_MAT_Multiply_U1_1_A_2_q1 = Tinv_2_t_q1;
assign Accelerator_MAT_Multiply_U1_1_A_3_pipo_status = ap_const_logic_0;
assign Accelerator_MAT_Multiply_U1_1_A_3_q0 = Tinv_3_t_q0;
assign Accelerator_MAT_Multiply_U1_1_A_3_q1 = Tinv_3_t_q1;
assign Accelerator_MAT_Multiply_U1_1_A_4_pipo_status = ap_const_logic_0;
assign Accelerator_MAT_Multiply_U1_1_A_4_q0 = Tinv_4_t_q0;
assign Accelerator_MAT_Multiply_U1_1_A_4_q1 = Tinv_4_t_q1;
assign Accelerator_MAT_Multiply_U1_1_A_5_pipo_status = ap_const_logic_0;
assign Accelerator_MAT_Multiply_U1_1_A_5_q0 = Tinv_5_t_q0;
assign Accelerator_MAT_Multiply_U1_1_A_5_q1 = Tinv_5_t_q1;
assign Accelerator_MAT_Multiply_U1_1_A_6_pipo_status = ap_const_logic_0;
assign Accelerator_MAT_Multiply_U1_1_A_6_q0 = Tinv_6_t_q0;
assign Accelerator_MAT_Multiply_U1_1_A_6_q1 = Tinv_6_t_q1;
assign Accelerator_MAT_Multiply_U1_1_A_7_pipo_status = ap_const_logic_0;
assign Accelerator_MAT_Multiply_U1_1_A_7_q0 = Tinv_7_t_q0;
assign Accelerator_MAT_Multiply_U1_1_A_7_q1 = Tinv_7_t_q1;
assign Accelerator_MAT_Multiply_U1_1_B_dout = X_dout;
assign Accelerator_MAT_Multiply_U1_1_B_empty_n = X_empty_n;
assign Accelerator_MAT_Multiply_U1_1_C_q0 = ap_const_lv32_0;
assign Accelerator_MAT_Multiply_U1_1_C_q1 = ap_const_lv32_0;
assign Accelerator_MAT_Multiply_U1_1_ap_continue = ap_const_logic_1;
assign Accelerator_MAT_Multiply_U1_1_ap_start = (Tinv_0_t_empty_n & Tinv_1_t_empty_n & Tinv_2_t_empty_n & Tinv_3_t_empty_n & Tinv_4_t_empty_n & Tinv_5_t_empty_n & Tinv_6_t_empty_n & Tinv_7_t_empty_n & ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start);
assign T_0_address0 = ap_const_lv3_0;
assign T_0_address1 = ap_const_lv3_0;
assign T_0_ce0 = ap_const_logic_0;
assign T_0_ce1 = ap_const_logic_0;
assign T_0_i_address0 = Accelerator_MAT_Multiply_U0_A_0_address0;
assign T_0_i_address1 = Accelerator_MAT_Multiply_U0_A_0_address1;
assign T_0_i_ce0 = Accelerator_MAT_Multiply_U0_A_0_ce0;
assign T_0_i_ce1 = Accelerator_MAT_Multiply_U0_A_0_ce1;
assign T_0_i_d0 = ap_const_lv32_0;
assign T_0_i_d1 = ap_const_lv32_0;
assign T_0_i_q0 = ap_const_lv32_0;
assign T_0_i_q1 = ap_const_lv32_0;
assign T_0_i_we0 = ap_const_logic_0;
assign T_0_i_we1 = ap_const_logic_0;
assign T_0_i_write = Accelerator_MAT_Multiply_U0_ap_done;
assign T_0_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_address0;
assign T_0_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_ce0;
assign T_0_t_d0 = ap_const_lv32_0;
assign T_0_t_q0 = ap_const_lv32_0;
assign T_0_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign T_0_t_we0 = ap_const_logic_0;
assign T_1_address0 = ap_const_lv3_0;
assign T_1_address1 = ap_const_lv3_0;
assign T_1_ce0 = ap_const_logic_0;
assign T_1_ce1 = ap_const_logic_0;
assign T_1_i_address0 = Accelerator_MAT_Multiply_U0_A_1_address0;
assign T_1_i_address1 = Accelerator_MAT_Multiply_U0_A_1_address1;
assign T_1_i_ce0 = Accelerator_MAT_Multiply_U0_A_1_ce0;
assign T_1_i_ce1 = Accelerator_MAT_Multiply_U0_A_1_ce1;
assign T_1_i_d0 = ap_const_lv32_0;
assign T_1_i_d1 = ap_const_lv32_0;
assign T_1_i_q0 = ap_const_lv32_0;
assign T_1_i_q1 = ap_const_lv32_0;
assign T_1_i_we0 = ap_const_logic_0;
assign T_1_i_we1 = ap_const_logic_0;
assign T_1_i_write = Accelerator_MAT_Multiply_U0_ap_done;
assign T_1_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_address0;
assign T_1_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_ce0;
assign T_1_t_d0 = ap_const_lv32_0;
assign T_1_t_q0 = ap_const_lv32_0;
assign T_1_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign T_1_t_we0 = ap_const_logic_0;
assign T_2_address0 = ap_const_lv3_0;
assign T_2_address1 = ap_const_lv3_0;
assign T_2_ce0 = ap_const_logic_0;
assign T_2_ce1 = ap_const_logic_0;
assign T_2_i_address0 = Accelerator_MAT_Multiply_U0_A_2_address0;
assign T_2_i_address1 = Accelerator_MAT_Multiply_U0_A_2_address1;
assign T_2_i_ce0 = Accelerator_MAT_Multiply_U0_A_2_ce0;
assign T_2_i_ce1 = Accelerator_MAT_Multiply_U0_A_2_ce1;
assign T_2_i_d0 = ap_const_lv32_0;
assign T_2_i_d1 = ap_const_lv32_0;
assign T_2_i_q0 = ap_const_lv32_0;
assign T_2_i_q1 = ap_const_lv32_0;
assign T_2_i_we0 = ap_const_logic_0;
assign T_2_i_we1 = ap_const_logic_0;
assign T_2_i_write = Accelerator_MAT_Multiply_U0_ap_done;
assign T_2_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_address0;
assign T_2_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_ce0;
assign T_2_t_d0 = ap_const_lv32_0;
assign T_2_t_q0 = ap_const_lv32_0;
assign T_2_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign T_2_t_we0 = ap_const_logic_0;
assign T_3_address0 = ap_const_lv3_0;
assign T_3_address1 = ap_const_lv3_0;
assign T_3_ce0 = ap_const_logic_0;
assign T_3_ce1 = ap_const_logic_0;
assign T_3_i_address0 = Accelerator_MAT_Multiply_U0_A_3_address0;
assign T_3_i_address1 = Accelerator_MAT_Multiply_U0_A_3_address1;
assign T_3_i_ce0 = Accelerator_MAT_Multiply_U0_A_3_ce0;
assign T_3_i_ce1 = Accelerator_MAT_Multiply_U0_A_3_ce1;
assign T_3_i_d0 = ap_const_lv32_0;
assign T_3_i_d1 = ap_const_lv32_0;
assign T_3_i_q0 = ap_const_lv32_0;
assign T_3_i_q1 = ap_const_lv32_0;
assign T_3_i_we0 = ap_const_logic_0;
assign T_3_i_we1 = ap_const_logic_0;
assign T_3_i_write = Accelerator_MAT_Multiply_U0_ap_done;
assign T_3_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_address0;
assign T_3_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_ce0;
assign T_3_t_d0 = ap_const_lv32_0;
assign T_3_t_q0 = ap_const_lv32_0;
assign T_3_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign T_3_t_we0 = ap_const_logic_0;
assign T_4_address0 = ap_const_lv3_0;
assign T_4_address1 = ap_const_lv3_0;
assign T_4_ce0 = ap_const_logic_0;
assign T_4_ce1 = ap_const_logic_0;
assign T_4_i_address0 = Accelerator_MAT_Multiply_U0_A_4_address0;
assign T_4_i_address1 = Accelerator_MAT_Multiply_U0_A_4_address1;
assign T_4_i_ce0 = Accelerator_MAT_Multiply_U0_A_4_ce0;
assign T_4_i_ce1 = Accelerator_MAT_Multiply_U0_A_4_ce1;
assign T_4_i_d0 = ap_const_lv32_0;
assign T_4_i_d1 = ap_const_lv32_0;
assign T_4_i_q0 = ap_const_lv32_0;
assign T_4_i_q1 = ap_const_lv32_0;
assign T_4_i_we0 = ap_const_logic_0;
assign T_4_i_we1 = ap_const_logic_0;
assign T_4_i_write = Accelerator_MAT_Multiply_U0_ap_done;
assign T_4_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_address0;
assign T_4_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_ce0;
assign T_4_t_d0 = ap_const_lv32_0;
assign T_4_t_q0 = ap_const_lv32_0;
assign T_4_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign T_4_t_we0 = ap_const_logic_0;
assign T_5_address0 = ap_const_lv3_0;
assign T_5_address1 = ap_const_lv3_0;
assign T_5_ce0 = ap_const_logic_0;
assign T_5_ce1 = ap_const_logic_0;
assign T_5_i_address0 = Accelerator_MAT_Multiply_U0_A_5_address0;
assign T_5_i_address1 = Accelerator_MAT_Multiply_U0_A_5_address1;
assign T_5_i_ce0 = Accelerator_MAT_Multiply_U0_A_5_ce0;
assign T_5_i_ce1 = Accelerator_MAT_Multiply_U0_A_5_ce1;
assign T_5_i_d0 = ap_const_lv32_0;
assign T_5_i_d1 = ap_const_lv32_0;
assign T_5_i_q0 = ap_const_lv32_0;
assign T_5_i_q1 = ap_const_lv32_0;
assign T_5_i_we0 = ap_const_logic_0;
assign T_5_i_we1 = ap_const_logic_0;
assign T_5_i_write = Accelerator_MAT_Multiply_U0_ap_done;
assign T_5_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_address0;
assign T_5_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_ce0;
assign T_5_t_d0 = ap_const_lv32_0;
assign T_5_t_q0 = ap_const_lv32_0;
assign T_5_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign T_5_t_we0 = ap_const_logic_0;
assign T_6_address0 = ap_const_lv3_0;
assign T_6_address1 = ap_const_lv3_0;
assign T_6_ce0 = ap_const_logic_0;
assign T_6_ce1 = ap_const_logic_0;
assign T_6_i_address0 = Accelerator_MAT_Multiply_U0_A_6_address0;
assign T_6_i_address1 = Accelerator_MAT_Multiply_U0_A_6_address1;
assign T_6_i_ce0 = Accelerator_MAT_Multiply_U0_A_6_ce0;
assign T_6_i_ce1 = Accelerator_MAT_Multiply_U0_A_6_ce1;
assign T_6_i_d0 = ap_const_lv32_0;
assign T_6_i_d1 = ap_const_lv32_0;
assign T_6_i_q0 = ap_const_lv32_0;
assign T_6_i_q1 = ap_const_lv32_0;
assign T_6_i_we0 = ap_const_logic_0;
assign T_6_i_we1 = ap_const_logic_0;
assign T_6_i_write = Accelerator_MAT_Multiply_U0_ap_done;
assign T_6_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_address0;
assign T_6_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_ce0;
assign T_6_t_d0 = ap_const_lv32_0;
assign T_6_t_q0 = ap_const_lv32_0;
assign T_6_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign T_6_t_we0 = ap_const_logic_0;
assign T_7_address0 = ap_const_lv3_0;
assign T_7_address1 = ap_const_lv3_0;
assign T_7_ce0 = ap_const_logic_0;
assign T_7_ce1 = ap_const_logic_0;
assign T_7_i_address0 = Accelerator_MAT_Multiply_U0_A_7_address0;
assign T_7_i_address1 = Accelerator_MAT_Multiply_U0_A_7_address1;
assign T_7_i_ce0 = Accelerator_MAT_Multiply_U0_A_7_ce0;
assign T_7_i_ce1 = Accelerator_MAT_Multiply_U0_A_7_ce1;
assign T_7_i_d0 = ap_const_lv32_0;
assign T_7_i_d1 = ap_const_lv32_0;
assign T_7_i_q0 = ap_const_lv32_0;
assign T_7_i_q1 = ap_const_lv32_0;
assign T_7_i_we0 = ap_const_logic_0;
assign T_7_i_we1 = ap_const_logic_0;
assign T_7_i_write = Accelerator_MAT_Multiply_U0_ap_done;
assign T_7_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_address0;
assign T_7_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_ce0;
assign T_7_t_d0 = ap_const_lv32_0;
assign T_7_t_q0 = ap_const_lv32_0;
assign T_7_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign T_7_t_we0 = ap_const_logic_0;
assign Tinv_0_address0 = ap_const_lv3_0;
assign Tinv_0_address1 = ap_const_lv3_0;
assign Tinv_0_ce0 = ap_const_logic_0;
assign Tinv_0_ce1 = ap_const_logic_0;
assign Tinv_0_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_address0;
assign Tinv_0_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_ce0;
assign Tinv_0_i_d0 = ap_const_lv32_0;
assign Tinv_0_i_q0 = ap_const_lv32_0;
assign Tinv_0_i_we0 = ap_const_logic_0;
assign Tinv_0_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Tinv_0_t_address0 = Accelerator_MAT_Multiply_U1_1_A_0_address0;
assign Tinv_0_t_address1 = Accelerator_MAT_Multiply_U1_1_A_0_address1;
assign Tinv_0_t_ce0 = Accelerator_MAT_Multiply_U1_1_A_0_ce0;
assign Tinv_0_t_ce1 = Accelerator_MAT_Multiply_U1_1_A_0_ce1;
assign Tinv_0_t_d0 = ap_const_lv32_0;
assign Tinv_0_t_d1 = ap_const_lv32_0;
assign Tinv_0_t_q0 = ap_const_lv32_0;
assign Tinv_0_t_q1 = ap_const_lv32_0;
assign Tinv_0_t_read = Accelerator_MAT_Multiply_U1_1_ap_ready;
assign Tinv_0_t_we0 = ap_const_logic_0;
assign Tinv_0_t_we1 = ap_const_logic_0;
assign Tinv_1_address0 = ap_const_lv3_0;
assign Tinv_1_address1 = ap_const_lv3_0;
assign Tinv_1_ce0 = ap_const_logic_0;
assign Tinv_1_ce1 = ap_const_logic_0;
assign Tinv_1_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_address0;
assign Tinv_1_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_ce0;
assign Tinv_1_i_d0 = ap_const_lv32_0;
assign Tinv_1_i_q0 = ap_const_lv32_0;
assign Tinv_1_i_we0 = ap_const_logic_0;
assign Tinv_1_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Tinv_1_t_address0 = Accelerator_MAT_Multiply_U1_1_A_1_address0;
assign Tinv_1_t_address1 = Accelerator_MAT_Multiply_U1_1_A_1_address1;
assign Tinv_1_t_ce0 = Accelerator_MAT_Multiply_U1_1_A_1_ce0;
assign Tinv_1_t_ce1 = Accelerator_MAT_Multiply_U1_1_A_1_ce1;
assign Tinv_1_t_d0 = ap_const_lv32_0;
assign Tinv_1_t_d1 = ap_const_lv32_0;
assign Tinv_1_t_q0 = ap_const_lv32_0;
assign Tinv_1_t_q1 = ap_const_lv32_0;
assign Tinv_1_t_read = Accelerator_MAT_Multiply_U1_1_ap_ready;
assign Tinv_1_t_we0 = ap_const_logic_0;
assign Tinv_1_t_we1 = ap_const_logic_0;
assign Tinv_2_address0 = ap_const_lv3_0;
assign Tinv_2_address1 = ap_const_lv3_0;
assign Tinv_2_ce0 = ap_const_logic_0;
assign Tinv_2_ce1 = ap_const_logic_0;
assign Tinv_2_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_address0;
assign Tinv_2_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_ce0;
assign Tinv_2_i_d0 = ap_const_lv32_0;
assign Tinv_2_i_q0 = ap_const_lv32_0;
assign Tinv_2_i_we0 = ap_const_logic_0;
assign Tinv_2_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Tinv_2_t_address0 = Accelerator_MAT_Multiply_U1_1_A_2_address0;
assign Tinv_2_t_address1 = Accelerator_MAT_Multiply_U1_1_A_2_address1;
assign Tinv_2_t_ce0 = Accelerator_MAT_Multiply_U1_1_A_2_ce0;
assign Tinv_2_t_ce1 = Accelerator_MAT_Multiply_U1_1_A_2_ce1;
assign Tinv_2_t_d0 = ap_const_lv32_0;
assign Tinv_2_t_d1 = ap_const_lv32_0;
assign Tinv_2_t_q0 = ap_const_lv32_0;
assign Tinv_2_t_q1 = ap_const_lv32_0;
assign Tinv_2_t_read = Accelerator_MAT_Multiply_U1_1_ap_ready;
assign Tinv_2_t_we0 = ap_const_logic_0;
assign Tinv_2_t_we1 = ap_const_logic_0;
assign Tinv_3_address0 = ap_const_lv3_0;
assign Tinv_3_address1 = ap_const_lv3_0;
assign Tinv_3_ce0 = ap_const_logic_0;
assign Tinv_3_ce1 = ap_const_logic_0;
assign Tinv_3_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_address0;
assign Tinv_3_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_ce0;
assign Tinv_3_i_d0 = ap_const_lv32_0;
assign Tinv_3_i_q0 = ap_const_lv32_0;
assign Tinv_3_i_we0 = ap_const_logic_0;
assign Tinv_3_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Tinv_3_t_address0 = Accelerator_MAT_Multiply_U1_1_A_3_address0;
assign Tinv_3_t_address1 = Accelerator_MAT_Multiply_U1_1_A_3_address1;
assign Tinv_3_t_ce0 = Accelerator_MAT_Multiply_U1_1_A_3_ce0;
assign Tinv_3_t_ce1 = Accelerator_MAT_Multiply_U1_1_A_3_ce1;
assign Tinv_3_t_d0 = ap_const_lv32_0;
assign Tinv_3_t_d1 = ap_const_lv32_0;
assign Tinv_3_t_q0 = ap_const_lv32_0;
assign Tinv_3_t_q1 = ap_const_lv32_0;
assign Tinv_3_t_read = Accelerator_MAT_Multiply_U1_1_ap_ready;
assign Tinv_3_t_we0 = ap_const_logic_0;
assign Tinv_3_t_we1 = ap_const_logic_0;
assign Tinv_4_address0 = ap_const_lv3_0;
assign Tinv_4_address1 = ap_const_lv3_0;
assign Tinv_4_ce0 = ap_const_logic_0;
assign Tinv_4_ce1 = ap_const_logic_0;
assign Tinv_4_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_address0;
assign Tinv_4_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_ce0;
assign Tinv_4_i_d0 = ap_const_lv32_0;
assign Tinv_4_i_q0 = ap_const_lv32_0;
assign Tinv_4_i_we0 = ap_const_logic_0;
assign Tinv_4_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Tinv_4_t_address0 = Accelerator_MAT_Multiply_U1_1_A_4_address0;
assign Tinv_4_t_address1 = Accelerator_MAT_Multiply_U1_1_A_4_address1;
assign Tinv_4_t_ce0 = Accelerator_MAT_Multiply_U1_1_A_4_ce0;
assign Tinv_4_t_ce1 = Accelerator_MAT_Multiply_U1_1_A_4_ce1;
assign Tinv_4_t_d0 = ap_const_lv32_0;
assign Tinv_4_t_d1 = ap_const_lv32_0;
assign Tinv_4_t_q0 = ap_const_lv32_0;
assign Tinv_4_t_q1 = ap_const_lv32_0;
assign Tinv_4_t_read = Accelerator_MAT_Multiply_U1_1_ap_ready;
assign Tinv_4_t_we0 = ap_const_logic_0;
assign Tinv_4_t_we1 = ap_const_logic_0;
assign Tinv_5_address0 = ap_const_lv3_0;
assign Tinv_5_address1 = ap_const_lv3_0;
assign Tinv_5_ce0 = ap_const_logic_0;
assign Tinv_5_ce1 = ap_const_logic_0;
assign Tinv_5_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_address0;
assign Tinv_5_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_ce0;
assign Tinv_5_i_d0 = ap_const_lv32_0;
assign Tinv_5_i_q0 = ap_const_lv32_0;
assign Tinv_5_i_we0 = ap_const_logic_0;
assign Tinv_5_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Tinv_5_t_address0 = Accelerator_MAT_Multiply_U1_1_A_5_address0;
assign Tinv_5_t_address1 = Accelerator_MAT_Multiply_U1_1_A_5_address1;
assign Tinv_5_t_ce0 = Accelerator_MAT_Multiply_U1_1_A_5_ce0;
assign Tinv_5_t_ce1 = Accelerator_MAT_Multiply_U1_1_A_5_ce1;
assign Tinv_5_t_d0 = ap_const_lv32_0;
assign Tinv_5_t_d1 = ap_const_lv32_0;
assign Tinv_5_t_q0 = ap_const_lv32_0;
assign Tinv_5_t_q1 = ap_const_lv32_0;
assign Tinv_5_t_read = Accelerator_MAT_Multiply_U1_1_ap_ready;
assign Tinv_5_t_we0 = ap_const_logic_0;
assign Tinv_5_t_we1 = ap_const_logic_0;
assign Tinv_6_address0 = ap_const_lv3_0;
assign Tinv_6_address1 = ap_const_lv3_0;
assign Tinv_6_ce0 = ap_const_logic_0;
assign Tinv_6_ce1 = ap_const_logic_0;
assign Tinv_6_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_address0;
assign Tinv_6_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_ce0;
assign Tinv_6_i_d0 = ap_const_lv32_0;
assign Tinv_6_i_q0 = ap_const_lv32_0;
assign Tinv_6_i_we0 = ap_const_logic_0;
assign Tinv_6_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Tinv_6_t_address0 = Accelerator_MAT_Multiply_U1_1_A_6_address0;
assign Tinv_6_t_address1 = Accelerator_MAT_Multiply_U1_1_A_6_address1;
assign Tinv_6_t_ce0 = Accelerator_MAT_Multiply_U1_1_A_6_ce0;
assign Tinv_6_t_ce1 = Accelerator_MAT_Multiply_U1_1_A_6_ce1;
assign Tinv_6_t_d0 = ap_const_lv32_0;
assign Tinv_6_t_d1 = ap_const_lv32_0;
assign Tinv_6_t_q0 = ap_const_lv32_0;
assign Tinv_6_t_q1 = ap_const_lv32_0;
assign Tinv_6_t_read = Accelerator_MAT_Multiply_U1_1_ap_ready;
assign Tinv_6_t_we0 = ap_const_logic_0;
assign Tinv_6_t_we1 = ap_const_logic_0;
assign Tinv_7_address0 = ap_const_lv3_0;
assign Tinv_7_address1 = ap_const_lv3_0;
assign Tinv_7_ce0 = ap_const_logic_0;
assign Tinv_7_ce1 = ap_const_logic_0;
assign Tinv_7_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_address0;
assign Tinv_7_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_ce0;
assign Tinv_7_i_d0 = ap_const_lv32_0;
assign Tinv_7_i_q0 = ap_const_lv32_0;
assign Tinv_7_i_we0 = ap_const_logic_0;
assign Tinv_7_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Tinv_7_t_address0 = Accelerator_MAT_Multiply_U1_1_A_7_address0;
assign Tinv_7_t_address1 = Accelerator_MAT_Multiply_U1_1_A_7_address1;
assign Tinv_7_t_ce0 = Accelerator_MAT_Multiply_U1_1_A_7_ce0;
assign Tinv_7_t_ce1 = Accelerator_MAT_Multiply_U1_1_A_7_ce1;
assign Tinv_7_t_d0 = ap_const_lv32_0;
assign Tinv_7_t_d1 = ap_const_lv32_0;
assign Tinv_7_t_q0 = ap_const_lv32_0;
assign Tinv_7_t_q1 = ap_const_lv32_0;
assign Tinv_7_t_read = Accelerator_MAT_Multiply_U1_1_ap_ready;
assign Tinv_7_t_we0 = ap_const_logic_0;
assign Tinv_7_t_we1 = ap_const_logic_0;
assign X_read = Accelerator_MAT_Multiply_U1_1_B_read;
assign Y_address0 = ap_const_lv6_0;
assign Y_address1 = ap_const_lv6_0;
assign Y_ce0 = ap_const_logic_0;
assign Y_ce1 = ap_const_logic_0;
assign Y_d0 = ap_const_lv32_0;
assign Y_d1 = ap_const_lv32_0;
assign Y_i_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_address0;
assign Y_i_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_ce0;
assign Y_i_d0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_d0;
assign Y_i_we0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_we0;
assign Y_i_write = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
assign Y_t_address0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_address0;
assign Y_t_ce0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_ce0;
assign Y_t_d0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_d0;
assign Y_t_read = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
assign Y_t_we0 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_we0;
assign Y_we0 = ap_const_logic_0;
assign Y_we1 = ap_const_logic_0;
assign ap_chn_write_Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_i1 = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
assign ap_chn_write_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_i = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_sig_hs_done;
assign temp_address0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_address0;
assign temp_ce0 = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_ce0;
assign temp_d0 = Accelerator_MAT_Multiply_U1_1_C_d0;
assign temp_we0 = Accelerator_MAT_Multiply_U1_1_C_we0;


endmodule //Accelerator_DCT_Block_proc

