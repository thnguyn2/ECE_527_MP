// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Accelerator_DOT_Multiply (
        A_dout,
        A_empty_n,
        A_read,
        C_din,
        C_full_n,
        C_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;

input  [31:0] A_dout;
input   A_empty_n;
output   A_read;
output  [31:0] C_din;
input   C_full_n;
output   C_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_start;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_done;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_continue;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_idle;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_ready;
wire   [31:0] Accelerator_DOT_Multiply_Loop_row_proc_U0_A_dout;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_A_empty_n;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_A_read;
wire   [31:0] Accelerator_DOT_Multiply_Loop_row_proc_U0_C_din;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_C_full_n;
wire    Accelerator_DOT_Multiply_Loop_row_proc_U0_C_write;
wire    ap_sig_hs_continue;
reg    ap_reg_procdone_Accelerator_DOT_Multiply_Loop_row_proc_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_CS;
wire    ap_sig_top_allready;


Accelerator_DOT_Multiply_Loop_row_proc Accelerator_DOT_Multiply_Loop_row_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_start ),
    .ap_done( Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_done ),
    .ap_continue( Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_continue ),
    .ap_idle( Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_idle ),
    .ap_ready( Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_ready ),
    .A_dout( Accelerator_DOT_Multiply_Loop_row_proc_U0_A_dout ),
    .A_empty_n( Accelerator_DOT_Multiply_Loop_row_proc_U0_A_empty_n ),
    .A_read( Accelerator_DOT_Multiply_Loop_row_proc_U0_A_read ),
    .C_din( Accelerator_DOT_Multiply_Loop_row_proc_U0_C_din ),
    .C_full_n( Accelerator_DOT_Multiply_Loop_row_proc_U0_C_full_n ),
    .C_write( Accelerator_DOT_Multiply_Loop_row_proc_U0_C_write )
);



/// ap_reg_procdone_Accelerator_DOT_Multiply_Loop_row_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_DOT_Multiply_Loop_row_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_DOT_Multiply_Loop_row_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_DOT_Multiply_Loop_row_proc_U0 <= ap_const_logic_0;
        end else if ((Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_Accelerator_DOT_Multiply_Loop_row_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// ap_idle assign process. ///
always @ (Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_idle)
begin
    if ((Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_idle == ap_const_logic_1)) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_done)
begin
    if ((Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_done == ap_const_logic_1)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end
assign A_read = Accelerator_DOT_Multiply_Loop_row_proc_U0_A_read;
assign Accelerator_DOT_Multiply_Loop_row_proc_U0_A_dout = A_dout;
assign Accelerator_DOT_Multiply_Loop_row_proc_U0_A_empty_n = A_empty_n;
assign Accelerator_DOT_Multiply_Loop_row_proc_U0_C_full_n = C_full_n;
assign Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_continue = ap_sig_hs_continue;
assign Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_start = ap_start;
assign C_din = Accelerator_DOT_Multiply_Loop_row_proc_U0_C_din;
assign C_write = Accelerator_DOT_Multiply_Loop_row_proc_U0_C_write;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_const_logic_1;
assign ap_sig_top_allready = Accelerator_DOT_Multiply_Loop_row_proc_U0_ap_ready;


endmodule //Accelerator_DOT_Multiply

