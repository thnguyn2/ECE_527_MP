// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Accelerator_DCT (
        X_dout,
        X_empty_n,
        X_read,
        function_r,
        Y_address0,
        Y_ce0,
        Y_d0,
        Y_q0,
        Y_we0,
        Y_address1,
        Y_ce1,
        Y_d1,
        Y_q1,
        Y_we1,
        ap_clk,
        ap_rst,
        function_r_ap_vld,
        function_r_ap_ack,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;

input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
input  [7:0] function_r;
output  [5:0] Y_address0;
output   Y_ce0;
output  [31:0] Y_d0;
input  [31:0] Y_q0;
output   Y_we0;
output  [5:0] Y_address1;
output   Y_ce1;
output  [31:0] Y_d1;
input  [31:0] Y_q1;
output   Y_we1;
input   ap_clk;
input   ap_rst;
input   function_r_ap_vld;
output   function_r_ap_ack;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire   [7:0] Accelerator_DCT_Block_proc_U0_function_r;
wire   [31:0] Accelerator_DCT_Block_proc_U0_X_dout;
wire    Accelerator_DCT_Block_proc_U0_X_empty_n;
wire    Accelerator_DCT_Block_proc_U0_X_read;
wire   [5:0] Accelerator_DCT_Block_proc_U0_Y_address0;
wire    Accelerator_DCT_Block_proc_U0_Y_ce0;
wire   [31:0] Accelerator_DCT_Block_proc_U0_Y_d0;
wire   [31:0] Accelerator_DCT_Block_proc_U0_Y_q0;
wire    Accelerator_DCT_Block_proc_U0_Y_we0;
wire   [5:0] Accelerator_DCT_Block_proc_U0_Y_address1;
wire    Accelerator_DCT_Block_proc_U0_Y_ce1;
wire   [31:0] Accelerator_DCT_Block_proc_U0_Y_d1;
wire   [31:0] Accelerator_DCT_Block_proc_U0_Y_q1;
wire    Accelerator_DCT_Block_proc_U0_Y_we1;
wire    Accelerator_DCT_Block_proc_U0_ap_start;
wire    Accelerator_DCT_Block_proc_U0_ap_continue;
wire    Accelerator_DCT_Block_proc_U0_ap_done;
wire    Accelerator_DCT_Block_proc_U0_ap_idle;
wire    Accelerator_DCT_Block_proc_U0_ap_ready;
wire    Accelerator_DCT_Block_proc_U0_function_r_ap_vld;
wire    Accelerator_DCT_Block_proc_U0_function_r_ap_ack;
wire    ap_sig_hs_continue;
reg    ap_reg_procdone_Accelerator_DCT_Block_proc_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_CS;
wire    ap_sig_top_allready;


Accelerator_DCT_Block_proc Accelerator_DCT_Block_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .function_r( Accelerator_DCT_Block_proc_U0_function_r ),
    .X_dout( Accelerator_DCT_Block_proc_U0_X_dout ),
    .X_empty_n( Accelerator_DCT_Block_proc_U0_X_empty_n ),
    .X_read( Accelerator_DCT_Block_proc_U0_X_read ),
    .Y_address0( Accelerator_DCT_Block_proc_U0_Y_address0 ),
    .Y_ce0( Accelerator_DCT_Block_proc_U0_Y_ce0 ),
    .Y_d0( Accelerator_DCT_Block_proc_U0_Y_d0 ),
    .Y_q0( Accelerator_DCT_Block_proc_U0_Y_q0 ),
    .Y_we0( Accelerator_DCT_Block_proc_U0_Y_we0 ),
    .Y_address1( Accelerator_DCT_Block_proc_U0_Y_address1 ),
    .Y_ce1( Accelerator_DCT_Block_proc_U0_Y_ce1 ),
    .Y_d1( Accelerator_DCT_Block_proc_U0_Y_d1 ),
    .Y_q1( Accelerator_DCT_Block_proc_U0_Y_q1 ),
    .Y_we1( Accelerator_DCT_Block_proc_U0_Y_we1 ),
    .ap_start( Accelerator_DCT_Block_proc_U0_ap_start ),
    .ap_continue( Accelerator_DCT_Block_proc_U0_ap_continue ),
    .ap_done( Accelerator_DCT_Block_proc_U0_ap_done ),
    .ap_idle( Accelerator_DCT_Block_proc_U0_ap_idle ),
    .ap_ready( Accelerator_DCT_Block_proc_U0_ap_ready )
);



/// ap_reg_procdone_Accelerator_DCT_Block_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_Accelerator_DCT_Block_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_Accelerator_DCT_Block_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_Accelerator_DCT_Block_proc_U0 <= ap_const_logic_0;
        end else if ((Accelerator_DCT_Block_proc_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_Accelerator_DCT_Block_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// ap_idle assign process. ///
always @ (Accelerator_DCT_Block_proc_U0_ap_idle)
begin
    if ((Accelerator_DCT_Block_proc_U0_ap_idle == ap_const_logic_1)) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (Accelerator_DCT_Block_proc_U0_ap_done)
begin
    if ((Accelerator_DCT_Block_proc_U0_ap_done == ap_const_logic_1)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end
assign Accelerator_DCT_Block_proc_U0_X_dout = X_dout;
assign Accelerator_DCT_Block_proc_U0_X_empty_n = X_empty_n;
assign Accelerator_DCT_Block_proc_U0_Y_q0 = ap_const_lv32_0;
assign Accelerator_DCT_Block_proc_U0_Y_q1 = ap_const_lv32_0;
assign Accelerator_DCT_Block_proc_U0_ap_continue = ap_sig_hs_continue;
assign Accelerator_DCT_Block_proc_U0_ap_start = ap_start;
assign Accelerator_DCT_Block_proc_U0_function_r = function_r;
assign Accelerator_DCT_Block_proc_U0_function_r_ap_ack = ap_const_logic_0;
assign Accelerator_DCT_Block_proc_U0_function_r_ap_vld = function_r_ap_vld;
assign X_read = Accelerator_DCT_Block_proc_U0_X_read;
assign Y_address0 = Accelerator_DCT_Block_proc_U0_Y_address0;
assign Y_address1 = ap_const_lv6_0;
assign Y_ce0 = Accelerator_DCT_Block_proc_U0_Y_ce0;
assign Y_ce1 = ap_const_logic_0;
assign Y_d0 = Accelerator_DCT_Block_proc_U0_Y_d0;
assign Y_d1 = ap_const_lv32_0;
assign Y_we0 = Accelerator_DCT_Block_proc_U0_Y_we0;
assign Y_we1 = ap_const_logic_0;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_const_logic_1;
assign ap_sig_top_allready = Accelerator_DCT_Block_proc_U0_ap_ready;
assign function_r_ap_ack = Accelerator_DCT_Block_proc_U0_function_r_ap_ack;


endmodule //Accelerator_DCT

