// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Accelerator_Quant_Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        function_r,
        X_dout,
        X_empty_n,
        X_read,
        Y_din,
        Y_full_n,
        Y_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] function_r;
input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
output  [31:0] Y_din;
input   Y_full_n;
output   Y_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_read;
reg[31:0] Y_din;
reg Y_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [0:0] cond_fu_45_p2;
reg   [0:0] cond_reg_51;
reg    ap_sig_bdd_42;
wire   [31:0] grp_Accelerator_DOT_Divide_fu_29_A_dout;
wire    grp_Accelerator_DOT_Divide_fu_29_A_empty_n;
wire    grp_Accelerator_DOT_Divide_fu_29_A_read;
wire   [31:0] grp_Accelerator_DOT_Divide_fu_29_C_din;
wire    grp_Accelerator_DOT_Divide_fu_29_C_full_n;
wire    grp_Accelerator_DOT_Divide_fu_29_C_write;
wire    grp_Accelerator_DOT_Divide_fu_29_ap_done;
wire    grp_Accelerator_DOT_Divide_fu_29_ap_start;
wire    grp_Accelerator_DOT_Divide_fu_29_ap_idle;
wire    grp_Accelerator_DOT_Divide_fu_29_ap_ready;
wire   [31:0] grp_Accelerator_DOT_Multiply_fu_37_A_dout;
wire    grp_Accelerator_DOT_Multiply_fu_37_A_empty_n;
wire    grp_Accelerator_DOT_Multiply_fu_37_A_read;
wire   [31:0] grp_Accelerator_DOT_Multiply_fu_37_C_din;
wire    grp_Accelerator_DOT_Multiply_fu_37_C_full_n;
wire    grp_Accelerator_DOT_Multiply_fu_37_C_write;
wire    grp_Accelerator_DOT_Multiply_fu_37_ap_done;
wire    grp_Accelerator_DOT_Multiply_fu_37_ap_start;
wire    grp_Accelerator_DOT_Multiply_fu_37_ap_idle;
wire    grp_Accelerator_DOT_Multiply_fu_37_ap_ready;
reg    grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg = 1'b0;
reg    ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = 1'b0;
reg    ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_81;
reg    grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg = 1'b0;
reg    ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = 1'b0;
reg    ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_bdd_85;
reg    ap_sig_bdd_106;


Accelerator_DOT_Divide grp_Accelerator_DOT_Divide_fu_29(
    .A_dout( grp_Accelerator_DOT_Divide_fu_29_A_dout ),
    .A_empty_n( grp_Accelerator_DOT_Divide_fu_29_A_empty_n ),
    .A_read( grp_Accelerator_DOT_Divide_fu_29_A_read ),
    .C_din( grp_Accelerator_DOT_Divide_fu_29_C_din ),
    .C_full_n( grp_Accelerator_DOT_Divide_fu_29_C_full_n ),
    .C_write( grp_Accelerator_DOT_Divide_fu_29_C_write ),
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_done( grp_Accelerator_DOT_Divide_fu_29_ap_done ),
    .ap_start( grp_Accelerator_DOT_Divide_fu_29_ap_start ),
    .ap_idle( grp_Accelerator_DOT_Divide_fu_29_ap_idle ),
    .ap_ready( grp_Accelerator_DOT_Divide_fu_29_ap_ready )
);

Accelerator_DOT_Multiply grp_Accelerator_DOT_Multiply_fu_37(
    .A_dout( grp_Accelerator_DOT_Multiply_fu_37_A_dout ),
    .A_empty_n( grp_Accelerator_DOT_Multiply_fu_37_A_empty_n ),
    .A_read( grp_Accelerator_DOT_Multiply_fu_37_A_read ),
    .C_din( grp_Accelerator_DOT_Multiply_fu_37_C_din ),
    .C_full_n( grp_Accelerator_DOT_Multiply_fu_37_C_full_n ),
    .C_write( grp_Accelerator_DOT_Multiply_fu_37_C_write ),
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_done( grp_Accelerator_DOT_Multiply_fu_37_ap_done ),
    .ap_start( grp_Accelerator_DOT_Multiply_fu_37_ap_start ),
    .ap_idle( grp_Accelerator_DOT_Multiply_fu_37_ap_idle ),
    .ap_ready( grp_Accelerator_DOT_Multiply_fu_37_ap_ready )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(((cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Divide_fu_29_ap_done)) | (~(cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Multiply_fu_37_ap_done))))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_85) begin
            if (~(((cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Divide_fu_29_ap_done)) | (~(cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Multiply_fu_37_ap_done)))) begin
                ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == grp_Accelerator_DOT_Divide_fu_29_ap_ready)) begin
                ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_106) begin
            if (~(((cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Divide_fu_29_ap_done)) | (~(cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Multiply_fu_37_ap_done)))) begin
                ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == grp_Accelerator_DOT_Multiply_fu_37_ap_ready)) begin
                ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready <= ap_const_logic_1;
            end
        end
    end
end

/// grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_42 & (cond_fu_45_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready)))) begin
            grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_Accelerator_DOT_Divide_fu_29_ap_ready)) begin
            grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_42 & ~(cond_fu_45_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready)))) begin
            grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_Accelerator_DOT_Multiply_fu_37_ap_ready)) begin
            grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_42)) begin
        cond_reg_51 <= cond_fu_45_p2;
    end
end

/// X_read assign process. ///
always @ (cond_reg_51 or grp_Accelerator_DOT_Divide_fu_29_A_read or grp_Accelerator_DOT_Multiply_fu_37_A_read or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        if (~(cond_reg_51 == ap_const_lv1_0)) begin
            X_read = grp_Accelerator_DOT_Multiply_fu_37_A_read;
        end else if ((cond_reg_51 == ap_const_lv1_0)) begin
            X_read = grp_Accelerator_DOT_Divide_fu_29_A_read;
        end else begin
            X_read = ap_const_logic_0;
        end
    end else begin
        X_read = ap_const_logic_0;
    end
end

/// Y_din assign process. ///
always @ (cond_reg_51 or grp_Accelerator_DOT_Divide_fu_29_C_din or grp_Accelerator_DOT_Multiply_fu_37_C_din or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        if (~(cond_reg_51 == ap_const_lv1_0)) begin
            Y_din = grp_Accelerator_DOT_Multiply_fu_37_C_din;
        end else if ((cond_reg_51 == ap_const_lv1_0)) begin
            Y_din = grp_Accelerator_DOT_Divide_fu_29_C_din;
        end else begin
            Y_din = grp_Accelerator_DOT_Multiply_fu_37_C_din;
        end
    end else begin
        Y_din = grp_Accelerator_DOT_Multiply_fu_37_C_din;
    end
end

/// Y_write assign process. ///
always @ (cond_reg_51 or grp_Accelerator_DOT_Divide_fu_29_C_write or grp_Accelerator_DOT_Multiply_fu_37_C_write or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        if (~(cond_reg_51 == ap_const_lv1_0)) begin
            Y_write = grp_Accelerator_DOT_Multiply_fu_37_C_write;
        end else if ((cond_reg_51 == ap_const_lv1_0)) begin
            Y_write = grp_Accelerator_DOT_Divide_fu_29_C_write;
        end else begin
            Y_write = ap_const_logic_0;
        end
    end else begin
        Y_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or cond_reg_51 or grp_Accelerator_DOT_Divide_fu_29_ap_done or grp_Accelerator_DOT_Multiply_fu_37_ap_done or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(((cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Divide_fu_29_ap_done)) | (~(cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Multiply_fu_37_ap_done)))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (cond_reg_51 or grp_Accelerator_DOT_Divide_fu_29_ap_done or grp_Accelerator_DOT_Multiply_fu_37_ap_done or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(((cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Divide_fu_29_ap_done)) | (~(cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Multiply_fu_37_ap_done))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_81)
begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready assign process. ///
always @ (grp_Accelerator_DOT_Divide_fu_29_ap_ready or ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready)) begin
        ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = grp_Accelerator_DOT_Divide_fu_29_ap_ready;
    end else begin
        ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready assign process. ///
always @ (grp_Accelerator_DOT_Multiply_fu_37_ap_ready or ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready)) begin
        ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = grp_Accelerator_DOT_Multiply_fu_37_ap_ready;
    end else begin
        ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready = ap_const_logic_1;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or cond_reg_51 or ap_sig_bdd_42 or grp_Accelerator_DOT_Divide_fu_29_ap_done or grp_Accelerator_DOT_Multiply_fu_37_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_42) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(((cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Divide_fu_29_ap_done)) | (~(cond_reg_51 == ap_const_lv1_0) & (ap_const_logic_0 == grp_Accelerator_DOT_Multiply_fu_37_ap_done)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_106 assign process. ///
always @ (cond_reg_51 or ap_sig_cseq_ST_st2_fsm_1)
begin
    ap_sig_bdd_106 = ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(cond_reg_51 == ap_const_lv1_0));
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_42 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_42 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_81 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_85 assign process. ///
always @ (cond_reg_51 or ap_sig_cseq_ST_st2_fsm_1)
begin
    ap_sig_bdd_85 = ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (cond_reg_51 == ap_const_lv1_0));
end
assign cond_fu_45_p2 = (function_r == ap_const_lv8_1? 1'b1: 1'b0);
assign grp_Accelerator_DOT_Divide_fu_29_A_dout = X_dout;
assign grp_Accelerator_DOT_Divide_fu_29_A_empty_n = X_empty_n;
assign grp_Accelerator_DOT_Divide_fu_29_C_full_n = Y_full_n;
assign grp_Accelerator_DOT_Divide_fu_29_ap_start = grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg;
assign grp_Accelerator_DOT_Multiply_fu_37_A_dout = X_dout;
assign grp_Accelerator_DOT_Multiply_fu_37_A_empty_n = X_empty_n;
assign grp_Accelerator_DOT_Multiply_fu_37_C_full_n = Y_full_n;
assign grp_Accelerator_DOT_Multiply_fu_37_ap_start = grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg;


endmodule //Accelerator_Quant_Block_proc

