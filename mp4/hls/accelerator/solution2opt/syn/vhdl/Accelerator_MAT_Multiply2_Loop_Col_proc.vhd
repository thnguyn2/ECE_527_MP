-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_MAT_Multiply2_Loop_Col_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_cached_row_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_cached_row_ce0 : OUT STD_LOGIC;
    A_cached_row_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_cached_row_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_cached_row_ce1 : OUT STD_LOGIC;
    A_cached_row_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_4_ce0 : OUT STD_LOGIC;
    B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_5_ce0 : OUT STD_LOGIC;
    B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_6_ce0 : OUT STD_LOGIC;
    B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_7_ce0 : OUT STD_LOGIC;
    B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Accelerator_MAT_Multiply2_Loop_Col_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st48_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv28_4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal j_reg_247 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppstg_j_reg_247_pp0_it2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it10 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_reg_247_pp0_it11 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_cached_row_addr_gep_fu_68_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_reg_318 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_145 : BOOLEAN;
    signal A_cached_row_addr_1_gep_fu_76_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_1_reg_323 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_2_gep_fu_84_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_2_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_3_gep_fu_92_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_3_reg_333 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_4_gep_fu_100_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_4_reg_338 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_5_gep_fu_108_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_5_reg_343 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_6_gep_fu_116_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_6_reg_348 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_7_gep_fu_124_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_addr_7_reg_353 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_358_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_362 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_367 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_194 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_211 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_227 : BOOLEAN;
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_1_reg_482_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_2_reg_507_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_2_reg_507_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_3_reg_512_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_3_reg_512_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_3_reg_512_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_4_reg_517_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_4_reg_517_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_4_reg_517_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_4_reg_517_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_5_reg_522_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_5_reg_522_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_5_reg_522_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_5_reg_522_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_5_reg_522_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_527_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_527_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_527_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_527_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_527_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_527_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_532_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_532_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_532_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_532_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_532_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_532_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_532_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_532_pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_1_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_2_reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_3_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_4_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_5_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_6_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_7_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_phi_fu_251_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_265_ce : STD_LOGIC;
    signal grp_fu_269_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st48_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_425 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component Accelerator_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Accelerator_fadd_32ns_32ns_32_5_full_dsp_U31 : component Accelerator_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_260_p0,
        din1 => grp_fu_260_p1,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p2);

    Accelerator_fadd_32ns_32ns_32_5_full_dsp_U32 : component Accelerator_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_265_p0,
        din1 => grp_fu_265_p1,
        ce => grp_fu_265_ce,
        dout => grp_fu_265_p2);

    Accelerator_fmul_32ns_32ns_32_4_max_dsp_U33 : component Accelerator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_269_p0,
        din1 => grp_fu_269_p1,
        ce => grp_fu_269_ce,
        dout => grp_fu_269_p2);

    Accelerator_fmul_32ns_32ns_32_4_max_dsp_U34 : component Accelerator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond1_fu_287_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_145))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_145)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and not((exitcond1_reg_358 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_145))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- j_reg_247 assign process. --
    j_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_145))) then 
                j_reg_247 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_358 = ap_const_lv1_0))) then 
                j_reg_247 <= j_1_reg_362;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond1_reg_358_pp0_it1 <= exitcond1_reg_358;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it10 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it9;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it11 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it10;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it2 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it1;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it3 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it2;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it4 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it3;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it5 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it4;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it6 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it5;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it7 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it6;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it8 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it7;
                ap_reg_ppstg_exitcond1_reg_358_pp0_it9 <= ap_reg_ppstg_exitcond1_reg_358_pp0_it8;
                ap_reg_ppstg_j_reg_247_pp0_it1 <= j_reg_247;
                ap_reg_ppstg_j_reg_247_pp0_it10 <= ap_reg_ppstg_j_reg_247_pp0_it9;
                ap_reg_ppstg_j_reg_247_pp0_it11 <= ap_reg_ppstg_j_reg_247_pp0_it10;
                ap_reg_ppstg_j_reg_247_pp0_it2 <= ap_reg_ppstg_j_reg_247_pp0_it1;
                ap_reg_ppstg_j_reg_247_pp0_it3 <= ap_reg_ppstg_j_reg_247_pp0_it2;
                ap_reg_ppstg_j_reg_247_pp0_it4 <= ap_reg_ppstg_j_reg_247_pp0_it3;
                ap_reg_ppstg_j_reg_247_pp0_it5 <= ap_reg_ppstg_j_reg_247_pp0_it4;
                ap_reg_ppstg_j_reg_247_pp0_it6 <= ap_reg_ppstg_j_reg_247_pp0_it5;
                ap_reg_ppstg_j_reg_247_pp0_it7 <= ap_reg_ppstg_j_reg_247_pp0_it6;
                ap_reg_ppstg_j_reg_247_pp0_it8 <= ap_reg_ppstg_j_reg_247_pp0_it7;
                ap_reg_ppstg_j_reg_247_pp0_it9 <= ap_reg_ppstg_j_reg_247_pp0_it8;
                ap_reg_ppstg_tmp_4_1_reg_482_pp0_it2 <= tmp_4_1_reg_482;
                exitcond1_reg_358 <= exitcond1_fu_287_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then
                ap_reg_ppstg_tmp_4_2_reg_507_pp0_it2 <= tmp_4_2_reg_507;
                ap_reg_ppstg_tmp_4_2_reg_507_pp0_it3 <= ap_reg_ppstg_tmp_4_2_reg_507_pp0_it2;
                ap_reg_ppstg_tmp_4_3_reg_512_pp0_it2 <= tmp_4_3_reg_512;
                ap_reg_ppstg_tmp_4_3_reg_512_pp0_it3 <= ap_reg_ppstg_tmp_4_3_reg_512_pp0_it2;
                ap_reg_ppstg_tmp_4_3_reg_512_pp0_it4 <= ap_reg_ppstg_tmp_4_3_reg_512_pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then
                ap_reg_ppstg_tmp_4_4_reg_517_pp0_it2 <= tmp_4_4_reg_517;
                ap_reg_ppstg_tmp_4_4_reg_517_pp0_it3 <= ap_reg_ppstg_tmp_4_4_reg_517_pp0_it2;
                ap_reg_ppstg_tmp_4_4_reg_517_pp0_it4 <= ap_reg_ppstg_tmp_4_4_reg_517_pp0_it3;
                ap_reg_ppstg_tmp_4_4_reg_517_pp0_it5 <= ap_reg_ppstg_tmp_4_4_reg_517_pp0_it4;
                ap_reg_ppstg_tmp_4_5_reg_522_pp0_it2 <= tmp_4_5_reg_522;
                ap_reg_ppstg_tmp_4_5_reg_522_pp0_it3 <= ap_reg_ppstg_tmp_4_5_reg_522_pp0_it2;
                ap_reg_ppstg_tmp_4_5_reg_522_pp0_it4 <= ap_reg_ppstg_tmp_4_5_reg_522_pp0_it3;
                ap_reg_ppstg_tmp_4_5_reg_522_pp0_it5 <= ap_reg_ppstg_tmp_4_5_reg_522_pp0_it4;
                ap_reg_ppstg_tmp_4_5_reg_522_pp0_it6 <= ap_reg_ppstg_tmp_4_5_reg_522_pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then
                ap_reg_ppstg_tmp_4_6_reg_527_pp0_it2 <= tmp_4_6_reg_527;
                ap_reg_ppstg_tmp_4_6_reg_527_pp0_it3 <= ap_reg_ppstg_tmp_4_6_reg_527_pp0_it2;
                ap_reg_ppstg_tmp_4_6_reg_527_pp0_it4 <= ap_reg_ppstg_tmp_4_6_reg_527_pp0_it3;
                ap_reg_ppstg_tmp_4_6_reg_527_pp0_it5 <= ap_reg_ppstg_tmp_4_6_reg_527_pp0_it4;
                ap_reg_ppstg_tmp_4_6_reg_527_pp0_it6 <= ap_reg_ppstg_tmp_4_6_reg_527_pp0_it5;
                ap_reg_ppstg_tmp_4_6_reg_527_pp0_it7 <= ap_reg_ppstg_tmp_4_6_reg_527_pp0_it6;
                ap_reg_ppstg_tmp_4_7_reg_532_pp0_it2 <= tmp_4_7_reg_532;
                ap_reg_ppstg_tmp_4_7_reg_532_pp0_it3 <= ap_reg_ppstg_tmp_4_7_reg_532_pp0_it2;
                ap_reg_ppstg_tmp_4_7_reg_532_pp0_it4 <= ap_reg_ppstg_tmp_4_7_reg_532_pp0_it3;
                ap_reg_ppstg_tmp_4_7_reg_532_pp0_it5 <= ap_reg_ppstg_tmp_4_7_reg_532_pp0_it4;
                ap_reg_ppstg_tmp_4_7_reg_532_pp0_it6 <= ap_reg_ppstg_tmp_4_7_reg_532_pp0_it5;
                ap_reg_ppstg_tmp_4_7_reg_532_pp0_it7 <= ap_reg_ppstg_tmp_4_7_reg_532_pp0_it6;
                ap_reg_ppstg_tmp_4_7_reg_532_pp0_it8 <= ap_reg_ppstg_tmp_4_7_reg_532_pp0_it7;
                ap_reg_ppstg_tmp_4_7_reg_532_pp0_it9 <= ap_reg_ppstg_tmp_4_7_reg_532_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                j_1_reg_362 <= j_1_fu_293_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it3 = ap_const_lv1_0))) then
                temp_2_1_reg_542 <= grp_fu_260_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it4 = ap_const_lv1_0))) then
                temp_2_2_reg_547 <= grp_fu_260_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it5 = ap_const_lv1_0))) then
                temp_2_3_reg_552 <= grp_fu_260_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it7 = ap_const_lv1_0))) then
                temp_2_4_reg_557 <= grp_fu_265_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it8 = ap_const_lv1_0))) then
                temp_2_5_reg_562 <= grp_fu_265_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it9 = ap_const_lv1_0))) then
                temp_2_6_reg_567 <= grp_fu_265_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it10 = ap_const_lv1_0))) then
                temp_2_7_reg_572 <= grp_fu_265_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it2 = ap_const_lv1_0))) then
                temp_2_reg_537 <= grp_fu_260_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond1_reg_358 = ap_const_lv1_0))) then
                tmp_4_1_reg_482 <= grp_fu_275_p2;
                tmp_4_reg_477 <= grp_fu_269_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it1 = ap_const_lv1_0))) then
                tmp_4_2_reg_507 <= grp_fu_269_p2;
                tmp_4_3_reg_512 <= grp_fu_275_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it1 = ap_const_lv1_0))) then
                tmp_4_4_reg_517 <= grp_fu_269_p2;
                tmp_4_5_reg_522 <= grp_fu_275_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it1 = ap_const_lv1_0))) then
                tmp_4_6_reg_527 <= grp_fu_269_p2;
                tmp_4_7_reg_532 <= grp_fu_275_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond1_fu_287_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_367(3 downto 0) <= tmp_s_fu_299_p1(3 downto 0);
            end if;
        end if;
    end process;
    A_cached_row_addr_reg_318(2 downto 0) <= "000";
    A_cached_row_addr_1_reg_323(2 downto 0) <= "001";
    A_cached_row_addr_2_reg_328(2 downto 0) <= "010";
    A_cached_row_addr_3_reg_333(2 downto 0) <= "011";
    A_cached_row_addr_4_reg_338(2 downto 0) <= "100";
    A_cached_row_addr_5_reg_343(2 downto 0) <= "101";
    A_cached_row_addr_6_reg_348(2 downto 0) <= "110";
    A_cached_row_addr_7_reg_353(2 downto 0) <= "111";
    tmp_s_reg_367(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it10, ap_reg_ppiten_pp0_it11, ap_sig_bdd_145, exitcond1_fu_287_p2, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_145)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond1_fu_287_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_5;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st48_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    A_cached_row_addr_1_gep_fu_76_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_cached_row_addr_2_gep_fu_84_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_cached_row_addr_3_gep_fu_92_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_cached_row_addr_4_gep_fu_100_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_cached_row_addr_5_gep_fu_108_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_cached_row_addr_6_gep_fu_116_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_cached_row_addr_7_gep_fu_124_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_cached_row_addr_gep_fu_68_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_cached_row_address0 assign process. --
    A_cached_row_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, A_cached_row_addr_reg_318, A_cached_row_addr_2_reg_328, A_cached_row_addr_4_reg_338, A_cached_row_addr_6_reg_348, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_cached_row_address0 <= A_cached_row_addr_6_reg_348;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_cached_row_address0 <= A_cached_row_addr_4_reg_338;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_cached_row_address0 <= A_cached_row_addr_2_reg_328;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_cached_row_address0 <= A_cached_row_addr_reg_318;
            else 
                A_cached_row_address0 <= "XXX";
            end if;
        else 
            A_cached_row_address0 <= "XXX";
        end if; 
    end process;


    -- A_cached_row_address1 assign process. --
    A_cached_row_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, A_cached_row_addr_1_reg_323, A_cached_row_addr_3_reg_333, A_cached_row_addr_5_reg_343, A_cached_row_addr_7_reg_353, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_cached_row_address1 <= A_cached_row_addr_7_reg_353;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_cached_row_address1 <= A_cached_row_addr_5_reg_343;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_cached_row_address1 <= A_cached_row_addr_3_reg_333;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_cached_row_address1 <= A_cached_row_addr_1_reg_323;
            else 
                A_cached_row_address1 <= "XXX";
            end if;
        else 
            A_cached_row_address1 <= "XXX";
        end if; 
    end process;


    -- A_cached_row_ce0 assign process. --
    A_cached_row_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            A_cached_row_ce0 <= ap_const_logic_1;
        else 
            A_cached_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_cached_row_ce1 assign process. --
    A_cached_row_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            A_cached_row_ce1 <= ap_const_logic_1;
        else 
            A_cached_row_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    B_0_address0 <= tmp_s_fu_299_p1(3 - 1 downto 0);

    -- B_0_ce0 assign process. --
    B_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= tmp_s_fu_299_p1(3 - 1 downto 0);

    -- B_1_ce0 assign process. --
    B_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= tmp_s_reg_367(3 - 1 downto 0);

    -- B_2_ce0 assign process. --
    B_2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= tmp_s_reg_367(3 - 1 downto 0);

    -- B_3_ce0 assign process. --
    B_3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_4_address0 <= tmp_s_reg_367(3 - 1 downto 0);

    -- B_4_ce0 assign process. --
    B_4_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            B_4_ce0 <= ap_const_logic_1;
        else 
            B_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_5_address0 <= tmp_s_reg_367(3 - 1 downto 0);

    -- B_5_ce0 assign process. --
    B_5_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            B_5_ce0 <= ap_const_logic_1;
        else 
            B_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_6_address0 <= tmp_s_reg_367(3 - 1 downto 0);

    -- B_6_ce0 assign process. --
    B_6_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            B_6_ce0 <= ap_const_logic_1;
        else 
            B_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_7_address0 <= tmp_s_reg_367(3 - 1 downto 0);

    -- B_7_ce0 assign process. --
    B_7_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            B_7_ce0 <= ap_const_logic_1;
        else 
            B_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= tmp_fu_313_p1(6 - 1 downto 0);

    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_reg_ppiten_pp0_it11, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= temp_2_7_reg_572;

    -- C_we0 assign process. --
    C_we0_assign_proc : process(ap_reg_ppiten_pp0_it11, ap_reg_ppstg_exitcond1_reg_358_pp0_it11, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond1_reg_358_pp0_it11 = ap_const_lv1_0)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st48_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st48_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_104 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_145 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_194 assign process. --
    ap_sig_bdd_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_194 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_211 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_227 assign process. --
    ap_sig_bdd_227_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_227 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_425 assign process. --
    ap_sig_bdd_425_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_425 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_194)
    begin
        if (ap_sig_bdd_194) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_227)
    begin
        if (ap_sig_bdd_227) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_5 assign process. --
    ap_sig_cseq_ST_st48_fsm_5_assign_proc : process(ap_sig_bdd_425)
    begin
        if (ap_sig_bdd_425) then 
            ap_sig_cseq_ST_st48_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_287_p2 <= "1" when (j_phi_fu_251_p4 = ap_const_lv4_8) else "0";
    grp_fu_260_ce <= ap_const_logic_1;

    -- grp_fu_260_p0 assign process. --
    grp_fu_260_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_4_reg_477, temp_2_reg_537, temp_2_1_reg_542, temp_2_2_reg_547)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_260_p0 <= temp_2_2_reg_547;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_260_p0 <= temp_2_1_reg_542;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_260_p0 <= temp_2_reg_537;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_260_p0 <= tmp_4_reg_477;
        else 
            grp_fu_260_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_260_p1 assign process. --
    grp_fu_260_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_reg_ppstg_tmp_4_1_reg_482_pp0_it2, ap_reg_ppstg_tmp_4_2_reg_507_pp0_it3, ap_reg_ppstg_tmp_4_3_reg_512_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_260_p1 <= ap_reg_ppstg_tmp_4_3_reg_512_pp0_it4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_260_p1 <= ap_reg_ppstg_tmp_4_2_reg_507_pp0_it3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_260_p1 <= ap_reg_ppstg_tmp_4_1_reg_482_pp0_it2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_260_p1 <= ap_const_lv32_0;
        else 
            grp_fu_260_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_265_ce <= ap_const_logic_1;

    -- grp_fu_265_p0 assign process. --
    grp_fu_265_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it10, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, temp_2_3_reg_552, temp_2_4_reg_557, temp_2_5_reg_562, temp_2_6_reg_567)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))) then 
            grp_fu_265_p0 <= temp_2_6_reg_567;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_265_p0 <= temp_2_5_reg_562;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_265_p0 <= temp_2_4_reg_557;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_265_p0 <= temp_2_3_reg_552;
        else 
            grp_fu_265_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_265_p1 assign process. --
    grp_fu_265_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it10, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_reg_ppstg_tmp_4_4_reg_517_pp0_it5, ap_reg_ppstg_tmp_4_5_reg_522_pp0_it6, ap_reg_ppstg_tmp_4_6_reg_527_pp0_it7, ap_reg_ppstg_tmp_4_7_reg_532_pp0_it9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))) then 
            grp_fu_265_p1 <= ap_reg_ppstg_tmp_4_7_reg_532_pp0_it9;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_265_p1 <= ap_reg_ppstg_tmp_4_6_reg_527_pp0_it7;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_265_p1 <= ap_reg_ppstg_tmp_4_5_reg_522_pp0_it6;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_265_p1 <= ap_reg_ppstg_tmp_4_4_reg_517_pp0_it5;
        else 
            grp_fu_265_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_269_ce <= ap_const_logic_1;
    grp_fu_269_p0 <= A_cached_row_q0;

    -- grp_fu_269_p1 assign process. --
    grp_fu_269_p1_assign_proc : process(B_0_q0, B_2_q0, B_4_q0, B_6_q0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_269_p1 <= B_6_q0;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_269_p1 <= B_4_q0;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_269_p1 <= B_2_q0;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_269_p1 <= B_0_q0;
        else 
            grp_fu_269_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_275_ce <= ap_const_logic_1;
    grp_fu_275_p0 <= A_cached_row_q1;

    -- grp_fu_275_p1 assign process. --
    grp_fu_275_p1_assign_proc : process(B_1_q0, B_3_q0, B_5_q0, B_7_q0, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_275_p1 <= B_7_q0;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_275_p1 <= B_5_q0;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_275_p1 <= B_3_q0;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_275_p1 <= B_1_q0;
        else 
            grp_fu_275_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    j_1_fu_293_p2 <= std_logic_vector(unsigned(j_phi_fu_251_p4) + unsigned(ap_const_lv4_1));

    -- j_phi_fu_251_p4 assign process. --
    j_phi_fu_251_p4_assign_proc : process(j_reg_247, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, exitcond1_reg_358, j_1_reg_362)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_358 = ap_const_lv1_0))) then 
            j_phi_fu_251_p4 <= j_1_reg_362;
        else 
            j_phi_fu_251_p4 <= j_reg_247;
        end if; 
    end process;

    p_addr_fu_305_p3 <= (ap_const_lv28_4 & ap_reg_ppstg_j_reg_247_pp0_it11);
    tmp_fu_313_p1 <= std_logic_vector(resize(unsigned(p_addr_fu_305_p3),64));
    tmp_s_fu_299_p1 <= std_logic_vector(resize(unsigned(j_phi_fu_251_p4),64));
end behav;
