-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_DCT is
port (
    X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    X_empty_n : IN STD_LOGIC;
    X_read : OUT STD_LOGIC;
    function_r : IN STD_LOGIC_VECTOR (7 downto 0);
    Y_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Y_ce0 : OUT STD_LOGIC;
    Y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_we0 : OUT STD_LOGIC;
    Y_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Y_ce1 : OUT STD_LOGIC;
    Y_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    function_r_ap_vld : IN STD_LOGIC;
    function_r_ap_ack : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of Accelerator_DCT is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal Accelerator_DCT_Block_proc_U0_function_r : STD_LOGIC_VECTOR (7 downto 0);
    signal Accelerator_DCT_Block_proc_U0_X_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_DCT_Block_proc_U0_X_empty_n : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_X_read : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_Y_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_DCT_Block_proc_U0_Y_ce0 : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_Y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_DCT_Block_proc_U0_Y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_DCT_Block_proc_U0_Y_we0 : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_Y_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_DCT_Block_proc_U0_Y_ce1 : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_Y_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_DCT_Block_proc_U0_Y_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_DCT_Block_proc_U0_Y_we1 : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_ap_start : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_ap_continue : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_ap_done : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_ap_idle : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_ap_ready : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_function_r_ap_vld : STD_LOGIC;
    signal Accelerator_DCT_Block_proc_U0_function_r_ap_ack : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal ap_reg_procdone_Accelerator_DCT_Block_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component Accelerator_DCT_Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        function_r : IN STD_LOGIC_VECTOR (7 downto 0);
        X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        X_empty_n : IN STD_LOGIC;
        X_read : OUT STD_LOGIC;
        Y_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        Y_ce0 : OUT STD_LOGIC;
        Y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Y_we0 : OUT STD_LOGIC;
        Y_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        Y_ce1 : OUT STD_LOGIC;
        Y_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Y_we1 : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;



begin
    Accelerator_DCT_Block_proc_U0 : component Accelerator_DCT_Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        function_r => Accelerator_DCT_Block_proc_U0_function_r,
        X_dout => Accelerator_DCT_Block_proc_U0_X_dout,
        X_empty_n => Accelerator_DCT_Block_proc_U0_X_empty_n,
        X_read => Accelerator_DCT_Block_proc_U0_X_read,
        Y_address0 => Accelerator_DCT_Block_proc_U0_Y_address0,
        Y_ce0 => Accelerator_DCT_Block_proc_U0_Y_ce0,
        Y_d0 => Accelerator_DCT_Block_proc_U0_Y_d0,
        Y_q0 => Accelerator_DCT_Block_proc_U0_Y_q0,
        Y_we0 => Accelerator_DCT_Block_proc_U0_Y_we0,
        Y_address1 => Accelerator_DCT_Block_proc_U0_Y_address1,
        Y_ce1 => Accelerator_DCT_Block_proc_U0_Y_ce1,
        Y_d1 => Accelerator_DCT_Block_proc_U0_Y_d1,
        Y_q1 => Accelerator_DCT_Block_proc_U0_Y_q1,
        Y_we1 => Accelerator_DCT_Block_proc_U0_Y_we1,
        ap_start => Accelerator_DCT_Block_proc_U0_ap_start,
        ap_continue => Accelerator_DCT_Block_proc_U0_ap_continue,
        ap_done => Accelerator_DCT_Block_proc_U0_ap_done,
        ap_idle => Accelerator_DCT_Block_proc_U0_ap_idle,
        ap_ready => Accelerator_DCT_Block_proc_U0_ap_ready);





    -- ap_reg_procdone_Accelerator_DCT_Block_proc_U0 assign process. --
    ap_reg_procdone_Accelerator_DCT_Block_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_DCT_Block_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_DCT_Block_proc_U0 <= ap_const_logic_0;
                elsif ((Accelerator_DCT_Block_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_Accelerator_DCT_Block_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    Accelerator_DCT_Block_proc_U0_X_dout <= X_dout;
    Accelerator_DCT_Block_proc_U0_X_empty_n <= X_empty_n;
    Accelerator_DCT_Block_proc_U0_Y_q0 <= ap_const_lv32_0;
    Accelerator_DCT_Block_proc_U0_Y_q1 <= ap_const_lv32_0;
    Accelerator_DCT_Block_proc_U0_ap_continue <= ap_sig_hs_continue;
    Accelerator_DCT_Block_proc_U0_ap_start <= ap_start;
    Accelerator_DCT_Block_proc_U0_function_r <= function_r;
    Accelerator_DCT_Block_proc_U0_function_r_ap_ack <= ap_const_logic_0;
    Accelerator_DCT_Block_proc_U0_function_r_ap_vld <= function_r_ap_vld;
    X_read <= Accelerator_DCT_Block_proc_U0_X_read;
    Y_address0 <= Accelerator_DCT_Block_proc_U0_Y_address0;
    Y_address1 <= ap_const_lv6_0;
    Y_ce0 <= Accelerator_DCT_Block_proc_U0_Y_ce0;
    Y_ce1 <= ap_const_logic_0;
    Y_d0 <= Accelerator_DCT_Block_proc_U0_Y_d0;
    Y_d1 <= ap_const_lv32_0;
    Y_we0 <= Accelerator_DCT_Block_proc_U0_Y_we0;
    Y_we1 <= ap_const_logic_0;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(Accelerator_DCT_Block_proc_U0_ap_idle)
    begin
        if ((Accelerator_DCT_Block_proc_U0_ap_idle = ap_const_logic_1)) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(Accelerator_DCT_Block_proc_U0_ap_done)
    begin
        if ((Accelerator_DCT_Block_proc_U0_ap_done = ap_const_logic_1)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= Accelerator_DCT_Block_proc_U0_ap_ready;
    function_r_ap_ack <= Accelerator_DCT_Block_proc_U0_function_r_ap_ack;
end behav;
