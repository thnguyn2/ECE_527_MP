-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_DOT_Divide is
port (
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of Accelerator_DOT_Divide is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal Accelerator_DOT_Divide_Loop_row_proc_U0_ap_start : STD_LOGIC;
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_ap_done : STD_LOGIC;
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_ap_continue : STD_LOGIC;
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_ap_idle : STD_LOGIC;
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_ap_ready : STD_LOGIC;
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_A_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_A_empty_n : STD_LOGIC;
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_A_read : STD_LOGIC;
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_C_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_C_full_n : STD_LOGIC;
    signal Accelerator_DOT_Divide_Loop_row_proc_U0_C_write : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal ap_reg_procdone_Accelerator_DOT_Divide_Loop_row_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component Accelerator_DOT_Divide_Loop_row_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_empty_n : IN STD_LOGIC;
        A_read : OUT STD_LOGIC;
        C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_full_n : IN STD_LOGIC;
        C_write : OUT STD_LOGIC );
    end component;



begin
    Accelerator_DOT_Divide_Loop_row_proc_U0 : component Accelerator_DOT_Divide_Loop_row_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Accelerator_DOT_Divide_Loop_row_proc_U0_ap_start,
        ap_done => Accelerator_DOT_Divide_Loop_row_proc_U0_ap_done,
        ap_continue => Accelerator_DOT_Divide_Loop_row_proc_U0_ap_continue,
        ap_idle => Accelerator_DOT_Divide_Loop_row_proc_U0_ap_idle,
        ap_ready => Accelerator_DOT_Divide_Loop_row_proc_U0_ap_ready,
        A_dout => Accelerator_DOT_Divide_Loop_row_proc_U0_A_dout,
        A_empty_n => Accelerator_DOT_Divide_Loop_row_proc_U0_A_empty_n,
        A_read => Accelerator_DOT_Divide_Loop_row_proc_U0_A_read,
        C_din => Accelerator_DOT_Divide_Loop_row_proc_U0_C_din,
        C_full_n => Accelerator_DOT_Divide_Loop_row_proc_U0_C_full_n,
        C_write => Accelerator_DOT_Divide_Loop_row_proc_U0_C_write);





    -- ap_reg_procdone_Accelerator_DOT_Divide_Loop_row_proc_U0 assign process. --
    ap_reg_procdone_Accelerator_DOT_Divide_Loop_row_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_DOT_Divide_Loop_row_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_DOT_Divide_Loop_row_proc_U0 <= ap_const_logic_0;
                elsif ((Accelerator_DOT_Divide_Loop_row_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_Accelerator_DOT_Divide_Loop_row_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    A_read <= Accelerator_DOT_Divide_Loop_row_proc_U0_A_read;
    Accelerator_DOT_Divide_Loop_row_proc_U0_A_dout <= A_dout;
    Accelerator_DOT_Divide_Loop_row_proc_U0_A_empty_n <= A_empty_n;
    Accelerator_DOT_Divide_Loop_row_proc_U0_C_full_n <= C_full_n;
    Accelerator_DOT_Divide_Loop_row_proc_U0_ap_continue <= ap_sig_hs_continue;
    Accelerator_DOT_Divide_Loop_row_proc_U0_ap_start <= ap_start;
    C_din <= Accelerator_DOT_Divide_Loop_row_proc_U0_C_din;
    C_write <= Accelerator_DOT_Divide_Loop_row_proc_U0_C_write;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(Accelerator_DOT_Divide_Loop_row_proc_U0_ap_idle)
    begin
        if ((Accelerator_DOT_Divide_Loop_row_proc_U0_ap_idle = ap_const_logic_1)) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(Accelerator_DOT_Divide_Loop_row_proc_U0_ap_done)
    begin
        if ((Accelerator_DOT_Divide_Loop_row_proc_U0_ap_done = ap_const_logic_1)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= Accelerator_DOT_Divide_Loop_row_proc_U0_ap_ready;
end behav;
