-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_MAT_Multiply_Loop_Row_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_0_ce1 : OUT STD_LOGIC;
    A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_2_ce1 : OUT STD_LOGIC;
    A_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_3_ce1 : OUT STD_LOGIC;
    A_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_4_ce0 : OUT STD_LOGIC;
    A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_4_ce1 : OUT STD_LOGIC;
    A_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_5_ce0 : OUT STD_LOGIC;
    A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_5_ce1 : OUT STD_LOGIC;
    A_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_6_ce0 : OUT STD_LOGIC;
    A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_6_ce1 : OUT STD_LOGIC;
    A_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_7_ce0 : OUT STD_LOGIC;
    A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_7_ce1 : OUT STD_LOGIC;
    A_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_cached_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_cached_ce0 : OUT STD_LOGIC;
    B_cached_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_cached_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_cached_ce1 : OUT STD_LOGIC;
    B_cached_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Accelerator_MAT_Multiply_Loop_Row_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st49_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv28_2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv28_3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000011";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal indvar_flatten_reg_745 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_756 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_768 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_0_addr_gep_fu_94_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_reg_1008 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_131 : BOOLEAN;
    signal A_1_addr_gep_fu_102_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_reg_1013 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_gep_fu_110_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_reg_1018 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_gep_fu_118_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_reg_1023 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_gep_fu_126_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_reg_1028 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_gep_fu_134_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_reg_1033 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_gep_fu_142_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_reg_1038 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_gep_fu_150_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_reg_1043 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_1_gep_fu_158_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_1_reg_1048 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_1_gep_fu_166_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_1_reg_1053 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_1_gep_fu_174_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_1_reg_1058 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_1_gep_fu_182_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_1_reg_1063 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_1_gep_fu_190_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_1_reg_1068 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_1_gep_fu_198_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_1_reg_1073 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_1_gep_fu_206_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_1_reg_1078 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_1_gep_fu_214_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_1_reg_1083 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_2_gep_fu_222_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_2_reg_1088 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_2_gep_fu_230_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_2_reg_1093 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_2_gep_fu_238_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_2_reg_1098 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_2_gep_fu_246_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_2_reg_1103 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_2_gep_fu_254_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_2_reg_1108 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_2_gep_fu_262_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_2_reg_1113 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_2_gep_fu_270_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_2_reg_1118 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_2_gep_fu_278_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_2_reg_1123 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_3_gep_fu_286_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_3_reg_1128 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_3_gep_fu_294_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_3_reg_1133 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_3_gep_fu_302_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_3_reg_1138 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_3_gep_fu_310_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_3_reg_1143 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_3_gep_fu_318_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_3_reg_1148 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_3_gep_fu_326_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_3_reg_1153 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_3_gep_fu_334_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_3_reg_1158 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_3_gep_fu_342_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_3_reg_1163 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_4_gep_fu_350_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_4_reg_1168 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_4_gep_fu_358_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_4_reg_1173 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_4_gep_fu_366_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_4_reg_1178 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_4_gep_fu_374_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_4_reg_1183 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_4_gep_fu_382_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_4_reg_1188 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_4_gep_fu_390_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_4_reg_1193 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_4_gep_fu_398_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_4_reg_1198 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_4_gep_fu_406_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_4_reg_1203 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_5_gep_fu_414_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_5_reg_1208 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_5_gep_fu_422_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_5_reg_1213 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_5_gep_fu_430_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_5_reg_1218 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_5_gep_fu_438_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_5_reg_1223 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_5_gep_fu_446_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_5_reg_1228 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_5_gep_fu_454_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_5_reg_1233 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_5_gep_fu_462_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_5_reg_1238 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_5_gep_fu_470_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_5_reg_1243 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_6_gep_fu_478_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_6_reg_1248 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_6_gep_fu_486_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_6_reg_1253 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_6_gep_fu_494_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_6_reg_1258 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_6_gep_fu_502_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_6_reg_1263 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_6_gep_fu_510_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_6_reg_1268 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_6_gep_fu_518_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_6_reg_1273 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_6_gep_fu_526_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_6_reg_1278 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_6_gep_fu_534_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_6_reg_1283 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_7_gep_fu_542_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_addr_7_reg_1288 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_7_gep_fu_550_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_addr_7_reg_1293 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_7_gep_fu_558_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_addr_7_reg_1298 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_7_gep_fu_566_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_addr_7_reg_1303 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_7_gep_fu_574_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_4_addr_7_reg_1308 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_7_gep_fu_582_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_5_addr_7_reg_1313 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_7_gep_fu_590_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_6_addr_7_reg_1318 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_7_gep_fu_598_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_7_addr_7_reg_1323 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_267 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_845_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_reg_1332 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_mid2_fu_857_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_reg_1342 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it10 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it11 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_mid2_fu_891_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_mid2_reg_1363 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_338 : BOOLEAN;
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it10 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_898_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_reg_1369 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_797_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_trn_cast3_fu_904_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_trn_cast3_reg_1380 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_cached_load_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_1_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_376 : BOOLEAN;
    signal B_cached_load_2_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_3_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_392 : BOOLEAN;
    signal B_cached_load_4_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_5_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_978_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1470 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_6_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_7_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_789_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_1_reg_1500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_1_reg_1500_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_2_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_2_reg_1505_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_2_reg_1505_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_3_reg_1510 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_4_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_5_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_6_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_7_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_reg_1535 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_1_reg_1540 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_2_reg_1545 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_3_reg_1550 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_4_reg_1555 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_5_reg_1560 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_6_reg_1565 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_7_reg_1570 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_phi_fu_749_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_phi_fu_760_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_phi_fu_772_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_780_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_785_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_789_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_793_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_818_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_trn_cast_fu_865_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_addr_fu_874_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_885_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_addr2_fu_907_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr3_fu_919_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr4_fu_930_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr7_fu_942_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr5_fu_955_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_trn_cast2_fu_952_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr1_fu_967_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_986_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr6_cast_fu_993_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_trn_cast1_fu_983_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr8_fu_997_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_780_ce : STD_LOGIC;
    signal grp_fu_785_ce : STD_LOGIC;
    signal grp_fu_789_ce : STD_LOGIC;
    signal grp_fu_793_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st49_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_715 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component Accelerator_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_mux_8to1_sel3_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Accelerator_fadd_32ns_32ns_32_5_full_dsp_U2 : component Accelerator_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_780_p0,
        din1 => grp_fu_780_p1,
        ce => grp_fu_780_ce,
        dout => grp_fu_780_p2);

    Accelerator_fadd_32ns_32ns_32_5_full_dsp_U3 : component Accelerator_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_785_p0,
        din1 => grp_fu_785_p1,
        ce => grp_fu_785_ce,
        dout => grp_fu_785_p2);

    Accelerator_fmul_32ns_32ns_32_4_max_dsp_U4 : component Accelerator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_789_p0,
        din1 => grp_fu_789_p1,
        ce => grp_fu_789_ce,
        dout => grp_fu_789_p2);

    Accelerator_fmul_32ns_32ns_32_4_max_dsp_U5 : component Accelerator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_793_p0,
        din1 => grp_fu_793_p1,
        ce => grp_fu_793_ce,
        dout => grp_fu_793_p2);

    Accelerator_mux_8to1_sel3_32_1_U6 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => grp_fu_797_p1,
        din2 => grp_fu_797_p2,
        din3 => grp_fu_797_p3,
        din4 => grp_fu_797_p4,
        din5 => grp_fu_797_p5,
        din6 => grp_fu_797_p6,
        din7 => grp_fu_797_p7,
        din8 => grp_fu_797_p8,
        din9 => grp_fu_797_p9,
        dout => grp_fu_797_p10);

    Accelerator_mux_8to1_sel3_32_1_U7 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => grp_fu_818_p1,
        din2 => grp_fu_818_p2,
        din3 => grp_fu_818_p3,
        din4 => grp_fu_818_p4,
        din5 => grp_fu_818_p5,
        din6 => grp_fu_818_p6,
        din7 => grp_fu_818_p7,
        din8 => grp_fu_818_p8,
        din9 => grp_fu_818_p9,
        dout => grp_fu_818_p10);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_839_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_131))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1328 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_131)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and not((exitcond_flatten_reg_1328 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_131))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_756 assign process. --
    i_1_reg_756_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1 = ap_const_lv1_0))) then 
                i_1_reg_756 <= i_1_mid2_reg_1363;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_131))) then 
                i_1_reg_756 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_745 assign process. --
    indvar_flatten_reg_745_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1328 = ap_const_lv1_0))) then 
                indvar_flatten_reg_745 <= indvar_flatten_next_reg_1332;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_131))) then 
                indvar_flatten_reg_745 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_768 assign process. --
    j_1_reg_768_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1328 = ap_const_lv1_0))) then 
                j_1_reg_768 <= j_reg_1470;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_131))) then 
                j_1_reg_768 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_1328 = ap_const_lv1_0))) then
                B_cached_load_1_reg_1395 <= B_cached_q1;
                B_cached_load_reg_1385 <= B_cached_q0;
                tmp_11_reg_1369 <= tmp_11_fu_898_p1;
                tmp_3_reg_1390 <= grp_fu_818_p10;
                    tmp_6_trn_cast3_reg_1380(3 downto 0) <= tmp_6_trn_cast3_fu_904_p1(3 downto 0);
                tmp_reg_1375 <= grp_fu_797_p10;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1328 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then
                B_cached_load_2_reg_1415 <= B_cached_q0;
                B_cached_load_3_reg_1425 <= B_cached_q1;
                tmp_4_reg_1410 <= grp_fu_797_p10;
                tmp_5_reg_1420 <= grp_fu_818_p10;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1328 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then
                B_cached_load_4_reg_1445 <= B_cached_q0;
                B_cached_load_5_reg_1455 <= B_cached_q1;
                tmp_7_reg_1440 <= grp_fu_797_p10;
                tmp_8_reg_1450 <= grp_fu_818_p10;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_1328 = ap_const_lv1_0))) then
                B_cached_load_6_reg_1480 <= B_cached_q0;
                B_cached_load_7_reg_1490 <= B_cached_q1;
                tmp_10_reg_1485 <= grp_fu_818_p10;
                tmp_s_reg_1475 <= grp_fu_797_p10;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1 <= exitcond_flatten_reg_1328;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it10 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it9;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it11 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it10;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it3;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it5 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it4;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it6 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it5;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it7 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it6;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it8 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it7;
                ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it9 <= ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it8;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it1 <= j_1_mid2_reg_1342;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it10 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it9;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it11 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it10;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it2 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it1;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it3 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it2;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it4 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it3;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it5 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it4;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it6 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it5;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it7 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it6;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it8 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it7;
                ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it9 <= ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it8;
                ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it3 <= tmp_9_6_reg_1525;
                ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it4 <= ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it3;
                ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it5 <= ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it4;
                ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it6 <= ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it5;
                ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it7 <= ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it6;
                ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it8 <= ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it7;
                ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it10 <= ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it9;
                ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it3 <= tmp_9_7_reg_1530;
                ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it4 <= ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it3;
                ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it5 <= ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it4;
                ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it6 <= ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it5;
                ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it7 <= ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it6;
                ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it8 <= ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it7;
                ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it9 <= ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it8;
                exitcond_flatten_reg_1328 <= exitcond_flatten_fu_839_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it1 <= i_1_mid2_reg_1363;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it10 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it9;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it11 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it10;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it2 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it1;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it3 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it2;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it4 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it3;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it5 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it4;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it6 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it5;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it7 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it6;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it8 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it7;
                ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it9 <= ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it8;
                ap_reg_ppstg_tmp_9_1_reg_1500_pp0_it2 <= tmp_9_1_reg_1500;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then
                ap_reg_ppstg_tmp_9_2_reg_1505_pp0_it2 <= tmp_9_2_reg_1505;
                ap_reg_ppstg_tmp_9_2_reg_1505_pp0_it3 <= ap_reg_ppstg_tmp_9_2_reg_1505_pp0_it2;
                ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it2 <= tmp_9_3_reg_1510;
                ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it3 <= ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it2;
                ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it4 <= ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then
                ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it2 <= tmp_9_4_reg_1515;
                ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it3 <= ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it2;
                ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it4 <= ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it3;
                ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it5 <= ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it4;
                ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it2 <= tmp_9_5_reg_1520;
                ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it3 <= ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it2;
                ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it4 <= ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it3;
                ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it5 <= ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it4;
                ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it6 <= ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_839_p2 = ap_const_lv1_0))) then
                exitcond_reg_1337 <= exitcond_fu_851_p2;
                j_1_mid2_reg_1342 <= j_1_mid2_fu_857_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_1328 = ap_const_lv1_0))) then
                i_1_mid2_reg_1363 <= i_1_mid2_fu_891_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                indvar_flatten_next_reg_1332 <= indvar_flatten_next_fu_845_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_1328 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then
                j_reg_1470 <= j_fu_978_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it3 = ap_const_lv1_0))) then
                temp_1_1_reg_1540 <= grp_fu_780_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it4 = ap_const_lv1_0))) then
                temp_1_2_reg_1545 <= grp_fu_780_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it6 = ap_const_lv1_0))) then
                temp_1_3_reg_1550 <= grp_fu_780_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it7 = ap_const_lv1_0))) then
                temp_1_4_reg_1555 <= grp_fu_785_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it8 = ap_const_lv1_0))) then
                temp_1_5_reg_1560 <= grp_fu_785_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it9 = ap_const_lv1_0))) then
                temp_1_6_reg_1565 <= grp_fu_785_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it11 = ap_const_lv1_0))) then
                temp_1_7_reg_1570 <= grp_fu_785_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it2 = ap_const_lv1_0))) then
                temp_1_reg_1535 <= grp_fu_780_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1 = ap_const_lv1_0))) then
                tmp_9_1_reg_1500 <= grp_fu_793_p2;
                tmp_9_reg_1495 <= grp_fu_789_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1 = ap_const_lv1_0))) then
                tmp_9_2_reg_1505 <= grp_fu_789_p2;
                tmp_9_3_reg_1510 <= grp_fu_793_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1 = ap_const_lv1_0))) then
                tmp_9_4_reg_1515 <= grp_fu_789_p2;
                tmp_9_5_reg_1520 <= grp_fu_793_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1 = ap_const_lv1_0))) then
                tmp_9_6_reg_1525 <= grp_fu_789_p2;
                tmp_9_7_reg_1530 <= grp_fu_793_p2;
            end if;
        end if;
    end process;
    A_0_addr_reg_1008(2 downto 0) <= "000";
    A_1_addr_reg_1013(2 downto 0) <= "000";
    A_2_addr_reg_1018(2 downto 0) <= "000";
    A_3_addr_reg_1023(2 downto 0) <= "000";
    A_4_addr_reg_1028(2 downto 0) <= "000";
    A_5_addr_reg_1033(2 downto 0) <= "000";
    A_6_addr_reg_1038(2 downto 0) <= "000";
    A_7_addr_reg_1043(2 downto 0) <= "000";
    A_0_addr_1_reg_1048(2 downto 0) <= "001";
    A_1_addr_1_reg_1053(2 downto 0) <= "001";
    A_2_addr_1_reg_1058(2 downto 0) <= "001";
    A_3_addr_1_reg_1063(2 downto 0) <= "001";
    A_4_addr_1_reg_1068(2 downto 0) <= "001";
    A_5_addr_1_reg_1073(2 downto 0) <= "001";
    A_6_addr_1_reg_1078(2 downto 0) <= "001";
    A_7_addr_1_reg_1083(2 downto 0) <= "001";
    A_0_addr_2_reg_1088(2 downto 0) <= "010";
    A_1_addr_2_reg_1093(2 downto 0) <= "010";
    A_2_addr_2_reg_1098(2 downto 0) <= "010";
    A_3_addr_2_reg_1103(2 downto 0) <= "010";
    A_4_addr_2_reg_1108(2 downto 0) <= "010";
    A_5_addr_2_reg_1113(2 downto 0) <= "010";
    A_6_addr_2_reg_1118(2 downto 0) <= "010";
    A_7_addr_2_reg_1123(2 downto 0) <= "010";
    A_0_addr_3_reg_1128(2 downto 0) <= "011";
    A_1_addr_3_reg_1133(2 downto 0) <= "011";
    A_2_addr_3_reg_1138(2 downto 0) <= "011";
    A_3_addr_3_reg_1143(2 downto 0) <= "011";
    A_4_addr_3_reg_1148(2 downto 0) <= "011";
    A_5_addr_3_reg_1153(2 downto 0) <= "011";
    A_6_addr_3_reg_1158(2 downto 0) <= "011";
    A_7_addr_3_reg_1163(2 downto 0) <= "011";
    A_0_addr_4_reg_1168(2 downto 0) <= "100";
    A_1_addr_4_reg_1173(2 downto 0) <= "100";
    A_2_addr_4_reg_1178(2 downto 0) <= "100";
    A_3_addr_4_reg_1183(2 downto 0) <= "100";
    A_4_addr_4_reg_1188(2 downto 0) <= "100";
    A_5_addr_4_reg_1193(2 downto 0) <= "100";
    A_6_addr_4_reg_1198(2 downto 0) <= "100";
    A_7_addr_4_reg_1203(2 downto 0) <= "100";
    A_0_addr_5_reg_1208(2 downto 0) <= "101";
    A_1_addr_5_reg_1213(2 downto 0) <= "101";
    A_2_addr_5_reg_1218(2 downto 0) <= "101";
    A_3_addr_5_reg_1223(2 downto 0) <= "101";
    A_4_addr_5_reg_1228(2 downto 0) <= "101";
    A_5_addr_5_reg_1233(2 downto 0) <= "101";
    A_6_addr_5_reg_1238(2 downto 0) <= "101";
    A_7_addr_5_reg_1243(2 downto 0) <= "101";
    A_0_addr_6_reg_1248(2 downto 0) <= "110";
    A_1_addr_6_reg_1253(2 downto 0) <= "110";
    A_2_addr_6_reg_1258(2 downto 0) <= "110";
    A_3_addr_6_reg_1263(2 downto 0) <= "110";
    A_4_addr_6_reg_1268(2 downto 0) <= "110";
    A_5_addr_6_reg_1273(2 downto 0) <= "110";
    A_6_addr_6_reg_1278(2 downto 0) <= "110";
    A_7_addr_6_reg_1283(2 downto 0) <= "110";
    A_0_addr_7_reg_1288(2 downto 0) <= "111";
    A_1_addr_7_reg_1293(2 downto 0) <= "111";
    A_2_addr_7_reg_1298(2 downto 0) <= "111";
    A_3_addr_7_reg_1303(2 downto 0) <= "111";
    A_4_addr_7_reg_1308(2 downto 0) <= "111";
    A_5_addr_7_reg_1313(2 downto 0) <= "111";
    A_6_addr_7_reg_1318(2 downto 0) <= "111";
    A_7_addr_7_reg_1323(2 downto 0) <= "111";
    tmp_6_trn_cast3_reg_1380(5 downto 4) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_131, exitcond_flatten_fu_839_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it10, ap_reg_ppiten_pp0_it11, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_131)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_839_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st49_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st49_fsm_5;
                end if;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st49_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    A_0_addr_1_gep_fu_158_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_0_addr_2_gep_fu_222_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_0_addr_3_gep_fu_286_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_0_addr_4_gep_fu_350_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_0_addr_5_gep_fu_414_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_0_addr_6_gep_fu_478_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_0_addr_7_gep_fu_542_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_0_addr_gep_fu_94_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_0_address0 assign process. --
    A_0_address0_assign_proc : process(A_0_addr_reg_1008, A_0_addr_2_reg_1088, A_0_addr_4_reg_1168, A_0_addr_6_reg_1248, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_0_address0 <= A_0_addr_6_reg_1248;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_0_address0 <= A_0_addr_4_reg_1168;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_0_address0 <= A_0_addr_2_reg_1088;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_0_address0 <= A_0_addr_reg_1008;
            else 
                A_0_address0 <= "XXX";
            end if;
        else 
            A_0_address0 <= "XXX";
        end if; 
    end process;


    -- A_0_address1 assign process. --
    A_0_address1_assign_proc : process(A_0_addr_1_reg_1048, A_0_addr_3_reg_1128, A_0_addr_5_reg_1208, A_0_addr_7_reg_1288, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_0_address1 <= A_0_addr_7_reg_1288;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_0_address1 <= A_0_addr_5_reg_1208;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_0_address1 <= A_0_addr_3_reg_1128;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_0_address1 <= A_0_addr_1_reg_1048;
            else 
                A_0_address1 <= "XXX";
            end if;
        else 
            A_0_address1 <= "XXX";
        end if; 
    end process;


    -- A_0_ce0 assign process. --
    A_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_0_ce1 assign process. --
    A_0_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_0_ce1 <= ap_const_logic_1;
        else 
            A_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_addr_1_gep_fu_166_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_1_addr_2_gep_fu_230_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_1_addr_3_gep_fu_294_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_1_addr_4_gep_fu_358_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_1_addr_5_gep_fu_422_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_1_addr_6_gep_fu_486_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_1_addr_7_gep_fu_550_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_1_addr_gep_fu_102_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_1_address0 assign process. --
    A_1_address0_assign_proc : process(A_1_addr_reg_1013, A_1_addr_2_reg_1093, A_1_addr_4_reg_1173, A_1_addr_6_reg_1253, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_1_address0 <= A_1_addr_6_reg_1253;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_1_address0 <= A_1_addr_4_reg_1173;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_1_address0 <= A_1_addr_2_reg_1093;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_1_address0 <= A_1_addr_reg_1013;
            else 
                A_1_address0 <= "XXX";
            end if;
        else 
            A_1_address0 <= "XXX";
        end if; 
    end process;


    -- A_1_address1 assign process. --
    A_1_address1_assign_proc : process(A_1_addr_1_reg_1053, A_1_addr_3_reg_1133, A_1_addr_5_reg_1213, A_1_addr_7_reg_1293, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_1_address1 <= A_1_addr_7_reg_1293;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_1_address1 <= A_1_addr_5_reg_1213;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_1_address1 <= A_1_addr_3_reg_1133;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_1_address1 <= A_1_addr_1_reg_1053;
            else 
                A_1_address1 <= "XXX";
            end if;
        else 
            A_1_address1 <= "XXX";
        end if; 
    end process;


    -- A_1_ce0 assign process. --
    A_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_1_ce1 assign process. --
    A_1_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_1_ce1 <= ap_const_logic_1;
        else 
            A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_addr_1_gep_fu_174_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_2_addr_2_gep_fu_238_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_2_addr_3_gep_fu_302_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_2_addr_4_gep_fu_366_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_2_addr_5_gep_fu_430_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_2_addr_6_gep_fu_494_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_2_addr_7_gep_fu_558_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_2_addr_gep_fu_110_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_2_address0 assign process. --
    A_2_address0_assign_proc : process(A_2_addr_reg_1018, A_2_addr_2_reg_1098, A_2_addr_4_reg_1178, A_2_addr_6_reg_1258, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_2_address0 <= A_2_addr_6_reg_1258;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_2_address0 <= A_2_addr_4_reg_1178;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_2_address0 <= A_2_addr_2_reg_1098;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_2_address0 <= A_2_addr_reg_1018;
            else 
                A_2_address0 <= "XXX";
            end if;
        else 
            A_2_address0 <= "XXX";
        end if; 
    end process;


    -- A_2_address1 assign process. --
    A_2_address1_assign_proc : process(A_2_addr_1_reg_1058, A_2_addr_3_reg_1138, A_2_addr_5_reg_1218, A_2_addr_7_reg_1298, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_2_address1 <= A_2_addr_7_reg_1298;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_2_address1 <= A_2_addr_5_reg_1218;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_2_address1 <= A_2_addr_3_reg_1138;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_2_address1 <= A_2_addr_1_reg_1058;
            else 
                A_2_address1 <= "XXX";
            end if;
        else 
            A_2_address1 <= "XXX";
        end if; 
    end process;


    -- A_2_ce0 assign process. --
    A_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_2_ce0 <= ap_const_logic_1;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_2_ce1 assign process. --
    A_2_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_2_ce1 <= ap_const_logic_1;
        else 
            A_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_3_addr_1_gep_fu_182_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_3_addr_2_gep_fu_246_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_3_addr_3_gep_fu_310_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_3_addr_4_gep_fu_374_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_3_addr_5_gep_fu_438_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_3_addr_6_gep_fu_502_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_3_addr_7_gep_fu_566_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_3_addr_gep_fu_118_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_3_address0 assign process. --
    A_3_address0_assign_proc : process(A_3_addr_reg_1023, A_3_addr_2_reg_1103, A_3_addr_4_reg_1183, A_3_addr_6_reg_1263, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_3_address0 <= A_3_addr_6_reg_1263;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_3_address0 <= A_3_addr_4_reg_1183;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_3_address0 <= A_3_addr_2_reg_1103;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_3_address0 <= A_3_addr_reg_1023;
            else 
                A_3_address0 <= "XXX";
            end if;
        else 
            A_3_address0 <= "XXX";
        end if; 
    end process;


    -- A_3_address1 assign process. --
    A_3_address1_assign_proc : process(A_3_addr_1_reg_1063, A_3_addr_3_reg_1143, A_3_addr_5_reg_1223, A_3_addr_7_reg_1303, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_3_address1 <= A_3_addr_7_reg_1303;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_3_address1 <= A_3_addr_5_reg_1223;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_3_address1 <= A_3_addr_3_reg_1143;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_3_address1 <= A_3_addr_1_reg_1063;
            else 
                A_3_address1 <= "XXX";
            end if;
        else 
            A_3_address1 <= "XXX";
        end if; 
    end process;


    -- A_3_ce0 assign process. --
    A_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_3_ce0 <= ap_const_logic_1;
        else 
            A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_3_ce1 assign process. --
    A_3_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_3_ce1 <= ap_const_logic_1;
        else 
            A_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_4_addr_1_gep_fu_190_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_4_addr_2_gep_fu_254_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_4_addr_3_gep_fu_318_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_4_addr_4_gep_fu_382_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_4_addr_5_gep_fu_446_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_4_addr_6_gep_fu_510_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_4_addr_7_gep_fu_574_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_4_addr_gep_fu_126_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_4_address0 assign process. --
    A_4_address0_assign_proc : process(A_4_addr_reg_1028, A_4_addr_2_reg_1108, A_4_addr_4_reg_1188, A_4_addr_6_reg_1268, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_4_address0 <= A_4_addr_6_reg_1268;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_4_address0 <= A_4_addr_4_reg_1188;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_4_address0 <= A_4_addr_2_reg_1108;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_4_address0 <= A_4_addr_reg_1028;
            else 
                A_4_address0 <= "XXX";
            end if;
        else 
            A_4_address0 <= "XXX";
        end if; 
    end process;


    -- A_4_address1 assign process. --
    A_4_address1_assign_proc : process(A_4_addr_1_reg_1068, A_4_addr_3_reg_1148, A_4_addr_5_reg_1228, A_4_addr_7_reg_1308, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_4_address1 <= A_4_addr_7_reg_1308;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_4_address1 <= A_4_addr_5_reg_1228;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_4_address1 <= A_4_addr_3_reg_1148;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_4_address1 <= A_4_addr_1_reg_1068;
            else 
                A_4_address1 <= "XXX";
            end if;
        else 
            A_4_address1 <= "XXX";
        end if; 
    end process;


    -- A_4_ce0 assign process. --
    A_4_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_4_ce0 <= ap_const_logic_1;
        else 
            A_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_4_ce1 assign process. --
    A_4_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_4_ce1 <= ap_const_logic_1;
        else 
            A_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_5_addr_1_gep_fu_198_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_5_addr_2_gep_fu_262_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_5_addr_3_gep_fu_326_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_5_addr_4_gep_fu_390_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_5_addr_5_gep_fu_454_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_5_addr_6_gep_fu_518_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_5_addr_7_gep_fu_582_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_5_addr_gep_fu_134_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_5_address0 assign process. --
    A_5_address0_assign_proc : process(A_5_addr_reg_1033, A_5_addr_2_reg_1113, A_5_addr_4_reg_1193, A_5_addr_6_reg_1273, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_5_address0 <= A_5_addr_6_reg_1273;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_5_address0 <= A_5_addr_4_reg_1193;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_5_address0 <= A_5_addr_2_reg_1113;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_5_address0 <= A_5_addr_reg_1033;
            else 
                A_5_address0 <= "XXX";
            end if;
        else 
            A_5_address0 <= "XXX";
        end if; 
    end process;


    -- A_5_address1 assign process. --
    A_5_address1_assign_proc : process(A_5_addr_1_reg_1073, A_5_addr_3_reg_1153, A_5_addr_5_reg_1233, A_5_addr_7_reg_1313, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_5_address1 <= A_5_addr_7_reg_1313;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_5_address1 <= A_5_addr_5_reg_1233;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_5_address1 <= A_5_addr_3_reg_1153;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_5_address1 <= A_5_addr_1_reg_1073;
            else 
                A_5_address1 <= "XXX";
            end if;
        else 
            A_5_address1 <= "XXX";
        end if; 
    end process;


    -- A_5_ce0 assign process. --
    A_5_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_5_ce0 <= ap_const_logic_1;
        else 
            A_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_5_ce1 assign process. --
    A_5_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_5_ce1 <= ap_const_logic_1;
        else 
            A_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_6_addr_1_gep_fu_206_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_6_addr_2_gep_fu_270_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_6_addr_3_gep_fu_334_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_6_addr_4_gep_fu_398_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_6_addr_5_gep_fu_462_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_6_addr_6_gep_fu_526_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_6_addr_7_gep_fu_590_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_6_addr_gep_fu_142_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_6_address0 assign process. --
    A_6_address0_assign_proc : process(A_6_addr_reg_1038, A_6_addr_2_reg_1118, A_6_addr_4_reg_1198, A_6_addr_6_reg_1278, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_6_address0 <= A_6_addr_6_reg_1278;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_6_address0 <= A_6_addr_4_reg_1198;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_6_address0 <= A_6_addr_2_reg_1118;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_6_address0 <= A_6_addr_reg_1038;
            else 
                A_6_address0 <= "XXX";
            end if;
        else 
            A_6_address0 <= "XXX";
        end if; 
    end process;


    -- A_6_address1 assign process. --
    A_6_address1_assign_proc : process(A_6_addr_1_reg_1078, A_6_addr_3_reg_1158, A_6_addr_5_reg_1238, A_6_addr_7_reg_1318, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_6_address1 <= A_6_addr_7_reg_1318;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_6_address1 <= A_6_addr_5_reg_1238;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_6_address1 <= A_6_addr_3_reg_1158;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_6_address1 <= A_6_addr_1_reg_1078;
            else 
                A_6_address1 <= "XXX";
            end if;
        else 
            A_6_address1 <= "XXX";
        end if; 
    end process;


    -- A_6_ce0 assign process. --
    A_6_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_6_ce0 <= ap_const_logic_1;
        else 
            A_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_6_ce1 assign process. --
    A_6_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_6_ce1 <= ap_const_logic_1;
        else 
            A_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_7_addr_1_gep_fu_214_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    A_7_addr_2_gep_fu_278_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    A_7_addr_3_gep_fu_342_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    A_7_addr_4_gep_fu_406_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    A_7_addr_5_gep_fu_470_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    A_7_addr_6_gep_fu_534_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    A_7_addr_7_gep_fu_598_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    A_7_addr_gep_fu_150_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- A_7_address0 assign process. --
    A_7_address0_assign_proc : process(A_7_addr_reg_1043, A_7_addr_2_reg_1123, A_7_addr_4_reg_1203, A_7_addr_6_reg_1283, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_7_address0 <= A_7_addr_6_reg_1283;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_7_address0 <= A_7_addr_4_reg_1203;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_7_address0 <= A_7_addr_2_reg_1123;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_7_address0 <= A_7_addr_reg_1043;
            else 
                A_7_address0 <= "XXX";
            end if;
        else 
            A_7_address0 <= "XXX";
        end if; 
    end process;


    -- A_7_address1 assign process. --
    A_7_address1_assign_proc : process(A_7_addr_1_reg_1083, A_7_addr_3_reg_1163, A_7_addr_5_reg_1243, A_7_addr_7_reg_1323, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                A_7_address1 <= A_7_addr_7_reg_1323;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                A_7_address1 <= A_7_addr_5_reg_1243;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                A_7_address1 <= A_7_addr_3_reg_1163;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                A_7_address1 <= A_7_addr_1_reg_1083;
            else 
                A_7_address1 <= "XXX";
            end if;
        else 
            A_7_address1 <= "XXX";
        end if; 
    end process;


    -- A_7_ce0 assign process. --
    A_7_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_7_ce0 <= ap_const_logic_1;
        else 
            A_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_7_ce1 assign process. --
    A_7_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            A_7_ce1 <= ap_const_logic_1;
        else 
            A_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_cached_address0 assign process. --
    B_cached_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_1_fu_869_p1, tmp_12_fu_914_p1, tmp_14_fu_937_p1, tmp_16_fu_962_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                B_cached_address0 <= tmp_16_fu_962_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                B_cached_address0 <= tmp_14_fu_937_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                B_cached_address0 <= tmp_12_fu_914_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                B_cached_address0 <= tmp_1_fu_869_p1(6 - 1 downto 0);
            else 
                B_cached_address0 <= "XXXXXX";
            end if;
        else 
            B_cached_address0 <= "XXXXXX";
        end if; 
    end process;


    -- B_cached_address1 assign process. --
    B_cached_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_6_fu_880_p1, tmp_13_fu_925_p1, tmp_15_fu_947_p1, tmp_17_fu_973_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                B_cached_address1 <= tmp_17_fu_973_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                B_cached_address1 <= tmp_15_fu_947_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                B_cached_address1 <= tmp_13_fu_925_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                B_cached_address1 <= tmp_6_fu_880_p1(6 - 1 downto 0);
            else 
                B_cached_address1 <= "XXXXXX";
            end if;
        else 
            B_cached_address1 <= "XXXXXX";
        end if; 
    end process;


    -- B_cached_ce0 assign process. --
    B_cached_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            B_cached_ce0 <= ap_const_logic_1;
        else 
            B_cached_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_cached_ce1 assign process. --
    B_cached_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            B_cached_ce1 <= ap_const_logic_1;
        else 
            B_cached_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= tmp_19_fu_1003_p1(6 - 1 downto 0);

    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_reg_ppiten_pp0_it11, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= temp_1_7_reg_1570;

    -- C_we0 assign process. --
    C_we0_assign_proc : process(ap_reg_ppiten_pp0_it11, ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it11, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it11 = ap_const_lv1_0)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st49_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st49_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_131 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_267 assign process. --
    ap_sig_bdd_267_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_267 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_338 assign process. --
    ap_sig_bdd_338_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_338 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_376 assign process. --
    ap_sig_bdd_376_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_376 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_392 assign process. --
    ap_sig_bdd_392_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_392 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_715 assign process. --
    ap_sig_bdd_715_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_715 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_267)
    begin
        if (ap_sig_bdd_267) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_338)
    begin
        if (ap_sig_bdd_338) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_376)
    begin
        if (ap_sig_bdd_376) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_392)
    begin
        if (ap_sig_bdd_392) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_5 assign process. --
    ap_sig_cseq_ST_st49_fsm_5_assign_proc : process(ap_sig_bdd_715)
    begin
        if (ap_sig_bdd_715) then 
            ap_sig_cseq_ST_st49_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_839_p2 <= "1" when (indvar_flatten_phi_fu_749_p4 = ap_const_lv7_40) else "0";
    exitcond_fu_851_p2 <= "1" when (j_1_phi_fu_772_p4 = ap_const_lv4_8) else "0";
    grp_fu_780_ce <= ap_const_logic_1;

    -- grp_fu_780_p0 assign process. --
    grp_fu_780_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_9_reg_1495, temp_1_reg_1535, temp_1_1_reg_1540, temp_1_2_reg_1545)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_780_p0 <= temp_1_2_reg_1545;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) then 
            grp_fu_780_p0 <= temp_1_1_reg_1540;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_780_p0 <= temp_1_reg_1535;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_780_p0 <= tmp_9_reg_1495;
        else 
            grp_fu_780_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_780_p1 assign process. --
    grp_fu_780_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_reg_ppstg_tmp_9_1_reg_1500_pp0_it2, ap_reg_ppstg_tmp_9_2_reg_1505_pp0_it3, ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_780_p1 <= ap_reg_ppstg_tmp_9_3_reg_1510_pp0_it4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) then 
            grp_fu_780_p1 <= ap_reg_ppstg_tmp_9_2_reg_1505_pp0_it3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_780_p1 <= ap_reg_ppstg_tmp_9_1_reg_1500_pp0_it2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_780_p1 <= ap_const_lv32_0;
        else 
            grp_fu_780_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_785_ce <= ap_const_logic_1;

    -- grp_fu_785_p0 assign process. --
    grp_fu_785_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it9, ap_reg_ppiten_pp0_it10, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, temp_1_3_reg_1550, temp_1_4_reg_1555, temp_1_5_reg_1560, temp_1_6_reg_1565)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_785_p0 <= temp_1_6_reg_1565;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it9))) then 
            grp_fu_785_p0 <= temp_1_5_reg_1560;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_785_p0 <= temp_1_4_reg_1555;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_785_p0 <= temp_1_3_reg_1550;
        else 
            grp_fu_785_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_785_p1 assign process. --
    grp_fu_785_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it9, ap_reg_ppiten_pp0_it10, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it5, ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it6, ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it8, ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_785_p1 <= ap_reg_ppstg_tmp_9_7_reg_1530_pp0_it10;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it9))) then 
            grp_fu_785_p1 <= ap_reg_ppstg_tmp_9_6_reg_1525_pp0_it8;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_785_p1 <= ap_reg_ppstg_tmp_9_5_reg_1520_pp0_it6;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_785_p1 <= ap_reg_ppstg_tmp_9_4_reg_1515_pp0_it5;
        else 
            grp_fu_785_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_789_ce <= ap_const_logic_1;

    -- grp_fu_789_p0 assign process. --
    grp_fu_789_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_reg_1375, tmp_4_reg_1410, ap_sig_cseq_ST_pp0_stg2_fsm_3, tmp_7_reg_1440, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_s_reg_1475)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_789_p0 <= tmp_s_reg_1475;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_789_p0 <= tmp_7_reg_1440;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_789_p0 <= tmp_4_reg_1410;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_789_p0 <= tmp_reg_1375;
        else 
            grp_fu_789_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_789_p1 assign process. --
    grp_fu_789_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, B_cached_load_reg_1385, ap_sig_cseq_ST_pp0_stg2_fsm_3, B_cached_load_2_reg_1415, ap_sig_cseq_ST_pp0_stg3_fsm_4, B_cached_load_4_reg_1445, B_cached_load_6_reg_1480)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_789_p1 <= B_cached_load_6_reg_1480;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_789_p1 <= B_cached_load_4_reg_1445;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_789_p1 <= B_cached_load_2_reg_1415;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_789_p1 <= B_cached_load_reg_1385;
        else 
            grp_fu_789_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_793_ce <= ap_const_logic_1;

    -- grp_fu_793_p0 assign process. --
    grp_fu_793_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_3_reg_1390, ap_sig_cseq_ST_pp0_stg2_fsm_3, tmp_5_reg_1420, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_8_reg_1450, tmp_10_reg_1485)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_793_p0 <= tmp_10_reg_1485;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_793_p0 <= tmp_8_reg_1450;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_793_p0 <= tmp_5_reg_1420;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_793_p0 <= tmp_3_reg_1390;
        else 
            grp_fu_793_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_793_p1 assign process. --
    grp_fu_793_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, B_cached_load_1_reg_1395, ap_sig_cseq_ST_pp0_stg2_fsm_3, B_cached_load_3_reg_1425, ap_sig_cseq_ST_pp0_stg3_fsm_4, B_cached_load_5_reg_1455, B_cached_load_7_reg_1490)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_793_p1 <= B_cached_load_7_reg_1490;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_793_p1 <= B_cached_load_5_reg_1455;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_793_p1 <= B_cached_load_3_reg_1425;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_793_p1 <= B_cached_load_1_reg_1395;
        else 
            grp_fu_793_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_797_p1 <= A_0_q0;
    grp_fu_797_p2 <= A_1_q0;
    grp_fu_797_p3 <= A_2_q0;
    grp_fu_797_p4 <= A_3_q0;
    grp_fu_797_p5 <= A_4_q0;
    grp_fu_797_p6 <= A_5_q0;
    grp_fu_797_p7 <= A_6_q0;
    grp_fu_797_p8 <= A_7_q0;

    -- grp_fu_797_p9 assign process. --
    grp_fu_797_p9_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_11_fu_898_p1, tmp_11_reg_1369, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            grp_fu_797_p9 <= tmp_11_reg_1369;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_797_p9 <= tmp_11_fu_898_p1;
        else 
            grp_fu_797_p9 <= "XXX";
        end if; 
    end process;

    grp_fu_818_p1 <= A_0_q1;
    grp_fu_818_p2 <= A_1_q1;
    grp_fu_818_p3 <= A_2_q1;
    grp_fu_818_p4 <= A_3_q1;
    grp_fu_818_p5 <= A_4_q1;
    grp_fu_818_p6 <= A_5_q1;
    grp_fu_818_p7 <= A_6_q1;
    grp_fu_818_p8 <= A_7_q1;

    -- grp_fu_818_p9 assign process. --
    grp_fu_818_p9_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_11_fu_898_p1, tmp_11_reg_1369, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            grp_fu_818_p9 <= tmp_11_reg_1369;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            grp_fu_818_p9 <= tmp_11_fu_898_p1;
        else 
            grp_fu_818_p9 <= "XXX";
        end if; 
    end process;

    i_1_mid2_fu_891_p3 <= 
        i_fu_885_p2 when (exitcond_reg_1337(0) = '1') else 
        i_1_phi_fu_760_p4;

    -- i_1_phi_fu_760_p4 assign process. --
    i_1_phi_fu_760_p4_assign_proc : process(i_1_reg_756, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1, i_1_mid2_reg_1363, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond_flatten_reg_1328_pp0_it1 = ap_const_lv1_0))) then 
            i_1_phi_fu_760_p4 <= i_1_mid2_reg_1363;
        else 
            i_1_phi_fu_760_p4 <= i_1_reg_756;
        end if; 
    end process;

    i_fu_885_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_1_phi_fu_760_p4));
    indvar_flatten_next_fu_845_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_749_p4) + unsigned(ap_const_lv7_1));

    -- indvar_flatten_phi_fu_749_p4 assign process. --
    indvar_flatten_phi_fu_749_p4_assign_proc : process(indvar_flatten_reg_745, exitcond_flatten_reg_1328, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, indvar_flatten_next_reg_1332)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1328 = ap_const_lv1_0))) then 
            indvar_flatten_phi_fu_749_p4 <= indvar_flatten_next_reg_1332;
        else 
            indvar_flatten_phi_fu_749_p4 <= indvar_flatten_reg_745;
        end if; 
    end process;

    j_1_mid2_fu_857_p3 <= 
        ap_const_lv4_0 when (exitcond_fu_851_p2(0) = '1') else 
        j_1_phi_fu_772_p4;

    -- j_1_phi_fu_772_p4 assign process. --
    j_1_phi_fu_772_p4_assign_proc : process(j_1_reg_768, exitcond_flatten_reg_1328, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, j_reg_1470)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1328 = ap_const_lv1_0))) then 
            j_1_phi_fu_772_p4 <= j_reg_1470;
        else 
            j_1_phi_fu_772_p4 <= j_1_reg_768;
        end if; 
    end process;

    j_fu_978_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(j_1_mid2_reg_1342));
    p_addr1_fu_967_p2 <= std_logic_vector(unsigned(ap_const_lv7_38) + unsigned(tmp_6_trn_cast2_fu_952_p1));
    p_addr2_fu_907_p3 <= (ap_const_lv28_1 & j_1_mid2_reg_1342);
    p_addr3_fu_919_p2 <= std_logic_vector(unsigned(ap_const_lv6_18) + unsigned(tmp_6_trn_cast3_fu_904_p1));
    p_addr4_fu_930_p3 <= (ap_const_lv28_2 & j_1_mid2_reg_1342);
    p_addr5_fu_955_p3 <= (ap_const_lv28_3 & j_1_mid2_reg_1342);
    p_addr6_cast_fu_993_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_986_p3),8));
    p_addr7_fu_942_p2 <= std_logic_vector(signed(ap_const_lv6_28) + signed(tmp_6_trn_cast3_reg_1380));
    p_addr8_fu_997_p2 <= std_logic_vector(unsigned(p_addr6_cast_fu_993_p1) + unsigned(tmp_6_trn_cast1_fu_983_p1));
    p_addr_fu_874_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) + unsigned(tmp_6_trn_cast_fu_865_p1));
    tmp_11_fu_898_p1 <= i_1_mid2_fu_891_p3(3 - 1 downto 0);
    tmp_12_fu_914_p1 <= std_logic_vector(resize(unsigned(p_addr2_fu_907_p3),64));
    tmp_13_fu_925_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_919_p2),64));
    tmp_14_fu_937_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_930_p3),64));
    tmp_15_fu_947_p1 <= std_logic_vector(resize(unsigned(p_addr7_fu_942_p2),64));
    tmp_16_fu_962_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_955_p3),64));
    tmp_17_fu_973_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_967_p2),64));
    tmp_18_fu_986_p3 <= (ap_reg_ppstg_i_1_mid2_reg_1363_pp0_it11 & ap_const_lv3_0);
    tmp_19_fu_1003_p1 <= std_logic_vector(resize(unsigned(p_addr8_fu_997_p2),64));
    tmp_1_fu_869_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_fu_857_p3),64));
    tmp_6_fu_880_p1 <= std_logic_vector(resize(unsigned(p_addr_fu_874_p2),64));
    tmp_6_trn_cast1_fu_983_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_j_1_mid2_reg_1342_pp0_it11),8));
    tmp_6_trn_cast2_fu_952_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_reg_1342),7));
    tmp_6_trn_cast3_fu_904_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_reg_1342),6));
    tmp_6_trn_cast_fu_865_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_fu_857_p3),5));
end behav;
