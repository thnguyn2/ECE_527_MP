-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator is
port (
    X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    X_empty_n : IN STD_LOGIC;
    X_read : OUT STD_LOGIC;
    function_r : IN STD_LOGIC_VECTOR (7 downto 0);
    Y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_full_n : IN STD_LOGIC;
    Y_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of Accelerator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Accelerator,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.092000,HLS_SYN_LAT=594,HLS_SYN_TPT=595,HLS_SYN_MEM=11,HLS_SYN_DSP=43,HLS_SYN_FF=9425,HLS_SYN_LUT=11213}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal Accelerator_Block_proc_U0_ap_start : STD_LOGIC;
    signal Accelerator_Block_proc_U0_ap_done : STD_LOGIC;
    signal Accelerator_Block_proc_U0_ap_continue : STD_LOGIC;
    signal Accelerator_Block_proc_U0_ap_idle : STD_LOGIC;
    signal Accelerator_Block_proc_U0_ap_ready : STD_LOGIC;
    signal Accelerator_Block_proc_U0_function_r : STD_LOGIC_VECTOR (7 downto 0);
    signal Accelerator_Block_proc_U0_X_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_Block_proc_U0_X_empty_n : STD_LOGIC;
    signal Accelerator_Block_proc_U0_X_read : STD_LOGIC;
    signal Accelerator_Block_proc_U0_Y_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_Block_proc_U0_Y_full_n : STD_LOGIC;
    signal Accelerator_Block_proc_U0_Y_write : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal ap_reg_procdone_Accelerator_Block_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component Accelerator_Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        function_r : IN STD_LOGIC_VECTOR (7 downto 0);
        X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        X_empty_n : IN STD_LOGIC;
        X_read : OUT STD_LOGIC;
        Y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_full_n : IN STD_LOGIC;
        Y_write : OUT STD_LOGIC );
    end component;



begin
    Accelerator_Block_proc_U0 : component Accelerator_Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Accelerator_Block_proc_U0_ap_start,
        ap_done => Accelerator_Block_proc_U0_ap_done,
        ap_continue => Accelerator_Block_proc_U0_ap_continue,
        ap_idle => Accelerator_Block_proc_U0_ap_idle,
        ap_ready => Accelerator_Block_proc_U0_ap_ready,
        function_r => Accelerator_Block_proc_U0_function_r,
        X_dout => Accelerator_Block_proc_U0_X_dout,
        X_empty_n => Accelerator_Block_proc_U0_X_empty_n,
        X_read => Accelerator_Block_proc_U0_X_read,
        Y_din => Accelerator_Block_proc_U0_Y_din,
        Y_full_n => Accelerator_Block_proc_U0_Y_full_n,
        Y_write => Accelerator_Block_proc_U0_Y_write);





    -- ap_reg_procdone_Accelerator_Block_proc_U0 assign process. --
    ap_reg_procdone_Accelerator_Block_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_Block_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_Block_proc_U0 <= ap_const_logic_0;
                elsif ((Accelerator_Block_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_Accelerator_Block_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    Accelerator_Block_proc_U0_X_dout <= X_dout;
    Accelerator_Block_proc_U0_X_empty_n <= X_empty_n;
    Accelerator_Block_proc_U0_Y_full_n <= Y_full_n;
    Accelerator_Block_proc_U0_ap_continue <= ap_sig_hs_continue;
    Accelerator_Block_proc_U0_ap_start <= ap_start;
    Accelerator_Block_proc_U0_function_r <= function_r;
    X_read <= Accelerator_Block_proc_U0_X_read;
    Y_din <= Accelerator_Block_proc_U0_Y_din;
    Y_write <= Accelerator_Block_proc_U0_Y_write;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(Accelerator_Block_proc_U0_ap_idle)
    begin
        if ((Accelerator_Block_proc_U0_ap_idle = ap_const_logic_1)) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(Accelerator_Block_proc_U0_ap_done)
    begin
        if ((Accelerator_Block_proc_U0_ap_done = ap_const_logic_1)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= Accelerator_Block_proc_U0_ap_ready;
end behav;
