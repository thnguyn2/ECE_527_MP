-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_Quant_Block_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    function_r : IN STD_LOGIC_VECTOR (7 downto 0);
    X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    X_empty_n : IN STD_LOGIC;
    X_read : OUT STD_LOGIC;
    Y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_full_n : IN STD_LOGIC;
    Y_write : OUT STD_LOGIC );
end;


architecture behav of Accelerator_Quant_Block_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal cond_fu_45_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_reg_51 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_42 : BOOLEAN;
    signal grp_Accelerator_DOT_Divide_fu_29_A_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DOT_Divide_fu_29_A_empty_n : STD_LOGIC;
    signal grp_Accelerator_DOT_Divide_fu_29_A_read : STD_LOGIC;
    signal grp_Accelerator_DOT_Divide_fu_29_C_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DOT_Divide_fu_29_C_full_n : STD_LOGIC;
    signal grp_Accelerator_DOT_Divide_fu_29_C_write : STD_LOGIC;
    signal grp_Accelerator_DOT_Divide_fu_29_ap_done : STD_LOGIC;
    signal grp_Accelerator_DOT_Divide_fu_29_ap_start : STD_LOGIC;
    signal grp_Accelerator_DOT_Divide_fu_29_ap_idle : STD_LOGIC;
    signal grp_Accelerator_DOT_Divide_fu_29_ap_ready : STD_LOGIC;
    signal grp_Accelerator_DOT_Multiply_fu_37_A_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DOT_Multiply_fu_37_A_empty_n : STD_LOGIC;
    signal grp_Accelerator_DOT_Multiply_fu_37_A_read : STD_LOGIC;
    signal grp_Accelerator_DOT_Multiply_fu_37_C_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DOT_Multiply_fu_37_C_full_n : STD_LOGIC;
    signal grp_Accelerator_DOT_Multiply_fu_37_C_write : STD_LOGIC;
    signal grp_Accelerator_DOT_Multiply_fu_37_ap_done : STD_LOGIC;
    signal grp_Accelerator_DOT_Multiply_fu_37_ap_start : STD_LOGIC;
    signal grp_Accelerator_DOT_Multiply_fu_37_ap_idle : STD_LOGIC;
    signal grp_Accelerator_DOT_Multiply_fu_37_ap_ready : STD_LOGIC;
    signal grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready : STD_LOGIC := '0';
    signal ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_81 : BOOLEAN;
    signal grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready : STD_LOGIC := '0';
    signal ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_85 : BOOLEAN;
    signal ap_sig_bdd_106 : BOOLEAN;

    component Accelerator_DOT_Divide IS
    port (
        A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_empty_n : IN STD_LOGIC;
        A_read : OUT STD_LOGIC;
        C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_full_n : IN STD_LOGIC;
        C_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component Accelerator_DOT_Multiply IS
    port (
        A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_empty_n : IN STD_LOGIC;
        A_read : OUT STD_LOGIC;
        C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_full_n : IN STD_LOGIC;
        C_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;



begin
    grp_Accelerator_DOT_Divide_fu_29 : component Accelerator_DOT_Divide
    port map (
        A_dout => grp_Accelerator_DOT_Divide_fu_29_A_dout,
        A_empty_n => grp_Accelerator_DOT_Divide_fu_29_A_empty_n,
        A_read => grp_Accelerator_DOT_Divide_fu_29_A_read,
        C_din => grp_Accelerator_DOT_Divide_fu_29_C_din,
        C_full_n => grp_Accelerator_DOT_Divide_fu_29_C_full_n,
        C_write => grp_Accelerator_DOT_Divide_fu_29_C_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => grp_Accelerator_DOT_Divide_fu_29_ap_done,
        ap_start => grp_Accelerator_DOT_Divide_fu_29_ap_start,
        ap_idle => grp_Accelerator_DOT_Divide_fu_29_ap_idle,
        ap_ready => grp_Accelerator_DOT_Divide_fu_29_ap_ready);

    grp_Accelerator_DOT_Multiply_fu_37 : component Accelerator_DOT_Multiply
    port map (
        A_dout => grp_Accelerator_DOT_Multiply_fu_37_A_dout,
        A_empty_n => grp_Accelerator_DOT_Multiply_fu_37_A_empty_n,
        A_read => grp_Accelerator_DOT_Multiply_fu_37_A_read,
        C_din => grp_Accelerator_DOT_Multiply_fu_37_C_din,
        C_full_n => grp_Accelerator_DOT_Multiply_fu_37_C_full_n,
        C_write => grp_Accelerator_DOT_Multiply_fu_37_C_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => grp_Accelerator_DOT_Multiply_fu_37_ap_done,
        ap_start => grp_Accelerator_DOT_Multiply_fu_37_ap_start,
        ap_idle => grp_Accelerator_DOT_Multiply_fu_37_ap_idle,
        ap_ready => grp_Accelerator_DOT_Multiply_fu_37_ap_ready);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((((cond_reg_51 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_DOT_Divide_fu_29_ap_done)) or (not((cond_reg_51 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_Accelerator_DOT_Multiply_fu_37_ap_done)))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready assign process. --
    ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready <= ap_const_logic_0;
            else
                if (ap_sig_bdd_85) then
                    if (not((((cond_reg_51 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_DOT_Divide_fu_29_ap_done)) or (not((cond_reg_51 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_Accelerator_DOT_Multiply_fu_37_ap_done))))) then 
                        ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = grp_Accelerator_DOT_Divide_fu_29_ap_ready)) then 
                        ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready assign process. --
    ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready <= ap_const_logic_0;
            else
                if (ap_sig_bdd_106) then
                    if (not((((cond_reg_51 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_DOT_Divide_fu_29_ap_done)) or (not((cond_reg_51 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_Accelerator_DOT_Multiply_fu_37_ap_done))))) then 
                        ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = grp_Accelerator_DOT_Multiply_fu_37_ap_ready)) then 
                        ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg assign process. --
    grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_42) and (cond_fu_45_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (cond_reg_51 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready)))) then 
                    grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_Accelerator_DOT_Divide_fu_29_ap_ready)) then 
                    grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg assign process. --
    grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_42) and not((cond_fu_45_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((cond_reg_51 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready)))) then 
                    grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_Accelerator_DOT_Multiply_fu_37_ap_ready)) then 
                    grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_42))) then
                cond_reg_51 <= cond_fu_45_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, cond_reg_51, ap_sig_bdd_42, grp_Accelerator_DOT_Divide_fu_29_ap_done, grp_Accelerator_DOT_Multiply_fu_37_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_42)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((((cond_reg_51 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_DOT_Divide_fu_29_ap_done)) or (not((cond_reg_51 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_Accelerator_DOT_Multiply_fu_37_ap_done))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- X_read assign process. --
    X_read_assign_proc : process(cond_reg_51, grp_Accelerator_DOT_Divide_fu_29_A_read, grp_Accelerator_DOT_Multiply_fu_37_A_read, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((cond_reg_51 = ap_const_lv1_0))) then 
                X_read <= grp_Accelerator_DOT_Multiply_fu_37_A_read;
            elsif ((cond_reg_51 = ap_const_lv1_0)) then 
                X_read <= grp_Accelerator_DOT_Divide_fu_29_A_read;
            else 
                X_read <= ap_const_logic_0;
            end if;
        else 
            X_read <= ap_const_logic_0;
        end if; 
    end process;


    -- Y_din assign process. --
    Y_din_assign_proc : process(cond_reg_51, grp_Accelerator_DOT_Divide_fu_29_C_din, grp_Accelerator_DOT_Multiply_fu_37_C_din, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((cond_reg_51 = ap_const_lv1_0))) then 
                Y_din <= grp_Accelerator_DOT_Multiply_fu_37_C_din;
            elsif ((cond_reg_51 = ap_const_lv1_0)) then 
                Y_din <= grp_Accelerator_DOT_Divide_fu_29_C_din;
            else 
                Y_din <= grp_Accelerator_DOT_Multiply_fu_37_C_din;
            end if;
        else 
            Y_din <= grp_Accelerator_DOT_Multiply_fu_37_C_din;
        end if; 
    end process;


    -- Y_write assign process. --
    Y_write_assign_proc : process(cond_reg_51, grp_Accelerator_DOT_Divide_fu_29_C_write, grp_Accelerator_DOT_Multiply_fu_37_C_write, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((cond_reg_51 = ap_const_lv1_0))) then 
                Y_write <= grp_Accelerator_DOT_Multiply_fu_37_C_write;
            elsif ((cond_reg_51 = ap_const_lv1_0)) then 
                Y_write <= grp_Accelerator_DOT_Divide_fu_29_C_write;
            else 
                Y_write <= ap_const_logic_0;
            end if;
        else 
            Y_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, cond_reg_51, grp_Accelerator_DOT_Divide_fu_29_ap_done, grp_Accelerator_DOT_Multiply_fu_37_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((((cond_reg_51 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_DOT_Divide_fu_29_ap_done)) or (not((cond_reg_51 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_Accelerator_DOT_Multiply_fu_37_ap_done))))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(cond_reg_51, grp_Accelerator_DOT_Divide_fu_29_ap_done, grp_Accelerator_DOT_Multiply_fu_37_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((((cond_reg_51 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_DOT_Divide_fu_29_ap_done)) or (not((cond_reg_51 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_Accelerator_DOT_Multiply_fu_37_ap_done)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(cond_reg_51, ap_sig_cseq_ST_st2_fsm_1)
    begin
                ap_sig_bdd_106 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((cond_reg_51 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_42 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_81 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_85 assign process. --
    ap_sig_bdd_85_assign_proc : process(cond_reg_51, ap_sig_cseq_ST_st2_fsm_1)
    begin
                ap_sig_bdd_85 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (cond_reg_51 = ap_const_lv1_0));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_81)
    begin
        if (ap_sig_bdd_81) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready assign process. --
    ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready_assign_proc : process(grp_Accelerator_DOT_Divide_fu_29_ap_ready, ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready)) then 
            ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready <= grp_Accelerator_DOT_Divide_fu_29_ap_ready;
        else 
            ap_sig_startack_grp_Accelerator_DOT_Divide_fu_29_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready assign process. --
    ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready_assign_proc : process(grp_Accelerator_DOT_Multiply_fu_37_ap_ready, ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready)) then 
            ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready <= grp_Accelerator_DOT_Multiply_fu_37_ap_ready;
        else 
            ap_sig_startack_grp_Accelerator_DOT_Multiply_fu_37_ap_ready <= ap_const_logic_1;
        end if; 
    end process;

    cond_fu_45_p2 <= "1" when (function_r = ap_const_lv8_1) else "0";
    grp_Accelerator_DOT_Divide_fu_29_A_dout <= X_dout;
    grp_Accelerator_DOT_Divide_fu_29_A_empty_n <= X_empty_n;
    grp_Accelerator_DOT_Divide_fu_29_C_full_n <= Y_full_n;
    grp_Accelerator_DOT_Divide_fu_29_ap_start <= grp_Accelerator_DOT_Divide_fu_29_ap_start_ap_start_reg;
    grp_Accelerator_DOT_Multiply_fu_37_A_dout <= X_dout;
    grp_Accelerator_DOT_Multiply_fu_37_A_empty_n <= X_empty_n;
    grp_Accelerator_DOT_Multiply_fu_37_C_full_n <= Y_full_n;
    grp_Accelerator_DOT_Multiply_fu_37_ap_start <= grp_Accelerator_DOT_Multiply_fu_37_ap_start_ap_start_reg;
end behav;
