-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_MAT_Multiply2_Loop_Row_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_cached_row_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_cached_row_ce0 : OUT STD_LOGIC;
    A_cached_row_we0 : OUT STD_LOGIC;
    A_cached_row_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Accelerator_MAT_Multiply2_Loop_Row_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal indvar_flatten_reg_69 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i_i_reg_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_i_i_reg_91 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_180 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_55 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_109_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_i_i_mid2_fu_121_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_i_i_mid2_reg_189 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_i_mid2_fu_135_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_i_mid2_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_fu_170_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_79 : BOOLEAN;
    signal i_0_i_i_phi_fu_84_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_i_i_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_dup_fu_129_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_147_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_i_trn_cast_fu_143_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr_cast_fu_155_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_159_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_103_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_79))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_103_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_79)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_103_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_0_i_i_reg_80 assign process. --
    i_0_i_i_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_180 = ap_const_lv1_0))) then 
                i_0_i_i_reg_80 <= i_0_i_i_mid2_reg_194;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_79))) then 
                i_0_i_i_reg_80 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_69 assign process. --
    indvar_flatten_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_103_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_69 <= indvar_flatten_next_fu_109_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_79))) then 
                indvar_flatten_reg_69 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_0_i_i_reg_91 assign process. --
    k_0_i_i_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_103_p2 = ap_const_lv1_0))) then 
                k_0_i_i_reg_91 <= k_fu_170_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_79))) then 
                k_0_i_i_reg_91 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                exitcond_flatten_reg_180 <= exitcond_flatten_fu_103_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_103_p2 = ap_const_lv1_0))) then
                i_0_i_i_mid2_reg_194 <= i_0_i_i_mid2_fu_135_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_103_p2 = ap_const_lv1_0))) then
                k_0_i_i_mid2_reg_189 <= k_0_i_i_mid2_fu_121_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten_fu_103_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_79)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_79)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_103_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_2;
                end if;
            when ap_ST_st4_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_address0 <= tmp_20_fu_165_p1(6 - 1 downto 0);
    A_cached_row_address0 <= tmp_2_i_fu_176_p1(3 - 1 downto 0);

    -- A_cached_row_ce0 assign process. --
    A_cached_row_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            A_cached_row_ce0 <= ap_const_logic_1;
        else 
            A_cached_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_cached_row_d0 <= A_q0;

    -- A_cached_row_we0 assign process. --
    A_cached_row_we0_assign_proc : process(exitcond_flatten_reg_180, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_180 = ap_const_lv1_0)))) then 
            A_cached_row_we0 <= ap_const_logic_1;
        else 
            A_cached_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st4_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_55 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_79 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_55)
    begin
        if (ap_sig_bdd_55) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_2 assign process. --
    ap_sig_cseq_ST_st4_fsm_2_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_i_i_fu_115_p2 <= "1" when (k_0_i_i_reg_91 = ap_const_lv4_8) else "0";
    exitcond_flatten_fu_103_p2 <= "1" when (indvar_flatten_reg_69 = ap_const_lv7_40) else "0";
    i_0_i_i_mid2_fu_135_p3 <= 
        tmp_1_i_dup_fu_129_p2 when (exitcond2_i_i_fu_115_p2(0) = '1') else 
        i_0_i_i_phi_fu_84_p4;

    -- i_0_i_i_phi_fu_84_p4 assign process. --
    i_0_i_i_phi_fu_84_p4_assign_proc : process(i_0_i_i_reg_80, exitcond_flatten_reg_180, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_0_i_i_mid2_reg_194)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_180 = ap_const_lv1_0))) then 
            i_0_i_i_phi_fu_84_p4 <= i_0_i_i_mid2_reg_194;
        else 
            i_0_i_i_phi_fu_84_p4 <= i_0_i_i_reg_80;
        end if; 
    end process;

    indvar_flatten_next_fu_109_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_69) + unsigned(ap_const_lv7_1));
    k_0_i_i_mid2_fu_121_p3 <= 
        ap_const_lv4_0 when (exitcond2_i_i_fu_115_p2(0) = '1') else 
        k_0_i_i_reg_91;
    k_fu_170_p2 <= std_logic_vector(unsigned(k_0_i_i_mid2_fu_121_p3) + unsigned(ap_const_lv4_1));
    p_addr1_fu_159_p2 <= std_logic_vector(unsigned(tmp_2_i_trn_cast_fu_143_p1) + unsigned(p_addr_cast_fu_155_p1));
    p_addr_cast_fu_155_p1 <= std_logic_vector(resize(unsigned(tmp_fu_147_p3),8));
    tmp_1_i_dup_fu_129_p2 <= std_logic_vector(unsigned(i_0_i_i_phi_fu_84_p4) + unsigned(ap_const_lv4_1));
    tmp_20_fu_165_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_159_p2),64));
    tmp_2_i_fu_176_p1 <= std_logic_vector(resize(unsigned(k_0_i_i_mid2_reg_189),64));
    tmp_2_i_trn_cast_fu_143_p1 <= std_logic_vector(resize(unsigned(k_0_i_i_mid2_fu_121_p3),8));
    tmp_fu_147_p3 <= (i_0_i_i_mid2_fu_135_p3 & ap_const_lv3_0);
end behav;
