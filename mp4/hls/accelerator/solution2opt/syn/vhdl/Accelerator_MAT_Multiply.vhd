-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_we0 : OUT STD_LOGIC;
    A_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_0_ce1 : OUT STD_LOGIC;
    A_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_we1 : OUT STD_LOGIC;
    A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_we0 : OUT STD_LOGIC;
    A_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_we1 : OUT STD_LOGIC;
    A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_we0 : OUT STD_LOGIC;
    A_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_2_ce1 : OUT STD_LOGIC;
    A_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_we1 : OUT STD_LOGIC;
    A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_we0 : OUT STD_LOGIC;
    A_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_3_ce1 : OUT STD_LOGIC;
    A_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_we1 : OUT STD_LOGIC;
    A_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_4_ce0 : OUT STD_LOGIC;
    A_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_we0 : OUT STD_LOGIC;
    A_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_4_ce1 : OUT STD_LOGIC;
    A_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_we1 : OUT STD_LOGIC;
    A_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_5_ce0 : OUT STD_LOGIC;
    A_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_we0 : OUT STD_LOGIC;
    A_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_5_ce1 : OUT STD_LOGIC;
    A_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_we1 : OUT STD_LOGIC;
    A_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_6_ce0 : OUT STD_LOGIC;
    A_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_we0 : OUT STD_LOGIC;
    A_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_6_ce1 : OUT STD_LOGIC;
    A_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_we1 : OUT STD_LOGIC;
    A_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_7_ce0 : OUT STD_LOGIC;
    A_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_we0 : OUT STD_LOGIC;
    A_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_7_ce1 : OUT STD_LOGIC;
    A_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_we1 : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_we0 : OUT STD_LOGIC;
    C_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce1 : OUT STD_LOGIC;
    C_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_we1 : OUT STD_LOGIC;
    A_0_pipo_status : IN STD_LOGIC;
    A_0_pipo_update : OUT STD_LOGIC;
    A_1_pipo_status : IN STD_LOGIC;
    A_1_pipo_update : OUT STD_LOGIC;
    A_2_pipo_status : IN STD_LOGIC;
    A_2_pipo_update : OUT STD_LOGIC;
    A_3_pipo_status : IN STD_LOGIC;
    A_3_pipo_update : OUT STD_LOGIC;
    A_4_pipo_status : IN STD_LOGIC;
    A_4_pipo_update : OUT STD_LOGIC;
    A_5_pipo_status : IN STD_LOGIC;
    A_5_pipo_update : OUT STD_LOGIC;
    A_6_pipo_status : IN STD_LOGIC;
    A_6_pipo_update : OUT STD_LOGIC;
    A_7_pipo_status : IN STD_LOGIC;
    A_7_pipo_update : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of Accelerator_MAT_Multiply is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal B_cached_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_cached_i_ce0 : STD_LOGIC;
    signal B_cached_i_we0 : STD_LOGIC;
    signal B_cached_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_i_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_cached_i_ce1 : STD_LOGIC;
    signal B_cached_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_t_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_cached_t_ce0 : STD_LOGIC;
    signal B_cached_t_we0 : STD_LOGIC;
    signal B_cached_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_t_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_cached_t_ce1 : STD_LOGIC;
    signal B_cached_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_U_ap_dummy_ce : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal B_cached_i_full_n : STD_LOGIC;
    signal B_cached_i_write : STD_LOGIC;
    signal B_cached_t_empty_n : STD_LOGIC;
    signal B_cached_t_read : STD_LOGIC;
    signal B_cached_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_t_we1 : STD_LOGIC;
    signal ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start : STD_LOGIC;

    component Accelerator_MAT_Multiply_Loop_LoadRow_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_empty_n : IN STD_LOGIC;
        B_read : OUT STD_LOGIC;
        B_cached_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        B_cached_ce0 : OUT STD_LOGIC;
        B_cached_we0 : OUT STD_LOGIC;
        B_cached_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_MAT_Multiply_Loop_Row_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_0_ce1 : OUT STD_LOGIC;
        A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_1_ce1 : OUT STD_LOGIC;
        A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_2_ce1 : OUT STD_LOGIC;
        A_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_3_ce0 : OUT STD_LOGIC;
        A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_3_ce1 : OUT STD_LOGIC;
        A_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_4_ce0 : OUT STD_LOGIC;
        A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_4_ce1 : OUT STD_LOGIC;
        A_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_5_ce0 : OUT STD_LOGIC;
        A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_5_ce1 : OUT STD_LOGIC;
        A_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_6_ce0 : OUT STD_LOGIC;
        A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_6_ce1 : OUT STD_LOGIC;
        A_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_7_ce0 : OUT STD_LOGIC;
        A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_7_ce1 : OUT STD_LOGIC;
        A_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_cached_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        B_cached_ce0 : OUT STD_LOGIC;
        B_cached_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_cached_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        B_cached_ce1 : OUT STD_LOGIC;
        B_cached_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_MAT_Multiply_B_cached IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    B_cached_U : component Accelerator_MAT_Multiply_B_cached
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => B_cached_i_address0,
        i_ce0 => B_cached_i_ce0,
        i_we0 => B_cached_i_we0,
        i_d0 => B_cached_i_d0,
        i_q0 => B_cached_i_q0,
        i_address1 => B_cached_i_address1,
        i_ce1 => B_cached_i_ce1,
        i_q1 => B_cached_i_q1,
        t_address0 => B_cached_t_address0,
        t_ce0 => B_cached_t_ce0,
        t_we0 => B_cached_t_we0,
        t_d0 => B_cached_t_d0,
        t_q0 => B_cached_t_q0,
        t_address1 => B_cached_t_address1,
        t_ce1 => B_cached_t_ce1,
        t_q1 => B_cached_t_q1,
        i_ce => B_cached_U_ap_dummy_ce,
        t_ce => B_cached_U_ap_dummy_ce,
        i_full_n => B_cached_i_full_n,
        i_write => B_cached_i_write,
        t_empty_n => B_cached_t_empty_n,
        t_read => B_cached_t_read);

    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 : component Accelerator_MAT_Multiply_Loop_LoadRow_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start,
        ap_done => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done,
        ap_continue => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue,
        ap_idle => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle,
        ap_ready => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready,
        B_dout => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout,
        B_empty_n => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n,
        B_read => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read,
        B_cached_address0 => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0,
        B_cached_ce0 => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0,
        B_cached_we0 => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0,
        B_cached_d0 => Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0);

    Accelerator_MAT_Multiply_Loop_Row_proc_U0 : component Accelerator_MAT_Multiply_Loop_Row_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start,
        ap_done => Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done,
        ap_continue => Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue,
        ap_idle => Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle,
        ap_ready => Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready,
        A_0_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0,
        A_0_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0,
        A_0_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0,
        A_0_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1,
        A_0_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1,
        A_0_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1,
        A_1_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0,
        A_1_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0,
        A_1_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0,
        A_1_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1,
        A_1_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1,
        A_1_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1,
        A_2_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0,
        A_2_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0,
        A_2_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0,
        A_2_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1,
        A_2_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1,
        A_2_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1,
        A_3_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0,
        A_3_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0,
        A_3_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0,
        A_3_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1,
        A_3_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1,
        A_3_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1,
        A_4_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0,
        A_4_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0,
        A_4_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0,
        A_4_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1,
        A_4_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1,
        A_4_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1,
        A_5_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0,
        A_5_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0,
        A_5_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0,
        A_5_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1,
        A_5_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1,
        A_5_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1,
        A_6_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0,
        A_6_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0,
        A_6_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0,
        A_6_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1,
        A_6_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1,
        A_6_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1,
        A_7_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0,
        A_7_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0,
        A_7_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0,
        A_7_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1,
        A_7_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1,
        A_7_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1,
        B_cached_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0,
        B_cached_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0,
        B_cached_q0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0,
        B_cached_address1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1,
        B_cached_ce1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1,
        B_cached_q1 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1,
        C_address0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0,
        C_ce0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0,
        C_we0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0,
        C_d0 => Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0);





    -- ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 assign process. --
    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 assign process. --
    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    A_0_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address0;
    A_0_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_address1;
    A_0_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0;
    A_0_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1;
    A_0_d0 <= ap_const_lv32_0;
    A_0_d1 <= ap_const_lv32_0;
    A_0_pipo_update <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update;
    A_0_we0 <= ap_const_logic_0;
    A_0_we1 <= ap_const_logic_0;
    A_1_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address0;
    A_1_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_address1;
    A_1_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0;
    A_1_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1;
    A_1_d0 <= ap_const_lv32_0;
    A_1_d1 <= ap_const_lv32_0;
    A_1_pipo_update <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update;
    A_1_we0 <= ap_const_logic_0;
    A_1_we1 <= ap_const_logic_0;
    A_2_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address0;
    A_2_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_address1;
    A_2_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0;
    A_2_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1;
    A_2_d0 <= ap_const_lv32_0;
    A_2_d1 <= ap_const_lv32_0;
    A_2_pipo_update <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update;
    A_2_we0 <= ap_const_logic_0;
    A_2_we1 <= ap_const_logic_0;
    A_3_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address0;
    A_3_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_address1;
    A_3_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0;
    A_3_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1;
    A_3_d0 <= ap_const_lv32_0;
    A_3_d1 <= ap_const_lv32_0;
    A_3_pipo_update <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update;
    A_3_we0 <= ap_const_logic_0;
    A_3_we1 <= ap_const_logic_0;
    A_4_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address0;
    A_4_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_address1;
    A_4_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0;
    A_4_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1;
    A_4_d0 <= ap_const_lv32_0;
    A_4_d1 <= ap_const_lv32_0;
    A_4_pipo_update <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update;
    A_4_we0 <= ap_const_logic_0;
    A_4_we1 <= ap_const_logic_0;
    A_5_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address0;
    A_5_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_address1;
    A_5_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0;
    A_5_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1;
    A_5_d0 <= ap_const_lv32_0;
    A_5_d1 <= ap_const_lv32_0;
    A_5_pipo_update <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update;
    A_5_we0 <= ap_const_logic_0;
    A_5_we1 <= ap_const_logic_0;
    A_6_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address0;
    A_6_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_address1;
    A_6_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0;
    A_6_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1;
    A_6_d0 <= ap_const_lv32_0;
    A_6_d1 <= ap_const_lv32_0;
    A_6_pipo_update <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update;
    A_6_we0 <= ap_const_logic_0;
    A_6_we1 <= ap_const_logic_0;
    A_7_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address0;
    A_7_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_address1;
    A_7_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0;
    A_7_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1;
    A_7_d0 <= ap_const_lv32_0;
    A_7_d1 <= ap_const_lv32_0;
    A_7_pipo_update <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update;
    A_7_we0 <= ap_const_logic_0;
    A_7_we1 <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status <= B_cached_i_full_n;
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout <= B_dout;
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n <= B_empty_n;
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_pipo_status;
    Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start <= ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_status <= A_0_pipo_status;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_pipo_update <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 <= A_0_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 <= A_0_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_status <= A_1_pipo_status;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_pipo_update <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 <= A_1_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 <= A_1_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_status <= A_2_pipo_status;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_pipo_update <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 <= A_2_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 <= A_2_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_status <= A_3_pipo_status;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_pipo_update <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 <= A_3_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 <= A_3_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_status <= A_4_pipo_status;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_pipo_update <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 <= A_4_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 <= A_4_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_status <= A_5_pipo_status;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_pipo_update <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 <= A_5_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 <= A_5_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_status <= A_6_pipo_status;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_pipo_update <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 <= A_6_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 <= A_6_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_status <= A_7_pipo_status;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_pipo_update <= ap_const_logic_0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 <= A_7_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 <= A_7_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q0 <= B_cached_t_q0;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_q1 <= B_cached_t_q1;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_continue <= ap_sig_hs_continue;
    Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start <= (B_cached_t_empty_n and ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start);
    B_cached_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_i_address0 <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_address0;
    B_cached_i_address1 <= ap_const_lv6_0;
    B_cached_i_ce0 <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_ce0;
    B_cached_i_ce1 <= ap_const_logic_0;
    B_cached_i_d0 <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_d0;
    B_cached_i_we0 <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_we0;
    B_cached_i_write <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    B_cached_t_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address0;
    B_cached_t_address1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_address1;
    B_cached_t_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce0;
    B_cached_t_ce1 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_B_cached_ce1;
    B_cached_t_d0 <= ap_const_lv32_0;
    B_cached_t_d1 <= ap_const_lv32_0;
    B_cached_t_read <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_t_we0 <= ap_const_logic_0;
    B_cached_t_we1 <= ap_const_logic_0;
    B_read <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_read;
    C_address0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_address0;
    C_address1 <= ap_const_lv6_0;
    C_ce0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_ce0;
    C_ce1 <= ap_const_logic_0;
    C_d0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_d0;
    C_d1 <= ap_const_lv32_0;
    C_we0 <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_C_we0;
    C_we1 <= ap_const_logic_0;
    ap_chn_write_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle, Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle, B_cached_t_empty_n)
    begin
        if (((ap_const_logic_1 = Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle) and (ap_const_logic_1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_idle) and (ap_const_logic_0 = B_cached_t_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_continue;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done)
    begin
        if ((ap_const_logic_1 = Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready_assign_proc : process(Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready, ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready_assign_proc : process(Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready, ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start assign process. --
    ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start assign process. --
    ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready))) then 
            ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready, ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_Loop_Row_proc_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

end behav;
