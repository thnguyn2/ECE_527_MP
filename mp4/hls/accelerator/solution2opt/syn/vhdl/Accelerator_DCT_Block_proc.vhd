-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_DCT_Block_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    function_r : IN STD_LOGIC_VECTOR (7 downto 0);
    X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    X_empty_n : IN STD_LOGIC;
    X_read : OUT STD_LOGIC;
    Y_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Y_ce0 : OUT STD_LOGIC;
    Y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_we0 : OUT STD_LOGIC;
    Y_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Y_ce1 : OUT STD_LOGIC;
    Y_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_we1 : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of Accelerator_DCT_Block_proc is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal A_cached_row_i1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i1_ce0 : STD_LOGIC;
    signal A_cached_row_i1_we0 : STD_LOGIC;
    signal A_cached_row_i1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i1_ce1 : STD_LOGIC;
    signal A_cached_row_i1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i_ce0 : STD_LOGIC;
    signal A_cached_row_i_we0 : STD_LOGIC;
    signal A_cached_row_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i_ce1 : STD_LOGIC;
    signal A_cached_row_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_0_ce0 : STD_LOGIC;
    signal Tinv_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_0_ce1 : STD_LOGIC;
    signal Tinv_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_1_ce0 : STD_LOGIC;
    signal Tinv_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_1_ce1 : STD_LOGIC;
    signal Tinv_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_2_ce0 : STD_LOGIC;
    signal Tinv_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_2_ce1 : STD_LOGIC;
    signal Tinv_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_3_ce0 : STD_LOGIC;
    signal Tinv_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_3_ce1 : STD_LOGIC;
    signal Tinv_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_4_ce0 : STD_LOGIC;
    signal Tinv_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_4_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_4_ce1 : STD_LOGIC;
    signal Tinv_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_5_ce0 : STD_LOGIC;
    signal Tinv_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_5_ce1 : STD_LOGIC;
    signal Tinv_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_6_ce0 : STD_LOGIC;
    signal Tinv_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_6_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_6_ce1 : STD_LOGIC;
    signal Tinv_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_7_ce0 : STD_LOGIC;
    signal Tinv_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_7_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_7_ce1 : STD_LOGIC;
    signal Tinv_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_0_ce0 : STD_LOGIC;
    signal T_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_0_ce1 : STD_LOGIC;
    signal T_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_1_ce0 : STD_LOGIC;
    signal T_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_1_ce1 : STD_LOGIC;
    signal T_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_2_ce0 : STD_LOGIC;
    signal T_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_2_ce1 : STD_LOGIC;
    signal T_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_3_ce0 : STD_LOGIC;
    signal T_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_3_ce1 : STD_LOGIC;
    signal T_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_4_ce0 : STD_LOGIC;
    signal T_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_4_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_4_ce1 : STD_LOGIC;
    signal T_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_5_ce0 : STD_LOGIC;
    signal T_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_5_ce1 : STD_LOGIC;
    signal T_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_6_ce0 : STD_LOGIC;
    signal T_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_6_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_6_ce1 : STD_LOGIC;
    signal T_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_7_ce0 : STD_LOGIC;
    signal T_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_7_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_7_ce1 : STD_LOGIC;
    signal T_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_0_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_0_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_0_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_0_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_1_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_1_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_1_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_1_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_2_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_2_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_2_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_2_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_3_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_3_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_3_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_3_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_4_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_4_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_4_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_4_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_4_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_5_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_5_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_5_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_5_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_6_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_6_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_6_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_6_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_6_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_7_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_7_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_7_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_7_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_7_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_A_7_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_B_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_B_empty_n : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_B_read : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply_U0_C_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_C_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_C_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply_U0_C_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_C_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_C_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U0_C_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_0_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_0_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_1_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_1_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_2_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_2_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_3_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_3_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_4_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_4_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_5_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_5_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_6_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_6_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_7_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_A_7_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_ap_continue : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_ap_done : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_ap_start : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_ap_idle : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U0_ap_ready : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply_U0_T_7 : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply_U0_T_2 : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply_U0_T_6 : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply_U0_T_5 : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply_U0_T_4 : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply_U0_T_3 : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply_U0_T_0 : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply_U0_T_1 : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_start : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_continue : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_idle : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_ready : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_i1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_start : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_idle : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_ready : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status : STD_LOGIC;
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_0_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_0_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_0_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_0_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_1_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_1_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_1_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_1_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_2_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_2_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_2_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_2_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_3_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_3_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_3_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_3_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_4_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_4_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_4_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_4_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_4_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_5_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_5_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_5_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_5_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_6_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_6_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_6_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_6_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_6_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_7_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_7_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_7_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_7_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_7_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_A_7_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_B_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_B_empty_n : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_B_read : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_C_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_C_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_C_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_C_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_C_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_C_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply_U1_1_C_we1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_0_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_0_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_1_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_1_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_2_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_2_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_3_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_3_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_4_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_4_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_5_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_5_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_6_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_6_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_7_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_A_7_pipo_update : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_ap_continue : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_ap_done : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_ap_start : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_ap_idle : STD_LOGIC;
    signal Accelerator_MAT_Multiply_U1_1_ap_ready : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_start : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_continue : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_idle : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_ready : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_i : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_pipo_status : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_start : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_done : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_continue : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_idle : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce1 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_ce0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_we0 : STD_LOGIC;
    signal Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_i_full_n : STD_LOGIC;
    signal T_0_i_write : STD_LOGIC;
    signal T_0_t_empty_n : STD_LOGIC;
    signal T_0_t_read : STD_LOGIC;
    signal T_0_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_0_i_ce0 : STD_LOGIC;
    signal T_0_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_i_we0 : STD_LOGIC;
    signal T_0_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_0_i_ce1 : STD_LOGIC;
    signal T_0_i_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_i_we1 : STD_LOGIC;
    signal T_0_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_0_t_ce0 : STD_LOGIC;
    signal T_0_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_t_we0 : STD_LOGIC;
    signal T_1_i_full_n : STD_LOGIC;
    signal T_1_i_write : STD_LOGIC;
    signal T_1_t_empty_n : STD_LOGIC;
    signal T_1_t_read : STD_LOGIC;
    signal T_1_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_1_i_ce0 : STD_LOGIC;
    signal T_1_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_i_we0 : STD_LOGIC;
    signal T_1_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_1_i_ce1 : STD_LOGIC;
    signal T_1_i_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_i_we1 : STD_LOGIC;
    signal T_1_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_1_t_ce0 : STD_LOGIC;
    signal T_1_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_t_we0 : STD_LOGIC;
    signal T_2_i_full_n : STD_LOGIC;
    signal T_2_i_write : STD_LOGIC;
    signal T_2_t_empty_n : STD_LOGIC;
    signal T_2_t_read : STD_LOGIC;
    signal T_2_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_2_i_ce0 : STD_LOGIC;
    signal T_2_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_i_we0 : STD_LOGIC;
    signal T_2_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_2_i_ce1 : STD_LOGIC;
    signal T_2_i_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_i_we1 : STD_LOGIC;
    signal T_2_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_2_t_ce0 : STD_LOGIC;
    signal T_2_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_t_we0 : STD_LOGIC;
    signal T_3_i_full_n : STD_LOGIC;
    signal T_3_i_write : STD_LOGIC;
    signal T_3_t_empty_n : STD_LOGIC;
    signal T_3_t_read : STD_LOGIC;
    signal T_3_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_3_i_ce0 : STD_LOGIC;
    signal T_3_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_i_we0 : STD_LOGIC;
    signal T_3_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_3_i_ce1 : STD_LOGIC;
    signal T_3_i_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_i_we1 : STD_LOGIC;
    signal T_3_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_3_t_ce0 : STD_LOGIC;
    signal T_3_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_t_we0 : STD_LOGIC;
    signal T_4_i_full_n : STD_LOGIC;
    signal T_4_i_write : STD_LOGIC;
    signal T_4_t_empty_n : STD_LOGIC;
    signal T_4_t_read : STD_LOGIC;
    signal T_4_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_4_i_ce0 : STD_LOGIC;
    signal T_4_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_4_i_we0 : STD_LOGIC;
    signal T_4_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_4_i_ce1 : STD_LOGIC;
    signal T_4_i_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_4_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_4_i_we1 : STD_LOGIC;
    signal T_4_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_4_t_ce0 : STD_LOGIC;
    signal T_4_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_4_t_we0 : STD_LOGIC;
    signal T_5_i_full_n : STD_LOGIC;
    signal T_5_i_write : STD_LOGIC;
    signal T_5_t_empty_n : STD_LOGIC;
    signal T_5_t_read : STD_LOGIC;
    signal T_5_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_5_i_ce0 : STD_LOGIC;
    signal T_5_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_5_i_we0 : STD_LOGIC;
    signal T_5_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_5_i_ce1 : STD_LOGIC;
    signal T_5_i_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_5_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_5_i_we1 : STD_LOGIC;
    signal T_5_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_5_t_ce0 : STD_LOGIC;
    signal T_5_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_5_t_we0 : STD_LOGIC;
    signal T_6_i_full_n : STD_LOGIC;
    signal T_6_i_write : STD_LOGIC;
    signal T_6_t_empty_n : STD_LOGIC;
    signal T_6_t_read : STD_LOGIC;
    signal T_6_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_6_i_ce0 : STD_LOGIC;
    signal T_6_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_6_i_we0 : STD_LOGIC;
    signal T_6_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_6_i_ce1 : STD_LOGIC;
    signal T_6_i_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_6_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_6_i_we1 : STD_LOGIC;
    signal T_6_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_6_t_ce0 : STD_LOGIC;
    signal T_6_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_6_t_we0 : STD_LOGIC;
    signal T_7_i_full_n : STD_LOGIC;
    signal T_7_i_write : STD_LOGIC;
    signal T_7_t_empty_n : STD_LOGIC;
    signal T_7_t_read : STD_LOGIC;
    signal T_7_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_7_i_ce0 : STD_LOGIC;
    signal T_7_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_7_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_7_i_we0 : STD_LOGIC;
    signal T_7_i_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_7_i_ce1 : STD_LOGIC;
    signal T_7_i_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_7_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_7_i_we1 : STD_LOGIC;
    signal T_7_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal T_7_t_ce0 : STD_LOGIC;
    signal T_7_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_7_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_7_t_we0 : STD_LOGIC;
    signal A_cached_row_i1_i_full_n : STD_LOGIC;
    signal A_cached_row_i1_i_write : STD_LOGIC;
    signal A_cached_row_i1_t_empty_n : STD_LOGIC;
    signal A_cached_row_i1_t_read : STD_LOGIC;
    signal A_cached_row_i1_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i1_i_ce0 : STD_LOGIC;
    signal A_cached_row_i1_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i1_i_we0 : STD_LOGIC;
    signal A_cached_row_i1_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i1_t_ce0 : STD_LOGIC;
    signal A_cached_row_i1_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i1_t_we0 : STD_LOGIC;
    signal A_cached_row_i1_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i1_t_ce1 : STD_LOGIC;
    signal A_cached_row_i1_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i1_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i1_t_we1 : STD_LOGIC;
    signal Tinv_0_i_full_n : STD_LOGIC;
    signal Tinv_0_i_write : STD_LOGIC;
    signal Tinv_0_t_empty_n : STD_LOGIC;
    signal Tinv_0_t_read : STD_LOGIC;
    signal Tinv_0_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_0_i_ce0 : STD_LOGIC;
    signal Tinv_0_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_0_i_we0 : STD_LOGIC;
    signal Tinv_0_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_0_t_ce0 : STD_LOGIC;
    signal Tinv_0_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_0_t_we0 : STD_LOGIC;
    signal Tinv_0_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_0_t_ce1 : STD_LOGIC;
    signal Tinv_0_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_0_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_0_t_we1 : STD_LOGIC;
    signal Tinv_1_i_full_n : STD_LOGIC;
    signal Tinv_1_i_write : STD_LOGIC;
    signal Tinv_1_t_empty_n : STD_LOGIC;
    signal Tinv_1_t_read : STD_LOGIC;
    signal Tinv_1_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_1_i_ce0 : STD_LOGIC;
    signal Tinv_1_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_1_i_we0 : STD_LOGIC;
    signal Tinv_1_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_1_t_ce0 : STD_LOGIC;
    signal Tinv_1_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_1_t_we0 : STD_LOGIC;
    signal Tinv_1_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_1_t_ce1 : STD_LOGIC;
    signal Tinv_1_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_1_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_1_t_we1 : STD_LOGIC;
    signal Tinv_2_i_full_n : STD_LOGIC;
    signal Tinv_2_i_write : STD_LOGIC;
    signal Tinv_2_t_empty_n : STD_LOGIC;
    signal Tinv_2_t_read : STD_LOGIC;
    signal Tinv_2_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_2_i_ce0 : STD_LOGIC;
    signal Tinv_2_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_2_i_we0 : STD_LOGIC;
    signal Tinv_2_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_2_t_ce0 : STD_LOGIC;
    signal Tinv_2_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_2_t_we0 : STD_LOGIC;
    signal Tinv_2_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_2_t_ce1 : STD_LOGIC;
    signal Tinv_2_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_2_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_2_t_we1 : STD_LOGIC;
    signal Tinv_3_i_full_n : STD_LOGIC;
    signal Tinv_3_i_write : STD_LOGIC;
    signal Tinv_3_t_empty_n : STD_LOGIC;
    signal Tinv_3_t_read : STD_LOGIC;
    signal Tinv_3_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_3_i_ce0 : STD_LOGIC;
    signal Tinv_3_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_3_i_we0 : STD_LOGIC;
    signal Tinv_3_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_3_t_ce0 : STD_LOGIC;
    signal Tinv_3_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_3_t_we0 : STD_LOGIC;
    signal Tinv_3_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_3_t_ce1 : STD_LOGIC;
    signal Tinv_3_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_3_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_3_t_we1 : STD_LOGIC;
    signal Tinv_4_i_full_n : STD_LOGIC;
    signal Tinv_4_i_write : STD_LOGIC;
    signal Tinv_4_t_empty_n : STD_LOGIC;
    signal Tinv_4_t_read : STD_LOGIC;
    signal Tinv_4_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_4_i_ce0 : STD_LOGIC;
    signal Tinv_4_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_4_i_we0 : STD_LOGIC;
    signal Tinv_4_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_4_t_ce0 : STD_LOGIC;
    signal Tinv_4_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_4_t_we0 : STD_LOGIC;
    signal Tinv_4_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_4_t_ce1 : STD_LOGIC;
    signal Tinv_4_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_4_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_4_t_we1 : STD_LOGIC;
    signal Tinv_5_i_full_n : STD_LOGIC;
    signal Tinv_5_i_write : STD_LOGIC;
    signal Tinv_5_t_empty_n : STD_LOGIC;
    signal Tinv_5_t_read : STD_LOGIC;
    signal Tinv_5_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_5_i_ce0 : STD_LOGIC;
    signal Tinv_5_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_5_i_we0 : STD_LOGIC;
    signal Tinv_5_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_5_t_ce0 : STD_LOGIC;
    signal Tinv_5_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_5_t_we0 : STD_LOGIC;
    signal Tinv_5_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_5_t_ce1 : STD_LOGIC;
    signal Tinv_5_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_5_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_5_t_we1 : STD_LOGIC;
    signal Tinv_6_i_full_n : STD_LOGIC;
    signal Tinv_6_i_write : STD_LOGIC;
    signal Tinv_6_t_empty_n : STD_LOGIC;
    signal Tinv_6_t_read : STD_LOGIC;
    signal Tinv_6_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_6_i_ce0 : STD_LOGIC;
    signal Tinv_6_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_6_i_we0 : STD_LOGIC;
    signal Tinv_6_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_6_t_ce0 : STD_LOGIC;
    signal Tinv_6_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_6_t_we0 : STD_LOGIC;
    signal Tinv_6_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_6_t_ce1 : STD_LOGIC;
    signal Tinv_6_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_6_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_6_t_we1 : STD_LOGIC;
    signal Tinv_7_i_full_n : STD_LOGIC;
    signal Tinv_7_i_write : STD_LOGIC;
    signal Tinv_7_t_empty_n : STD_LOGIC;
    signal Tinv_7_t_read : STD_LOGIC;
    signal Tinv_7_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_7_i_ce0 : STD_LOGIC;
    signal Tinv_7_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_7_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_7_i_we0 : STD_LOGIC;
    signal Tinv_7_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_7_t_ce0 : STD_LOGIC;
    signal Tinv_7_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_7_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_7_t_we0 : STD_LOGIC;
    signal Tinv_7_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Tinv_7_t_ce1 : STD_LOGIC;
    signal Tinv_7_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_7_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Tinv_7_t_we1 : STD_LOGIC;
    signal Y_i_full_n : STD_LOGIC;
    signal Y_i_write : STD_LOGIC;
    signal Y_t_empty_n : STD_LOGIC;
    signal Y_t_read : STD_LOGIC;
    signal Y_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Y_i_ce0 : STD_LOGIC;
    signal Y_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_i_we0 : STD_LOGIC;
    signal Y_t_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Y_t_ce0 : STD_LOGIC;
    signal Y_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_t_we0 : STD_LOGIC;
    signal A_cached_row_i_i_full_n : STD_LOGIC;
    signal A_cached_row_i_i_write : STD_LOGIC;
    signal A_cached_row_i_t_empty_n : STD_LOGIC;
    signal A_cached_row_i_t_read : STD_LOGIC;
    signal A_cached_row_i_i_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i_i_ce0 : STD_LOGIC;
    signal A_cached_row_i_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i_i_we0 : STD_LOGIC;
    signal A_cached_row_i_t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i_t_ce0 : STD_LOGIC;
    signal A_cached_row_i_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i_t_we0 : STD_LOGIC;
    signal A_cached_row_i_t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_i_t_ce1 : STD_LOGIC;
    signal A_cached_row_i_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_i_t_we1 : STD_LOGIC;
    signal ap_reg_procdone_Accelerator_MAT_Multiply_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 : STD_LOGIC := '0';
    signal ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 : STD_LOGIC := '0';
    signal ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;

    component Accelerator_MAT_Multiply IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_we0 : OUT STD_LOGIC;
        A_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_0_ce1 : OUT STD_LOGIC;
        A_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_we1 : OUT STD_LOGIC;
        A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_we0 : OUT STD_LOGIC;
        A_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_1_ce1 : OUT STD_LOGIC;
        A_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_we1 : OUT STD_LOGIC;
        A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_we0 : OUT STD_LOGIC;
        A_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_2_ce1 : OUT STD_LOGIC;
        A_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_we1 : OUT STD_LOGIC;
        A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_3_ce0 : OUT STD_LOGIC;
        A_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_we0 : OUT STD_LOGIC;
        A_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_3_ce1 : OUT STD_LOGIC;
        A_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_we1 : OUT STD_LOGIC;
        A_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_4_ce0 : OUT STD_LOGIC;
        A_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_we0 : OUT STD_LOGIC;
        A_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_4_ce1 : OUT STD_LOGIC;
        A_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_we1 : OUT STD_LOGIC;
        A_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_5_ce0 : OUT STD_LOGIC;
        A_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_we0 : OUT STD_LOGIC;
        A_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_5_ce1 : OUT STD_LOGIC;
        A_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_we1 : OUT STD_LOGIC;
        A_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_6_ce0 : OUT STD_LOGIC;
        A_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_we0 : OUT STD_LOGIC;
        A_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_6_ce1 : OUT STD_LOGIC;
        A_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_we1 : OUT STD_LOGIC;
        A_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_7_ce0 : OUT STD_LOGIC;
        A_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_we0 : OUT STD_LOGIC;
        A_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_7_ce1 : OUT STD_LOGIC;
        A_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_we1 : OUT STD_LOGIC;
        B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_empty_n : IN STD_LOGIC;
        B_read : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_we0 : OUT STD_LOGIC;
        C_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_ce1 : OUT STD_LOGIC;
        C_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_we1 : OUT STD_LOGIC;
        A_0_pipo_status : IN STD_LOGIC;
        A_0_pipo_update : OUT STD_LOGIC;
        A_1_pipo_status : IN STD_LOGIC;
        A_1_pipo_update : OUT STD_LOGIC;
        A_2_pipo_status : IN STD_LOGIC;
        A_2_pipo_update : OUT STD_LOGIC;
        A_3_pipo_status : IN STD_LOGIC;
        A_3_pipo_update : OUT STD_LOGIC;
        A_4_pipo_status : IN STD_LOGIC;
        A_4_pipo_update : OUT STD_LOGIC;
        A_5_pipo_status : IN STD_LOGIC;
        A_5_pipo_update : OUT STD_LOGIC;
        A_6_pipo_status : IN STD_LOGIC;
        A_6_pipo_update : OUT STD_LOGIC;
        A_7_pipo_status : IN STD_LOGIC;
        A_7_pipo_update : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component Accelerator_MAT_Multiply2_Loop_Row_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_cached_row_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_cached_row_ce0 : OUT STD_LOGIC;
        A_cached_row_we0 : OUT STD_LOGIC;
        A_cached_row_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_MAT_Multiply2_Loop_Col_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_cached_row_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_cached_row_ce0 : OUT STD_LOGIC;
        A_cached_row_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_cached_row_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_cached_row_ce1 : OUT STD_LOGIC;
        A_cached_row_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_2_ce0 : OUT STD_LOGIC;
        B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_3_ce0 : OUT STD_LOGIC;
        B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_4_ce0 : OUT STD_LOGIC;
        B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_5_ce0 : OUT STD_LOGIC;
        B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_6_ce0 : OUT STD_LOGIC;
        B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_7_ce0 : OUT STD_LOGIC;
        B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_DCT_Block_proc_A_cached_row_i1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_DCT_Block_proc_Tinv_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_Tinv_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_Tinv_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_Tinv_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_Tinv_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_Tinv_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_Tinv_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_Tinv_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_T_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_T_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_T_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_T_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_T_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_T_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_T_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_T_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Accelerator_DCT_Block_proc_Y IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    A_cached_row_i1_U : component Accelerator_DCT_Block_proc_A_cached_row_i1
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_cached_row_i1_address0,
        ce0 => A_cached_row_i1_ce0,
        we0 => A_cached_row_i1_we0,
        d0 => A_cached_row_i1_d0,
        q0 => A_cached_row_i1_q0,
        address1 => A_cached_row_i1_address1,
        ce1 => A_cached_row_i1_ce1,
        q1 => A_cached_row_i1_q1,
        i_full_n => A_cached_row_i1_i_full_n,
        i_write => A_cached_row_i1_i_write,
        t_empty_n => A_cached_row_i1_t_empty_n,
        t_read => A_cached_row_i1_t_read);

    A_cached_row_i_U : component Accelerator_DCT_Block_proc_A_cached_row_i1
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_cached_row_i_address0,
        ce0 => A_cached_row_i_ce0,
        we0 => A_cached_row_i_we0,
        d0 => A_cached_row_i_d0,
        q0 => A_cached_row_i_q0,
        address1 => A_cached_row_i_address1,
        ce1 => A_cached_row_i_ce1,
        q1 => A_cached_row_i_q1,
        i_full_n => A_cached_row_i_i_full_n,
        i_write => A_cached_row_i_i_write,
        t_empty_n => A_cached_row_i_t_empty_n,
        t_read => A_cached_row_i_t_read);

    temp_U : component Accelerator_DCT_Block_proc_temp
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);

    Tinv_0_U : component Accelerator_DCT_Block_proc_Tinv_0
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Tinv_0_address0,
        ce0 => Tinv_0_ce0,
        q0 => Tinv_0_q0,
        address1 => Tinv_0_address1,
        ce1 => Tinv_0_ce1,
        q1 => Tinv_0_q1,
        i_full_n => Tinv_0_i_full_n,
        i_write => Tinv_0_i_write,
        t_empty_n => Tinv_0_t_empty_n,
        t_read => Tinv_0_t_read);

    Tinv_1_U : component Accelerator_DCT_Block_proc_Tinv_1
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Tinv_1_address0,
        ce0 => Tinv_1_ce0,
        q0 => Tinv_1_q0,
        address1 => Tinv_1_address1,
        ce1 => Tinv_1_ce1,
        q1 => Tinv_1_q1,
        i_full_n => Tinv_1_i_full_n,
        i_write => Tinv_1_i_write,
        t_empty_n => Tinv_1_t_empty_n,
        t_read => Tinv_1_t_read);

    Tinv_2_U : component Accelerator_DCT_Block_proc_Tinv_2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Tinv_2_address0,
        ce0 => Tinv_2_ce0,
        q0 => Tinv_2_q0,
        address1 => Tinv_2_address1,
        ce1 => Tinv_2_ce1,
        q1 => Tinv_2_q1,
        i_full_n => Tinv_2_i_full_n,
        i_write => Tinv_2_i_write,
        t_empty_n => Tinv_2_t_empty_n,
        t_read => Tinv_2_t_read);

    Tinv_3_U : component Accelerator_DCT_Block_proc_Tinv_3
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Tinv_3_address0,
        ce0 => Tinv_3_ce0,
        q0 => Tinv_3_q0,
        address1 => Tinv_3_address1,
        ce1 => Tinv_3_ce1,
        q1 => Tinv_3_q1,
        i_full_n => Tinv_3_i_full_n,
        i_write => Tinv_3_i_write,
        t_empty_n => Tinv_3_t_empty_n,
        t_read => Tinv_3_t_read);

    Tinv_4_U : component Accelerator_DCT_Block_proc_Tinv_4
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Tinv_4_address0,
        ce0 => Tinv_4_ce0,
        q0 => Tinv_4_q0,
        address1 => Tinv_4_address1,
        ce1 => Tinv_4_ce1,
        q1 => Tinv_4_q1,
        i_full_n => Tinv_4_i_full_n,
        i_write => Tinv_4_i_write,
        t_empty_n => Tinv_4_t_empty_n,
        t_read => Tinv_4_t_read);

    Tinv_5_U : component Accelerator_DCT_Block_proc_Tinv_5
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Tinv_5_address0,
        ce0 => Tinv_5_ce0,
        q0 => Tinv_5_q0,
        address1 => Tinv_5_address1,
        ce1 => Tinv_5_ce1,
        q1 => Tinv_5_q1,
        i_full_n => Tinv_5_i_full_n,
        i_write => Tinv_5_i_write,
        t_empty_n => Tinv_5_t_empty_n,
        t_read => Tinv_5_t_read);

    Tinv_6_U : component Accelerator_DCT_Block_proc_Tinv_6
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Tinv_6_address0,
        ce0 => Tinv_6_ce0,
        q0 => Tinv_6_q0,
        address1 => Tinv_6_address1,
        ce1 => Tinv_6_ce1,
        q1 => Tinv_6_q1,
        i_full_n => Tinv_6_i_full_n,
        i_write => Tinv_6_i_write,
        t_empty_n => Tinv_6_t_empty_n,
        t_read => Tinv_6_t_read);

    Tinv_7_U : component Accelerator_DCT_Block_proc_Tinv_7
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Tinv_7_address0,
        ce0 => Tinv_7_ce0,
        q0 => Tinv_7_q0,
        address1 => Tinv_7_address1,
        ce1 => Tinv_7_ce1,
        q1 => Tinv_7_q1,
        i_full_n => Tinv_7_i_full_n,
        i_write => Tinv_7_i_write,
        t_empty_n => Tinv_7_t_empty_n,
        t_read => Tinv_7_t_read);

    T_0_U : component Accelerator_DCT_Block_proc_T_0
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_0_address0,
        ce0 => T_0_ce0,
        q0 => T_0_q0,
        address1 => T_0_address1,
        ce1 => T_0_ce1,
        q1 => T_0_q1,
        i_full_n => T_0_i_full_n,
        i_write => T_0_i_write,
        t_empty_n => T_0_t_empty_n,
        t_read => T_0_t_read);

    T_1_U : component Accelerator_DCT_Block_proc_T_1
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_1_address0,
        ce0 => T_1_ce0,
        q0 => T_1_q0,
        address1 => T_1_address1,
        ce1 => T_1_ce1,
        q1 => T_1_q1,
        i_full_n => T_1_i_full_n,
        i_write => T_1_i_write,
        t_empty_n => T_1_t_empty_n,
        t_read => T_1_t_read);

    T_2_U : component Accelerator_DCT_Block_proc_T_2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_2_address0,
        ce0 => T_2_ce0,
        q0 => T_2_q0,
        address1 => T_2_address1,
        ce1 => T_2_ce1,
        q1 => T_2_q1,
        i_full_n => T_2_i_full_n,
        i_write => T_2_i_write,
        t_empty_n => T_2_t_empty_n,
        t_read => T_2_t_read);

    T_3_U : component Accelerator_DCT_Block_proc_T_3
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_3_address0,
        ce0 => T_3_ce0,
        q0 => T_3_q0,
        address1 => T_3_address1,
        ce1 => T_3_ce1,
        q1 => T_3_q1,
        i_full_n => T_3_i_full_n,
        i_write => T_3_i_write,
        t_empty_n => T_3_t_empty_n,
        t_read => T_3_t_read);

    T_4_U : component Accelerator_DCT_Block_proc_T_4
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_4_address0,
        ce0 => T_4_ce0,
        q0 => T_4_q0,
        address1 => T_4_address1,
        ce1 => T_4_ce1,
        q1 => T_4_q1,
        i_full_n => T_4_i_full_n,
        i_write => T_4_i_write,
        t_empty_n => T_4_t_empty_n,
        t_read => T_4_t_read);

    T_5_U : component Accelerator_DCT_Block_proc_T_5
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_5_address0,
        ce0 => T_5_ce0,
        q0 => T_5_q0,
        address1 => T_5_address1,
        ce1 => T_5_ce1,
        q1 => T_5_q1,
        i_full_n => T_5_i_full_n,
        i_write => T_5_i_write,
        t_empty_n => T_5_t_empty_n,
        t_read => T_5_t_read);

    T_6_U : component Accelerator_DCT_Block_proc_T_6
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_6_address0,
        ce0 => T_6_ce0,
        q0 => T_6_q0,
        address1 => T_6_address1,
        ce1 => T_6_ce1,
        q1 => T_6_q1,
        i_full_n => T_6_i_full_n,
        i_write => T_6_i_write,
        t_empty_n => T_6_t_empty_n,
        t_read => T_6_t_read);

    T_7_U : component Accelerator_DCT_Block_proc_T_7
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_7_address0,
        ce0 => T_7_ce0,
        q0 => T_7_q0,
        address1 => T_7_address1,
        ce1 => T_7_ce1,
        q1 => T_7_q1,
        i_full_n => T_7_i_full_n,
        i_write => T_7_i_write,
        t_empty_n => T_7_t_empty_n,
        t_read => T_7_t_read);

    Accelerator_MAT_Multiply_U0 : component Accelerator_MAT_Multiply
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        A_0_address0 => Accelerator_MAT_Multiply_U0_A_0_address0,
        A_0_ce0 => Accelerator_MAT_Multiply_U0_A_0_ce0,
        A_0_d0 => Accelerator_MAT_Multiply_U0_A_0_d0,
        A_0_q0 => Accelerator_MAT_Multiply_U0_A_0_q0,
        A_0_we0 => Accelerator_MAT_Multiply_U0_A_0_we0,
        A_0_address1 => Accelerator_MAT_Multiply_U0_A_0_address1,
        A_0_ce1 => Accelerator_MAT_Multiply_U0_A_0_ce1,
        A_0_d1 => Accelerator_MAT_Multiply_U0_A_0_d1,
        A_0_q1 => Accelerator_MAT_Multiply_U0_A_0_q1,
        A_0_we1 => Accelerator_MAT_Multiply_U0_A_0_we1,
        A_1_address0 => Accelerator_MAT_Multiply_U0_A_1_address0,
        A_1_ce0 => Accelerator_MAT_Multiply_U0_A_1_ce0,
        A_1_d0 => Accelerator_MAT_Multiply_U0_A_1_d0,
        A_1_q0 => Accelerator_MAT_Multiply_U0_A_1_q0,
        A_1_we0 => Accelerator_MAT_Multiply_U0_A_1_we0,
        A_1_address1 => Accelerator_MAT_Multiply_U0_A_1_address1,
        A_1_ce1 => Accelerator_MAT_Multiply_U0_A_1_ce1,
        A_1_d1 => Accelerator_MAT_Multiply_U0_A_1_d1,
        A_1_q1 => Accelerator_MAT_Multiply_U0_A_1_q1,
        A_1_we1 => Accelerator_MAT_Multiply_U0_A_1_we1,
        A_2_address0 => Accelerator_MAT_Multiply_U0_A_2_address0,
        A_2_ce0 => Accelerator_MAT_Multiply_U0_A_2_ce0,
        A_2_d0 => Accelerator_MAT_Multiply_U0_A_2_d0,
        A_2_q0 => Accelerator_MAT_Multiply_U0_A_2_q0,
        A_2_we0 => Accelerator_MAT_Multiply_U0_A_2_we0,
        A_2_address1 => Accelerator_MAT_Multiply_U0_A_2_address1,
        A_2_ce1 => Accelerator_MAT_Multiply_U0_A_2_ce1,
        A_2_d1 => Accelerator_MAT_Multiply_U0_A_2_d1,
        A_2_q1 => Accelerator_MAT_Multiply_U0_A_2_q1,
        A_2_we1 => Accelerator_MAT_Multiply_U0_A_2_we1,
        A_3_address0 => Accelerator_MAT_Multiply_U0_A_3_address0,
        A_3_ce0 => Accelerator_MAT_Multiply_U0_A_3_ce0,
        A_3_d0 => Accelerator_MAT_Multiply_U0_A_3_d0,
        A_3_q0 => Accelerator_MAT_Multiply_U0_A_3_q0,
        A_3_we0 => Accelerator_MAT_Multiply_U0_A_3_we0,
        A_3_address1 => Accelerator_MAT_Multiply_U0_A_3_address1,
        A_3_ce1 => Accelerator_MAT_Multiply_U0_A_3_ce1,
        A_3_d1 => Accelerator_MAT_Multiply_U0_A_3_d1,
        A_3_q1 => Accelerator_MAT_Multiply_U0_A_3_q1,
        A_3_we1 => Accelerator_MAT_Multiply_U0_A_3_we1,
        A_4_address0 => Accelerator_MAT_Multiply_U0_A_4_address0,
        A_4_ce0 => Accelerator_MAT_Multiply_U0_A_4_ce0,
        A_4_d0 => Accelerator_MAT_Multiply_U0_A_4_d0,
        A_4_q0 => Accelerator_MAT_Multiply_U0_A_4_q0,
        A_4_we0 => Accelerator_MAT_Multiply_U0_A_4_we0,
        A_4_address1 => Accelerator_MAT_Multiply_U0_A_4_address1,
        A_4_ce1 => Accelerator_MAT_Multiply_U0_A_4_ce1,
        A_4_d1 => Accelerator_MAT_Multiply_U0_A_4_d1,
        A_4_q1 => Accelerator_MAT_Multiply_U0_A_4_q1,
        A_4_we1 => Accelerator_MAT_Multiply_U0_A_4_we1,
        A_5_address0 => Accelerator_MAT_Multiply_U0_A_5_address0,
        A_5_ce0 => Accelerator_MAT_Multiply_U0_A_5_ce0,
        A_5_d0 => Accelerator_MAT_Multiply_U0_A_5_d0,
        A_5_q0 => Accelerator_MAT_Multiply_U0_A_5_q0,
        A_5_we0 => Accelerator_MAT_Multiply_U0_A_5_we0,
        A_5_address1 => Accelerator_MAT_Multiply_U0_A_5_address1,
        A_5_ce1 => Accelerator_MAT_Multiply_U0_A_5_ce1,
        A_5_d1 => Accelerator_MAT_Multiply_U0_A_5_d1,
        A_5_q1 => Accelerator_MAT_Multiply_U0_A_5_q1,
        A_5_we1 => Accelerator_MAT_Multiply_U0_A_5_we1,
        A_6_address0 => Accelerator_MAT_Multiply_U0_A_6_address0,
        A_6_ce0 => Accelerator_MAT_Multiply_U0_A_6_ce0,
        A_6_d0 => Accelerator_MAT_Multiply_U0_A_6_d0,
        A_6_q0 => Accelerator_MAT_Multiply_U0_A_6_q0,
        A_6_we0 => Accelerator_MAT_Multiply_U0_A_6_we0,
        A_6_address1 => Accelerator_MAT_Multiply_U0_A_6_address1,
        A_6_ce1 => Accelerator_MAT_Multiply_U0_A_6_ce1,
        A_6_d1 => Accelerator_MAT_Multiply_U0_A_6_d1,
        A_6_q1 => Accelerator_MAT_Multiply_U0_A_6_q1,
        A_6_we1 => Accelerator_MAT_Multiply_U0_A_6_we1,
        A_7_address0 => Accelerator_MAT_Multiply_U0_A_7_address0,
        A_7_ce0 => Accelerator_MAT_Multiply_U0_A_7_ce0,
        A_7_d0 => Accelerator_MAT_Multiply_U0_A_7_d0,
        A_7_q0 => Accelerator_MAT_Multiply_U0_A_7_q0,
        A_7_we0 => Accelerator_MAT_Multiply_U0_A_7_we0,
        A_7_address1 => Accelerator_MAT_Multiply_U0_A_7_address1,
        A_7_ce1 => Accelerator_MAT_Multiply_U0_A_7_ce1,
        A_7_d1 => Accelerator_MAT_Multiply_U0_A_7_d1,
        A_7_q1 => Accelerator_MAT_Multiply_U0_A_7_q1,
        A_7_we1 => Accelerator_MAT_Multiply_U0_A_7_we1,
        B_dout => Accelerator_MAT_Multiply_U0_B_dout,
        B_empty_n => Accelerator_MAT_Multiply_U0_B_empty_n,
        B_read => Accelerator_MAT_Multiply_U0_B_read,
        C_address0 => Accelerator_MAT_Multiply_U0_C_address0,
        C_ce0 => Accelerator_MAT_Multiply_U0_C_ce0,
        C_d0 => Accelerator_MAT_Multiply_U0_C_d0,
        C_q0 => Accelerator_MAT_Multiply_U0_C_q0,
        C_we0 => Accelerator_MAT_Multiply_U0_C_we0,
        C_address1 => Accelerator_MAT_Multiply_U0_C_address1,
        C_ce1 => Accelerator_MAT_Multiply_U0_C_ce1,
        C_d1 => Accelerator_MAT_Multiply_U0_C_d1,
        C_q1 => Accelerator_MAT_Multiply_U0_C_q1,
        C_we1 => Accelerator_MAT_Multiply_U0_C_we1,
        A_0_pipo_status => Accelerator_MAT_Multiply_U0_A_0_pipo_status,
        A_0_pipo_update => Accelerator_MAT_Multiply_U0_A_0_pipo_update,
        A_1_pipo_status => Accelerator_MAT_Multiply_U0_A_1_pipo_status,
        A_1_pipo_update => Accelerator_MAT_Multiply_U0_A_1_pipo_update,
        A_2_pipo_status => Accelerator_MAT_Multiply_U0_A_2_pipo_status,
        A_2_pipo_update => Accelerator_MAT_Multiply_U0_A_2_pipo_update,
        A_3_pipo_status => Accelerator_MAT_Multiply_U0_A_3_pipo_status,
        A_3_pipo_update => Accelerator_MAT_Multiply_U0_A_3_pipo_update,
        A_4_pipo_status => Accelerator_MAT_Multiply_U0_A_4_pipo_status,
        A_4_pipo_update => Accelerator_MAT_Multiply_U0_A_4_pipo_update,
        A_5_pipo_status => Accelerator_MAT_Multiply_U0_A_5_pipo_status,
        A_5_pipo_update => Accelerator_MAT_Multiply_U0_A_5_pipo_update,
        A_6_pipo_status => Accelerator_MAT_Multiply_U0_A_6_pipo_status,
        A_6_pipo_update => Accelerator_MAT_Multiply_U0_A_6_pipo_update,
        A_7_pipo_status => Accelerator_MAT_Multiply_U0_A_7_pipo_status,
        A_7_pipo_update => Accelerator_MAT_Multiply_U0_A_7_pipo_update,
        ap_continue => Accelerator_MAT_Multiply_U0_ap_continue,
        ap_done => Accelerator_MAT_Multiply_U0_ap_done,
        ap_start => Accelerator_MAT_Multiply_U0_ap_start,
        ap_idle => Accelerator_MAT_Multiply_U0_ap_idle,
        ap_ready => Accelerator_MAT_Multiply_U0_ap_ready);

    Accelerator_MAT_Multiply2_Loop_Row_proc_U0 : component Accelerator_MAT_Multiply2_Loop_Row_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_start,
        ap_done => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done,
        ap_continue => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_continue,
        ap_idle => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_idle,
        ap_ready => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_ready,
        A_address0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_address0,
        A_ce0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_ce0,
        A_q0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_q0,
        A_cached_row_address0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_address0,
        A_cached_row_ce0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_ce0,
        A_cached_row_we0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_we0,
        A_cached_row_d0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_d0);

    Accelerator_MAT_Multiply2_Loop_Col_proc_U0 : component Accelerator_MAT_Multiply2_Loop_Col_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_start,
        ap_done => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done,
        ap_continue => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue,
        ap_idle => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_idle,
        ap_ready => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_ready,
        A_cached_row_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address0,
        A_cached_row_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce0,
        A_cached_row_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q0,
        A_cached_row_address1 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address1,
        A_cached_row_ce1 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce1,
        A_cached_row_q1 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q1,
        B_0_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_address0,
        B_0_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_ce0,
        B_0_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_q0,
        B_1_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_address0,
        B_1_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_ce0,
        B_1_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_q0,
        B_2_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_address0,
        B_2_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_ce0,
        B_2_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_q0,
        B_3_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_address0,
        B_3_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_ce0,
        B_3_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_q0,
        B_4_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_address0,
        B_4_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_ce0,
        B_4_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_q0,
        B_5_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_address0,
        B_5_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_ce0,
        B_5_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_q0,
        B_6_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_address0,
        B_6_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_ce0,
        B_6_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_q0,
        B_7_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_address0,
        B_7_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_ce0,
        B_7_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_q0,
        C_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_address0,
        C_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_ce0,
        C_we0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_we0,
        C_d0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_d0);

    Accelerator_MAT_Multiply_U1_1 : component Accelerator_MAT_Multiply
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        A_0_address0 => Accelerator_MAT_Multiply_U1_1_A_0_address0,
        A_0_ce0 => Accelerator_MAT_Multiply_U1_1_A_0_ce0,
        A_0_d0 => Accelerator_MAT_Multiply_U1_1_A_0_d0,
        A_0_q0 => Accelerator_MAT_Multiply_U1_1_A_0_q0,
        A_0_we0 => Accelerator_MAT_Multiply_U1_1_A_0_we0,
        A_0_address1 => Accelerator_MAT_Multiply_U1_1_A_0_address1,
        A_0_ce1 => Accelerator_MAT_Multiply_U1_1_A_0_ce1,
        A_0_d1 => Accelerator_MAT_Multiply_U1_1_A_0_d1,
        A_0_q1 => Accelerator_MAT_Multiply_U1_1_A_0_q1,
        A_0_we1 => Accelerator_MAT_Multiply_U1_1_A_0_we1,
        A_1_address0 => Accelerator_MAT_Multiply_U1_1_A_1_address0,
        A_1_ce0 => Accelerator_MAT_Multiply_U1_1_A_1_ce0,
        A_1_d0 => Accelerator_MAT_Multiply_U1_1_A_1_d0,
        A_1_q0 => Accelerator_MAT_Multiply_U1_1_A_1_q0,
        A_1_we0 => Accelerator_MAT_Multiply_U1_1_A_1_we0,
        A_1_address1 => Accelerator_MAT_Multiply_U1_1_A_1_address1,
        A_1_ce1 => Accelerator_MAT_Multiply_U1_1_A_1_ce1,
        A_1_d1 => Accelerator_MAT_Multiply_U1_1_A_1_d1,
        A_1_q1 => Accelerator_MAT_Multiply_U1_1_A_1_q1,
        A_1_we1 => Accelerator_MAT_Multiply_U1_1_A_1_we1,
        A_2_address0 => Accelerator_MAT_Multiply_U1_1_A_2_address0,
        A_2_ce0 => Accelerator_MAT_Multiply_U1_1_A_2_ce0,
        A_2_d0 => Accelerator_MAT_Multiply_U1_1_A_2_d0,
        A_2_q0 => Accelerator_MAT_Multiply_U1_1_A_2_q0,
        A_2_we0 => Accelerator_MAT_Multiply_U1_1_A_2_we0,
        A_2_address1 => Accelerator_MAT_Multiply_U1_1_A_2_address1,
        A_2_ce1 => Accelerator_MAT_Multiply_U1_1_A_2_ce1,
        A_2_d1 => Accelerator_MAT_Multiply_U1_1_A_2_d1,
        A_2_q1 => Accelerator_MAT_Multiply_U1_1_A_2_q1,
        A_2_we1 => Accelerator_MAT_Multiply_U1_1_A_2_we1,
        A_3_address0 => Accelerator_MAT_Multiply_U1_1_A_3_address0,
        A_3_ce0 => Accelerator_MAT_Multiply_U1_1_A_3_ce0,
        A_3_d0 => Accelerator_MAT_Multiply_U1_1_A_3_d0,
        A_3_q0 => Accelerator_MAT_Multiply_U1_1_A_3_q0,
        A_3_we0 => Accelerator_MAT_Multiply_U1_1_A_3_we0,
        A_3_address1 => Accelerator_MAT_Multiply_U1_1_A_3_address1,
        A_3_ce1 => Accelerator_MAT_Multiply_U1_1_A_3_ce1,
        A_3_d1 => Accelerator_MAT_Multiply_U1_1_A_3_d1,
        A_3_q1 => Accelerator_MAT_Multiply_U1_1_A_3_q1,
        A_3_we1 => Accelerator_MAT_Multiply_U1_1_A_3_we1,
        A_4_address0 => Accelerator_MAT_Multiply_U1_1_A_4_address0,
        A_4_ce0 => Accelerator_MAT_Multiply_U1_1_A_4_ce0,
        A_4_d0 => Accelerator_MAT_Multiply_U1_1_A_4_d0,
        A_4_q0 => Accelerator_MAT_Multiply_U1_1_A_4_q0,
        A_4_we0 => Accelerator_MAT_Multiply_U1_1_A_4_we0,
        A_4_address1 => Accelerator_MAT_Multiply_U1_1_A_4_address1,
        A_4_ce1 => Accelerator_MAT_Multiply_U1_1_A_4_ce1,
        A_4_d1 => Accelerator_MAT_Multiply_U1_1_A_4_d1,
        A_4_q1 => Accelerator_MAT_Multiply_U1_1_A_4_q1,
        A_4_we1 => Accelerator_MAT_Multiply_U1_1_A_4_we1,
        A_5_address0 => Accelerator_MAT_Multiply_U1_1_A_5_address0,
        A_5_ce0 => Accelerator_MAT_Multiply_U1_1_A_5_ce0,
        A_5_d0 => Accelerator_MAT_Multiply_U1_1_A_5_d0,
        A_5_q0 => Accelerator_MAT_Multiply_U1_1_A_5_q0,
        A_5_we0 => Accelerator_MAT_Multiply_U1_1_A_5_we0,
        A_5_address1 => Accelerator_MAT_Multiply_U1_1_A_5_address1,
        A_5_ce1 => Accelerator_MAT_Multiply_U1_1_A_5_ce1,
        A_5_d1 => Accelerator_MAT_Multiply_U1_1_A_5_d1,
        A_5_q1 => Accelerator_MAT_Multiply_U1_1_A_5_q1,
        A_5_we1 => Accelerator_MAT_Multiply_U1_1_A_5_we1,
        A_6_address0 => Accelerator_MAT_Multiply_U1_1_A_6_address0,
        A_6_ce0 => Accelerator_MAT_Multiply_U1_1_A_6_ce0,
        A_6_d0 => Accelerator_MAT_Multiply_U1_1_A_6_d0,
        A_6_q0 => Accelerator_MAT_Multiply_U1_1_A_6_q0,
        A_6_we0 => Accelerator_MAT_Multiply_U1_1_A_6_we0,
        A_6_address1 => Accelerator_MAT_Multiply_U1_1_A_6_address1,
        A_6_ce1 => Accelerator_MAT_Multiply_U1_1_A_6_ce1,
        A_6_d1 => Accelerator_MAT_Multiply_U1_1_A_6_d1,
        A_6_q1 => Accelerator_MAT_Multiply_U1_1_A_6_q1,
        A_6_we1 => Accelerator_MAT_Multiply_U1_1_A_6_we1,
        A_7_address0 => Accelerator_MAT_Multiply_U1_1_A_7_address0,
        A_7_ce0 => Accelerator_MAT_Multiply_U1_1_A_7_ce0,
        A_7_d0 => Accelerator_MAT_Multiply_U1_1_A_7_d0,
        A_7_q0 => Accelerator_MAT_Multiply_U1_1_A_7_q0,
        A_7_we0 => Accelerator_MAT_Multiply_U1_1_A_7_we0,
        A_7_address1 => Accelerator_MAT_Multiply_U1_1_A_7_address1,
        A_7_ce1 => Accelerator_MAT_Multiply_U1_1_A_7_ce1,
        A_7_d1 => Accelerator_MAT_Multiply_U1_1_A_7_d1,
        A_7_q1 => Accelerator_MAT_Multiply_U1_1_A_7_q1,
        A_7_we1 => Accelerator_MAT_Multiply_U1_1_A_7_we1,
        B_dout => Accelerator_MAT_Multiply_U1_1_B_dout,
        B_empty_n => Accelerator_MAT_Multiply_U1_1_B_empty_n,
        B_read => Accelerator_MAT_Multiply_U1_1_B_read,
        C_address0 => Accelerator_MAT_Multiply_U1_1_C_address0,
        C_ce0 => Accelerator_MAT_Multiply_U1_1_C_ce0,
        C_d0 => Accelerator_MAT_Multiply_U1_1_C_d0,
        C_q0 => Accelerator_MAT_Multiply_U1_1_C_q0,
        C_we0 => Accelerator_MAT_Multiply_U1_1_C_we0,
        C_address1 => Accelerator_MAT_Multiply_U1_1_C_address1,
        C_ce1 => Accelerator_MAT_Multiply_U1_1_C_ce1,
        C_d1 => Accelerator_MAT_Multiply_U1_1_C_d1,
        C_q1 => Accelerator_MAT_Multiply_U1_1_C_q1,
        C_we1 => Accelerator_MAT_Multiply_U1_1_C_we1,
        A_0_pipo_status => Accelerator_MAT_Multiply_U1_1_A_0_pipo_status,
        A_0_pipo_update => Accelerator_MAT_Multiply_U1_1_A_0_pipo_update,
        A_1_pipo_status => Accelerator_MAT_Multiply_U1_1_A_1_pipo_status,
        A_1_pipo_update => Accelerator_MAT_Multiply_U1_1_A_1_pipo_update,
        A_2_pipo_status => Accelerator_MAT_Multiply_U1_1_A_2_pipo_status,
        A_2_pipo_update => Accelerator_MAT_Multiply_U1_1_A_2_pipo_update,
        A_3_pipo_status => Accelerator_MAT_Multiply_U1_1_A_3_pipo_status,
        A_3_pipo_update => Accelerator_MAT_Multiply_U1_1_A_3_pipo_update,
        A_4_pipo_status => Accelerator_MAT_Multiply_U1_1_A_4_pipo_status,
        A_4_pipo_update => Accelerator_MAT_Multiply_U1_1_A_4_pipo_update,
        A_5_pipo_status => Accelerator_MAT_Multiply_U1_1_A_5_pipo_status,
        A_5_pipo_update => Accelerator_MAT_Multiply_U1_1_A_5_pipo_update,
        A_6_pipo_status => Accelerator_MAT_Multiply_U1_1_A_6_pipo_status,
        A_6_pipo_update => Accelerator_MAT_Multiply_U1_1_A_6_pipo_update,
        A_7_pipo_status => Accelerator_MAT_Multiply_U1_1_A_7_pipo_status,
        A_7_pipo_update => Accelerator_MAT_Multiply_U1_1_A_7_pipo_update,
        ap_continue => Accelerator_MAT_Multiply_U1_1_ap_continue,
        ap_done => Accelerator_MAT_Multiply_U1_1_ap_done,
        ap_start => Accelerator_MAT_Multiply_U1_1_ap_start,
        ap_idle => Accelerator_MAT_Multiply_U1_1_ap_idle,
        ap_ready => Accelerator_MAT_Multiply_U1_1_ap_ready);

    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 : component Accelerator_MAT_Multiply2_Loop_Row_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_start,
        ap_done => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done,
        ap_continue => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_continue,
        ap_idle => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_idle,
        ap_ready => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_ready,
        A_address0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_address0,
        A_ce0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_ce0,
        A_q0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_q0,
        A_cached_row_address0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_address0,
        A_cached_row_ce0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_ce0,
        A_cached_row_we0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_we0,
        A_cached_row_d0 => Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_d0);

    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 : component Accelerator_MAT_Multiply2_Loop_Col_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_start,
        ap_done => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_done,
        ap_continue => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_continue,
        ap_idle => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_idle,
        ap_ready => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready,
        A_cached_row_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address0,
        A_cached_row_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce0,
        A_cached_row_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q0,
        A_cached_row_address1 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address1,
        A_cached_row_ce1 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce1,
        A_cached_row_q1 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q1,
        B_0_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_address0,
        B_0_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_ce0,
        B_0_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_q0,
        B_1_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_address0,
        B_1_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_ce0,
        B_1_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_q0,
        B_2_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_address0,
        B_2_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_ce0,
        B_2_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_q0,
        B_3_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_address0,
        B_3_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_ce0,
        B_3_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_q0,
        B_4_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_address0,
        B_4_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_ce0,
        B_4_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_q0,
        B_5_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_address0,
        B_5_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_ce0,
        B_5_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_q0,
        B_6_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_address0,
        B_6_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_ce0,
        B_6_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_q0,
        B_7_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_address0,
        B_7_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_ce0,
        B_7_q0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_q0,
        C_address0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_address0,
        C_ce0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_ce0,
        C_we0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_we0,
        C_d0 => Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_d0);

    Y_U : component Accelerator_DCT_Block_proc_Y
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Y_address0,
        ce0 => Y_ce0,
        we0 => Y_we0,
        d0 => Y_d0,
        i_full_n => Y_i_full_n,
        i_write => Y_i_write,
        t_empty_n => Y_t_empty_n,
        t_read => Y_t_read);





    -- ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 assign process. --
    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 assign process. --
    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 assign process. --
    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 assign process. --
    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Accelerator_MAT_Multiply_U0 assign process. --
    ap_reg_procdone_Accelerator_MAT_Multiply_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_MAT_Multiply_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply_U0 <= ap_const_logic_0;
                elsif ((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 assign process. --
    ap_reg_procdone_Accelerator_MAT_Multiply_U1_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply_U1_1_ap_done)) then 
                    ap_reg_procdone_Accelerator_MAT_Multiply_U1_1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status <= ap_const_logic_0;
            else
                if (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status <= ap_const_logic_0;
                elsif (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_A_0_pipo_status = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status <= ap_const_logic_0;
            else
                if (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status <= ap_const_logic_0;
                elsif (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_A_1_pipo_status = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status <= ap_const_logic_0;
            else
                if (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status <= ap_const_logic_0;
                elsif (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_A_2_pipo_status = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status <= ap_const_logic_0;
            else
                if (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status <= ap_const_logic_0;
                elsif (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_A_3_pipo_status = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status <= ap_const_logic_0;
            else
                if (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status <= ap_const_logic_0;
                elsif (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_A_4_pipo_status = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status <= ap_const_logic_0;
            else
                if (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status <= ap_const_logic_0;
                elsif (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_A_5_pipo_status = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status <= ap_const_logic_0;
            else
                if (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status <= ap_const_logic_0;
                elsif (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_A_6_pipo_status = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status <= ap_const_logic_0;
            else
                if (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status <= ap_const_logic_0;
                elsif (((Accelerator_MAT_Multiply_U0_ap_done = ap_const_logic_1) and (Accelerator_MAT_Multiply_U0_A_7_pipo_status = ap_const_logic_1))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready <= ap_const_logic_0;
                elsif ((Accelerator_MAT_Multiply_U0_ap_ready = ap_const_logic_1)) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready assign process. --
    ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Accelerator_MAT_Multiply_U1_1_ap_ready)) then 
                    ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    A_cached_row_i1_address0 <= ap_const_lv3_0;
    A_cached_row_i1_address1 <= ap_const_lv3_0;
    A_cached_row_i1_ce0 <= ap_const_logic_0;
    A_cached_row_i1_ce1 <= ap_const_logic_0;
    A_cached_row_i1_d0 <= ap_const_lv32_0;
    A_cached_row_i1_i_address0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_address0;
    A_cached_row_i1_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_ce0;
    A_cached_row_i1_i_d0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_d0;
    A_cached_row_i1_i_we0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_we0;
    A_cached_row_i1_i_write <= Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    A_cached_row_i1_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address0;
    A_cached_row_i1_t_address1 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_address1;
    A_cached_row_i1_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce0;
    A_cached_row_i1_t_ce1 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_ce1;
    A_cached_row_i1_t_d0 <= ap_const_lv32_0;
    A_cached_row_i1_t_d1 <= ap_const_lv32_0;
    A_cached_row_i1_t_q0 <= ap_const_lv32_0;
    A_cached_row_i1_t_q1 <= ap_const_lv32_0;
    A_cached_row_i1_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_ready;
    A_cached_row_i1_t_we0 <= ap_const_logic_0;
    A_cached_row_i1_t_we1 <= ap_const_logic_0;
    A_cached_row_i1_we0 <= ap_const_logic_0;
    A_cached_row_i_address0 <= ap_const_lv3_0;
    A_cached_row_i_address1 <= ap_const_lv3_0;
    A_cached_row_i_ce0 <= ap_const_logic_0;
    A_cached_row_i_ce1 <= ap_const_logic_0;
    A_cached_row_i_d0 <= ap_const_lv32_0;
    A_cached_row_i_i_address0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_address0;
    A_cached_row_i_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_ce0;
    A_cached_row_i_i_d0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_d0;
    A_cached_row_i_i_we0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_we0;
    A_cached_row_i_i_write <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done;
    A_cached_row_i_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address0;
    A_cached_row_i_t_address1 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_address1;
    A_cached_row_i_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce0;
    A_cached_row_i_t_ce1 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_ce1;
    A_cached_row_i_t_d0 <= ap_const_lv32_0;
    A_cached_row_i_t_d1 <= ap_const_lv32_0;
    A_cached_row_i_t_q0 <= ap_const_lv32_0;
    A_cached_row_i_t_q1 <= ap_const_lv32_0;
    A_cached_row_i_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    A_cached_row_i_t_we0 <= ap_const_logic_0;
    A_cached_row_i_t_we1 <= ap_const_logic_0;
    A_cached_row_i_we0 <= ap_const_logic_0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q0 <= A_cached_row_i1_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_A_cached_row_q1 <= A_cached_row_i1_t_q1;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= Tinv_0_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_q0 <= Tinv_0_i_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= Tinv_1_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_q0 <= Tinv_1_i_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= Tinv_2_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_q0 <= Tinv_2_i_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= Tinv_3_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_q0 <= Tinv_3_i_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= Tinv_4_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_q0 <= Tinv_4_i_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= Tinv_5_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_q0 <= Tinv_5_i_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= Tinv_6_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_q0 <= Tinv_6_i_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= Tinv_7_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_q0 <= Tinv_7_i_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= Y_i_full_n;

    -- Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue assign process. --
    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue_assign_proc : process(ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status))) then 
            Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_start <= A_cached_row_i1_t_empty_n;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q0 <= A_cached_row_i_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_A_cached_row_q1 <= A_cached_row_i_t_q1;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_q0 <= T_0_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_q0 <= T_1_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_q0 <= T_2_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_q0 <= T_3_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_q0 <= T_4_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_q0 <= T_5_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_q0 <= T_6_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_q0 <= T_7_t_q0;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_continue <= ap_const_logic_1;
    Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_start <= (T_0_t_empty_n and T_1_t_empty_n and T_2_t_empty_n and T_3_t_empty_n and T_4_t_empty_n and T_5_t_empty_n and T_6_t_empty_n and T_7_t_empty_n and Y_t_empty_n and A_cached_row_i_t_empty_n);
    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_pipo_status <= A_cached_row_i1_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_q0 <= temp_q0;
    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_continue <= Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_pipo_status;
    Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_start <= ap_const_logic_1;
    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_pipo_status <= A_cached_row_i_i_full_n;
    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_q0 <= temp_q0;
    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_continue <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_pipo_status;
    Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_start <= ap_const_logic_1;
    Accelerator_MAT_Multiply_U0_A_0_pipo_status <= T_0_i_full_n;
    Accelerator_MAT_Multiply_U0_A_0_q0 <= T_0_i_q0;
    Accelerator_MAT_Multiply_U0_A_0_q1 <= T_0_i_q1;
    Accelerator_MAT_Multiply_U0_A_1_pipo_status <= T_1_i_full_n;
    Accelerator_MAT_Multiply_U0_A_1_q0 <= T_1_i_q0;
    Accelerator_MAT_Multiply_U0_A_1_q1 <= T_1_i_q1;
    Accelerator_MAT_Multiply_U0_A_2_pipo_status <= T_2_i_full_n;
    Accelerator_MAT_Multiply_U0_A_2_q0 <= T_2_i_q0;
    Accelerator_MAT_Multiply_U0_A_2_q1 <= T_2_i_q1;
    Accelerator_MAT_Multiply_U0_A_3_pipo_status <= T_3_i_full_n;
    Accelerator_MAT_Multiply_U0_A_3_q0 <= T_3_i_q0;
    Accelerator_MAT_Multiply_U0_A_3_q1 <= T_3_i_q1;
    Accelerator_MAT_Multiply_U0_A_4_pipo_status <= T_4_i_full_n;
    Accelerator_MAT_Multiply_U0_A_4_q0 <= T_4_i_q0;
    Accelerator_MAT_Multiply_U0_A_4_q1 <= T_4_i_q1;
    Accelerator_MAT_Multiply_U0_A_5_pipo_status <= T_5_i_full_n;
    Accelerator_MAT_Multiply_U0_A_5_q0 <= T_5_i_q0;
    Accelerator_MAT_Multiply_U0_A_5_q1 <= T_5_i_q1;
    Accelerator_MAT_Multiply_U0_A_6_pipo_status <= T_6_i_full_n;
    Accelerator_MAT_Multiply_U0_A_6_q0 <= T_6_i_q0;
    Accelerator_MAT_Multiply_U0_A_6_q1 <= T_6_i_q1;
    Accelerator_MAT_Multiply_U0_A_7_pipo_status <= T_7_i_full_n;
    Accelerator_MAT_Multiply_U0_A_7_q0 <= T_7_i_q0;
    Accelerator_MAT_Multiply_U0_A_7_q1 <= T_7_i_q1;
    Accelerator_MAT_Multiply_U0_B_dout <= X_dout;
    Accelerator_MAT_Multiply_U0_B_empty_n <= X_empty_n;
    Accelerator_MAT_Multiply_U0_C_q0 <= ap_const_lv32_0;
    Accelerator_MAT_Multiply_U0_C_q1 <= ap_const_lv32_0;

    -- Accelerator_MAT_Multiply_U0_ap_continue assign process. --
    Accelerator_MAT_Multiply_U0_ap_continue_assign_proc : process(ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status, ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status))) then 
            Accelerator_MAT_Multiply_U0_ap_continue <= ap_const_logic_1;
        else 
            Accelerator_MAT_Multiply_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    Accelerator_MAT_Multiply_U0_ap_start <= ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start;
    Accelerator_MAT_Multiply_U1_1_A_0_pipo_status <= ap_const_logic_0;
    Accelerator_MAT_Multiply_U1_1_A_0_q0 <= Tinv_0_t_q0;
    Accelerator_MAT_Multiply_U1_1_A_0_q1 <= Tinv_0_t_q1;
    Accelerator_MAT_Multiply_U1_1_A_1_pipo_status <= ap_const_logic_0;
    Accelerator_MAT_Multiply_U1_1_A_1_q0 <= Tinv_1_t_q0;
    Accelerator_MAT_Multiply_U1_1_A_1_q1 <= Tinv_1_t_q1;
    Accelerator_MAT_Multiply_U1_1_A_2_pipo_status <= ap_const_logic_0;
    Accelerator_MAT_Multiply_U1_1_A_2_q0 <= Tinv_2_t_q0;
    Accelerator_MAT_Multiply_U1_1_A_2_q1 <= Tinv_2_t_q1;
    Accelerator_MAT_Multiply_U1_1_A_3_pipo_status <= ap_const_logic_0;
    Accelerator_MAT_Multiply_U1_1_A_3_q0 <= Tinv_3_t_q0;
    Accelerator_MAT_Multiply_U1_1_A_3_q1 <= Tinv_3_t_q1;
    Accelerator_MAT_Multiply_U1_1_A_4_pipo_status <= ap_const_logic_0;
    Accelerator_MAT_Multiply_U1_1_A_4_q0 <= Tinv_4_t_q0;
    Accelerator_MAT_Multiply_U1_1_A_4_q1 <= Tinv_4_t_q1;
    Accelerator_MAT_Multiply_U1_1_A_5_pipo_status <= ap_const_logic_0;
    Accelerator_MAT_Multiply_U1_1_A_5_q0 <= Tinv_5_t_q0;
    Accelerator_MAT_Multiply_U1_1_A_5_q1 <= Tinv_5_t_q1;
    Accelerator_MAT_Multiply_U1_1_A_6_pipo_status <= ap_const_logic_0;
    Accelerator_MAT_Multiply_U1_1_A_6_q0 <= Tinv_6_t_q0;
    Accelerator_MAT_Multiply_U1_1_A_6_q1 <= Tinv_6_t_q1;
    Accelerator_MAT_Multiply_U1_1_A_7_pipo_status <= ap_const_logic_0;
    Accelerator_MAT_Multiply_U1_1_A_7_q0 <= Tinv_7_t_q0;
    Accelerator_MAT_Multiply_U1_1_A_7_q1 <= Tinv_7_t_q1;
    Accelerator_MAT_Multiply_U1_1_B_dout <= X_dout;
    Accelerator_MAT_Multiply_U1_1_B_empty_n <= X_empty_n;
    Accelerator_MAT_Multiply_U1_1_C_q0 <= ap_const_lv32_0;
    Accelerator_MAT_Multiply_U1_1_C_q1 <= ap_const_lv32_0;
    Accelerator_MAT_Multiply_U1_1_ap_continue <= ap_const_logic_1;
    Accelerator_MAT_Multiply_U1_1_ap_start <= (Tinv_0_t_empty_n and Tinv_1_t_empty_n and Tinv_2_t_empty_n and Tinv_3_t_empty_n and Tinv_4_t_empty_n and Tinv_5_t_empty_n and Tinv_6_t_empty_n and Tinv_7_t_empty_n and ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start);
    T_0_address0 <= ap_const_lv3_0;
    T_0_address1 <= ap_const_lv3_0;
    T_0_ce0 <= ap_const_logic_0;
    T_0_ce1 <= ap_const_logic_0;
    T_0_i_address0 <= Accelerator_MAT_Multiply_U0_A_0_address0;
    T_0_i_address1 <= Accelerator_MAT_Multiply_U0_A_0_address1;
    T_0_i_ce0 <= Accelerator_MAT_Multiply_U0_A_0_ce0;
    T_0_i_ce1 <= Accelerator_MAT_Multiply_U0_A_0_ce1;
    T_0_i_d0 <= ap_const_lv32_0;
    T_0_i_d1 <= ap_const_lv32_0;
    T_0_i_q0 <= ap_const_lv32_0;
    T_0_i_q1 <= ap_const_lv32_0;
    T_0_i_we0 <= ap_const_logic_0;
    T_0_i_we1 <= ap_const_logic_0;
    T_0_i_write <= Accelerator_MAT_Multiply_U0_ap_done;
    T_0_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_address0;
    T_0_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_0_ce0;
    T_0_t_d0 <= ap_const_lv32_0;
    T_0_t_q0 <= ap_const_lv32_0;
    T_0_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    T_0_t_we0 <= ap_const_logic_0;
    T_1_address0 <= ap_const_lv3_0;
    T_1_address1 <= ap_const_lv3_0;
    T_1_ce0 <= ap_const_logic_0;
    T_1_ce1 <= ap_const_logic_0;
    T_1_i_address0 <= Accelerator_MAT_Multiply_U0_A_1_address0;
    T_1_i_address1 <= Accelerator_MAT_Multiply_U0_A_1_address1;
    T_1_i_ce0 <= Accelerator_MAT_Multiply_U0_A_1_ce0;
    T_1_i_ce1 <= Accelerator_MAT_Multiply_U0_A_1_ce1;
    T_1_i_d0 <= ap_const_lv32_0;
    T_1_i_d1 <= ap_const_lv32_0;
    T_1_i_q0 <= ap_const_lv32_0;
    T_1_i_q1 <= ap_const_lv32_0;
    T_1_i_we0 <= ap_const_logic_0;
    T_1_i_we1 <= ap_const_logic_0;
    T_1_i_write <= Accelerator_MAT_Multiply_U0_ap_done;
    T_1_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_address0;
    T_1_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_1_ce0;
    T_1_t_d0 <= ap_const_lv32_0;
    T_1_t_q0 <= ap_const_lv32_0;
    T_1_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    T_1_t_we0 <= ap_const_logic_0;
    T_2_address0 <= ap_const_lv3_0;
    T_2_address1 <= ap_const_lv3_0;
    T_2_ce0 <= ap_const_logic_0;
    T_2_ce1 <= ap_const_logic_0;
    T_2_i_address0 <= Accelerator_MAT_Multiply_U0_A_2_address0;
    T_2_i_address1 <= Accelerator_MAT_Multiply_U0_A_2_address1;
    T_2_i_ce0 <= Accelerator_MAT_Multiply_U0_A_2_ce0;
    T_2_i_ce1 <= Accelerator_MAT_Multiply_U0_A_2_ce1;
    T_2_i_d0 <= ap_const_lv32_0;
    T_2_i_d1 <= ap_const_lv32_0;
    T_2_i_q0 <= ap_const_lv32_0;
    T_2_i_q1 <= ap_const_lv32_0;
    T_2_i_we0 <= ap_const_logic_0;
    T_2_i_we1 <= ap_const_logic_0;
    T_2_i_write <= Accelerator_MAT_Multiply_U0_ap_done;
    T_2_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_address0;
    T_2_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_2_ce0;
    T_2_t_d0 <= ap_const_lv32_0;
    T_2_t_q0 <= ap_const_lv32_0;
    T_2_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    T_2_t_we0 <= ap_const_logic_0;
    T_3_address0 <= ap_const_lv3_0;
    T_3_address1 <= ap_const_lv3_0;
    T_3_ce0 <= ap_const_logic_0;
    T_3_ce1 <= ap_const_logic_0;
    T_3_i_address0 <= Accelerator_MAT_Multiply_U0_A_3_address0;
    T_3_i_address1 <= Accelerator_MAT_Multiply_U0_A_3_address1;
    T_3_i_ce0 <= Accelerator_MAT_Multiply_U0_A_3_ce0;
    T_3_i_ce1 <= Accelerator_MAT_Multiply_U0_A_3_ce1;
    T_3_i_d0 <= ap_const_lv32_0;
    T_3_i_d1 <= ap_const_lv32_0;
    T_3_i_q0 <= ap_const_lv32_0;
    T_3_i_q1 <= ap_const_lv32_0;
    T_3_i_we0 <= ap_const_logic_0;
    T_3_i_we1 <= ap_const_logic_0;
    T_3_i_write <= Accelerator_MAT_Multiply_U0_ap_done;
    T_3_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_address0;
    T_3_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_3_ce0;
    T_3_t_d0 <= ap_const_lv32_0;
    T_3_t_q0 <= ap_const_lv32_0;
    T_3_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    T_3_t_we0 <= ap_const_logic_0;
    T_4_address0 <= ap_const_lv3_0;
    T_4_address1 <= ap_const_lv3_0;
    T_4_ce0 <= ap_const_logic_0;
    T_4_ce1 <= ap_const_logic_0;
    T_4_i_address0 <= Accelerator_MAT_Multiply_U0_A_4_address0;
    T_4_i_address1 <= Accelerator_MAT_Multiply_U0_A_4_address1;
    T_4_i_ce0 <= Accelerator_MAT_Multiply_U0_A_4_ce0;
    T_4_i_ce1 <= Accelerator_MAT_Multiply_U0_A_4_ce1;
    T_4_i_d0 <= ap_const_lv32_0;
    T_4_i_d1 <= ap_const_lv32_0;
    T_4_i_q0 <= ap_const_lv32_0;
    T_4_i_q1 <= ap_const_lv32_0;
    T_4_i_we0 <= ap_const_logic_0;
    T_4_i_we1 <= ap_const_logic_0;
    T_4_i_write <= Accelerator_MAT_Multiply_U0_ap_done;
    T_4_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_address0;
    T_4_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_4_ce0;
    T_4_t_d0 <= ap_const_lv32_0;
    T_4_t_q0 <= ap_const_lv32_0;
    T_4_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    T_4_t_we0 <= ap_const_logic_0;
    T_5_address0 <= ap_const_lv3_0;
    T_5_address1 <= ap_const_lv3_0;
    T_5_ce0 <= ap_const_logic_0;
    T_5_ce1 <= ap_const_logic_0;
    T_5_i_address0 <= Accelerator_MAT_Multiply_U0_A_5_address0;
    T_5_i_address1 <= Accelerator_MAT_Multiply_U0_A_5_address1;
    T_5_i_ce0 <= Accelerator_MAT_Multiply_U0_A_5_ce0;
    T_5_i_ce1 <= Accelerator_MAT_Multiply_U0_A_5_ce1;
    T_5_i_d0 <= ap_const_lv32_0;
    T_5_i_d1 <= ap_const_lv32_0;
    T_5_i_q0 <= ap_const_lv32_0;
    T_5_i_q1 <= ap_const_lv32_0;
    T_5_i_we0 <= ap_const_logic_0;
    T_5_i_we1 <= ap_const_logic_0;
    T_5_i_write <= Accelerator_MAT_Multiply_U0_ap_done;
    T_5_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_address0;
    T_5_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_5_ce0;
    T_5_t_d0 <= ap_const_lv32_0;
    T_5_t_q0 <= ap_const_lv32_0;
    T_5_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    T_5_t_we0 <= ap_const_logic_0;
    T_6_address0 <= ap_const_lv3_0;
    T_6_address1 <= ap_const_lv3_0;
    T_6_ce0 <= ap_const_logic_0;
    T_6_ce1 <= ap_const_logic_0;
    T_6_i_address0 <= Accelerator_MAT_Multiply_U0_A_6_address0;
    T_6_i_address1 <= Accelerator_MAT_Multiply_U0_A_6_address1;
    T_6_i_ce0 <= Accelerator_MAT_Multiply_U0_A_6_ce0;
    T_6_i_ce1 <= Accelerator_MAT_Multiply_U0_A_6_ce1;
    T_6_i_d0 <= ap_const_lv32_0;
    T_6_i_d1 <= ap_const_lv32_0;
    T_6_i_q0 <= ap_const_lv32_0;
    T_6_i_q1 <= ap_const_lv32_0;
    T_6_i_we0 <= ap_const_logic_0;
    T_6_i_we1 <= ap_const_logic_0;
    T_6_i_write <= Accelerator_MAT_Multiply_U0_ap_done;
    T_6_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_address0;
    T_6_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_6_ce0;
    T_6_t_d0 <= ap_const_lv32_0;
    T_6_t_q0 <= ap_const_lv32_0;
    T_6_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    T_6_t_we0 <= ap_const_logic_0;
    T_7_address0 <= ap_const_lv3_0;
    T_7_address1 <= ap_const_lv3_0;
    T_7_ce0 <= ap_const_logic_0;
    T_7_ce1 <= ap_const_logic_0;
    T_7_i_address0 <= Accelerator_MAT_Multiply_U0_A_7_address0;
    T_7_i_address1 <= Accelerator_MAT_Multiply_U0_A_7_address1;
    T_7_i_ce0 <= Accelerator_MAT_Multiply_U0_A_7_ce0;
    T_7_i_ce1 <= Accelerator_MAT_Multiply_U0_A_7_ce1;
    T_7_i_d0 <= ap_const_lv32_0;
    T_7_i_d1 <= ap_const_lv32_0;
    T_7_i_q0 <= ap_const_lv32_0;
    T_7_i_q1 <= ap_const_lv32_0;
    T_7_i_we0 <= ap_const_logic_0;
    T_7_i_we1 <= ap_const_logic_0;
    T_7_i_write <= Accelerator_MAT_Multiply_U0_ap_done;
    T_7_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_address0;
    T_7_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_B_7_ce0;
    T_7_t_d0 <= ap_const_lv32_0;
    T_7_t_q0 <= ap_const_lv32_0;
    T_7_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    T_7_t_we0 <= ap_const_logic_0;
    Tinv_0_address0 <= ap_const_lv3_0;
    Tinv_0_address1 <= ap_const_lv3_0;
    Tinv_0_ce0 <= ap_const_logic_0;
    Tinv_0_ce1 <= ap_const_logic_0;
    Tinv_0_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_address0;
    Tinv_0_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_ce0;
    Tinv_0_i_d0 <= ap_const_lv32_0;
    Tinv_0_i_q0 <= ap_const_lv32_0;
    Tinv_0_i_we0 <= ap_const_logic_0;
    Tinv_0_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Tinv_0_t_address0 <= Accelerator_MAT_Multiply_U1_1_A_0_address0;
    Tinv_0_t_address1 <= Accelerator_MAT_Multiply_U1_1_A_0_address1;
    Tinv_0_t_ce0 <= Accelerator_MAT_Multiply_U1_1_A_0_ce0;
    Tinv_0_t_ce1 <= Accelerator_MAT_Multiply_U1_1_A_0_ce1;
    Tinv_0_t_d0 <= ap_const_lv32_0;
    Tinv_0_t_d1 <= ap_const_lv32_0;
    Tinv_0_t_q0 <= ap_const_lv32_0;
    Tinv_0_t_q1 <= ap_const_lv32_0;
    Tinv_0_t_read <= Accelerator_MAT_Multiply_U1_1_ap_ready;
    Tinv_0_t_we0 <= ap_const_logic_0;
    Tinv_0_t_we1 <= ap_const_logic_0;
    Tinv_1_address0 <= ap_const_lv3_0;
    Tinv_1_address1 <= ap_const_lv3_0;
    Tinv_1_ce0 <= ap_const_logic_0;
    Tinv_1_ce1 <= ap_const_logic_0;
    Tinv_1_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_address0;
    Tinv_1_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_ce0;
    Tinv_1_i_d0 <= ap_const_lv32_0;
    Tinv_1_i_q0 <= ap_const_lv32_0;
    Tinv_1_i_we0 <= ap_const_logic_0;
    Tinv_1_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Tinv_1_t_address0 <= Accelerator_MAT_Multiply_U1_1_A_1_address0;
    Tinv_1_t_address1 <= Accelerator_MAT_Multiply_U1_1_A_1_address1;
    Tinv_1_t_ce0 <= Accelerator_MAT_Multiply_U1_1_A_1_ce0;
    Tinv_1_t_ce1 <= Accelerator_MAT_Multiply_U1_1_A_1_ce1;
    Tinv_1_t_d0 <= ap_const_lv32_0;
    Tinv_1_t_d1 <= ap_const_lv32_0;
    Tinv_1_t_q0 <= ap_const_lv32_0;
    Tinv_1_t_q1 <= ap_const_lv32_0;
    Tinv_1_t_read <= Accelerator_MAT_Multiply_U1_1_ap_ready;
    Tinv_1_t_we0 <= ap_const_logic_0;
    Tinv_1_t_we1 <= ap_const_logic_0;
    Tinv_2_address0 <= ap_const_lv3_0;
    Tinv_2_address1 <= ap_const_lv3_0;
    Tinv_2_ce0 <= ap_const_logic_0;
    Tinv_2_ce1 <= ap_const_logic_0;
    Tinv_2_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_address0;
    Tinv_2_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_ce0;
    Tinv_2_i_d0 <= ap_const_lv32_0;
    Tinv_2_i_q0 <= ap_const_lv32_0;
    Tinv_2_i_we0 <= ap_const_logic_0;
    Tinv_2_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Tinv_2_t_address0 <= Accelerator_MAT_Multiply_U1_1_A_2_address0;
    Tinv_2_t_address1 <= Accelerator_MAT_Multiply_U1_1_A_2_address1;
    Tinv_2_t_ce0 <= Accelerator_MAT_Multiply_U1_1_A_2_ce0;
    Tinv_2_t_ce1 <= Accelerator_MAT_Multiply_U1_1_A_2_ce1;
    Tinv_2_t_d0 <= ap_const_lv32_0;
    Tinv_2_t_d1 <= ap_const_lv32_0;
    Tinv_2_t_q0 <= ap_const_lv32_0;
    Tinv_2_t_q1 <= ap_const_lv32_0;
    Tinv_2_t_read <= Accelerator_MAT_Multiply_U1_1_ap_ready;
    Tinv_2_t_we0 <= ap_const_logic_0;
    Tinv_2_t_we1 <= ap_const_logic_0;
    Tinv_3_address0 <= ap_const_lv3_0;
    Tinv_3_address1 <= ap_const_lv3_0;
    Tinv_3_ce0 <= ap_const_logic_0;
    Tinv_3_ce1 <= ap_const_logic_0;
    Tinv_3_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_address0;
    Tinv_3_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_ce0;
    Tinv_3_i_d0 <= ap_const_lv32_0;
    Tinv_3_i_q0 <= ap_const_lv32_0;
    Tinv_3_i_we0 <= ap_const_logic_0;
    Tinv_3_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Tinv_3_t_address0 <= Accelerator_MAT_Multiply_U1_1_A_3_address0;
    Tinv_3_t_address1 <= Accelerator_MAT_Multiply_U1_1_A_3_address1;
    Tinv_3_t_ce0 <= Accelerator_MAT_Multiply_U1_1_A_3_ce0;
    Tinv_3_t_ce1 <= Accelerator_MAT_Multiply_U1_1_A_3_ce1;
    Tinv_3_t_d0 <= ap_const_lv32_0;
    Tinv_3_t_d1 <= ap_const_lv32_0;
    Tinv_3_t_q0 <= ap_const_lv32_0;
    Tinv_3_t_q1 <= ap_const_lv32_0;
    Tinv_3_t_read <= Accelerator_MAT_Multiply_U1_1_ap_ready;
    Tinv_3_t_we0 <= ap_const_logic_0;
    Tinv_3_t_we1 <= ap_const_logic_0;
    Tinv_4_address0 <= ap_const_lv3_0;
    Tinv_4_address1 <= ap_const_lv3_0;
    Tinv_4_ce0 <= ap_const_logic_0;
    Tinv_4_ce1 <= ap_const_logic_0;
    Tinv_4_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_address0;
    Tinv_4_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_ce0;
    Tinv_4_i_d0 <= ap_const_lv32_0;
    Tinv_4_i_q0 <= ap_const_lv32_0;
    Tinv_4_i_we0 <= ap_const_logic_0;
    Tinv_4_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Tinv_4_t_address0 <= Accelerator_MAT_Multiply_U1_1_A_4_address0;
    Tinv_4_t_address1 <= Accelerator_MAT_Multiply_U1_1_A_4_address1;
    Tinv_4_t_ce0 <= Accelerator_MAT_Multiply_U1_1_A_4_ce0;
    Tinv_4_t_ce1 <= Accelerator_MAT_Multiply_U1_1_A_4_ce1;
    Tinv_4_t_d0 <= ap_const_lv32_0;
    Tinv_4_t_d1 <= ap_const_lv32_0;
    Tinv_4_t_q0 <= ap_const_lv32_0;
    Tinv_4_t_q1 <= ap_const_lv32_0;
    Tinv_4_t_read <= Accelerator_MAT_Multiply_U1_1_ap_ready;
    Tinv_4_t_we0 <= ap_const_logic_0;
    Tinv_4_t_we1 <= ap_const_logic_0;
    Tinv_5_address0 <= ap_const_lv3_0;
    Tinv_5_address1 <= ap_const_lv3_0;
    Tinv_5_ce0 <= ap_const_logic_0;
    Tinv_5_ce1 <= ap_const_logic_0;
    Tinv_5_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_address0;
    Tinv_5_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_ce0;
    Tinv_5_i_d0 <= ap_const_lv32_0;
    Tinv_5_i_q0 <= ap_const_lv32_0;
    Tinv_5_i_we0 <= ap_const_logic_0;
    Tinv_5_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Tinv_5_t_address0 <= Accelerator_MAT_Multiply_U1_1_A_5_address0;
    Tinv_5_t_address1 <= Accelerator_MAT_Multiply_U1_1_A_5_address1;
    Tinv_5_t_ce0 <= Accelerator_MAT_Multiply_U1_1_A_5_ce0;
    Tinv_5_t_ce1 <= Accelerator_MAT_Multiply_U1_1_A_5_ce1;
    Tinv_5_t_d0 <= ap_const_lv32_0;
    Tinv_5_t_d1 <= ap_const_lv32_0;
    Tinv_5_t_q0 <= ap_const_lv32_0;
    Tinv_5_t_q1 <= ap_const_lv32_0;
    Tinv_5_t_read <= Accelerator_MAT_Multiply_U1_1_ap_ready;
    Tinv_5_t_we0 <= ap_const_logic_0;
    Tinv_5_t_we1 <= ap_const_logic_0;
    Tinv_6_address0 <= ap_const_lv3_0;
    Tinv_6_address1 <= ap_const_lv3_0;
    Tinv_6_ce0 <= ap_const_logic_0;
    Tinv_6_ce1 <= ap_const_logic_0;
    Tinv_6_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_address0;
    Tinv_6_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_ce0;
    Tinv_6_i_d0 <= ap_const_lv32_0;
    Tinv_6_i_q0 <= ap_const_lv32_0;
    Tinv_6_i_we0 <= ap_const_logic_0;
    Tinv_6_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Tinv_6_t_address0 <= Accelerator_MAT_Multiply_U1_1_A_6_address0;
    Tinv_6_t_address1 <= Accelerator_MAT_Multiply_U1_1_A_6_address1;
    Tinv_6_t_ce0 <= Accelerator_MAT_Multiply_U1_1_A_6_ce0;
    Tinv_6_t_ce1 <= Accelerator_MAT_Multiply_U1_1_A_6_ce1;
    Tinv_6_t_d0 <= ap_const_lv32_0;
    Tinv_6_t_d1 <= ap_const_lv32_0;
    Tinv_6_t_q0 <= ap_const_lv32_0;
    Tinv_6_t_q1 <= ap_const_lv32_0;
    Tinv_6_t_read <= Accelerator_MAT_Multiply_U1_1_ap_ready;
    Tinv_6_t_we0 <= ap_const_logic_0;
    Tinv_6_t_we1 <= ap_const_logic_0;
    Tinv_7_address0 <= ap_const_lv3_0;
    Tinv_7_address1 <= ap_const_lv3_0;
    Tinv_7_ce0 <= ap_const_logic_0;
    Tinv_7_ce1 <= ap_const_logic_0;
    Tinv_7_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_address0;
    Tinv_7_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_ce0;
    Tinv_7_i_d0 <= ap_const_lv32_0;
    Tinv_7_i_q0 <= ap_const_lv32_0;
    Tinv_7_i_we0 <= ap_const_logic_0;
    Tinv_7_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Tinv_7_t_address0 <= Accelerator_MAT_Multiply_U1_1_A_7_address0;
    Tinv_7_t_address1 <= Accelerator_MAT_Multiply_U1_1_A_7_address1;
    Tinv_7_t_ce0 <= Accelerator_MAT_Multiply_U1_1_A_7_ce0;
    Tinv_7_t_ce1 <= Accelerator_MAT_Multiply_U1_1_A_7_ce1;
    Tinv_7_t_d0 <= ap_const_lv32_0;
    Tinv_7_t_d1 <= ap_const_lv32_0;
    Tinv_7_t_q0 <= ap_const_lv32_0;
    Tinv_7_t_q1 <= ap_const_lv32_0;
    Tinv_7_t_read <= Accelerator_MAT_Multiply_U1_1_ap_ready;
    Tinv_7_t_we0 <= ap_const_logic_0;
    Tinv_7_t_we1 <= ap_const_logic_0;
    X_read <= Accelerator_MAT_Multiply_U1_1_B_read;
    Y_address0 <= ap_const_lv6_0;
    Y_address1 <= ap_const_lv6_0;
    Y_ce0 <= ap_const_logic_0;
    Y_ce1 <= ap_const_logic_0;
    Y_d0 <= ap_const_lv32_0;
    Y_d1 <= ap_const_lv32_0;
    Y_i_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_address0;
    Y_i_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_ce0;
    Y_i_d0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_d0;
    Y_i_we0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_we0;
    Y_i_write <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
    Y_t_address0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_address0;
    Y_t_ce0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_ce0;
    Y_t_d0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_d0;
    Y_t_read <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_ready;
    Y_t_we0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_C_we0;
    Y_we0 <= ap_const_logic_0;
    Y_we1 <= ap_const_logic_0;

    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_0 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_1 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_2 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_3 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_4 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_5 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_6 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Tinv_7 <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y assign process. --
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_Y <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_done;
        end if; 
    end process;

    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_i1 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    ap_chn_write_Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_cached_row_i <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_done;

    -- ap_chn_write_Accelerator_MAT_Multiply_U0_T_0 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply_U0_T_0_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_0 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_0 <= Accelerator_MAT_Multiply_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply_U0_T_1 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply_U0_T_1_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_1 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_1 <= Accelerator_MAT_Multiply_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply_U0_T_2 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply_U0_T_2_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_2 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_2 <= Accelerator_MAT_Multiply_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply_U0_T_3 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply_U0_T_3_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_3 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_3 <= Accelerator_MAT_Multiply_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply_U0_T_4 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply_U0_T_4_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_4 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_4 <= Accelerator_MAT_Multiply_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply_U0_T_5 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply_U0_T_5_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_5 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_5 <= Accelerator_MAT_Multiply_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply_U0_T_6 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply_U0_T_6_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_6 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_6 <= Accelerator_MAT_Multiply_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_Accelerator_MAT_Multiply_U0_T_7 assign process. --
    ap_chn_write_Accelerator_MAT_Multiply_U0_T_7_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_done, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status)) then 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_7 <= ap_const_logic_0;
        else 
            ap_chn_write_Accelerator_MAT_Multiply_U0_T_7 <= Accelerator_MAT_Multiply_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_idle, Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_idle, Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_idle, Accelerator_MAT_Multiply_U1_1_ap_idle, Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_idle, Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_idle, T_0_t_empty_n, T_1_t_empty_n, T_2_t_empty_n, T_3_t_empty_n, T_4_t_empty_n, T_5_t_empty_n, T_6_t_empty_n, T_7_t_empty_n, A_cached_row_i1_t_empty_n, Tinv_0_t_empty_n, Tinv_1_t_empty_n, Tinv_2_t_empty_n, Tinv_3_t_empty_n, Tinv_4_t_empty_n, Tinv_5_t_empty_n, Tinv_6_t_empty_n, Tinv_7_t_empty_n, Y_t_empty_n, A_cached_row_i_t_empty_n)
    begin
        if (((Accelerator_MAT_Multiply_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Row_proc_U0_ap_idle) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U0_ap_idle) and (ap_const_logic_1 = Accelerator_MAT_Multiply_U1_1_ap_idle) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_ap_idle) and (ap_const_logic_1 = Accelerator_MAT_Multiply2_Loop_Col_proc_U1_1_ap_idle) and (ap_const_logic_0 = T_0_t_empty_n) and (ap_const_logic_0 = T_1_t_empty_n) and (ap_const_logic_0 = T_2_t_empty_n) and (ap_const_logic_0 = T_3_t_empty_n) and (ap_const_logic_0 = T_4_t_empty_n) and (ap_const_logic_0 = T_5_t_empty_n) and (ap_const_logic_0 = T_6_t_empty_n) and (ap_const_logic_0 = T_7_t_empty_n) and (ap_const_logic_0 = A_cached_row_i1_t_empty_n) and (ap_const_logic_0 = Tinv_0_t_empty_n) and (ap_const_logic_0 = Tinv_1_t_empty_n) and (ap_const_logic_0 = Tinv_2_t_empty_n) and (ap_const_logic_0 = Tinv_3_t_empty_n) and (ap_const_logic_0 = Tinv_4_t_empty_n) and (ap_const_logic_0 = Tinv_5_t_empty_n) and (ap_const_logic_0 = Tinv_6_t_empty_n) and (ap_const_logic_0 = Tinv_7_t_empty_n) and (ap_const_logic_0 = Y_t_empty_n) and (ap_const_logic_0 = A_cached_row_i_t_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_sig_hs_done;
    ap_sig_hs_done <= ap_const_logic_1;

    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_0_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_1_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_2_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_3_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_4_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_5_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_6_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_B_7_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status_assign_proc : process(Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply2_Loop_Col_proc_U0_C_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status_assign_proc : process(Accelerator_MAT_Multiply_U0_A_0_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status <= Accelerator_MAT_Multiply_U0_A_0_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_0_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status_assign_proc : process(Accelerator_MAT_Multiply_U0_A_1_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status <= Accelerator_MAT_Multiply_U0_A_1_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_1_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status_assign_proc : process(Accelerator_MAT_Multiply_U0_A_2_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status <= Accelerator_MAT_Multiply_U0_A_2_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_2_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status_assign_proc : process(Accelerator_MAT_Multiply_U0_A_3_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status <= Accelerator_MAT_Multiply_U0_A_3_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_3_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status_assign_proc : process(Accelerator_MAT_Multiply_U0_A_4_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status <= Accelerator_MAT_Multiply_U0_A_4_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_4_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status_assign_proc : process(Accelerator_MAT_Multiply_U0_A_5_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status <= Accelerator_MAT_Multiply_U0_A_5_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_5_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status_assign_proc : process(Accelerator_MAT_Multiply_U0_A_6_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status <= Accelerator_MAT_Multiply_U0_A_6_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_6_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status_assign_proc : process(Accelerator_MAT_Multiply_U0_A_7_pipo_status, ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status <= Accelerator_MAT_Multiply_U0_A_7_pipo_status;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_A_7_pipo_status <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready_assign_proc : process(Accelerator_MAT_Multiply_U0_ap_ready, ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready <= Accelerator_MAT_Multiply_U0_ap_ready;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready assign process. --
    ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready_assign_proc : process(Accelerator_MAT_Multiply_U1_1_ap_ready, ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready)) then 
            ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready <= Accelerator_MAT_Multiply_U1_1_ap_ready;
        else 
            ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start assign process. --
    ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_Accelerator_MAT_Multiply_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start assign process. --
    ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start_assign_proc : process(ap_start, ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_Accelerator_MAT_Multiply_U1_1_ap_ready))) then 
            ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_Accelerator_MAT_Multiply_U1_1_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready, ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_Accelerator_MAT_Multiply_U1_1_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

    temp_address0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_address0;
    temp_ce0 <= Accelerator_MAT_Multiply2_Loop_Row_proc_U1_1_A_ce0;
    temp_d0 <= Accelerator_MAT_Multiply_U1_1_C_d0;
    temp_we0 <= Accelerator_MAT_Multiply_U1_1_C_we0;
end behav;
