-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_DOT_Divide_Loop_row_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC );
end;


architecture behav of Accelerator_DOT_Divide_Loop_row_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_pp0_stg4_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_pp0_stg5_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_pp0_stg6_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_pp0_stg7_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st28_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_41800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001100000000000000000000000";
    constant ap_const_lv32_41400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001010000000000000000000000";
    constant ap_const_lv32_41600000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001011000000000000000000000";
    constant ap_const_lv32_41900000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001100100000000000000000000";
    constant ap_const_lv32_41C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110000000000000000000000";
    constant ap_const_lv32_42440000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010010001000000000000000000";
    constant ap_const_lv32_42900000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100100000000000000000000";
    constant ap_const_lv32_41300000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001001100000000000000000000";
    constant ap_const_lv32_41500000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001010100000000000000000000";
    constant ap_const_lv32_41880000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001100010000000000000000000";
    constant ap_const_lv32_41B00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001101100000000000000000000";
    constant ap_const_lv32_420C0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010000011000000000000000000";
    constant ap_const_lv32_42800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100000000000000000000000";
    constant ap_const_lv32_42B80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010101110000000000000000000";
    constant ap_const_lv32_41200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001001000000000000000000000";
    constant ap_const_lv32_42140000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010000101000000000000000000";
    constant ap_const_lv32_425C0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010010111000000000000000000";
    constant ap_const_lv32_429C0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100111000000000000000000";
    constant ap_const_lv32_42BE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010101111100000000000000000";
    constant ap_const_lv32_41980000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001100110000000000000000000";
    constant ap_const_lv32_41E80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001111010000000000000000000";
    constant ap_const_lv32_42600000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011000000000000000000000";
    constant ap_const_lv32_42AE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010101011100000000000000000";
    constant ap_const_lv32_42C40000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110001000000000000000000";
    constant ap_const_lv32_41D00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110100000000000000000000";
    constant ap_const_lv32_42200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010001000000000000000000000";
    constant ap_const_lv32_424C0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010010011000000000000000000";
    constant ap_const_lv32_42880000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100010000000000000000000";
    constant ap_const_lv32_42A20000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010101000100000000000000000";
    constant ap_const_lv32_42CE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110011100000000000000000";
    constant ap_const_lv32_42E00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111000000000000000000000";
    constant ap_const_lv32_42680000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011010000000000000000000";
    constant ap_const_lv32_42640000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011001000000000000000000";
    constant ap_const_lv32_42DA0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110110100000000000000000";
    constant ap_const_lv32_42D00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110100000000000000000000";
    constant ap_const_lv32_42F20000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111100100000000000000000";
    constant ap_const_lv32_42C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110010000000000000000000";
    constant ap_const_lv32_42700000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011100000000000000000000";
    constant ap_const_lv32_428A0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100010100000000000000000";
    constant ap_const_lv32_42A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010101000000000000000000000";
    constant ap_const_lv32_42E20000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111000100000000000000000";
    constant ap_const_lv32_42F00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111100000000000000000000";
    constant ap_const_lv32_42740000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011101000000000000000000";
    constant ap_const_lv32_42780000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011110000000000000000000";
    constant ap_const_lv32_429A0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100110100000000000000000";
    constant ap_const_lv32_42CA0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110010100000000000000000";
    constant ap_const_lv32_42C60000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110001100000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_29 : BOOLEAN;
    signal i_0_i_i_reg_149 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_53 : BOOLEAN;
    signal exitcond1_i_i_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_60 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_72 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_87 : BOOLEAN;
    signal ap_sig_bdd_90 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg4_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg5_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg6_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg7_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_152 : BOOLEAN;
    signal exitcond1_i_i_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_176_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_366 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_182_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_reg_371 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_371_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_read_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_read_1_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_read_2_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_read_3_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_read_4_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_read_5_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_read_6_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_read_7_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_244 : BOOLEAN;
    signal i_0_i_i_phi_fu_153_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_186_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_208_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_230_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_252_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_274_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_318_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_340_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_161_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st28_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_478 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component Accelerator_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Accelerator_mux_8to1_sel3_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Accelerator_fdiv_32ns_32ns_32_16_U69 : component Accelerator_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_161_p0,
        din1 => grp_fu_161_p1,
        ce => grp_fu_161_ce,
        dout => grp_fu_161_p2);

    Accelerator_mux_8to1_sel3_32_1_U70 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_s_fu_186_p1,
        din2 => tmp_s_fu_186_p2,
        din3 => tmp_s_fu_186_p3,
        din4 => tmp_s_fu_186_p4,
        din5 => tmp_s_fu_186_p5,
        din6 => tmp_s_fu_186_p6,
        din7 => tmp_s_fu_186_p7,
        din8 => tmp_s_fu_186_p8,
        din9 => tmp_s_fu_186_p9,
        dout => tmp_s_fu_186_p10);

    Accelerator_mux_8to1_sel3_32_1_U71 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_11_fu_208_p1,
        din2 => tmp_11_fu_208_p2,
        din3 => tmp_11_fu_208_p3,
        din4 => tmp_11_fu_208_p4,
        din5 => tmp_11_fu_208_p5,
        din6 => tmp_11_fu_208_p6,
        din7 => tmp_11_fu_208_p7,
        din8 => tmp_11_fu_208_p8,
        din9 => tmp_11_fu_208_p9,
        dout => tmp_11_fu_208_p10);

    Accelerator_mux_8to1_sel3_32_1_U72 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_12_fu_230_p1,
        din2 => tmp_12_fu_230_p2,
        din3 => tmp_12_fu_230_p3,
        din4 => tmp_12_fu_230_p4,
        din5 => tmp_12_fu_230_p5,
        din6 => tmp_12_fu_230_p6,
        din7 => tmp_12_fu_230_p7,
        din8 => tmp_12_fu_230_p8,
        din9 => tmp_12_fu_230_p9,
        dout => tmp_12_fu_230_p10);

    Accelerator_mux_8to1_sel3_32_1_U73 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_13_fu_252_p1,
        din2 => tmp_13_fu_252_p2,
        din3 => tmp_13_fu_252_p3,
        din4 => tmp_13_fu_252_p4,
        din5 => tmp_13_fu_252_p5,
        din6 => tmp_13_fu_252_p6,
        din7 => tmp_13_fu_252_p7,
        din8 => tmp_13_fu_252_p8,
        din9 => tmp_13_fu_252_p9,
        dout => tmp_13_fu_252_p10);

    Accelerator_mux_8to1_sel3_32_1_U74 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_14_fu_274_p1,
        din2 => tmp_14_fu_274_p2,
        din3 => tmp_14_fu_274_p3,
        din4 => tmp_14_fu_274_p4,
        din5 => tmp_14_fu_274_p5,
        din6 => tmp_14_fu_274_p6,
        din7 => tmp_14_fu_274_p7,
        din8 => tmp_14_fu_274_p8,
        din9 => tmp_14_fu_274_p9,
        dout => tmp_14_fu_274_p10);

    Accelerator_mux_8to1_sel3_32_1_U75 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_15_fu_296_p1,
        din2 => tmp_15_fu_296_p2,
        din3 => tmp_15_fu_296_p3,
        din4 => tmp_15_fu_296_p4,
        din5 => tmp_15_fu_296_p5,
        din6 => tmp_15_fu_296_p6,
        din7 => tmp_15_fu_296_p7,
        din8 => tmp_15_fu_296_p8,
        din9 => tmp_15_fu_296_p9,
        dout => tmp_15_fu_296_p10);

    Accelerator_mux_8to1_sel3_32_1_U76 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_16_fu_318_p1,
        din2 => tmp_16_fu_318_p2,
        din3 => tmp_16_fu_318_p3,
        din4 => tmp_16_fu_318_p4,
        din5 => tmp_16_fu_318_p5,
        din6 => tmp_16_fu_318_p6,
        din7 => tmp_16_fu_318_p7,
        din8 => tmp_16_fu_318_p8,
        din9 => tmp_16_fu_318_p9,
        dout => tmp_16_fu_318_p10);

    Accelerator_mux_8to1_sel3_32_1_U77 : component Accelerator_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_17_fu_340_p1,
        din2 => tmp_17_fu_340_p2,
        din3 => tmp_17_fu_340_p3,
        din4 => tmp_17_fu_340_p4,
        din5 => tmp_17_fu_340_p5,
        din6 => tmp_17_fu_340_p6,
        din7 => tmp_17_fu_340_p7,
        din8 => tmp_17_fu_340_p8,
        din9 => tmp_17_fu_340_p9,
        dout => tmp_17_fu_340_p10);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_9)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))) and not((ap_const_lv1_0 = exitcond1_i_i_fu_170_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_244))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_244)) or (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and not((exitcond1_i_i_reg_362 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_244))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_0_i_i_reg_149 assign process. --
    i_0_i_i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))))) then 
                i_0_i_i_reg_149 <= i_reg_366;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_244))) then 
                i_0_i_i_reg_149 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))))) then
                A_read_1_reg_393 <= A_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then
                A_read_2_reg_403 <= A_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then
                A_read_3_reg_413 <= A_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6))) then
                A_read_4_reg_423 <= A_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7))) then
                A_read_5_reg_433 <= A_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8))) then
                A_read_6_reg_443 <= A_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))))) then
                A_read_7_reg_453 <= A_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_i_i_reg_362 = ap_const_lv1_0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                A_read_reg_383 <= A_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))))) then
                ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it1 <= exitcond1_i_i_reg_362;
                ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2 <= ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it1;
                ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it3 <= ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2;
                ap_reg_ppstg_tmp_18_reg_371_pp0_it1 <= tmp_18_reg_371;
                exitcond1_i_i_reg_362 <= exitcond1_i_i_fu_170_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))))) then
                i_reg_366 <= i_fu_176_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90)))))) then
                reg_165 <= grp_fu_161_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))) and (ap_const_lv1_0 = exitcond1_i_i_fu_170_p2))) then
                tmp_18_reg_371 <= tmp_18_fu_182_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_60, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_90, exitcond1_i_i_fu_170_p2, ap_sig_bdd_244)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_244)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))) and not((ap_const_lv1_0 = exitcond1_i_i_fu_170_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90))) and not((ap_const_lv1_0 = exitcond1_i_i_fu_170_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st28_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if ((not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then
                    ap_NS_fsm <= ap_ST_st28_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                if (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                end if;
            when ap_ST_pp0_stg3_fsm_4 => 
                if (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
                end if;
            when ap_ST_pp0_stg4_fsm_5 => 
                if (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
                end if;
            when ap_ST_pp0_stg5_fsm_6 => 
                if (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_6;
                end if;
            when ap_ST_pp0_stg6_fsm_7 => 
                if (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg7_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_7;
                end if;
            when ap_ST_pp0_stg7_fsm_8 => 
                if (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg7_fsm_8;
                end if;
            when ap_ST_st28_fsm_9 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    -- A_read assign process. --
    A_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, exitcond1_i_i_reg_362, ap_sig_bdd_60, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_bdd_90, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) or ((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) or ((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8)))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= reg_165;

    -- C_write assign process. --
    C_write_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_60, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it3, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_bdd_90, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st28_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st28_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_152 assign process. --
    ap_sig_bdd_152_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_152 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_244 assign process. --
    ap_sig_bdd_244_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_244 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_29 assign process. --
    ap_sig_bdd_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_478 assign process. --
    ap_sig_bdd_478_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_478 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_53 assign process. --
    ap_sig_bdd_53_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_53 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_60 assign process. --
    ap_sig_bdd_60_assign_proc : process(A_empty_n, exitcond1_i_i_reg_362)
    begin
                ap_sig_bdd_60 <= ((A_empty_n = ap_const_logic_0) and (exitcond1_i_i_reg_362 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(C_full_n, ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it3)
    begin
                ap_sig_bdd_72 <= ((C_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it3));
    end process;


    -- ap_sig_bdd_87 assign process. --
    ap_sig_bdd_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_87 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(C_full_n, ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2)
    begin
                ap_sig_bdd_90 <= ((C_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_i_reg_362_pp0_it2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_152)
    begin
        if (ap_sig_bdd_152) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_53)
    begin
        if (ap_sig_bdd_53) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_87)
    begin
        if (ap_sig_bdd_87) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_5_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_6_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_7_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg7_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg7_fsm_8_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_29)
    begin
        if (ap_sig_bdd_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_9 assign process. --
    ap_sig_cseq_ST_st28_fsm_9_assign_proc : process(ap_sig_bdd_478)
    begin
        if (ap_sig_bdd_478) then 
            ap_sig_cseq_ST_st28_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_i_fu_170_p2 <= "1" when (i_0_i_i_phi_fu_153_p4 = ap_const_lv4_8) else "0";

    -- grp_fu_161_ce assign process. --
    grp_fu_161_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_60, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_bdd_90, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90)))) or (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or (not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and ap_sig_bdd_90))) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_60 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_bdd_90)))))) then 
            grp_fu_161_ce <= ap_const_logic_1;
        else 
            grp_fu_161_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_161_p0 assign process. --
    grp_fu_161_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg0_fsm_1, A_read_reg_383, A_read_1_reg_393, A_read_2_reg_403, A_read_3_reg_413, A_read_4_reg_423, A_read_5_reg_433, A_read_6_reg_443, A_read_7_reg_453)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_161_p0 <= A_read_7_reg_453;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            grp_fu_161_p0 <= A_read_6_reg_443;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8))) then 
            grp_fu_161_p0 <= A_read_5_reg_433;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7))) then 
            grp_fu_161_p0 <= A_read_4_reg_423;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6))) then 
            grp_fu_161_p0 <= A_read_3_reg_413;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            grp_fu_161_p0 <= A_read_2_reg_403;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_161_p0 <= A_read_1_reg_393;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_161_p0 <= A_read_reg_383;
        else 
            grp_fu_161_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_161_p1 assign process. --
    grp_fu_161_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_s_fu_186_p10, tmp_11_fu_208_p10, tmp_12_fu_230_p10, tmp_13_fu_252_p10, tmp_14_fu_274_p10, tmp_15_fu_296_p10, tmp_16_fu_318_p10, tmp_17_fu_340_p10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_161_p1 <= tmp_17_fu_340_p10;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            grp_fu_161_p1 <= tmp_16_fu_318_p10;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8))) then 
            grp_fu_161_p1 <= tmp_15_fu_296_p10;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7))) then 
            grp_fu_161_p1 <= tmp_14_fu_274_p10;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6))) then 
            grp_fu_161_p1 <= tmp_13_fu_252_p10;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            grp_fu_161_p1 <= tmp_12_fu_230_p10;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            grp_fu_161_p1 <= tmp_11_fu_208_p10;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            grp_fu_161_p1 <= tmp_s_fu_186_p10;
        else 
            grp_fu_161_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- i_0_i_i_phi_fu_153_p4 assign process. --
    i_0_i_i_phi_fu_153_p4_assign_proc : process(i_0_i_i_reg_149, exitcond1_i_i_reg_362, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_1, i_reg_366)
    begin
        if (((exitcond1_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            i_0_i_i_phi_fu_153_p4 <= i_reg_366;
        else 
            i_0_i_i_phi_fu_153_p4 <= i_0_i_i_reg_149;
        end if; 
    end process;

    i_fu_176_p2 <= std_logic_vector(unsigned(i_0_i_i_phi_fu_153_p4) + unsigned(ap_const_lv4_1));
    tmp_11_fu_208_p1 <= ap_const_lv32_41300000;
    tmp_11_fu_208_p2 <= ap_const_lv32_41400000;
    tmp_11_fu_208_p3 <= ap_const_lv32_41500000;
    tmp_11_fu_208_p4 <= ap_const_lv32_41880000;
    tmp_11_fu_208_p5 <= ap_const_lv32_41B00000;
    tmp_11_fu_208_p6 <= ap_const_lv32_420C0000;
    tmp_11_fu_208_p7 <= ap_const_lv32_42800000;
    tmp_11_fu_208_p8 <= ap_const_lv32_42B80000;
    tmp_11_fu_208_p9 <= tmp_18_reg_371;
    tmp_12_fu_230_p1 <= ap_const_lv32_41200000;
    tmp_12_fu_230_p2 <= ap_const_lv32_41600000;
    tmp_12_fu_230_p3 <= ap_const_lv32_41800000;
    tmp_12_fu_230_p4 <= ap_const_lv32_41B00000;
    tmp_12_fu_230_p5 <= ap_const_lv32_42140000;
    tmp_12_fu_230_p6 <= ap_const_lv32_425C0000;
    tmp_12_fu_230_p7 <= ap_const_lv32_429C0000;
    tmp_12_fu_230_p8 <= ap_const_lv32_42BE0000;
    tmp_12_fu_230_p9 <= tmp_18_reg_371;
    tmp_13_fu_252_p1 <= ap_const_lv32_41800000;
    tmp_13_fu_252_p2 <= ap_const_lv32_41980000;
    tmp_13_fu_252_p3 <= ap_const_lv32_41C00000;
    tmp_13_fu_252_p4 <= ap_const_lv32_41E80000;
    tmp_13_fu_252_p5 <= ap_const_lv32_42600000;
    tmp_13_fu_252_p6 <= ap_const_lv32_42800000;
    tmp_13_fu_252_p7 <= ap_const_lv32_42AE0000;
    tmp_13_fu_252_p8 <= ap_const_lv32_42C40000;
    tmp_13_fu_252_p9 <= tmp_18_reg_371;
    tmp_14_fu_274_p1 <= ap_const_lv32_41C00000;
    tmp_14_fu_274_p2 <= ap_const_lv32_41D00000;
    tmp_14_fu_274_p3 <= ap_const_lv32_42200000;
    tmp_14_fu_274_p4 <= ap_const_lv32_424C0000;
    tmp_14_fu_274_p5 <= ap_const_lv32_42880000;
    tmp_14_fu_274_p6 <= ap_const_lv32_42A20000;
    tmp_14_fu_274_p7 <= ap_const_lv32_42CE0000;
    tmp_14_fu_274_p8 <= ap_const_lv32_42E00000;
    tmp_14_fu_274_p9 <= tmp_18_reg_371;
    tmp_15_fu_296_p1 <= ap_const_lv32_42200000;
    tmp_15_fu_296_p2 <= ap_const_lv32_42680000;
    tmp_15_fu_296_p3 <= ap_const_lv32_42640000;
    tmp_15_fu_296_p4 <= ap_const_lv32_42AE0000;
    tmp_15_fu_296_p5 <= ap_const_lv32_42DA0000;
    tmp_15_fu_296_p6 <= ap_const_lv32_42D00000;
    tmp_15_fu_296_p7 <= ap_const_lv32_42F20000;
    tmp_15_fu_296_p8 <= ap_const_lv32_42C80000;
    tmp_15_fu_296_p9 <= tmp_18_reg_371;
    tmp_16_fu_318_p1 <= ap_const_lv32_424C0000;
    tmp_16_fu_318_p2 <= ap_const_lv32_42700000;
    tmp_16_fu_318_p3 <= ap_const_lv32_428A0000;
    tmp_16_fu_318_p4 <= ap_const_lv32_42A00000;
    tmp_16_fu_318_p5 <= ap_const_lv32_42CE0000;
    tmp_16_fu_318_p6 <= ap_const_lv32_42E20000;
    tmp_16_fu_318_p7 <= ap_const_lv32_42F00000;
    tmp_16_fu_318_p8 <= ap_const_lv32_42CE0000;
    tmp_16_fu_318_p9 <= tmp_18_reg_371;
    tmp_17_fu_340_p1 <= ap_const_lv32_42740000;
    tmp_17_fu_340_p2 <= ap_const_lv32_425C0000;
    tmp_17_fu_340_p3 <= ap_const_lv32_42600000;
    tmp_17_fu_340_p4 <= ap_const_lv32_42780000;
    tmp_17_fu_340_p5 <= ap_const_lv32_429A0000;
    tmp_17_fu_340_p6 <= ap_const_lv32_42B80000;
    tmp_17_fu_340_p7 <= ap_const_lv32_42CA0000;
    tmp_17_fu_340_p8 <= ap_const_lv32_42C60000;
    tmp_17_fu_340_p9 <= ap_reg_ppstg_tmp_18_reg_371_pp0_it1;
    tmp_18_fu_182_p1 <= i_0_i_i_phi_fu_153_p4(3 - 1 downto 0);
    tmp_s_fu_186_p1 <= ap_const_lv32_41800000;
    tmp_s_fu_186_p2 <= ap_const_lv32_41400000;
    tmp_s_fu_186_p3 <= ap_const_lv32_41600000;
    tmp_s_fu_186_p4 <= ap_const_lv32_41600000;
    tmp_s_fu_186_p5 <= ap_const_lv32_41900000;
    tmp_s_fu_186_p6 <= ap_const_lv32_41C00000;
    tmp_s_fu_186_p7 <= ap_const_lv32_42440000;
    tmp_s_fu_186_p8 <= ap_const_lv32_42900000;
    tmp_s_fu_186_p9 <= tmp_18_reg_371;
end behav;
