-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_MAT_Multiply_Loop_LoadRow_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    B_cached_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_cached_ce0 : OUT STD_LOGIC;
    B_cached_we0 : OUT STD_LOGIC;
    B_cached_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Accelerator_MAT_Multiply_Loop_LoadRow_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_pp0_stg4_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_pp0_stg5_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_pp0_stg6_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_pp0_stg7_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st11_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_29 : BOOLEAN;
    signal i_0_i_i_reg_137 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_i_i_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_i_i_reg_299 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_56 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_64 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal i_fu_155_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_161_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_reg_308 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_81 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg7_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_91 : BOOLEAN;
    signal i_0_i_i_phi_fu_141_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal tmp_24_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_124 : BOOLEAN;
    signal tmp_25_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal tmp_27_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal tmp_29_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg5_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal tmp_31_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg6_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_168 : BOOLEAN;
    signal tmp_33_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_173_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_fu_178_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_191_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr9_fu_196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_209_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr1_fu_214_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr2_fu_232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_245_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr3_fu_250_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_263_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr4_fu_268_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_281_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr5_fu_286_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_312 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_9)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_i_fu_149_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_81))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond4_i_i_reg_299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_81)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and not((exitcond4_i_i_reg_299 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_0_i_i_reg_137 assign process. --
    i_0_i_i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                i_0_i_i_reg_137 <= i_reg_303;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_81))) then 
                i_0_i_i_reg_137 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond4_i_i_reg_299 <= exitcond4_i_i_fu_149_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                i_reg_303 <= i_fu_155_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond4_i_i_fu_149_p2 = ap_const_lv1_0))) then
                    tmp_21_reg_308(6 downto 3) <= tmp_21_fu_161_p3(6 downto 3);
            end if;
        end if;
    end process;
    tmp_21_reg_308(2 downto 0) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond4_i_i_fu_149_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_64, ap_reg_ppiten_pp0_it1, ap_sig_bdd_81)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_81)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_i_fu_149_p2 = ap_const_lv1_0)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_i_fu_149_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                end if;
            when ap_ST_pp0_stg3_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
                end if;
            when ap_ST_pp0_stg4_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
                end if;
            when ap_ST_pp0_stg5_fsm_6 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_6;
                end if;
            when ap_ST_pp0_stg6_fsm_7 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_pp0_stg7_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_7;
                end if;
            when ap_ST_pp0_stg7_fsm_8 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg7_fsm_8;
                end if;
            when ap_ST_st11_fsm_9 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    -- B_cached_address0 assign process. --
    B_cached_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg7_fsm_8, tmp_22_fu_169_p1, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_24_fu_186_p1, ap_sig_cseq_ST_pp0_stg2_fsm_3, tmp_25_fu_204_p1, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_27_fu_222_p1, ap_sig_cseq_ST_pp0_stg4_fsm_5, tmp_29_fu_240_p1, ap_sig_cseq_ST_pp0_stg5_fsm_6, tmp_31_fu_258_p1, ap_sig_cseq_ST_pp0_stg6_fsm_7, tmp_33_fu_276_p1, tmp_35_fu_294_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            B_cached_address0 <= tmp_35_fu_294_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8))) then 
            B_cached_address0 <= tmp_33_fu_276_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7))) then 
            B_cached_address0 <= tmp_31_fu_258_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6))) then 
            B_cached_address0 <= tmp_29_fu_240_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            B_cached_address0 <= tmp_27_fu_222_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            B_cached_address0 <= tmp_25_fu_204_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            B_cached_address0 <= tmp_24_fu_186_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            B_cached_address0 <= tmp_22_fu_169_p1(6 - 1 downto 0);
        else 
            B_cached_address0 <= "XXXXXX";
        end if; 
    end process;


    -- B_cached_ce0 assign process. --
    B_cached_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_64, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))))) then 
            B_cached_ce0 <= ap_const_logic_1;
        else 
            B_cached_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_cached_d0 <= B_dout;

    -- B_cached_we0 assign process. --
    B_cached_we0_assign_proc : process(exitcond4_i_i_reg_299, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_64, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))))) then 
            B_cached_we0 <= ap_const_logic_1;
        else 
            B_cached_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_read assign process. --
    B_read_assign_proc : process(exitcond4_i_i_reg_299, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_64, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_64))))) then 
            B_read <= ap_const_logic_1;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st11_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_124 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_146 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_168 assign process. --
    ap_sig_bdd_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_168 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_29 assign process. --
    ap_sig_bdd_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_312 assign process. --
    ap_sig_bdd_312_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_312 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_56 assign process. --
    ap_sig_bdd_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_56 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(B_empty_n, exitcond4_i_i_reg_299)
    begin
                ap_sig_bdd_64 <= ((B_empty_n = ap_const_logic_0) and (exitcond4_i_i_reg_299 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_81 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_91 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_56)
    begin
        if (ap_sig_bdd_56) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_124)
    begin
        if (ap_sig_bdd_124) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_5_assign_proc : process(ap_sig_bdd_146)
    begin
        if (ap_sig_bdd_146) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_6_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_7_assign_proc : process(ap_sig_bdd_168)
    begin
        if (ap_sig_bdd_168) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg7_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg7_fsm_8_assign_proc : process(ap_sig_bdd_91)
    begin
        if (ap_sig_bdd_91) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_9 assign process. --
    ap_sig_cseq_ST_st11_fsm_9_assign_proc : process(ap_sig_bdd_312)
    begin
        if (ap_sig_bdd_312) then 
            ap_sig_cseq_ST_st11_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_29)
    begin
        if (ap_sig_bdd_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_i_i_fu_149_p2 <= "1" when (i_0_i_i_phi_fu_141_p4 = ap_const_lv4_8) else "0";

    -- i_0_i_i_phi_fu_141_p4 assign process. --
    i_0_i_i_phi_fu_141_p4_assign_proc : process(i_0_i_i_reg_137, exitcond4_i_i_reg_299, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_reg_303)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            i_0_i_i_phi_fu_141_p4 <= i_reg_303;
        else 
            i_0_i_i_phi_fu_141_p4 <= i_0_i_i_reg_137;
        end if; 
    end process;

    i_fu_155_p2 <= std_logic_vector(unsigned(i_0_i_i_phi_fu_141_p4) + unsigned(ap_const_lv4_1));
    p_addr1_fu_214_p3 <= (ap_const_lv25_0 & tmp_26_fu_209_p2);
    p_addr2_fu_232_p3 <= (ap_const_lv25_0 & tmp_28_fu_227_p2);
    p_addr3_fu_250_p3 <= (ap_const_lv25_0 & tmp_30_fu_245_p2);
    p_addr4_fu_268_p3 <= (ap_const_lv25_0 & tmp_32_fu_263_p2);
    p_addr5_fu_286_p3 <= (ap_const_lv25_0 & tmp_34_fu_281_p2);
    p_addr9_fu_196_p3 <= (ap_const_lv25_0 & tmp_s_fu_191_p2);
    p_addr_fu_178_p3 <= (ap_const_lv25_0 & tmp_23_fu_173_p2);
    tmp_21_fu_161_p3 <= (i_0_i_i_phi_fu_141_p4 & ap_const_lv3_0);
    tmp_22_fu_169_p1 <= std_logic_vector(resize(unsigned(tmp_21_reg_308),64));
    tmp_23_fu_173_p2 <= (tmp_21_reg_308 or ap_const_lv7_1);
    tmp_24_fu_186_p1 <= std_logic_vector(resize(unsigned(p_addr_fu_178_p3),64));
    tmp_25_fu_204_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_196_p3),64));
    tmp_26_fu_209_p2 <= (tmp_21_reg_308 or ap_const_lv7_3);
    tmp_27_fu_222_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_214_p3),64));
    tmp_28_fu_227_p2 <= (tmp_21_reg_308 or ap_const_lv7_4);
    tmp_29_fu_240_p1 <= std_logic_vector(resize(unsigned(p_addr2_fu_232_p3),64));
    tmp_30_fu_245_p2 <= (tmp_21_reg_308 or ap_const_lv7_5);
    tmp_31_fu_258_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_250_p3),64));
    tmp_32_fu_263_p2 <= (tmp_21_reg_308 or ap_const_lv7_6);
    tmp_33_fu_276_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_268_p3),64));
    tmp_34_fu_281_p2 <= (tmp_21_reg_308 or ap_const_lv7_7);
    tmp_35_fu_294_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_286_p3),64));
    tmp_s_fu_191_p2 <= (tmp_21_reg_308 or ap_const_lv7_2);
end behav;
