-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Accelerator_Block_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    function_r : IN STD_LOGIC_VECTOR (7 downto 0);
    X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    X_empty_n : IN STD_LOGIC;
    X_read : OUT STD_LOGIC;
    Y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_full_n : IN STD_LOGIC;
    Y_write : OUT STD_LOGIC );
end;


architecture behav of Accelerator_Block_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal ap_sig_bdd_46 : BOOLEAN;
    signal cond_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_reg_132 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DCT_fu_67_X_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DCT_fu_67_X_empty_n : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_X_read : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_function_r : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Accelerator_DCT_fu_67_Y_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Accelerator_DCT_fu_67_Y_ce0 : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_Y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DCT_fu_67_Y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DCT_fu_67_Y_we0 : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_Y_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Accelerator_DCT_fu_67_Y_ce1 : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_Y_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DCT_fu_67_Y_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_DCT_fu_67_Y_we1 : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_function_r_ap_vld : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_function_r_ap_ack : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_ap_done : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_ap_start : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_ap_idle : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_ap_ready : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_X_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_Quant_fu_110_X_empty_n : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_X_read : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_function_r : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Accelerator_Quant_fu_110_Y_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Accelerator_Quant_fu_110_Y_full_n : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_Y_write : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_function_r_ap_ack : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_ap_done : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_ap_start : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_ap_idle : STD_LOGIC;
    signal grp_Accelerator_Quant_fu_110_ap_ready : STD_LOGIC;
    signal grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready : STD_LOGIC := '0';
    signal ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_108 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_131 : BOOLEAN;
    signal grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready : STD_LOGIC := '0';
    signal ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready : STD_LOGIC;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_402 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_416 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component Accelerator_DCT IS
    port (
        X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        X_empty_n : IN STD_LOGIC;
        X_read : OUT STD_LOGIC;
        function_r : IN STD_LOGIC_VECTOR (7 downto 0);
        Y_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        Y_ce0 : OUT STD_LOGIC;
        Y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Y_we0 : OUT STD_LOGIC;
        Y_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        Y_ce1 : OUT STD_LOGIC;
        Y_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Y_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        function_r_ap_vld : IN STD_LOGIC;
        function_r_ap_ack : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component Accelerator_Quant IS
    port (
        X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        X_empty_n : IN STD_LOGIC;
        X_read : OUT STD_LOGIC;
        function_r : IN STD_LOGIC_VECTOR (7 downto 0);
        Y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_full_n : IN STD_LOGIC;
        Y_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        function_r_ap_ack : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component Accelerator_Block_proc_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_U : component Accelerator_Block_proc_temp
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0);

    grp_Accelerator_DCT_fu_67 : component Accelerator_DCT
    port map (
        X_dout => grp_Accelerator_DCT_fu_67_X_dout,
        X_empty_n => grp_Accelerator_DCT_fu_67_X_empty_n,
        X_read => grp_Accelerator_DCT_fu_67_X_read,
        function_r => grp_Accelerator_DCT_fu_67_function_r,
        Y_address0 => grp_Accelerator_DCT_fu_67_Y_address0,
        Y_ce0 => grp_Accelerator_DCT_fu_67_Y_ce0,
        Y_d0 => grp_Accelerator_DCT_fu_67_Y_d0,
        Y_q0 => grp_Accelerator_DCT_fu_67_Y_q0,
        Y_we0 => grp_Accelerator_DCT_fu_67_Y_we0,
        Y_address1 => grp_Accelerator_DCT_fu_67_Y_address1,
        Y_ce1 => grp_Accelerator_DCT_fu_67_Y_ce1,
        Y_d1 => grp_Accelerator_DCT_fu_67_Y_d1,
        Y_q1 => grp_Accelerator_DCT_fu_67_Y_q1,
        Y_we1 => grp_Accelerator_DCT_fu_67_Y_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        function_r_ap_vld => grp_Accelerator_DCT_fu_67_function_r_ap_vld,
        function_r_ap_ack => grp_Accelerator_DCT_fu_67_function_r_ap_ack,
        ap_done => grp_Accelerator_DCT_fu_67_ap_done,
        ap_start => grp_Accelerator_DCT_fu_67_ap_start,
        ap_idle => grp_Accelerator_DCT_fu_67_ap_idle,
        ap_ready => grp_Accelerator_DCT_fu_67_ap_ready);

    grp_Accelerator_Quant_fu_110 : component Accelerator_Quant
    port map (
        X_dout => grp_Accelerator_Quant_fu_110_X_dout,
        X_empty_n => grp_Accelerator_Quant_fu_110_X_empty_n,
        X_read => grp_Accelerator_Quant_fu_110_X_read,
        function_r => grp_Accelerator_Quant_fu_110_function_r,
        Y_din => grp_Accelerator_Quant_fu_110_Y_din,
        Y_full_n => grp_Accelerator_Quant_fu_110_Y_full_n,
        Y_write => grp_Accelerator_Quant_fu_110_Y_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        function_r_ap_ack => grp_Accelerator_Quant_fu_110_function_r_ap_ack,
        ap_done => grp_Accelerator_Quant_fu_110_ap_done,
        ap_start => grp_Accelerator_Quant_fu_110_ap_start,
        ap_idle => grp_Accelerator_Quant_fu_110_ap_idle,
        ap_ready => grp_Accelerator_Quant_fu_110_ap_ready);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((((cond_reg_132 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_Quant_fu_110_ap_done)) or ((ap_const_logic_0 = grp_Accelerator_DCT_fu_67_ap_done) and not((cond_reg_132 = ap_const_lv1_0))))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready assign process. --
    ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_Accelerator_DCT_fu_67_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((cond_reg_132 = ap_const_lv1_0)) and not((((cond_reg_132 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_Quant_fu_110_ap_done)) or ((ap_const_logic_0 = grp_Accelerator_DCT_fu_67_ap_done) and not((cond_reg_132 = ap_const_lv1_0)))))))) then 
                    ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = grp_Accelerator_DCT_fu_67_ap_ready) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) or ((ap_const_logic_1 = grp_Accelerator_DCT_fu_67_ap_ready) and (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((cond_reg_132 = ap_const_lv1_0))))) then 
                    ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready assign process. --
    ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_Accelerator_Quant_fu_110_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (cond_reg_132 = ap_const_lv1_0) and not((((cond_reg_132 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_Quant_fu_110_ap_done)) or ((ap_const_logic_0 = grp_Accelerator_DCT_fu_67_ap_done) and not((cond_reg_132 = ap_const_lv1_0)))))))) then 
                    ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = grp_Accelerator_Quant_fu_110_ap_ready) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (cond_reg_132 = ap_const_lv1_0) and (ap_const_logic_1 = grp_Accelerator_Quant_fu_110_ap_ready)))) then 
                    ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg assign process. --
    grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_46) and (cond_fu_120_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_0 = ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_0 = ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready) and (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((cond_reg_132 = ap_const_lv1_0))))) then 
                    grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_Accelerator_DCT_fu_67_ap_ready)) then 
                    grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg assign process. --
    grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_46) and not((cond_fu_120_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_logic_0 = ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (cond_reg_132 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready)))) then 
                    grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_Accelerator_Quant_fu_110_ap_ready)) then 
                    grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_46))) then
                cond_reg_132 <= cond_fu_120_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_46, cond_fu_120_p2, cond_reg_132, grp_Accelerator_DCT_fu_67_ap_done, grp_Accelerator_Quant_fu_110_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not(ap_sig_bdd_46) and not((cond_fu_120_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif ((not(ap_sig_bdd_46) and (cond_fu_120_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_Accelerator_DCT_fu_67_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((((cond_reg_132 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_Quant_fu_110_ap_done)) or ((ap_const_logic_0 = grp_Accelerator_DCT_fu_67_ap_done) and not((cond_reg_132 = ap_const_lv1_0)))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_Accelerator_Quant_fu_110_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- X_read assign process. --
    X_read_assign_proc : process(cond_reg_132, grp_Accelerator_DCT_fu_67_X_read, grp_Accelerator_Quant_fu_110_X_read, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (cond_reg_132 = ap_const_lv1_0)))) then 
            X_read <= grp_Accelerator_Quant_fu_110_X_read;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((cond_reg_132 = ap_const_lv1_0))))) then 
            X_read <= grp_Accelerator_DCT_fu_67_X_read;
        else 
            X_read <= ap_const_logic_0;
        end if; 
    end process;

    Y_din <= grp_Accelerator_Quant_fu_110_Y_din;

    -- Y_write assign process. --
    Y_write_assign_proc : process(cond_reg_132, grp_Accelerator_Quant_fu_110_Y_write, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (cond_reg_132 = ap_const_lv1_0)))) then 
            Y_write <= grp_Accelerator_Quant_fu_110_Y_write;
        else 
            Y_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, cond_reg_132, grp_Accelerator_DCT_fu_67_ap_done, grp_Accelerator_Quant_fu_110_ap_done, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((((cond_reg_132 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_Quant_fu_110_ap_done)) or ((ap_const_logic_0 = grp_Accelerator_DCT_fu_67_ap_done) and not((cond_reg_132 = ap_const_lv1_0)))))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(cond_reg_132, grp_Accelerator_DCT_fu_67_ap_done, grp_Accelerator_Quant_fu_110_ap_done, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((((cond_reg_132 = ap_const_lv1_0) and (ap_const_logic_0 = grp_Accelerator_Quant_fu_110_ap_done)) or ((ap_const_logic_0 = grp_Accelerator_DCT_fu_67_ap_done) and not((cond_reg_132 = ap_const_lv1_0))))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_108 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_123 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_131 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_402 assign process. --
    ap_sig_bdd_402_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_402 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_416 assign process. --
    ap_sig_bdd_416_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_416 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_46 assign process. --
    ap_sig_bdd_46_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_46 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_108)
    begin
        if (ap_sig_bdd_108) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_416)
    begin
        if (ap_sig_bdd_416) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_131)
    begin
        if (ap_sig_bdd_131) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_402)
    begin
        if (ap_sig_bdd_402) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_123)
    begin
        if (ap_sig_bdd_123) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready assign process. --
    ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready_assign_proc : process(grp_Accelerator_DCT_fu_67_ap_ready, ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_startack_grp_Accelerator_DCT_fu_67_ap_ready)) then 
            ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready <= grp_Accelerator_DCT_fu_67_ap_ready;
        else 
            ap_sig_startack_grp_Accelerator_DCT_fu_67_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready assign process. --
    ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready_assign_proc : process(grp_Accelerator_Quant_fu_110_ap_ready, ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_startack_grp_Accelerator_Quant_fu_110_ap_ready)) then 
            ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready <= grp_Accelerator_Quant_fu_110_ap_ready;
        else 
            ap_sig_startack_grp_Accelerator_Quant_fu_110_ap_ready <= ap_const_logic_1;
        end if; 
    end process;

    cond_fu_120_p2 <= "1" when (function_r = ap_const_lv8_1) else "0";
    grp_Accelerator_DCT_fu_67_X_dout <= X_dout;
    grp_Accelerator_DCT_fu_67_X_empty_n <= X_empty_n;
    grp_Accelerator_DCT_fu_67_Y_q0 <= ap_const_lv32_0;
    grp_Accelerator_DCT_fu_67_Y_q1 <= ap_const_lv32_0;
    grp_Accelerator_DCT_fu_67_ap_start <= grp_Accelerator_DCT_fu_67_ap_start_ap_start_reg;

    -- grp_Accelerator_DCT_fu_67_function_r assign process. --
    grp_Accelerator_DCT_fu_67_function_r_assign_proc : process(function_r, cond_reg_132, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((cond_reg_132 = ap_const_lv1_0)))) then 
            grp_Accelerator_DCT_fu_67_function_r <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_Accelerator_DCT_fu_67_function_r <= function_r;
        else 
            grp_Accelerator_DCT_fu_67_function_r <= "XXXXXXXX";
        end if; 
    end process;

    grp_Accelerator_DCT_fu_67_function_r_ap_vld <= ap_const_logic_1;
    grp_Accelerator_Quant_fu_110_X_dout <= X_dout;
    grp_Accelerator_Quant_fu_110_X_empty_n <= X_empty_n;
    grp_Accelerator_Quant_fu_110_Y_full_n <= Y_full_n;
    grp_Accelerator_Quant_fu_110_ap_start <= grp_Accelerator_Quant_fu_110_ap_start_ap_start_reg;

    -- grp_Accelerator_Quant_fu_110_function_r assign process. --
    grp_Accelerator_Quant_fu_110_function_r_assign_proc : process(function_r, cond_reg_132, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (cond_reg_132 = ap_const_lv1_0))) then 
            grp_Accelerator_Quant_fu_110_function_r <= function_r;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_Accelerator_Quant_fu_110_function_r <= ap_const_lv8_1;
        else 
            grp_Accelerator_Quant_fu_110_function_r <= "XXXXXXXX";
        end if; 
    end process;

    temp_address0 <= grp_Accelerator_DCT_fu_67_Y_address0;

    -- temp_ce0 assign process. --
    temp_ce0_assign_proc : process(cond_reg_132, grp_Accelerator_DCT_fu_67_Y_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((cond_reg_132 = ap_const_lv1_0))))) then 
            temp_ce0 <= grp_Accelerator_DCT_fu_67_Y_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= grp_Accelerator_DCT_fu_67_Y_d0;

    -- temp_we0 assign process. --
    temp_we0_assign_proc : process(cond_reg_132, grp_Accelerator_DCT_fu_67_Y_we0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((cond_reg_132 = ap_const_lv1_0))))) then 
            temp_we0 <= grp_Accelerator_DCT_fu_67_Y_we0;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
