// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DCT_MAT_Multiply2_Loop_Col_proc291 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        B_0_0_dout,
        B_0_0_empty_n,
        B_0_0_read,
        B_0_1_dout,
        B_0_1_empty_n,
        B_0_1_read,
        B_0_2_dout,
        B_0_2_empty_n,
        B_0_2_read,
        B_0_3_dout,
        B_0_3_empty_n,
        B_0_3_read,
        B_0_4_dout,
        B_0_4_empty_n,
        B_0_4_read,
        B_0_5_dout,
        B_0_5_empty_n,
        B_0_5_read,
        B_0_6_dout,
        B_0_6_empty_n,
        B_0_6_read,
        B_0_7_dout,
        B_0_7_empty_n,
        B_0_7_read,
        p_read,
        B_1_0_dout,
        B_1_0_empty_n,
        B_1_0_read,
        B_1_1_dout,
        B_1_1_empty_n,
        B_1_1_read,
        B_1_2_dout,
        B_1_2_empty_n,
        B_1_2_read,
        B_1_3_dout,
        B_1_3_empty_n,
        B_1_3_read,
        B_1_4_dout,
        B_1_4_empty_n,
        B_1_4_read,
        B_1_5_dout,
        B_1_5_empty_n,
        B_1_5_read,
        B_1_6_dout,
        B_1_6_empty_n,
        B_1_6_read,
        B_1_7_dout,
        B_1_7_empty_n,
        B_1_7_read,
        p_read1,
        B_2_0_dout,
        B_2_0_empty_n,
        B_2_0_read,
        B_2_1_dout,
        B_2_1_empty_n,
        B_2_1_read,
        B_2_2_dout,
        B_2_2_empty_n,
        B_2_2_read,
        B_2_3_dout,
        B_2_3_empty_n,
        B_2_3_read,
        B_2_4_dout,
        B_2_4_empty_n,
        B_2_4_read,
        B_2_5_dout,
        B_2_5_empty_n,
        B_2_5_read,
        B_2_6_dout,
        B_2_6_empty_n,
        B_2_6_read,
        B_2_7_dout,
        B_2_7_empty_n,
        B_2_7_read,
        p_read2,
        B_3_0_dout,
        B_3_0_empty_n,
        B_3_0_read,
        B_3_1_dout,
        B_3_1_empty_n,
        B_3_1_read,
        B_3_2_dout,
        B_3_2_empty_n,
        B_3_2_read,
        B_3_3_dout,
        B_3_3_empty_n,
        B_3_3_read,
        B_3_4_dout,
        B_3_4_empty_n,
        B_3_4_read,
        B_3_5_dout,
        B_3_5_empty_n,
        B_3_5_read,
        B_3_6_dout,
        B_3_6_empty_n,
        B_3_6_read,
        B_3_7_dout,
        B_3_7_empty_n,
        B_3_7_read,
        p_read3,
        B_4_0_dout,
        B_4_0_empty_n,
        B_4_0_read,
        B_4_1_dout,
        B_4_1_empty_n,
        B_4_1_read,
        B_4_2_dout,
        B_4_2_empty_n,
        B_4_2_read,
        B_4_3_dout,
        B_4_3_empty_n,
        B_4_3_read,
        B_4_4_dout,
        B_4_4_empty_n,
        B_4_4_read,
        B_4_5_dout,
        B_4_5_empty_n,
        B_4_5_read,
        B_4_6_dout,
        B_4_6_empty_n,
        B_4_6_read,
        B_4_7_dout,
        B_4_7_empty_n,
        B_4_7_read,
        p_read4,
        B_5_0_dout,
        B_5_0_empty_n,
        B_5_0_read,
        B_5_1_dout,
        B_5_1_empty_n,
        B_5_1_read,
        B_5_2_dout,
        B_5_2_empty_n,
        B_5_2_read,
        B_5_3_dout,
        B_5_3_empty_n,
        B_5_3_read,
        B_5_4_dout,
        B_5_4_empty_n,
        B_5_4_read,
        B_5_5_dout,
        B_5_5_empty_n,
        B_5_5_read,
        B_5_6_dout,
        B_5_6_empty_n,
        B_5_6_read,
        B_5_7_dout,
        B_5_7_empty_n,
        B_5_7_read,
        p_read5,
        B_6_0_dout,
        B_6_0_empty_n,
        B_6_0_read,
        B_6_1_dout,
        B_6_1_empty_n,
        B_6_1_read,
        B_6_2_dout,
        B_6_2_empty_n,
        B_6_2_read,
        B_6_3_dout,
        B_6_3_empty_n,
        B_6_3_read,
        B_6_4_dout,
        B_6_4_empty_n,
        B_6_4_read,
        B_6_5_dout,
        B_6_5_empty_n,
        B_6_5_read,
        B_6_6_dout,
        B_6_6_empty_n,
        B_6_6_read,
        B_6_7_dout,
        B_6_7_empty_n,
        B_6_7_read,
        p_read6,
        B_7_0_dout,
        B_7_0_empty_n,
        B_7_0_read,
        B_7_1_dout,
        B_7_1_empty_n,
        B_7_1_read,
        B_7_2_dout,
        B_7_2_empty_n,
        B_7_2_read,
        B_7_3_dout,
        B_7_3_empty_n,
        B_7_3_read,
        B_7_4_dout,
        B_7_4_empty_n,
        B_7_4_read,
        B_7_5_dout,
        B_7_5_empty_n,
        B_7_5_read,
        B_7_6_dout,
        B_7_6_empty_n,
        B_7_6_read,
        B_7_7_dout,
        B_7_7_empty_n,
        B_7_7_read,
        p_read7,
        C_din,
        C_full_n,
        C_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st47_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] B_0_0_dout;
input   B_0_0_empty_n;
output   B_0_0_read;
input  [31:0] B_0_1_dout;
input   B_0_1_empty_n;
output   B_0_1_read;
input  [31:0] B_0_2_dout;
input   B_0_2_empty_n;
output   B_0_2_read;
input  [31:0] B_0_3_dout;
input   B_0_3_empty_n;
output   B_0_3_read;
input  [31:0] B_0_4_dout;
input   B_0_4_empty_n;
output   B_0_4_read;
input  [31:0] B_0_5_dout;
input   B_0_5_empty_n;
output   B_0_5_read;
input  [31:0] B_0_6_dout;
input   B_0_6_empty_n;
output   B_0_6_read;
input  [31:0] B_0_7_dout;
input   B_0_7_empty_n;
output   B_0_7_read;
input  [31:0] p_read;
input  [31:0] B_1_0_dout;
input   B_1_0_empty_n;
output   B_1_0_read;
input  [31:0] B_1_1_dout;
input   B_1_1_empty_n;
output   B_1_1_read;
input  [31:0] B_1_2_dout;
input   B_1_2_empty_n;
output   B_1_2_read;
input  [31:0] B_1_3_dout;
input   B_1_3_empty_n;
output   B_1_3_read;
input  [31:0] B_1_4_dout;
input   B_1_4_empty_n;
output   B_1_4_read;
input  [31:0] B_1_5_dout;
input   B_1_5_empty_n;
output   B_1_5_read;
input  [31:0] B_1_6_dout;
input   B_1_6_empty_n;
output   B_1_6_read;
input  [31:0] B_1_7_dout;
input   B_1_7_empty_n;
output   B_1_7_read;
input  [31:0] p_read1;
input  [31:0] B_2_0_dout;
input   B_2_0_empty_n;
output   B_2_0_read;
input  [31:0] B_2_1_dout;
input   B_2_1_empty_n;
output   B_2_1_read;
input  [31:0] B_2_2_dout;
input   B_2_2_empty_n;
output   B_2_2_read;
input  [31:0] B_2_3_dout;
input   B_2_3_empty_n;
output   B_2_3_read;
input  [31:0] B_2_4_dout;
input   B_2_4_empty_n;
output   B_2_4_read;
input  [31:0] B_2_5_dout;
input   B_2_5_empty_n;
output   B_2_5_read;
input  [31:0] B_2_6_dout;
input   B_2_6_empty_n;
output   B_2_6_read;
input  [31:0] B_2_7_dout;
input   B_2_7_empty_n;
output   B_2_7_read;
input  [31:0] p_read2;
input  [31:0] B_3_0_dout;
input   B_3_0_empty_n;
output   B_3_0_read;
input  [31:0] B_3_1_dout;
input   B_3_1_empty_n;
output   B_3_1_read;
input  [31:0] B_3_2_dout;
input   B_3_2_empty_n;
output   B_3_2_read;
input  [31:0] B_3_3_dout;
input   B_3_3_empty_n;
output   B_3_3_read;
input  [31:0] B_3_4_dout;
input   B_3_4_empty_n;
output   B_3_4_read;
input  [31:0] B_3_5_dout;
input   B_3_5_empty_n;
output   B_3_5_read;
input  [31:0] B_3_6_dout;
input   B_3_6_empty_n;
output   B_3_6_read;
input  [31:0] B_3_7_dout;
input   B_3_7_empty_n;
output   B_3_7_read;
input  [31:0] p_read3;
input  [31:0] B_4_0_dout;
input   B_4_0_empty_n;
output   B_4_0_read;
input  [31:0] B_4_1_dout;
input   B_4_1_empty_n;
output   B_4_1_read;
input  [31:0] B_4_2_dout;
input   B_4_2_empty_n;
output   B_4_2_read;
input  [31:0] B_4_3_dout;
input   B_4_3_empty_n;
output   B_4_3_read;
input  [31:0] B_4_4_dout;
input   B_4_4_empty_n;
output   B_4_4_read;
input  [31:0] B_4_5_dout;
input   B_4_5_empty_n;
output   B_4_5_read;
input  [31:0] B_4_6_dout;
input   B_4_6_empty_n;
output   B_4_6_read;
input  [31:0] B_4_7_dout;
input   B_4_7_empty_n;
output   B_4_7_read;
input  [31:0] p_read4;
input  [31:0] B_5_0_dout;
input   B_5_0_empty_n;
output   B_5_0_read;
input  [31:0] B_5_1_dout;
input   B_5_1_empty_n;
output   B_5_1_read;
input  [31:0] B_5_2_dout;
input   B_5_2_empty_n;
output   B_5_2_read;
input  [31:0] B_5_3_dout;
input   B_5_3_empty_n;
output   B_5_3_read;
input  [31:0] B_5_4_dout;
input   B_5_4_empty_n;
output   B_5_4_read;
input  [31:0] B_5_5_dout;
input   B_5_5_empty_n;
output   B_5_5_read;
input  [31:0] B_5_6_dout;
input   B_5_6_empty_n;
output   B_5_6_read;
input  [31:0] B_5_7_dout;
input   B_5_7_empty_n;
output   B_5_7_read;
input  [31:0] p_read5;
input  [31:0] B_6_0_dout;
input   B_6_0_empty_n;
output   B_6_0_read;
input  [31:0] B_6_1_dout;
input   B_6_1_empty_n;
output   B_6_1_read;
input  [31:0] B_6_2_dout;
input   B_6_2_empty_n;
output   B_6_2_read;
input  [31:0] B_6_3_dout;
input   B_6_3_empty_n;
output   B_6_3_read;
input  [31:0] B_6_4_dout;
input   B_6_4_empty_n;
output   B_6_4_read;
input  [31:0] B_6_5_dout;
input   B_6_5_empty_n;
output   B_6_5_read;
input  [31:0] B_6_6_dout;
input   B_6_6_empty_n;
output   B_6_6_read;
input  [31:0] B_6_7_dout;
input   B_6_7_empty_n;
output   B_6_7_read;
input  [31:0] p_read6;
input  [31:0] B_7_0_dout;
input   B_7_0_empty_n;
output   B_7_0_read;
input  [31:0] B_7_1_dout;
input   B_7_1_empty_n;
output   B_7_1_read;
input  [31:0] B_7_2_dout;
input   B_7_2_empty_n;
output   B_7_2_read;
input  [31:0] B_7_3_dout;
input   B_7_3_empty_n;
output   B_7_3_read;
input  [31:0] B_7_4_dout;
input   B_7_4_empty_n;
output   B_7_4_read;
input  [31:0] B_7_5_dout;
input   B_7_5_empty_n;
output   B_7_5_read;
input  [31:0] B_7_6_dout;
input   B_7_6_empty_n;
output   B_7_6_read;
input  [31:0] B_7_7_dout;
input   B_7_7_empty_n;
output   B_7_7_read;
input  [31:0] p_read7;
output  [31:0] C_din;
input   C_full_n;
output   C_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg B_0_0_read;
reg B_0_1_read;
reg B_0_2_read;
reg B_0_3_read;
reg B_0_4_read;
reg B_0_5_read;
reg B_0_6_read;
reg B_0_7_read;
reg B_1_0_read;
reg B_1_1_read;
reg B_1_2_read;
reg B_1_3_read;
reg B_1_4_read;
reg B_1_5_read;
reg B_1_6_read;
reg B_1_7_read;
reg B_2_0_read;
reg B_2_1_read;
reg B_2_2_read;
reg B_2_3_read;
reg B_2_4_read;
reg B_2_5_read;
reg B_2_6_read;
reg B_2_7_read;
reg B_3_0_read;
reg B_3_1_read;
reg B_3_2_read;
reg B_3_3_read;
reg B_3_4_read;
reg B_3_5_read;
reg B_3_6_read;
reg B_3_7_read;
reg B_4_0_read;
reg B_4_1_read;
reg B_4_2_read;
reg B_4_3_read;
reg B_4_4_read;
reg B_4_5_read;
reg B_4_6_read;
reg B_4_7_read;
reg B_5_0_read;
reg B_5_1_read;
reg B_5_2_read;
reg B_5_3_read;
reg B_5_4_read;
reg B_5_5_read;
reg B_5_6_read;
reg B_5_7_read;
reg B_6_0_read;
reg B_6_1_read;
reg B_6_2_read;
reg B_6_3_read;
reg B_6_4_read;
reg B_6_5_read;
reg B_6_6_read;
reg B_6_7_read;
reg B_7_0_read;
reg B_7_1_read;
reg B_7_2_read;
reg B_7_3_read;
reg B_7_4_read;
reg B_7_5_read;
reg B_7_6_read;
reg B_7_7_read;
reg C_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg   [3:0] j_i_reg_755;
reg    ap_sig_bdd_432;
reg   [31:0] B_0_0_read_reg_1001;
reg   [31:0] B_0_1_read_reg_1006;
reg   [31:0] B_0_2_read_reg_1011;
reg   [31:0] B_0_3_read_reg_1016;
reg   [31:0] B_0_4_read_reg_1021;
reg   [31:0] B_0_5_read_reg_1026;
reg   [31:0] B_0_6_read_reg_1031;
reg   [31:0] B_0_7_read_reg_1036;
reg   [31:0] B_1_0_read_reg_1041;
reg   [31:0] B_1_1_read_reg_1046;
reg   [31:0] B_1_2_read_reg_1051;
reg   [31:0] B_1_3_read_reg_1056;
reg   [31:0] B_1_4_read_reg_1061;
reg   [31:0] B_1_5_read_reg_1066;
reg   [31:0] B_1_6_read_reg_1071;
reg   [31:0] B_1_7_read_reg_1076;
reg   [31:0] B_2_0_read_reg_1081;
reg   [31:0] B_2_1_read_reg_1086;
reg   [31:0] B_2_2_read_reg_1091;
reg   [31:0] B_2_3_read_reg_1096;
reg   [31:0] B_2_4_read_reg_1101;
reg   [31:0] B_2_5_read_reg_1106;
reg   [31:0] B_2_6_read_reg_1111;
reg   [31:0] B_2_7_read_reg_1116;
reg   [31:0] B_3_0_read_reg_1121;
reg   [31:0] B_3_1_read_reg_1126;
reg   [31:0] B_3_2_read_reg_1131;
reg   [31:0] B_3_3_read_reg_1136;
reg   [31:0] B_3_4_read_reg_1141;
reg   [31:0] B_3_5_read_reg_1146;
reg   [31:0] B_3_6_read_reg_1151;
reg   [31:0] B_3_7_read_reg_1156;
reg   [31:0] B_4_0_read_reg_1161;
reg   [31:0] B_4_1_read_reg_1166;
reg   [31:0] B_4_2_read_reg_1171;
reg   [31:0] B_4_3_read_reg_1176;
reg   [31:0] B_4_4_read_reg_1181;
reg   [31:0] B_4_5_read_reg_1186;
reg   [31:0] B_4_6_read_reg_1191;
reg   [31:0] B_4_7_read_reg_1196;
reg   [31:0] B_5_0_read_reg_1201;
reg   [31:0] B_5_1_read_reg_1206;
reg   [31:0] B_5_2_read_reg_1211;
reg   [31:0] B_5_3_read_reg_1216;
reg   [31:0] B_5_4_read_reg_1221;
reg   [31:0] B_5_5_read_reg_1226;
reg   [31:0] B_5_6_read_reg_1231;
reg   [31:0] B_5_7_read_reg_1236;
reg   [31:0] B_6_0_read_reg_1241;
reg   [31:0] B_6_1_read_reg_1246;
reg   [31:0] B_6_2_read_reg_1251;
reg   [31:0] B_6_3_read_reg_1256;
reg   [31:0] B_6_4_read_reg_1261;
reg   [31:0] B_6_5_read_reg_1266;
reg   [31:0] B_6_6_read_reg_1271;
reg   [31:0] B_6_7_read_reg_1276;
reg   [31:0] B_7_0_read_reg_1281;
reg   [31:0] B_7_1_read_reg_1286;
reg   [31:0] B_7_2_read_reg_1291;
reg   [31:0] B_7_3_read_reg_1296;
reg   [31:0] B_7_4_read_reg_1301;
reg   [31:0] B_7_5_read_reg_1306;
reg   [31:0] B_7_6_read_reg_1311;
reg   [31:0] B_7_7_read_reg_1316;
wire   [0:0] exitcond1_i_fu_832_p2;
reg   [0:0] exitcond1_i_reg_1321;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_584;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg    ap_reg_ppiten_pp0_it7 = 1'b0;
reg    ap_reg_ppiten_pp0_it8 = 1'b0;
reg    ap_reg_ppiten_pp0_it9 = 1'b0;
reg    ap_reg_ppiten_pp0_it10 = 1'b0;
reg    ap_reg_ppiten_pp0_it11 = 1'b0;
reg    ap_reg_ppiten_pp0_it12 = 1'b0;
reg    ap_reg_ppiten_pp0_it13 = 1'b0;
reg    ap_reg_ppiten_pp0_it14 = 1'b0;
reg    ap_reg_ppiten_pp0_it15 = 1'b0;
reg    ap_reg_ppiten_pp0_it16 = 1'b0;
reg    ap_reg_ppiten_pp0_it17 = 1'b0;
reg    ap_reg_ppiten_pp0_it18 = 1'b0;
reg    ap_reg_ppiten_pp0_it19 = 1'b0;
reg    ap_reg_ppiten_pp0_it20 = 1'b0;
reg    ap_reg_ppiten_pp0_it21 = 1'b0;
reg    ap_reg_ppiten_pp0_it22 = 1'b0;
reg    ap_reg_ppiten_pp0_it23 = 1'b0;
reg    ap_reg_ppiten_pp0_it24 = 1'b0;
reg    ap_reg_ppiten_pp0_it25 = 1'b0;
reg    ap_reg_ppiten_pp0_it26 = 1'b0;
reg    ap_reg_ppiten_pp0_it27 = 1'b0;
reg    ap_reg_ppiten_pp0_it28 = 1'b0;
reg    ap_reg_ppiten_pp0_it29 = 1'b0;
reg    ap_reg_ppiten_pp0_it30 = 1'b0;
reg    ap_reg_ppiten_pp0_it31 = 1'b0;
reg    ap_reg_ppiten_pp0_it32 = 1'b0;
reg    ap_reg_ppiten_pp0_it33 = 1'b0;
reg    ap_reg_ppiten_pp0_it34 = 1'b0;
reg    ap_reg_ppiten_pp0_it35 = 1'b0;
reg    ap_reg_ppiten_pp0_it36 = 1'b0;
reg    ap_reg_ppiten_pp0_it37 = 1'b0;
reg    ap_reg_ppiten_pp0_it38 = 1'b0;
reg    ap_reg_ppiten_pp0_it39 = 1'b0;
reg    ap_reg_ppiten_pp0_it40 = 1'b0;
reg    ap_reg_ppiten_pp0_it41 = 1'b0;
reg    ap_reg_ppiten_pp0_it42 = 1'b0;
reg    ap_reg_ppiten_pp0_it43 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43;
reg    ap_sig_bdd_679;
reg    ap_reg_ppiten_pp0_it44 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it4;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it5;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it6;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it7;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it8;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it9;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it10;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it11;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it12;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it13;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it14;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it15;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it16;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it17;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it18;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it19;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it20;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it21;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it22;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it23;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it24;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it25;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it26;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it27;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it28;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it29;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it30;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it31;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it32;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it33;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it34;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it35;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it36;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it37;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it38;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it39;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it40;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it41;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it42;
wire   [3:0] j_fu_838_p2;
wire   [2:0] tmp_21_fu_844_p1;
reg   [2:0] tmp_21_reg_1330;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it1;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it2;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it3;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it4;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it5;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it6;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it7;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it8;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it9;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it10;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it11;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it12;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it13;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it14;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it15;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it16;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it17;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it18;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it19;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it20;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it21;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it22;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it23;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it24;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it25;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it26;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it27;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it28;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it29;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it30;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it31;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it32;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it33;
reg   [2:0] ap_reg_ppstg_tmp_21_reg_1330_pp0_it34;
wire   [31:0] tmp_fu_848_p10;
wire   [31:0] grp_fu_800_p2;
reg   [31:0] tmp_4_i_reg_1346;
wire   [31:0] tmp_s_fu_863_p10;
wire   [31:0] grp_fu_767_p2;
reg   [31:0] temp_2_i_reg_1356;
wire   [31:0] grp_fu_804_p2;
reg   [31:0] tmp_4_1_i_reg_1361;
wire   [31:0] tmp_15_fu_877_p10;
wire   [31:0] grp_fu_772_p2;
reg   [31:0] temp_2_1_i_reg_1371;
wire   [31:0] grp_fu_808_p2;
reg   [31:0] tmp_4_2_i_reg_1376;
wire   [31:0] tmp_16_fu_891_p10;
wire   [31:0] grp_fu_776_p2;
reg   [31:0] temp_2_2_i_reg_1386;
wire   [31:0] grp_fu_812_p2;
reg   [31:0] tmp_4_3_i_reg_1391;
wire   [31:0] tmp_17_fu_905_p10;
wire   [31:0] grp_fu_780_p2;
reg   [31:0] temp_2_3_i_reg_1401;
wire   [31:0] grp_fu_816_p2;
reg   [31:0] tmp_4_4_i_reg_1406;
wire   [31:0] tmp_18_fu_919_p10;
wire   [31:0] grp_fu_784_p2;
reg   [31:0] temp_2_4_i_reg_1416;
wire   [31:0] grp_fu_820_p2;
reg   [31:0] tmp_4_5_i_reg_1421;
wire   [31:0] tmp_19_fu_933_p10;
wire   [31:0] grp_fu_788_p2;
reg   [31:0] temp_2_5_i_reg_1431;
wire   [31:0] grp_fu_824_p2;
reg   [31:0] tmp_4_6_i_reg_1436;
wire   [31:0] tmp_20_fu_947_p10;
wire   [31:0] grp_fu_792_p2;
reg   [31:0] temp_2_6_i_reg_1446;
wire   [31:0] grp_fu_828_p2;
reg   [31:0] tmp_4_7_i_reg_1451;
wire   [31:0] grp_fu_796_p2;
reg   [31:0] temp_2_7_i_reg_1456;
wire   [31:0] grp_fu_767_p0;
wire   [31:0] grp_fu_767_p1;
wire   [31:0] grp_fu_772_p0;
wire   [31:0] grp_fu_772_p1;
wire   [31:0] grp_fu_776_p0;
wire   [31:0] grp_fu_776_p1;
wire   [31:0] grp_fu_780_p0;
wire   [31:0] grp_fu_780_p1;
wire   [31:0] grp_fu_784_p0;
wire   [31:0] grp_fu_784_p1;
wire   [31:0] grp_fu_788_p0;
wire   [31:0] grp_fu_788_p1;
wire   [31:0] grp_fu_792_p0;
wire   [31:0] grp_fu_792_p1;
wire   [31:0] grp_fu_796_p0;
wire   [31:0] grp_fu_796_p1;
wire   [31:0] grp_fu_800_p0;
wire   [31:0] grp_fu_800_p1;
wire   [31:0] grp_fu_804_p0;
wire   [31:0] grp_fu_804_p1;
wire   [31:0] grp_fu_808_p0;
wire   [31:0] grp_fu_808_p1;
wire   [31:0] grp_fu_812_p0;
wire   [31:0] grp_fu_812_p1;
wire   [31:0] grp_fu_816_p0;
wire   [31:0] grp_fu_816_p1;
wire   [31:0] grp_fu_820_p0;
wire   [31:0] grp_fu_820_p1;
wire   [31:0] grp_fu_824_p0;
wire   [31:0] grp_fu_824_p1;
wire   [31:0] grp_fu_828_p0;
wire   [31:0] grp_fu_828_p1;
wire   [31:0] tmp_fu_848_p1;
wire   [31:0] tmp_fu_848_p2;
wire   [31:0] tmp_fu_848_p3;
wire   [31:0] tmp_fu_848_p4;
wire   [31:0] tmp_fu_848_p5;
wire   [31:0] tmp_fu_848_p6;
wire   [31:0] tmp_fu_848_p7;
wire   [31:0] tmp_fu_848_p8;
wire   [2:0] tmp_fu_848_p9;
wire   [31:0] tmp_s_fu_863_p1;
wire   [31:0] tmp_s_fu_863_p2;
wire   [31:0] tmp_s_fu_863_p3;
wire   [31:0] tmp_s_fu_863_p4;
wire   [31:0] tmp_s_fu_863_p5;
wire   [31:0] tmp_s_fu_863_p6;
wire   [31:0] tmp_s_fu_863_p7;
wire   [31:0] tmp_s_fu_863_p8;
wire   [2:0] tmp_s_fu_863_p9;
wire   [31:0] tmp_15_fu_877_p1;
wire   [31:0] tmp_15_fu_877_p2;
wire   [31:0] tmp_15_fu_877_p3;
wire   [31:0] tmp_15_fu_877_p4;
wire   [31:0] tmp_15_fu_877_p5;
wire   [31:0] tmp_15_fu_877_p6;
wire   [31:0] tmp_15_fu_877_p7;
wire   [31:0] tmp_15_fu_877_p8;
wire   [2:0] tmp_15_fu_877_p9;
wire   [31:0] tmp_16_fu_891_p1;
wire   [31:0] tmp_16_fu_891_p2;
wire   [31:0] tmp_16_fu_891_p3;
wire   [31:0] tmp_16_fu_891_p4;
wire   [31:0] tmp_16_fu_891_p5;
wire   [31:0] tmp_16_fu_891_p6;
wire   [31:0] tmp_16_fu_891_p7;
wire   [31:0] tmp_16_fu_891_p8;
wire   [2:0] tmp_16_fu_891_p9;
wire   [31:0] tmp_17_fu_905_p1;
wire   [31:0] tmp_17_fu_905_p2;
wire   [31:0] tmp_17_fu_905_p3;
wire   [31:0] tmp_17_fu_905_p4;
wire   [31:0] tmp_17_fu_905_p5;
wire   [31:0] tmp_17_fu_905_p6;
wire   [31:0] tmp_17_fu_905_p7;
wire   [31:0] tmp_17_fu_905_p8;
wire   [2:0] tmp_17_fu_905_p9;
wire   [31:0] tmp_18_fu_919_p1;
wire   [31:0] tmp_18_fu_919_p2;
wire   [31:0] tmp_18_fu_919_p3;
wire   [31:0] tmp_18_fu_919_p4;
wire   [31:0] tmp_18_fu_919_p5;
wire   [31:0] tmp_18_fu_919_p6;
wire   [31:0] tmp_18_fu_919_p7;
wire   [31:0] tmp_18_fu_919_p8;
wire   [2:0] tmp_18_fu_919_p9;
wire   [31:0] tmp_19_fu_933_p1;
wire   [31:0] tmp_19_fu_933_p2;
wire   [31:0] tmp_19_fu_933_p3;
wire   [31:0] tmp_19_fu_933_p4;
wire   [31:0] tmp_19_fu_933_p5;
wire   [31:0] tmp_19_fu_933_p6;
wire   [31:0] tmp_19_fu_933_p7;
wire   [31:0] tmp_19_fu_933_p8;
wire   [2:0] tmp_19_fu_933_p9;
wire   [31:0] tmp_20_fu_947_p1;
wire   [31:0] tmp_20_fu_947_p2;
wire   [31:0] tmp_20_fu_947_p3;
wire   [31:0] tmp_20_fu_947_p4;
wire   [31:0] tmp_20_fu_947_p5;
wire   [31:0] tmp_20_fu_947_p6;
wire   [31:0] tmp_20_fu_947_p7;
wire   [31:0] tmp_20_fu_947_p8;
wire   [2:0] tmp_20_fu_947_p9;
reg    grp_fu_767_ce;
reg    grp_fu_772_ce;
reg    grp_fu_776_ce;
reg    grp_fu_780_ce;
reg    grp_fu_784_ce;
reg    grp_fu_788_ce;
reg    grp_fu_792_ce;
reg    grp_fu_796_ce;
reg    grp_fu_800_ce;
reg    grp_fu_804_ce;
reg    grp_fu_808_ce;
reg    grp_fu_812_ce;
reg    grp_fu_816_ce;
reg    grp_fu_820_ce;
reg    grp_fu_824_ce;
reg    grp_fu_828_ce;
reg    ap_sig_cseq_ST_st47_fsm_2;
reg    ap_sig_bdd_1268;
reg   [2:0] ap_NS_fsm;


DCT_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fadd_32ns_32ns_32_5_full_dsp_U583(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_767_p0 ),
    .din1( grp_fu_767_p1 ),
    .ce( grp_fu_767_ce ),
    .dout( grp_fu_767_p2 )
);

DCT_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fadd_32ns_32ns_32_5_full_dsp_U584(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_772_p0 ),
    .din1( grp_fu_772_p1 ),
    .ce( grp_fu_772_ce ),
    .dout( grp_fu_772_p2 )
);

DCT_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fadd_32ns_32ns_32_5_full_dsp_U585(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_776_p0 ),
    .din1( grp_fu_776_p1 ),
    .ce( grp_fu_776_ce ),
    .dout( grp_fu_776_p2 )
);

DCT_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fadd_32ns_32ns_32_5_full_dsp_U586(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_780_p0 ),
    .din1( grp_fu_780_p1 ),
    .ce( grp_fu_780_ce ),
    .dout( grp_fu_780_p2 )
);

DCT_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fadd_32ns_32ns_32_5_full_dsp_U587(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_784_p0 ),
    .din1( grp_fu_784_p1 ),
    .ce( grp_fu_784_ce ),
    .dout( grp_fu_784_p2 )
);

DCT_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fadd_32ns_32ns_32_5_full_dsp_U588(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_788_p0 ),
    .din1( grp_fu_788_p1 ),
    .ce( grp_fu_788_ce ),
    .dout( grp_fu_788_p2 )
);

DCT_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fadd_32ns_32ns_32_5_full_dsp_U589(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_792_p0 ),
    .din1( grp_fu_792_p1 ),
    .ce( grp_fu_792_ce ),
    .dout( grp_fu_792_p2 )
);

DCT_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fadd_32ns_32ns_32_5_full_dsp_U590(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_796_p0 ),
    .din1( grp_fu_796_p1 ),
    .ce( grp_fu_796_ce ),
    .dout( grp_fu_796_p2 )
);

DCT_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fmul_32ns_32ns_32_4_max_dsp_U591(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_800_p0 ),
    .din1( grp_fu_800_p1 ),
    .ce( grp_fu_800_ce ),
    .dout( grp_fu_800_p2 )
);

DCT_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fmul_32ns_32ns_32_4_max_dsp_U592(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_804_p0 ),
    .din1( grp_fu_804_p1 ),
    .ce( grp_fu_804_ce ),
    .dout( grp_fu_804_p2 )
);

DCT_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fmul_32ns_32ns_32_4_max_dsp_U593(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_808_p0 ),
    .din1( grp_fu_808_p1 ),
    .ce( grp_fu_808_ce ),
    .dout( grp_fu_808_p2 )
);

DCT_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fmul_32ns_32ns_32_4_max_dsp_U594(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_812_p0 ),
    .din1( grp_fu_812_p1 ),
    .ce( grp_fu_812_ce ),
    .dout( grp_fu_812_p2 )
);

DCT_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fmul_32ns_32ns_32_4_max_dsp_U595(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_816_p0 ),
    .din1( grp_fu_816_p1 ),
    .ce( grp_fu_816_ce ),
    .dout( grp_fu_816_p2 )
);

DCT_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fmul_32ns_32ns_32_4_max_dsp_U596(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_820_p0 ),
    .din1( grp_fu_820_p1 ),
    .ce( grp_fu_820_ce ),
    .dout( grp_fu_820_p2 )
);

DCT_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fmul_32ns_32ns_32_4_max_dsp_U597(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_824_p0 ),
    .din1( grp_fu_824_p1 ),
    .ce( grp_fu_824_ce ),
    .dout( grp_fu_824_p2 )
);

DCT_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_fmul_32ns_32ns_32_4_max_dsp_U598(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_828_p0 ),
    .din1( grp_fu_828_p1 ),
    .ce( grp_fu_828_ce ),
    .dout( grp_fu_828_p2 )
);

DCT_mux_8to1_sel3_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
DCT_mux_8to1_sel3_32_1_U599(
    .din1( tmp_fu_848_p1 ),
    .din2( tmp_fu_848_p2 ),
    .din3( tmp_fu_848_p3 ),
    .din4( tmp_fu_848_p4 ),
    .din5( tmp_fu_848_p5 ),
    .din6( tmp_fu_848_p6 ),
    .din7( tmp_fu_848_p7 ),
    .din8( tmp_fu_848_p8 ),
    .din9( tmp_fu_848_p9 ),
    .dout( tmp_fu_848_p10 )
);

DCT_mux_8to1_sel3_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
DCT_mux_8to1_sel3_32_1_U600(
    .din1( tmp_s_fu_863_p1 ),
    .din2( tmp_s_fu_863_p2 ),
    .din3( tmp_s_fu_863_p3 ),
    .din4( tmp_s_fu_863_p4 ),
    .din5( tmp_s_fu_863_p5 ),
    .din6( tmp_s_fu_863_p6 ),
    .din7( tmp_s_fu_863_p7 ),
    .din8( tmp_s_fu_863_p8 ),
    .din9( tmp_s_fu_863_p9 ),
    .dout( tmp_s_fu_863_p10 )
);

DCT_mux_8to1_sel3_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
DCT_mux_8to1_sel3_32_1_U601(
    .din1( tmp_15_fu_877_p1 ),
    .din2( tmp_15_fu_877_p2 ),
    .din3( tmp_15_fu_877_p3 ),
    .din4( tmp_15_fu_877_p4 ),
    .din5( tmp_15_fu_877_p5 ),
    .din6( tmp_15_fu_877_p6 ),
    .din7( tmp_15_fu_877_p7 ),
    .din8( tmp_15_fu_877_p8 ),
    .din9( tmp_15_fu_877_p9 ),
    .dout( tmp_15_fu_877_p10 )
);

DCT_mux_8to1_sel3_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
DCT_mux_8to1_sel3_32_1_U602(
    .din1( tmp_16_fu_891_p1 ),
    .din2( tmp_16_fu_891_p2 ),
    .din3( tmp_16_fu_891_p3 ),
    .din4( tmp_16_fu_891_p4 ),
    .din5( tmp_16_fu_891_p5 ),
    .din6( tmp_16_fu_891_p6 ),
    .din7( tmp_16_fu_891_p7 ),
    .din8( tmp_16_fu_891_p8 ),
    .din9( tmp_16_fu_891_p9 ),
    .dout( tmp_16_fu_891_p10 )
);

DCT_mux_8to1_sel3_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
DCT_mux_8to1_sel3_32_1_U603(
    .din1( tmp_17_fu_905_p1 ),
    .din2( tmp_17_fu_905_p2 ),
    .din3( tmp_17_fu_905_p3 ),
    .din4( tmp_17_fu_905_p4 ),
    .din5( tmp_17_fu_905_p5 ),
    .din6( tmp_17_fu_905_p6 ),
    .din7( tmp_17_fu_905_p7 ),
    .din8( tmp_17_fu_905_p8 ),
    .din9( tmp_17_fu_905_p9 ),
    .dout( tmp_17_fu_905_p10 )
);

DCT_mux_8to1_sel3_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
DCT_mux_8to1_sel3_32_1_U604(
    .din1( tmp_18_fu_919_p1 ),
    .din2( tmp_18_fu_919_p2 ),
    .din3( tmp_18_fu_919_p3 ),
    .din4( tmp_18_fu_919_p4 ),
    .din5( tmp_18_fu_919_p5 ),
    .din6( tmp_18_fu_919_p6 ),
    .din7( tmp_18_fu_919_p7 ),
    .din8( tmp_18_fu_919_p8 ),
    .din9( tmp_18_fu_919_p9 ),
    .dout( tmp_18_fu_919_p10 )
);

DCT_mux_8to1_sel3_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
DCT_mux_8to1_sel3_32_1_U605(
    .din1( tmp_19_fu_933_p1 ),
    .din2( tmp_19_fu_933_p2 ),
    .din3( tmp_19_fu_933_p3 ),
    .din4( tmp_19_fu_933_p4 ),
    .din5( tmp_19_fu_933_p5 ),
    .din6( tmp_19_fu_933_p6 ),
    .din7( tmp_19_fu_933_p7 ),
    .din8( tmp_19_fu_933_p8 ),
    .din9( tmp_19_fu_933_p9 ),
    .dout( tmp_19_fu_933_p10 )
);

DCT_mux_8to1_sel3_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
DCT_mux_8to1_sel3_32_1_U606(
    .din1( tmp_20_fu_947_p1 ),
    .din2( tmp_20_fu_947_p2 ),
    .din3( tmp_20_fu_947_p3 ),
    .din4( tmp_20_fu_947_p4 ),
    .din5( tmp_20_fu_947_p5 ),
    .din6( tmp_20_fu_947_p6 ),
    .din7( tmp_20_fu_947_p7 ),
    .din8( tmp_20_fu_947_p8 ),
    .din9( tmp_20_fu_947_p9 ),
    .dout( tmp_20_fu_947_p10 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st47_fsm_2)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & ~(exitcond1_i_fu_832_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (exitcond1_i_fu_832_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & ~(exitcond1_i_fu_832_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it10 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it10
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
        end
    end
end

/// ap_reg_ppiten_pp0_it11 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it11
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
        end
    end
end

/// ap_reg_ppiten_pp0_it12 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it12
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
        end
    end
end

/// ap_reg_ppiten_pp0_it13 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it13
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
        end
    end
end

/// ap_reg_ppiten_pp0_it14 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it14
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
        end
    end
end

/// ap_reg_ppiten_pp0_it15 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it15
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
        end
    end
end

/// ap_reg_ppiten_pp0_it16 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it16
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
        end
    end
end

/// ap_reg_ppiten_pp0_it17 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it17
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
        end
    end
end

/// ap_reg_ppiten_pp0_it18 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it18
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
        end
    end
end

/// ap_reg_ppiten_pp0_it19 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it19
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it20 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it20
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
        end
    end
end

/// ap_reg_ppiten_pp0_it21 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it21
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
        end
    end
end

/// ap_reg_ppiten_pp0_it22 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it22
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
        end
    end
end

/// ap_reg_ppiten_pp0_it23 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it23
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
        end
    end
end

/// ap_reg_ppiten_pp0_it24 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it24
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
        end
    end
end

/// ap_reg_ppiten_pp0_it25 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it25
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
        end
    end
end

/// ap_reg_ppiten_pp0_it26 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it26
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
        end
    end
end

/// ap_reg_ppiten_pp0_it27 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it27
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
        end
    end
end

/// ap_reg_ppiten_pp0_it28 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it28
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
        end
    end
end

/// ap_reg_ppiten_pp0_it29 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it29
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

/// ap_reg_ppiten_pp0_it30 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it30
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
        end
    end
end

/// ap_reg_ppiten_pp0_it31 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it31
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
        end
    end
end

/// ap_reg_ppiten_pp0_it32 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it32
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
        end
    end
end

/// ap_reg_ppiten_pp0_it33 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it33
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
        end
    end
end

/// ap_reg_ppiten_pp0_it34 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it34
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
        end
    end
end

/// ap_reg_ppiten_pp0_it35 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it35
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it35 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it35 <= ap_reg_ppiten_pp0_it34;
        end
    end
end

/// ap_reg_ppiten_pp0_it36 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it36
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it36 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it36 <= ap_reg_ppiten_pp0_it35;
        end
    end
end

/// ap_reg_ppiten_pp0_it37 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it37
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it37 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it37 <= ap_reg_ppiten_pp0_it36;
        end
    end
end

/// ap_reg_ppiten_pp0_it38 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it38
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it38 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it38 <= ap_reg_ppiten_pp0_it37;
        end
    end
end

/// ap_reg_ppiten_pp0_it39 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it39
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it39 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it39 <= ap_reg_ppiten_pp0_it38;
        end
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

/// ap_reg_ppiten_pp0_it40 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it40
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it40 <= ap_reg_ppiten_pp0_it39;
        end
    end
end

/// ap_reg_ppiten_pp0_it41 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it41
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it41 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it41 <= ap_reg_ppiten_pp0_it40;
        end
    end
end

/// ap_reg_ppiten_pp0_it42 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it42
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it42 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it42 <= ap_reg_ppiten_pp0_it41;
        end
    end
end

/// ap_reg_ppiten_pp0_it43 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it43
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it43 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it43 <= ap_reg_ppiten_pp0_it42;
        end
    end
end

/// ap_reg_ppiten_pp0_it44 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it44
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it44 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it44 <= ap_reg_ppiten_pp0_it43;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
            ap_reg_ppiten_pp0_it44 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end
    end
end

/// ap_reg_ppiten_pp0_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
        end
    end
end

/// ap_reg_ppiten_pp0_it7 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it7
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
        end
    end
end

/// ap_reg_ppiten_pp0_it8 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it8
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
        end
    end
end

/// ap_reg_ppiten_pp0_it9 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it9
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
            ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        j_i_reg_755 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (exitcond1_i_fu_832_p2 == ap_const_lv1_0))) begin
        j_i_reg_755 <= j_fu_838_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_0_read_reg_1001 <= B_0_0_dout;
        B_0_1_read_reg_1006 <= B_0_1_dout;
        B_0_2_read_reg_1011 <= B_0_2_dout;
        B_0_3_read_reg_1016 <= B_0_3_dout;
        B_0_4_read_reg_1021 <= B_0_4_dout;
        B_0_5_read_reg_1026 <= B_0_5_dout;
        B_0_6_read_reg_1031 <= B_0_6_dout;
        B_0_7_read_reg_1036 <= B_0_7_dout;
        B_1_0_read_reg_1041 <= B_1_0_dout;
        B_1_1_read_reg_1046 <= B_1_1_dout;
        B_1_2_read_reg_1051 <= B_1_2_dout;
        B_1_3_read_reg_1056 <= B_1_3_dout;
        B_1_4_read_reg_1061 <= B_1_4_dout;
        B_1_5_read_reg_1066 <= B_1_5_dout;
        B_1_6_read_reg_1071 <= B_1_6_dout;
        B_1_7_read_reg_1076 <= B_1_7_dout;
        B_2_0_read_reg_1081 <= B_2_0_dout;
        B_2_1_read_reg_1086 <= B_2_1_dout;
        B_2_2_read_reg_1091 <= B_2_2_dout;
        B_2_3_read_reg_1096 <= B_2_3_dout;
        B_2_4_read_reg_1101 <= B_2_4_dout;
        B_2_5_read_reg_1106 <= B_2_5_dout;
        B_2_6_read_reg_1111 <= B_2_6_dout;
        B_2_7_read_reg_1116 <= B_2_7_dout;
        B_3_0_read_reg_1121 <= B_3_0_dout;
        B_3_1_read_reg_1126 <= B_3_1_dout;
        B_3_2_read_reg_1131 <= B_3_2_dout;
        B_3_3_read_reg_1136 <= B_3_3_dout;
        B_3_4_read_reg_1141 <= B_3_4_dout;
        B_3_5_read_reg_1146 <= B_3_5_dout;
        B_3_6_read_reg_1151 <= B_3_6_dout;
        B_3_7_read_reg_1156 <= B_3_7_dout;
        B_4_0_read_reg_1161 <= B_4_0_dout;
        B_4_1_read_reg_1166 <= B_4_1_dout;
        B_4_2_read_reg_1171 <= B_4_2_dout;
        B_4_3_read_reg_1176 <= B_4_3_dout;
        B_4_4_read_reg_1181 <= B_4_4_dout;
        B_4_5_read_reg_1186 <= B_4_5_dout;
        B_4_6_read_reg_1191 <= B_4_6_dout;
        B_4_7_read_reg_1196 <= B_4_7_dout;
        B_5_0_read_reg_1201 <= B_5_0_dout;
        B_5_1_read_reg_1206 <= B_5_1_dout;
        B_5_2_read_reg_1211 <= B_5_2_dout;
        B_5_3_read_reg_1216 <= B_5_3_dout;
        B_5_4_read_reg_1221 <= B_5_4_dout;
        B_5_5_read_reg_1226 <= B_5_5_dout;
        B_5_6_read_reg_1231 <= B_5_6_dout;
        B_5_7_read_reg_1236 <= B_5_7_dout;
        B_6_0_read_reg_1241 <= B_6_0_dout;
        B_6_1_read_reg_1246 <= B_6_1_dout;
        B_6_2_read_reg_1251 <= B_6_2_dout;
        B_6_3_read_reg_1256 <= B_6_3_dout;
        B_6_4_read_reg_1261 <= B_6_4_dout;
        B_6_5_read_reg_1266 <= B_6_5_dout;
        B_6_6_read_reg_1271 <= B_6_6_dout;
        B_6_7_read_reg_1276 <= B_6_7_dout;
        B_7_0_read_reg_1281 <= B_7_0_dout;
        B_7_1_read_reg_1286 <= B_7_1_dout;
        B_7_2_read_reg_1291 <= B_7_2_dout;
        B_7_3_read_reg_1296 <= B_7_3_dout;
        B_7_4_read_reg_1301 <= B_7_4_dout;
        B_7_5_read_reg_1306 <= B_7_5_dout;
        B_7_6_read_reg_1311 <= B_7_6_dout;
        B_7_7_read_reg_1316 <= B_7_7_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it1 <= exitcond1_i_reg_1321;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it1 <= tmp_21_reg_1330;
        exitcond1_i_reg_1321 <= exitcond1_i_fu_832_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44))) begin
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it10 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it9;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it11 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it10;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it12 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it11;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it13 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it12;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it14 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it13;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it15 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it14;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it16 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it15;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it17 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it16;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it18 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it17;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it19 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it18;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it2 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it1;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it20 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it19;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it21 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it20;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it22 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it21;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it23 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it22;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it24 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it23;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it25 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it24;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it26 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it25;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it27 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it26;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it28 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it27;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it29 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it28;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it3 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it2;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it30 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it29;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it31 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it30;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it32 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it31;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it33 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it32;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it34 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it33;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it35 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it34;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it36 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it35;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it37 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it36;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it38 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it37;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it39 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it38;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it4 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it3;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it40 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it39;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it41 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it40;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it42 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it41;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it42;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it5 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it4;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it6 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it5;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it7 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it6;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it8 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it7;
        ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it9 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it8;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it10 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it9;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it11 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it10;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it12 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it11;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it13 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it12;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it14 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it13;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it15 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it14;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it16 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it15;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it17 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it16;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it18 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it17;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it19 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it18;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it2 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it1;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it20 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it19;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it21 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it20;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it22 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it21;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it23 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it22;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it24 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it23;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it25 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it24;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it26 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it25;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it27 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it26;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it28 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it27;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it29 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it28;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it3 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it2;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it30 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it29;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it31 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it30;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it32 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it31;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it33 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it32;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it34 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it33;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it4 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it3;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it5 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it4;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it6 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it5;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it7 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it6;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it8 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it7;
        ap_reg_ppstg_tmp_21_reg_1330_pp0_it9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it8;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it12))) begin
        temp_2_1_i_reg_1371 <= grp_fu_772_p2;
        tmp_4_2_i_reg_1376 <= grp_fu_808_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it17))) begin
        temp_2_2_i_reg_1386 <= grp_fu_776_p2;
        tmp_4_3_i_reg_1391 <= grp_fu_812_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it22))) begin
        temp_2_3_i_reg_1401 <= grp_fu_780_p2;
        tmp_4_4_i_reg_1406 <= grp_fu_816_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it27))) begin
        temp_2_4_i_reg_1416 <= grp_fu_784_p2;
        tmp_4_5_i_reg_1421 <= grp_fu_820_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it32))) begin
        temp_2_5_i_reg_1431 <= grp_fu_788_p2;
        tmp_4_6_i_reg_1436 <= grp_fu_824_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it37))) begin
        temp_2_6_i_reg_1446 <= grp_fu_792_p2;
        tmp_4_7_i_reg_1451 <= grp_fu_828_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it42))) begin
        temp_2_7_i_reg_1456 <= grp_fu_796_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it7))) begin
        temp_2_i_reg_1356 <= grp_fu_767_p2;
        tmp_4_1_i_reg_1361 <= grp_fu_804_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (exitcond1_i_fu_832_p2 == ap_const_lv1_0))) begin
        tmp_21_reg_1330 <= tmp_21_fu_844_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it2))) begin
        tmp_4_i_reg_1346 <= grp_fu_800_p2;
    end
end

/// B_0_0_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_0_read = ap_const_logic_1;
    end else begin
        B_0_0_read = ap_const_logic_0;
    end
end

/// B_0_1_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_1_read = ap_const_logic_1;
    end else begin
        B_0_1_read = ap_const_logic_0;
    end
end

/// B_0_2_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_2_read = ap_const_logic_1;
    end else begin
        B_0_2_read = ap_const_logic_0;
    end
end

/// B_0_3_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_3_read = ap_const_logic_1;
    end else begin
        B_0_3_read = ap_const_logic_0;
    end
end

/// B_0_4_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_4_read = ap_const_logic_1;
    end else begin
        B_0_4_read = ap_const_logic_0;
    end
end

/// B_0_5_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_5_read = ap_const_logic_1;
    end else begin
        B_0_5_read = ap_const_logic_0;
    end
end

/// B_0_6_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_6_read = ap_const_logic_1;
    end else begin
        B_0_6_read = ap_const_logic_0;
    end
end

/// B_0_7_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_0_7_read = ap_const_logic_1;
    end else begin
        B_0_7_read = ap_const_logic_0;
    end
end

/// B_1_0_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_1_0_read = ap_const_logic_1;
    end else begin
        B_1_0_read = ap_const_logic_0;
    end
end

/// B_1_1_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_1_1_read = ap_const_logic_1;
    end else begin
        B_1_1_read = ap_const_logic_0;
    end
end

/// B_1_2_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_1_2_read = ap_const_logic_1;
    end else begin
        B_1_2_read = ap_const_logic_0;
    end
end

/// B_1_3_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_1_3_read = ap_const_logic_1;
    end else begin
        B_1_3_read = ap_const_logic_0;
    end
end

/// B_1_4_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_1_4_read = ap_const_logic_1;
    end else begin
        B_1_4_read = ap_const_logic_0;
    end
end

/// B_1_5_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_1_5_read = ap_const_logic_1;
    end else begin
        B_1_5_read = ap_const_logic_0;
    end
end

/// B_1_6_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_1_6_read = ap_const_logic_1;
    end else begin
        B_1_6_read = ap_const_logic_0;
    end
end

/// B_1_7_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_1_7_read = ap_const_logic_1;
    end else begin
        B_1_7_read = ap_const_logic_0;
    end
end

/// B_2_0_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_2_0_read = ap_const_logic_1;
    end else begin
        B_2_0_read = ap_const_logic_0;
    end
end

/// B_2_1_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_2_1_read = ap_const_logic_1;
    end else begin
        B_2_1_read = ap_const_logic_0;
    end
end

/// B_2_2_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_2_2_read = ap_const_logic_1;
    end else begin
        B_2_2_read = ap_const_logic_0;
    end
end

/// B_2_3_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_2_3_read = ap_const_logic_1;
    end else begin
        B_2_3_read = ap_const_logic_0;
    end
end

/// B_2_4_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_2_4_read = ap_const_logic_1;
    end else begin
        B_2_4_read = ap_const_logic_0;
    end
end

/// B_2_5_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_2_5_read = ap_const_logic_1;
    end else begin
        B_2_5_read = ap_const_logic_0;
    end
end

/// B_2_6_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_2_6_read = ap_const_logic_1;
    end else begin
        B_2_6_read = ap_const_logic_0;
    end
end

/// B_2_7_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_2_7_read = ap_const_logic_1;
    end else begin
        B_2_7_read = ap_const_logic_0;
    end
end

/// B_3_0_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_3_0_read = ap_const_logic_1;
    end else begin
        B_3_0_read = ap_const_logic_0;
    end
end

/// B_3_1_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_3_1_read = ap_const_logic_1;
    end else begin
        B_3_1_read = ap_const_logic_0;
    end
end

/// B_3_2_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_3_2_read = ap_const_logic_1;
    end else begin
        B_3_2_read = ap_const_logic_0;
    end
end

/// B_3_3_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_3_3_read = ap_const_logic_1;
    end else begin
        B_3_3_read = ap_const_logic_0;
    end
end

/// B_3_4_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_3_4_read = ap_const_logic_1;
    end else begin
        B_3_4_read = ap_const_logic_0;
    end
end

/// B_3_5_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_3_5_read = ap_const_logic_1;
    end else begin
        B_3_5_read = ap_const_logic_0;
    end
end

/// B_3_6_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_3_6_read = ap_const_logic_1;
    end else begin
        B_3_6_read = ap_const_logic_0;
    end
end

/// B_3_7_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_3_7_read = ap_const_logic_1;
    end else begin
        B_3_7_read = ap_const_logic_0;
    end
end

/// B_4_0_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_4_0_read = ap_const_logic_1;
    end else begin
        B_4_0_read = ap_const_logic_0;
    end
end

/// B_4_1_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_4_1_read = ap_const_logic_1;
    end else begin
        B_4_1_read = ap_const_logic_0;
    end
end

/// B_4_2_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_4_2_read = ap_const_logic_1;
    end else begin
        B_4_2_read = ap_const_logic_0;
    end
end

/// B_4_3_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_4_3_read = ap_const_logic_1;
    end else begin
        B_4_3_read = ap_const_logic_0;
    end
end

/// B_4_4_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_4_4_read = ap_const_logic_1;
    end else begin
        B_4_4_read = ap_const_logic_0;
    end
end

/// B_4_5_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_4_5_read = ap_const_logic_1;
    end else begin
        B_4_5_read = ap_const_logic_0;
    end
end

/// B_4_6_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_4_6_read = ap_const_logic_1;
    end else begin
        B_4_6_read = ap_const_logic_0;
    end
end

/// B_4_7_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_4_7_read = ap_const_logic_1;
    end else begin
        B_4_7_read = ap_const_logic_0;
    end
end

/// B_5_0_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_5_0_read = ap_const_logic_1;
    end else begin
        B_5_0_read = ap_const_logic_0;
    end
end

/// B_5_1_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_5_1_read = ap_const_logic_1;
    end else begin
        B_5_1_read = ap_const_logic_0;
    end
end

/// B_5_2_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_5_2_read = ap_const_logic_1;
    end else begin
        B_5_2_read = ap_const_logic_0;
    end
end

/// B_5_3_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_5_3_read = ap_const_logic_1;
    end else begin
        B_5_3_read = ap_const_logic_0;
    end
end

/// B_5_4_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_5_4_read = ap_const_logic_1;
    end else begin
        B_5_4_read = ap_const_logic_0;
    end
end

/// B_5_5_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_5_5_read = ap_const_logic_1;
    end else begin
        B_5_5_read = ap_const_logic_0;
    end
end

/// B_5_6_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_5_6_read = ap_const_logic_1;
    end else begin
        B_5_6_read = ap_const_logic_0;
    end
end

/// B_5_7_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_5_7_read = ap_const_logic_1;
    end else begin
        B_5_7_read = ap_const_logic_0;
    end
end

/// B_6_0_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_6_0_read = ap_const_logic_1;
    end else begin
        B_6_0_read = ap_const_logic_0;
    end
end

/// B_6_1_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_6_1_read = ap_const_logic_1;
    end else begin
        B_6_1_read = ap_const_logic_0;
    end
end

/// B_6_2_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_6_2_read = ap_const_logic_1;
    end else begin
        B_6_2_read = ap_const_logic_0;
    end
end

/// B_6_3_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_6_3_read = ap_const_logic_1;
    end else begin
        B_6_3_read = ap_const_logic_0;
    end
end

/// B_6_4_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_6_4_read = ap_const_logic_1;
    end else begin
        B_6_4_read = ap_const_logic_0;
    end
end

/// B_6_5_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_6_5_read = ap_const_logic_1;
    end else begin
        B_6_5_read = ap_const_logic_0;
    end
end

/// B_6_6_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_6_6_read = ap_const_logic_1;
    end else begin
        B_6_6_read = ap_const_logic_0;
    end
end

/// B_6_7_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_6_7_read = ap_const_logic_1;
    end else begin
        B_6_7_read = ap_const_logic_0;
    end
end

/// B_7_0_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_7_0_read = ap_const_logic_1;
    end else begin
        B_7_0_read = ap_const_logic_0;
    end
end

/// B_7_1_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_7_1_read = ap_const_logic_1;
    end else begin
        B_7_1_read = ap_const_logic_0;
    end
end

/// B_7_2_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_7_2_read = ap_const_logic_1;
    end else begin
        B_7_2_read = ap_const_logic_0;
    end
end

/// B_7_3_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_7_3_read = ap_const_logic_1;
    end else begin
        B_7_3_read = ap_const_logic_0;
    end
end

/// B_7_4_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_7_4_read = ap_const_logic_1;
    end else begin
        B_7_4_read = ap_const_logic_0;
    end
end

/// B_7_5_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_7_5_read = ap_const_logic_1;
    end else begin
        B_7_5_read = ap_const_logic_0;
    end
end

/// B_7_6_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_7_6_read = ap_const_logic_1;
    end else begin
        B_7_6_read = ap_const_logic_0;
    end
end

/// B_7_7_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_432)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_432)) begin
        B_7_7_read = ap_const_logic_1;
    end else begin
        B_7_7_read = ap_const_logic_0;
    end
end

/// C_write assign process. ///
always @ (ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        C_write = ap_const_logic_1;
    end else begin
        C_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st47_fsm_2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st47_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st47_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st47_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_584)
begin
    if (ap_sig_bdd_584) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st47_fsm_2 assign process. ///
always @ (ap_sig_bdd_1268)
begin
    if (ap_sig_bdd_1268) begin
        ap_sig_cseq_ST_st47_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st47_fsm_2 = ap_const_logic_0;
    end
end

/// grp_fu_767_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_767_ce = ap_const_logic_1;
    end else begin
        grp_fu_767_ce = ap_const_logic_0;
    end
end

/// grp_fu_772_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_772_ce = ap_const_logic_1;
    end else begin
        grp_fu_772_ce = ap_const_logic_0;
    end
end

/// grp_fu_776_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_776_ce = ap_const_logic_1;
    end else begin
        grp_fu_776_ce = ap_const_logic_0;
    end
end

/// grp_fu_780_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_780_ce = ap_const_logic_1;
    end else begin
        grp_fu_780_ce = ap_const_logic_0;
    end
end

/// grp_fu_784_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_784_ce = ap_const_logic_1;
    end else begin
        grp_fu_784_ce = ap_const_logic_0;
    end
end

/// grp_fu_788_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_788_ce = ap_const_logic_1;
    end else begin
        grp_fu_788_ce = ap_const_logic_0;
    end
end

/// grp_fu_792_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_792_ce = ap_const_logic_1;
    end else begin
        grp_fu_792_ce = ap_const_logic_0;
    end
end

/// grp_fu_796_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_796_ce = ap_const_logic_1;
    end else begin
        grp_fu_796_ce = ap_const_logic_0;
    end
end

/// grp_fu_800_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_800_ce = ap_const_logic_1;
    end else begin
        grp_fu_800_ce = ap_const_logic_0;
    end
end

/// grp_fu_804_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_804_ce = ap_const_logic_1;
    end else begin
        grp_fu_804_ce = ap_const_logic_0;
    end
end

/// grp_fu_808_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_808_ce = ap_const_logic_1;
    end else begin
        grp_fu_808_ce = ap_const_logic_0;
    end
end

/// grp_fu_812_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_812_ce = ap_const_logic_1;
    end else begin
        grp_fu_812_ce = ap_const_logic_0;
    end
end

/// grp_fu_816_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_816_ce = ap_const_logic_1;
    end else begin
        grp_fu_816_ce = ap_const_logic_0;
    end
end

/// grp_fu_820_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_820_ce = ap_const_logic_1;
    end else begin
        grp_fu_820_ce = ap_const_logic_0;
    end
end

/// grp_fu_824_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_824_ce = ap_const_logic_1;
    end else begin
        grp_fu_824_ce = ap_const_logic_0;
    end
end

/// grp_fu_828_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)))) begin
        grp_fu_828_ce = ap_const_logic_1;
    end else begin
        grp_fu_828_ce = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_432 or exitcond1_i_fu_832_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it43 or ap_sig_bdd_679 or ap_reg_ppiten_pp0_it44)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_432) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it44) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it43)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & ~(exitcond1_i_fu_832_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it44) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it43)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_679 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it44)) & ~(exitcond1_i_fu_832_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st47_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st47_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_din = temp_2_7_i_reg_1456;

/// ap_sig_bdd_1268 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_1268 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_432 assign process. ///
always @ (ap_start or ap_done_reg or B_0_0_empty_n or B_0_1_empty_n or B_0_2_empty_n or B_0_3_empty_n or B_0_4_empty_n or B_0_5_empty_n or B_0_6_empty_n or B_0_7_empty_n or B_1_0_empty_n or B_1_1_empty_n or B_1_2_empty_n or B_1_3_empty_n or B_1_4_empty_n or B_1_5_empty_n or B_1_6_empty_n or B_1_7_empty_n or B_2_0_empty_n or B_2_1_empty_n or B_2_2_empty_n or B_2_3_empty_n or B_2_4_empty_n or B_2_5_empty_n or B_2_6_empty_n or B_2_7_empty_n or B_3_0_empty_n or B_3_1_empty_n or B_3_2_empty_n or B_3_3_empty_n or B_3_4_empty_n or B_3_5_empty_n or B_3_6_empty_n or B_3_7_empty_n or B_4_0_empty_n or B_4_1_empty_n or B_4_2_empty_n or B_4_3_empty_n or B_4_4_empty_n or B_4_5_empty_n or B_4_6_empty_n or B_4_7_empty_n or B_5_0_empty_n or B_5_1_empty_n or B_5_2_empty_n or B_5_3_empty_n or B_5_4_empty_n or B_5_5_empty_n or B_5_6_empty_n or B_5_7_empty_n or B_6_0_empty_n or B_6_1_empty_n or B_6_2_empty_n or B_6_3_empty_n or B_6_4_empty_n or B_6_5_empty_n or B_6_6_empty_n or B_6_7_empty_n or B_7_0_empty_n or B_7_1_empty_n or B_7_2_empty_n or B_7_3_empty_n or B_7_4_empty_n or B_7_5_empty_n or B_7_6_empty_n or B_7_7_empty_n)
begin
    ap_sig_bdd_432 = ((B_0_0_empty_n == ap_const_logic_0) | (B_0_1_empty_n == ap_const_logic_0) | (B_0_2_empty_n == ap_const_logic_0) | (B_0_3_empty_n == ap_const_logic_0) | (B_0_4_empty_n == ap_const_logic_0) | (B_0_5_empty_n == ap_const_logic_0) | (B_0_6_empty_n == ap_const_logic_0) | (B_0_7_empty_n == ap_const_logic_0) | (B_1_0_empty_n == ap_const_logic_0) | (B_1_1_empty_n == ap_const_logic_0) | (B_1_2_empty_n == ap_const_logic_0) | (B_1_3_empty_n == ap_const_logic_0) | (B_1_4_empty_n == ap_const_logic_0) | (B_1_5_empty_n == ap_const_logic_0) | (B_1_6_empty_n == ap_const_logic_0) | (B_1_7_empty_n == ap_const_logic_0) | (B_2_0_empty_n == ap_const_logic_0) | (B_2_1_empty_n == ap_const_logic_0) | (B_2_2_empty_n == ap_const_logic_0) | (B_2_3_empty_n == ap_const_logic_0) | (B_2_4_empty_n == ap_const_logic_0) | (B_2_5_empty_n == ap_const_logic_0) | (B_2_6_empty_n == ap_const_logic_0) | (B_2_7_empty_n == ap_const_logic_0) | (B_3_0_empty_n == ap_const_logic_0) | (B_3_1_empty_n == ap_const_logic_0) | (B_3_2_empty_n == ap_const_logic_0) | (B_3_3_empty_n == ap_const_logic_0) | (B_3_4_empty_n == ap_const_logic_0) | (B_3_5_empty_n == ap_const_logic_0) | (B_3_6_empty_n == ap_const_logic_0) | (B_3_7_empty_n == ap_const_logic_0) | (B_4_0_empty_n == ap_const_logic_0) | (B_4_1_empty_n == ap_const_logic_0) | (B_4_2_empty_n == ap_const_logic_0) | (B_4_3_empty_n == ap_const_logic_0) | (B_4_4_empty_n == ap_const_logic_0) | (B_4_5_empty_n == ap_const_logic_0) | (B_4_6_empty_n == ap_const_logic_0) | (B_4_7_empty_n == ap_const_logic_0) | (B_5_0_empty_n == ap_const_logic_0) | (B_5_1_empty_n == ap_const_logic_0) | (B_5_2_empty_n == ap_const_logic_0) | (B_5_3_empty_n == ap_const_logic_0) | (B_5_4_empty_n == ap_const_logic_0) | (B_5_5_empty_n == ap_const_logic_0) | (B_5_6_empty_n == ap_const_logic_0) | (B_5_7_empty_n == ap_const_logic_0) | (B_6_0_empty_n == ap_const_logic_0) | (B_6_1_empty_n == ap_const_logic_0) | (B_6_2_empty_n == ap_const_logic_0) | (B_6_3_empty_n == ap_const_logic_0) | (B_6_4_empty_n == ap_const_logic_0) | (B_6_5_empty_n == ap_const_logic_0) | (B_6_6_empty_n == ap_const_logic_0) | (B_6_7_empty_n == ap_const_logic_0) | (B_7_0_empty_n == ap_const_logic_0) | (B_7_1_empty_n == ap_const_logic_0) | (B_7_2_empty_n == ap_const_logic_0) | (B_7_3_empty_n == ap_const_logic_0) | (B_7_4_empty_n == ap_const_logic_0) | (B_7_5_empty_n == ap_const_logic_0) | (B_7_6_empty_n == ap_const_logic_0) | (B_7_7_empty_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_584 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_584 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_679 assign process. ///
always @ (C_full_n or ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43)
begin
    ap_sig_bdd_679 = ((C_full_n == ap_const_logic_0) & (ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43 == ap_const_lv1_0));
end
assign exitcond1_i_fu_832_p2 = (j_i_reg_755 == ap_const_lv4_8? 1'b1: 1'b0);
assign grp_fu_767_p0 = tmp_4_i_reg_1346;
assign grp_fu_767_p1 = ap_const_lv32_0;
assign grp_fu_772_p0 = temp_2_i_reg_1356;
assign grp_fu_772_p1 = tmp_4_1_i_reg_1361;
assign grp_fu_776_p0 = temp_2_1_i_reg_1371;
assign grp_fu_776_p1 = tmp_4_2_i_reg_1376;
assign grp_fu_780_p0 = temp_2_2_i_reg_1386;
assign grp_fu_780_p1 = tmp_4_3_i_reg_1391;
assign grp_fu_784_p0 = temp_2_3_i_reg_1401;
assign grp_fu_784_p1 = tmp_4_4_i_reg_1406;
assign grp_fu_788_p0 = temp_2_4_i_reg_1416;
assign grp_fu_788_p1 = tmp_4_5_i_reg_1421;
assign grp_fu_792_p0 = temp_2_5_i_reg_1431;
assign grp_fu_792_p1 = tmp_4_6_i_reg_1436;
assign grp_fu_796_p0 = temp_2_6_i_reg_1446;
assign grp_fu_796_p1 = tmp_4_7_i_reg_1451;
assign grp_fu_800_p0 = tmp_fu_848_p10;
assign grp_fu_800_p1 = p_read;
assign grp_fu_804_p0 = tmp_s_fu_863_p10;
assign grp_fu_804_p1 = p_read1;
assign grp_fu_808_p0 = tmp_15_fu_877_p10;
assign grp_fu_808_p1 = p_read2;
assign grp_fu_812_p0 = tmp_16_fu_891_p10;
assign grp_fu_812_p1 = p_read3;
assign grp_fu_816_p0 = tmp_17_fu_905_p10;
assign grp_fu_816_p1 = p_read4;
assign grp_fu_820_p0 = tmp_18_fu_919_p10;
assign grp_fu_820_p1 = p_read5;
assign grp_fu_824_p0 = tmp_19_fu_933_p10;
assign grp_fu_824_p1 = p_read6;
assign grp_fu_828_p0 = tmp_20_fu_947_p10;
assign grp_fu_828_p1 = p_read7;
assign j_fu_838_p2 = (j_i_reg_755 + ap_const_lv4_1);
assign tmp_15_fu_877_p1 = B_2_0_read_reg_1081;
assign tmp_15_fu_877_p2 = B_2_1_read_reg_1086;
assign tmp_15_fu_877_p3 = B_2_2_read_reg_1091;
assign tmp_15_fu_877_p4 = B_2_3_read_reg_1096;
assign tmp_15_fu_877_p5 = B_2_4_read_reg_1101;
assign tmp_15_fu_877_p6 = B_2_5_read_reg_1106;
assign tmp_15_fu_877_p7 = B_2_6_read_reg_1111;
assign tmp_15_fu_877_p8 = B_2_7_read_reg_1116;
assign tmp_15_fu_877_p9 = ap_reg_ppstg_tmp_21_reg_1330_pp0_it9;
assign tmp_16_fu_891_p1 = B_3_0_read_reg_1121;
assign tmp_16_fu_891_p2 = B_3_1_read_reg_1126;
assign tmp_16_fu_891_p3 = B_3_2_read_reg_1131;
assign tmp_16_fu_891_p4 = B_3_3_read_reg_1136;
assign tmp_16_fu_891_p5 = B_3_4_read_reg_1141;
assign tmp_16_fu_891_p6 = B_3_5_read_reg_1146;
assign tmp_16_fu_891_p7 = B_3_6_read_reg_1151;
assign tmp_16_fu_891_p8 = B_3_7_read_reg_1156;
assign tmp_16_fu_891_p9 = ap_reg_ppstg_tmp_21_reg_1330_pp0_it14;
assign tmp_17_fu_905_p1 = B_4_0_read_reg_1161;
assign tmp_17_fu_905_p2 = B_4_1_read_reg_1166;
assign tmp_17_fu_905_p3 = B_4_2_read_reg_1171;
assign tmp_17_fu_905_p4 = B_4_3_read_reg_1176;
assign tmp_17_fu_905_p5 = B_4_4_read_reg_1181;
assign tmp_17_fu_905_p6 = B_4_5_read_reg_1186;
assign tmp_17_fu_905_p7 = B_4_6_read_reg_1191;
assign tmp_17_fu_905_p8 = B_4_7_read_reg_1196;
assign tmp_17_fu_905_p9 = ap_reg_ppstg_tmp_21_reg_1330_pp0_it19;
assign tmp_18_fu_919_p1 = B_5_0_read_reg_1201;
assign tmp_18_fu_919_p2 = B_5_1_read_reg_1206;
assign tmp_18_fu_919_p3 = B_5_2_read_reg_1211;
assign tmp_18_fu_919_p4 = B_5_3_read_reg_1216;
assign tmp_18_fu_919_p5 = B_5_4_read_reg_1221;
assign tmp_18_fu_919_p6 = B_5_5_read_reg_1226;
assign tmp_18_fu_919_p7 = B_5_6_read_reg_1231;
assign tmp_18_fu_919_p8 = B_5_7_read_reg_1236;
assign tmp_18_fu_919_p9 = ap_reg_ppstg_tmp_21_reg_1330_pp0_it24;
assign tmp_19_fu_933_p1 = B_6_0_read_reg_1241;
assign tmp_19_fu_933_p2 = B_6_1_read_reg_1246;
assign tmp_19_fu_933_p3 = B_6_2_read_reg_1251;
assign tmp_19_fu_933_p4 = B_6_3_read_reg_1256;
assign tmp_19_fu_933_p5 = B_6_4_read_reg_1261;
assign tmp_19_fu_933_p6 = B_6_5_read_reg_1266;
assign tmp_19_fu_933_p7 = B_6_6_read_reg_1271;
assign tmp_19_fu_933_p8 = B_6_7_read_reg_1276;
assign tmp_19_fu_933_p9 = ap_reg_ppstg_tmp_21_reg_1330_pp0_it29;
assign tmp_20_fu_947_p1 = B_7_0_read_reg_1281;
assign tmp_20_fu_947_p2 = B_7_1_read_reg_1286;
assign tmp_20_fu_947_p3 = B_7_2_read_reg_1291;
assign tmp_20_fu_947_p4 = B_7_3_read_reg_1296;
assign tmp_20_fu_947_p5 = B_7_4_read_reg_1301;
assign tmp_20_fu_947_p6 = B_7_5_read_reg_1306;
assign tmp_20_fu_947_p7 = B_7_6_read_reg_1311;
assign tmp_20_fu_947_p8 = B_7_7_read_reg_1316;
assign tmp_20_fu_947_p9 = ap_reg_ppstg_tmp_21_reg_1330_pp0_it34;
assign tmp_21_fu_844_p1 = j_i_reg_755[2:0];
assign tmp_fu_848_p1 = B_0_0_read_reg_1001;
assign tmp_fu_848_p2 = B_0_1_read_reg_1006;
assign tmp_fu_848_p3 = B_0_2_read_reg_1011;
assign tmp_fu_848_p4 = B_0_3_read_reg_1016;
assign tmp_fu_848_p5 = B_0_4_read_reg_1021;
assign tmp_fu_848_p6 = B_0_5_read_reg_1026;
assign tmp_fu_848_p7 = B_0_6_read_reg_1031;
assign tmp_fu_848_p8 = B_0_7_read_reg_1036;
assign tmp_fu_848_p9 = j_i_reg_755[2:0];
assign tmp_s_fu_863_p1 = B_1_0_read_reg_1041;
assign tmp_s_fu_863_p2 = B_1_1_read_reg_1046;
assign tmp_s_fu_863_p3 = B_1_2_read_reg_1051;
assign tmp_s_fu_863_p4 = B_1_3_read_reg_1056;
assign tmp_s_fu_863_p5 = B_1_4_read_reg_1061;
assign tmp_s_fu_863_p6 = B_1_5_read_reg_1066;
assign tmp_s_fu_863_p7 = B_1_6_read_reg_1071;
assign tmp_s_fu_863_p8 = B_1_7_read_reg_1076;
assign tmp_s_fu_863_p9 = ap_reg_ppstg_tmp_21_reg_1330_pp0_it4;


endmodule //DCT_MAT_Multiply2_Loop_Col_proc291

