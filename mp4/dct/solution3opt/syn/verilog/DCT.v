// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DCT,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.220000,HLS_SYN_LAT=302,HLS_SYN_TPT=303,HLS_SYN_MEM=1,HLS_SYN_DSP=80,HLS_SYN_FF=15272,HLS_SYN_LUT=28920}" *)

module DCT (
        X_dout,
        X_empty_n,
        X_read,
        function_r,
        Y_din,
        Y_full_n,
        Y_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;

input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
input  [7:0] function_r;
output  [31:0] Y_din;
input   Y_full_n;
output   Y_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire    DCT_Block_proc_U0_ap_start;
wire    DCT_Block_proc_U0_ap_done;
wire    DCT_Block_proc_U0_ap_continue;
wire    DCT_Block_proc_U0_ap_idle;
wire    DCT_Block_proc_U0_ap_ready;
wire   [7:0] DCT_Block_proc_U0_function_r;
wire   [31:0] DCT_Block_proc_U0_X_dout;
wire    DCT_Block_proc_U0_X_empty_n;
wire    DCT_Block_proc_U0_X_read;
wire   [31:0] DCT_Block_proc_U0_Y_din;
wire    DCT_Block_proc_U0_Y_full_n;
wire    DCT_Block_proc_U0_Y_write;
wire    ap_sig_hs_continue;
reg    ap_reg_procdone_DCT_Block_proc_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_CS;
wire    ap_sig_top_allready;


DCT_Block_proc DCT_Block_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( DCT_Block_proc_U0_ap_start ),
    .ap_done( DCT_Block_proc_U0_ap_done ),
    .ap_continue( DCT_Block_proc_U0_ap_continue ),
    .ap_idle( DCT_Block_proc_U0_ap_idle ),
    .ap_ready( DCT_Block_proc_U0_ap_ready ),
    .function_r( DCT_Block_proc_U0_function_r ),
    .X_dout( DCT_Block_proc_U0_X_dout ),
    .X_empty_n( DCT_Block_proc_U0_X_empty_n ),
    .X_read( DCT_Block_proc_U0_X_read ),
    .Y_din( DCT_Block_proc_U0_Y_din ),
    .Y_full_n( DCT_Block_proc_U0_Y_full_n ),
    .Y_write( DCT_Block_proc_U0_Y_write )
);



/// ap_reg_procdone_DCT_Block_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_DCT_Block_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_DCT_Block_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_DCT_Block_proc_U0 <= ap_const_logic_0;
        end else if ((DCT_Block_proc_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_DCT_Block_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// ap_idle assign process. ///
always @ (DCT_Block_proc_U0_ap_idle)
begin
    if ((DCT_Block_proc_U0_ap_idle == ap_const_logic_1)) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (DCT_Block_proc_U0_ap_done)
begin
    if ((DCT_Block_proc_U0_ap_done == ap_const_logic_1)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end
assign DCT_Block_proc_U0_X_dout = X_dout;
assign DCT_Block_proc_U0_X_empty_n = X_empty_n;
assign DCT_Block_proc_U0_Y_full_n = Y_full_n;
assign DCT_Block_proc_U0_ap_continue = ap_sig_hs_continue;
assign DCT_Block_proc_U0_ap_start = ap_start;
assign DCT_Block_proc_U0_function_r = function_r;
assign X_read = DCT_Block_proc_U0_X_read;
assign Y_din = DCT_Block_proc_U0_Y_din;
assign Y_write = DCT_Block_proc_U0_Y_write;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_const_logic_1;
assign ap_sig_top_allready = DCT_Block_proc_U0_ap_ready;


endmodule //DCT

