-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_MAT_Multiply2_Loop_Col_proc291 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_0_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_0_empty_n : IN STD_LOGIC;
    B_0_0_read : OUT STD_LOGIC;
    B_0_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_1_empty_n : IN STD_LOGIC;
    B_0_1_read : OUT STD_LOGIC;
    B_0_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_2_empty_n : IN STD_LOGIC;
    B_0_2_read : OUT STD_LOGIC;
    B_0_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_3_empty_n : IN STD_LOGIC;
    B_0_3_read : OUT STD_LOGIC;
    B_0_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_4_empty_n : IN STD_LOGIC;
    B_0_4_read : OUT STD_LOGIC;
    B_0_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_5_empty_n : IN STD_LOGIC;
    B_0_5_read : OUT STD_LOGIC;
    B_0_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_6_empty_n : IN STD_LOGIC;
    B_0_6_read : OUT STD_LOGIC;
    B_0_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_7_empty_n : IN STD_LOGIC;
    B_0_7_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_0_empty_n : IN STD_LOGIC;
    B_1_0_read : OUT STD_LOGIC;
    B_1_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_1_empty_n : IN STD_LOGIC;
    B_1_1_read : OUT STD_LOGIC;
    B_1_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_2_empty_n : IN STD_LOGIC;
    B_1_2_read : OUT STD_LOGIC;
    B_1_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_3_empty_n : IN STD_LOGIC;
    B_1_3_read : OUT STD_LOGIC;
    B_1_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_4_empty_n : IN STD_LOGIC;
    B_1_4_read : OUT STD_LOGIC;
    B_1_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_5_empty_n : IN STD_LOGIC;
    B_1_5_read : OUT STD_LOGIC;
    B_1_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_6_empty_n : IN STD_LOGIC;
    B_1_6_read : OUT STD_LOGIC;
    B_1_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_7_empty_n : IN STD_LOGIC;
    B_1_7_read : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_0_empty_n : IN STD_LOGIC;
    B_2_0_read : OUT STD_LOGIC;
    B_2_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_1_empty_n : IN STD_LOGIC;
    B_2_1_read : OUT STD_LOGIC;
    B_2_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_2_empty_n : IN STD_LOGIC;
    B_2_2_read : OUT STD_LOGIC;
    B_2_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_3_empty_n : IN STD_LOGIC;
    B_2_3_read : OUT STD_LOGIC;
    B_2_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_4_empty_n : IN STD_LOGIC;
    B_2_4_read : OUT STD_LOGIC;
    B_2_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_5_empty_n : IN STD_LOGIC;
    B_2_5_read : OUT STD_LOGIC;
    B_2_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_6_empty_n : IN STD_LOGIC;
    B_2_6_read : OUT STD_LOGIC;
    B_2_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_7_empty_n : IN STD_LOGIC;
    B_2_7_read : OUT STD_LOGIC;
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_0_empty_n : IN STD_LOGIC;
    B_3_0_read : OUT STD_LOGIC;
    B_3_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_1_empty_n : IN STD_LOGIC;
    B_3_1_read : OUT STD_LOGIC;
    B_3_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_2_empty_n : IN STD_LOGIC;
    B_3_2_read : OUT STD_LOGIC;
    B_3_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_3_empty_n : IN STD_LOGIC;
    B_3_3_read : OUT STD_LOGIC;
    B_3_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_4_empty_n : IN STD_LOGIC;
    B_3_4_read : OUT STD_LOGIC;
    B_3_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_5_empty_n : IN STD_LOGIC;
    B_3_5_read : OUT STD_LOGIC;
    B_3_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_6_empty_n : IN STD_LOGIC;
    B_3_6_read : OUT STD_LOGIC;
    B_3_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_7_empty_n : IN STD_LOGIC;
    B_3_7_read : OUT STD_LOGIC;
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_0_empty_n : IN STD_LOGIC;
    B_4_0_read : OUT STD_LOGIC;
    B_4_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_1_empty_n : IN STD_LOGIC;
    B_4_1_read : OUT STD_LOGIC;
    B_4_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_2_empty_n : IN STD_LOGIC;
    B_4_2_read : OUT STD_LOGIC;
    B_4_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_3_empty_n : IN STD_LOGIC;
    B_4_3_read : OUT STD_LOGIC;
    B_4_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_4_empty_n : IN STD_LOGIC;
    B_4_4_read : OUT STD_LOGIC;
    B_4_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_5_empty_n : IN STD_LOGIC;
    B_4_5_read : OUT STD_LOGIC;
    B_4_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_6_empty_n : IN STD_LOGIC;
    B_4_6_read : OUT STD_LOGIC;
    B_4_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_7_empty_n : IN STD_LOGIC;
    B_4_7_read : OUT STD_LOGIC;
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_0_empty_n : IN STD_LOGIC;
    B_5_0_read : OUT STD_LOGIC;
    B_5_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_1_empty_n : IN STD_LOGIC;
    B_5_1_read : OUT STD_LOGIC;
    B_5_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_2_empty_n : IN STD_LOGIC;
    B_5_2_read : OUT STD_LOGIC;
    B_5_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_3_empty_n : IN STD_LOGIC;
    B_5_3_read : OUT STD_LOGIC;
    B_5_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_4_empty_n : IN STD_LOGIC;
    B_5_4_read : OUT STD_LOGIC;
    B_5_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_5_empty_n : IN STD_LOGIC;
    B_5_5_read : OUT STD_LOGIC;
    B_5_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_6_empty_n : IN STD_LOGIC;
    B_5_6_read : OUT STD_LOGIC;
    B_5_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_7_empty_n : IN STD_LOGIC;
    B_5_7_read : OUT STD_LOGIC;
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_0_empty_n : IN STD_LOGIC;
    B_6_0_read : OUT STD_LOGIC;
    B_6_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_1_empty_n : IN STD_LOGIC;
    B_6_1_read : OUT STD_LOGIC;
    B_6_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_2_empty_n : IN STD_LOGIC;
    B_6_2_read : OUT STD_LOGIC;
    B_6_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_3_empty_n : IN STD_LOGIC;
    B_6_3_read : OUT STD_LOGIC;
    B_6_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_4_empty_n : IN STD_LOGIC;
    B_6_4_read : OUT STD_LOGIC;
    B_6_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_5_empty_n : IN STD_LOGIC;
    B_6_5_read : OUT STD_LOGIC;
    B_6_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_6_empty_n : IN STD_LOGIC;
    B_6_6_read : OUT STD_LOGIC;
    B_6_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_7_empty_n : IN STD_LOGIC;
    B_6_7_read : OUT STD_LOGIC;
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_0_empty_n : IN STD_LOGIC;
    B_7_0_read : OUT STD_LOGIC;
    B_7_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_1_empty_n : IN STD_LOGIC;
    B_7_1_read : OUT STD_LOGIC;
    B_7_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_2_empty_n : IN STD_LOGIC;
    B_7_2_read : OUT STD_LOGIC;
    B_7_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_3_empty_n : IN STD_LOGIC;
    B_7_3_read : OUT STD_LOGIC;
    B_7_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_4_empty_n : IN STD_LOGIC;
    B_7_4_read : OUT STD_LOGIC;
    B_7_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_5_empty_n : IN STD_LOGIC;
    B_7_5_read : OUT STD_LOGIC;
    B_7_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_6_empty_n : IN STD_LOGIC;
    B_7_6_read : OUT STD_LOGIC;
    B_7_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_7_empty_n : IN STD_LOGIC;
    B_7_7_read : OUT STD_LOGIC;
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC );
end;


architecture behav of DCT_MAT_Multiply2_Loop_Col_proc291 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st47_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal j_i_reg_755 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_432 : BOOLEAN;
    signal B_0_0_read_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_1_read_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_2_read_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_3_read_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_4_read_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_5_read_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_6_read_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_7_read_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_0_read_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_1_read_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_2_read_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_3_read_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_4_read_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_5_read_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_6_read_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_7_read_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_0_read_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_1_read_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_2_read_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_3_read_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_4_read_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_5_read_reg_1106 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_6_read_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_7_read_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_0_read_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_1_read_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_2_read_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_3_read_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_4_read_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_5_read_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_6_read_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_7_read_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_0_read_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_1_read_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_2_read_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_3_read_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_4_read_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_5_read_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_6_read_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_7_read_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_0_read_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_1_read_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_2_read_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_3_read_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_4_read_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_5_read_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_6_read_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_7_read_reg_1236 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_0_read_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_1_read_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_2_read_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_3_read_reg_1256 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_4_read_reg_1261 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_5_read_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_6_read_reg_1271 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_7_read_reg_1276 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_0_read_reg_1281 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_1_read_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_2_read_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_3_read_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_4_read_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_5_read_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_6_read_reg_1311 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_7_read_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_i_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_i_reg_1321 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_584 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it40 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it41 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it42 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it43 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_679 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it44 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it40 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it41 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it42 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_838_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_844_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_reg_1330 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it5 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it8 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it10 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it11 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it12 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it13 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it14 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it16 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it17 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it22 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it23 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it32 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it33 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_1330_pp0_it34 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_848_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_i_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_i_reg_1361 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_1_i_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_i_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_2_i_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_i_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_3_i_reg_1401 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_i_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_4_i_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_i_reg_1421 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_5_i_reg_1431 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_i_reg_1436 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_6_i_reg_1446 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_i_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_7_i_reg_1456 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_767_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_767_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_772_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_776_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_780_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_784_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_784_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_788_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_792_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_796_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_800_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_800_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_804_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_808_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_812_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_816_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_820_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_824_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_828_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_863_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_877_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_891_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_905_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_fu_919_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_919_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_933_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_933_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_20_fu_947_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_767_ce : STD_LOGIC;
    signal grp_fu_772_ce : STD_LOGIC;
    signal grp_fu_776_ce : STD_LOGIC;
    signal grp_fu_780_ce : STD_LOGIC;
    signal grp_fu_784_ce : STD_LOGIC;
    signal grp_fu_788_ce : STD_LOGIC;
    signal grp_fu_792_ce : STD_LOGIC;
    signal grp_fu_796_ce : STD_LOGIC;
    signal grp_fu_800_ce : STD_LOGIC;
    signal grp_fu_804_ce : STD_LOGIC;
    signal grp_fu_808_ce : STD_LOGIC;
    signal grp_fu_812_ce : STD_LOGIC;
    signal grp_fu_816_ce : STD_LOGIC;
    signal grp_fu_820_ce : STD_LOGIC;
    signal grp_fu_824_ce : STD_LOGIC;
    signal grp_fu_828_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st47_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_1268 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component DCT_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_mux_8to1_sel3_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    DCT_fadd_32ns_32ns_32_5_full_dsp_U583 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_767_p0,
        din1 => grp_fu_767_p1,
        ce => grp_fu_767_ce,
        dout => grp_fu_767_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U584 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_772_p0,
        din1 => grp_fu_772_p1,
        ce => grp_fu_772_ce,
        dout => grp_fu_772_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U585 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_776_p0,
        din1 => grp_fu_776_p1,
        ce => grp_fu_776_ce,
        dout => grp_fu_776_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U586 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_780_p0,
        din1 => grp_fu_780_p1,
        ce => grp_fu_780_ce,
        dout => grp_fu_780_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U587 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_784_p0,
        din1 => grp_fu_784_p1,
        ce => grp_fu_784_ce,
        dout => grp_fu_784_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U588 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_788_p0,
        din1 => grp_fu_788_p1,
        ce => grp_fu_788_ce,
        dout => grp_fu_788_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U589 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_792_p0,
        din1 => grp_fu_792_p1,
        ce => grp_fu_792_ce,
        dout => grp_fu_792_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U590 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_796_p0,
        din1 => grp_fu_796_p1,
        ce => grp_fu_796_ce,
        dout => grp_fu_796_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U591 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_800_p0,
        din1 => grp_fu_800_p1,
        ce => grp_fu_800_ce,
        dout => grp_fu_800_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U592 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_804_p0,
        din1 => grp_fu_804_p1,
        ce => grp_fu_804_ce,
        dout => grp_fu_804_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U593 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_808_p0,
        din1 => grp_fu_808_p1,
        ce => grp_fu_808_ce,
        dout => grp_fu_808_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U594 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_812_p0,
        din1 => grp_fu_812_p1,
        ce => grp_fu_812_ce,
        dout => grp_fu_812_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U595 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_816_p0,
        din1 => grp_fu_816_p1,
        ce => grp_fu_816_ce,
        dout => grp_fu_816_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U596 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_820_p0,
        din1 => grp_fu_820_p1,
        ce => grp_fu_820_ce,
        dout => grp_fu_820_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U597 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_824_p0,
        din1 => grp_fu_824_p1,
        ce => grp_fu_824_ce,
        dout => grp_fu_824_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U598 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_828_p0,
        din1 => grp_fu_828_p1,
        ce => grp_fu_828_ce,
        dout => grp_fu_828_p2);

    DCT_mux_8to1_sel3_32_1_U599 : component DCT_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_fu_848_p1,
        din2 => tmp_fu_848_p2,
        din3 => tmp_fu_848_p3,
        din4 => tmp_fu_848_p4,
        din5 => tmp_fu_848_p5,
        din6 => tmp_fu_848_p6,
        din7 => tmp_fu_848_p7,
        din8 => tmp_fu_848_p8,
        din9 => tmp_fu_848_p9,
        dout => tmp_fu_848_p10);

    DCT_mux_8to1_sel3_32_1_U600 : component DCT_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_s_fu_863_p1,
        din2 => tmp_s_fu_863_p2,
        din3 => tmp_s_fu_863_p3,
        din4 => tmp_s_fu_863_p4,
        din5 => tmp_s_fu_863_p5,
        din6 => tmp_s_fu_863_p6,
        din7 => tmp_s_fu_863_p7,
        din8 => tmp_s_fu_863_p8,
        din9 => tmp_s_fu_863_p9,
        dout => tmp_s_fu_863_p10);

    DCT_mux_8to1_sel3_32_1_U601 : component DCT_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_15_fu_877_p1,
        din2 => tmp_15_fu_877_p2,
        din3 => tmp_15_fu_877_p3,
        din4 => tmp_15_fu_877_p4,
        din5 => tmp_15_fu_877_p5,
        din6 => tmp_15_fu_877_p6,
        din7 => tmp_15_fu_877_p7,
        din8 => tmp_15_fu_877_p8,
        din9 => tmp_15_fu_877_p9,
        dout => tmp_15_fu_877_p10);

    DCT_mux_8to1_sel3_32_1_U602 : component DCT_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_16_fu_891_p1,
        din2 => tmp_16_fu_891_p2,
        din3 => tmp_16_fu_891_p3,
        din4 => tmp_16_fu_891_p4,
        din5 => tmp_16_fu_891_p5,
        din6 => tmp_16_fu_891_p6,
        din7 => tmp_16_fu_891_p7,
        din8 => tmp_16_fu_891_p8,
        din9 => tmp_16_fu_891_p9,
        dout => tmp_16_fu_891_p10);

    DCT_mux_8to1_sel3_32_1_U603 : component DCT_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_17_fu_905_p1,
        din2 => tmp_17_fu_905_p2,
        din3 => tmp_17_fu_905_p3,
        din4 => tmp_17_fu_905_p4,
        din5 => tmp_17_fu_905_p5,
        din6 => tmp_17_fu_905_p6,
        din7 => tmp_17_fu_905_p7,
        din8 => tmp_17_fu_905_p8,
        din9 => tmp_17_fu_905_p9,
        dout => tmp_17_fu_905_p10);

    DCT_mux_8to1_sel3_32_1_U604 : component DCT_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_18_fu_919_p1,
        din2 => tmp_18_fu_919_p2,
        din3 => tmp_18_fu_919_p3,
        din4 => tmp_18_fu_919_p4,
        din5 => tmp_18_fu_919_p5,
        din6 => tmp_18_fu_919_p6,
        din7 => tmp_18_fu_919_p7,
        din8 => tmp_18_fu_919_p8,
        din9 => tmp_18_fu_919_p9,
        dout => tmp_18_fu_919_p10);

    DCT_mux_8to1_sel3_32_1_U605 : component DCT_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_19_fu_933_p1,
        din2 => tmp_19_fu_933_p2,
        din3 => tmp_19_fu_933_p3,
        din4 => tmp_19_fu_933_p4,
        din5 => tmp_19_fu_933_p5,
        din6 => tmp_19_fu_933_p6,
        din7 => tmp_19_fu_933_p7,
        din8 => tmp_19_fu_933_p8,
        din9 => tmp_19_fu_933_p9,
        dout => tmp_19_fu_933_p10);

    DCT_mux_8to1_sel3_32_1_U606 : component DCT_mux_8to1_sel3_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_20_fu_947_p1,
        din2 => tmp_20_fu_947_p2,
        din3 => tmp_20_fu_947_p3,
        din4 => tmp_20_fu_947_p4,
        din5 => tmp_20_fu_947_p5,
        din6 => tmp_20_fu_947_p6,
        din7 => tmp_20_fu_947_p7,
        din8 => tmp_20_fu_947_p8,
        din9 => tmp_20_fu_947_p9,
        dout => tmp_20_fu_947_p10);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and not((exitcond1_i_fu_832_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (exitcond1_i_fu_832_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and not((exitcond1_i_fu_832_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it26 assign process. --
    ap_reg_ppiten_pp0_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it27 assign process. --
    ap_reg_ppiten_pp0_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it28 assign process. --
    ap_reg_ppiten_pp0_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it29 assign process. --
    ap_reg_ppiten_pp0_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it30 assign process. --
    ap_reg_ppiten_pp0_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it31 assign process. --
    ap_reg_ppiten_pp0_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it32 assign process. --
    ap_reg_ppiten_pp0_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it33 assign process. --
    ap_reg_ppiten_pp0_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it34 assign process. --
    ap_reg_ppiten_pp0_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it35 assign process. --
    ap_reg_ppiten_pp0_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it35 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it35 <= ap_reg_ppiten_pp0_it34;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it36 assign process. --
    ap_reg_ppiten_pp0_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it36 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it36 <= ap_reg_ppiten_pp0_it35;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it37 assign process. --
    ap_reg_ppiten_pp0_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it37 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it37 <= ap_reg_ppiten_pp0_it36;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it38 assign process. --
    ap_reg_ppiten_pp0_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it38 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it38 <= ap_reg_ppiten_pp0_it37;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it39 assign process. --
    ap_reg_ppiten_pp0_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it39 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it39 <= ap_reg_ppiten_pp0_it38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it40 assign process. --
    ap_reg_ppiten_pp0_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it40 <= ap_reg_ppiten_pp0_it39;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it41 assign process. --
    ap_reg_ppiten_pp0_it41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it41 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it41 <= ap_reg_ppiten_pp0_it40;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it42 assign process. --
    ap_reg_ppiten_pp0_it42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it42 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it42 <= ap_reg_ppiten_pp0_it41;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it43 assign process. --
    ap_reg_ppiten_pp0_it43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it43 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it43 <= ap_reg_ppiten_pp0_it42;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it44 assign process. --
    ap_reg_ppiten_pp0_it44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it44 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it44 <= ap_reg_ppiten_pp0_it43;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
                    ap_reg_ppiten_pp0_it44 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- j_i_reg_755 assign process. --
    j_i_reg_755_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
                j_i_reg_755 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (exitcond1_i_fu_832_p2 = ap_const_lv1_0))) then 
                j_i_reg_755 <= j_fu_838_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then
                B_0_0_read_reg_1001 <= B_0_0_dout;
                B_0_1_read_reg_1006 <= B_0_1_dout;
                B_0_2_read_reg_1011 <= B_0_2_dout;
                B_0_3_read_reg_1016 <= B_0_3_dout;
                B_0_4_read_reg_1021 <= B_0_4_dout;
                B_0_5_read_reg_1026 <= B_0_5_dout;
                B_0_6_read_reg_1031 <= B_0_6_dout;
                B_0_7_read_reg_1036 <= B_0_7_dout;
                B_1_0_read_reg_1041 <= B_1_0_dout;
                B_1_1_read_reg_1046 <= B_1_1_dout;
                B_1_2_read_reg_1051 <= B_1_2_dout;
                B_1_3_read_reg_1056 <= B_1_3_dout;
                B_1_4_read_reg_1061 <= B_1_4_dout;
                B_1_5_read_reg_1066 <= B_1_5_dout;
                B_1_6_read_reg_1071 <= B_1_6_dout;
                B_1_7_read_reg_1076 <= B_1_7_dout;
                B_2_0_read_reg_1081 <= B_2_0_dout;
                B_2_1_read_reg_1086 <= B_2_1_dout;
                B_2_2_read_reg_1091 <= B_2_2_dout;
                B_2_3_read_reg_1096 <= B_2_3_dout;
                B_2_4_read_reg_1101 <= B_2_4_dout;
                B_2_5_read_reg_1106 <= B_2_5_dout;
                B_2_6_read_reg_1111 <= B_2_6_dout;
                B_2_7_read_reg_1116 <= B_2_7_dout;
                B_3_0_read_reg_1121 <= B_3_0_dout;
                B_3_1_read_reg_1126 <= B_3_1_dout;
                B_3_2_read_reg_1131 <= B_3_2_dout;
                B_3_3_read_reg_1136 <= B_3_3_dout;
                B_3_4_read_reg_1141 <= B_3_4_dout;
                B_3_5_read_reg_1146 <= B_3_5_dout;
                B_3_6_read_reg_1151 <= B_3_6_dout;
                B_3_7_read_reg_1156 <= B_3_7_dout;
                B_4_0_read_reg_1161 <= B_4_0_dout;
                B_4_1_read_reg_1166 <= B_4_1_dout;
                B_4_2_read_reg_1171 <= B_4_2_dout;
                B_4_3_read_reg_1176 <= B_4_3_dout;
                B_4_4_read_reg_1181 <= B_4_4_dout;
                B_4_5_read_reg_1186 <= B_4_5_dout;
                B_4_6_read_reg_1191 <= B_4_6_dout;
                B_4_7_read_reg_1196 <= B_4_7_dout;
                B_5_0_read_reg_1201 <= B_5_0_dout;
                B_5_1_read_reg_1206 <= B_5_1_dout;
                B_5_2_read_reg_1211 <= B_5_2_dout;
                B_5_3_read_reg_1216 <= B_5_3_dout;
                B_5_4_read_reg_1221 <= B_5_4_dout;
                B_5_5_read_reg_1226 <= B_5_5_dout;
                B_5_6_read_reg_1231 <= B_5_6_dout;
                B_5_7_read_reg_1236 <= B_5_7_dout;
                B_6_0_read_reg_1241 <= B_6_0_dout;
                B_6_1_read_reg_1246 <= B_6_1_dout;
                B_6_2_read_reg_1251 <= B_6_2_dout;
                B_6_3_read_reg_1256 <= B_6_3_dout;
                B_6_4_read_reg_1261 <= B_6_4_dout;
                B_6_5_read_reg_1266 <= B_6_5_dout;
                B_6_6_read_reg_1271 <= B_6_6_dout;
                B_6_7_read_reg_1276 <= B_6_7_dout;
                B_7_0_read_reg_1281 <= B_7_0_dout;
                B_7_1_read_reg_1286 <= B_7_1_dout;
                B_7_2_read_reg_1291 <= B_7_2_dout;
                B_7_3_read_reg_1296 <= B_7_3_dout;
                B_7_4_read_reg_1301 <= B_7_4_dout;
                B_7_5_read_reg_1306 <= B_7_5_dout;
                B_7_6_read_reg_1311 <= B_7_6_dout;
                B_7_7_read_reg_1316 <= B_7_7_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it1 <= exitcond1_i_reg_1321;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it1 <= tmp_21_reg_1330;
                exitcond1_i_reg_1321 <= exitcond1_i_fu_832_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) then
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it10 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it9;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it11 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it10;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it12 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it11;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it13 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it12;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it14 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it13;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it15 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it14;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it16 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it15;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it17 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it16;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it18 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it17;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it19 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it18;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it2 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it1;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it20 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it19;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it21 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it20;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it22 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it21;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it23 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it22;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it24 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it23;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it25 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it24;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it26 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it25;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it27 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it26;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it28 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it27;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it29 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it28;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it3 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it2;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it30 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it29;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it31 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it30;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it32 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it31;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it33 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it32;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it34 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it33;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it35 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it34;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it36 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it35;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it37 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it36;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it38 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it37;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it39 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it38;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it4 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it3;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it40 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it39;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it41 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it40;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it42 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it41;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it42;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it5 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it4;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it6 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it5;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it7 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it6;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it8 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it7;
                ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it9 <= ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it8;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it10 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it9;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it11 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it10;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it12 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it11;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it13 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it12;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it14 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it13;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it15 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it14;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it16 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it15;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it17 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it16;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it18 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it17;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it19 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it18;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it2 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it1;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it20 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it19;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it21 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it20;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it22 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it21;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it23 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it22;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it24 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it23;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it25 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it24;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it26 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it25;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it27 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it26;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it28 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it27;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it29 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it28;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it3 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it2;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it30 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it29;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it31 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it30;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it32 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it31;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it33 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it32;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it34 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it33;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it4 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it3;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it5 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it4;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it6 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it5;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it7 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it6;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it8 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it7;
                ap_reg_ppstg_tmp_21_reg_1330_pp0_it9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it12))) then
                temp_2_1_i_reg_1371 <= grp_fu_772_p2;
                tmp_4_2_i_reg_1376 <= grp_fu_808_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it17))) then
                temp_2_2_i_reg_1386 <= grp_fu_776_p2;
                tmp_4_3_i_reg_1391 <= grp_fu_812_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it22))) then
                temp_2_3_i_reg_1401 <= grp_fu_780_p2;
                tmp_4_4_i_reg_1406 <= grp_fu_816_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it27))) then
                temp_2_4_i_reg_1416 <= grp_fu_784_p2;
                tmp_4_5_i_reg_1421 <= grp_fu_820_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it32))) then
                temp_2_5_i_reg_1431 <= grp_fu_788_p2;
                tmp_4_6_i_reg_1436 <= grp_fu_824_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it37))) then
                temp_2_6_i_reg_1446 <= grp_fu_792_p2;
                tmp_4_7_i_reg_1451 <= grp_fu_828_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it42))) then
                temp_2_7_i_reg_1456 <= grp_fu_796_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it7))) then
                temp_2_i_reg_1356 <= grp_fu_767_p2;
                tmp_4_1_i_reg_1361 <= grp_fu_804_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (exitcond1_i_fu_832_p2 = ap_const_lv1_0))) then
                tmp_21_reg_1330 <= tmp_21_fu_844_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it2))) then
                tmp_4_i_reg_1346 <= grp_fu_800_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_432, exitcond1_i_fu_832_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it43, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_432)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it44) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it43)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and not((exitcond1_i_fu_832_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it44) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it43))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) and not((exitcond1_i_fu_832_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st47_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st47_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- B_0_0_read assign process. --
    B_0_0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_0_0_read <= ap_const_logic_1;
        else 
            B_0_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_0_1_read assign process. --
    B_0_1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_0_1_read <= ap_const_logic_1;
        else 
            B_0_1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_0_2_read assign process. --
    B_0_2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_0_2_read <= ap_const_logic_1;
        else 
            B_0_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_0_3_read assign process. --
    B_0_3_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_0_3_read <= ap_const_logic_1;
        else 
            B_0_3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_0_4_read assign process. --
    B_0_4_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_0_4_read <= ap_const_logic_1;
        else 
            B_0_4_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_0_5_read assign process. --
    B_0_5_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_0_5_read <= ap_const_logic_1;
        else 
            B_0_5_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_0_6_read assign process. --
    B_0_6_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_0_6_read <= ap_const_logic_1;
        else 
            B_0_6_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_0_7_read assign process. --
    B_0_7_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_0_7_read <= ap_const_logic_1;
        else 
            B_0_7_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_1_0_read assign process. --
    B_1_0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_1_0_read <= ap_const_logic_1;
        else 
            B_1_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_1_1_read assign process. --
    B_1_1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_1_1_read <= ap_const_logic_1;
        else 
            B_1_1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_1_2_read assign process. --
    B_1_2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_1_2_read <= ap_const_logic_1;
        else 
            B_1_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_1_3_read assign process. --
    B_1_3_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_1_3_read <= ap_const_logic_1;
        else 
            B_1_3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_1_4_read assign process. --
    B_1_4_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_1_4_read <= ap_const_logic_1;
        else 
            B_1_4_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_1_5_read assign process. --
    B_1_5_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_1_5_read <= ap_const_logic_1;
        else 
            B_1_5_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_1_6_read assign process. --
    B_1_6_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_1_6_read <= ap_const_logic_1;
        else 
            B_1_6_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_1_7_read assign process. --
    B_1_7_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_1_7_read <= ap_const_logic_1;
        else 
            B_1_7_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_2_0_read assign process. --
    B_2_0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_2_0_read <= ap_const_logic_1;
        else 
            B_2_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_2_1_read assign process. --
    B_2_1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_2_1_read <= ap_const_logic_1;
        else 
            B_2_1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_2_2_read assign process. --
    B_2_2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_2_2_read <= ap_const_logic_1;
        else 
            B_2_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_2_3_read assign process. --
    B_2_3_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_2_3_read <= ap_const_logic_1;
        else 
            B_2_3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_2_4_read assign process. --
    B_2_4_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_2_4_read <= ap_const_logic_1;
        else 
            B_2_4_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_2_5_read assign process. --
    B_2_5_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_2_5_read <= ap_const_logic_1;
        else 
            B_2_5_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_2_6_read assign process. --
    B_2_6_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_2_6_read <= ap_const_logic_1;
        else 
            B_2_6_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_2_7_read assign process. --
    B_2_7_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_2_7_read <= ap_const_logic_1;
        else 
            B_2_7_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_3_0_read assign process. --
    B_3_0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_3_0_read <= ap_const_logic_1;
        else 
            B_3_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_3_1_read assign process. --
    B_3_1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_3_1_read <= ap_const_logic_1;
        else 
            B_3_1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_3_2_read assign process. --
    B_3_2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_3_2_read <= ap_const_logic_1;
        else 
            B_3_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_3_3_read assign process. --
    B_3_3_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_3_3_read <= ap_const_logic_1;
        else 
            B_3_3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_3_4_read assign process. --
    B_3_4_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_3_4_read <= ap_const_logic_1;
        else 
            B_3_4_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_3_5_read assign process. --
    B_3_5_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_3_5_read <= ap_const_logic_1;
        else 
            B_3_5_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_3_6_read assign process. --
    B_3_6_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_3_6_read <= ap_const_logic_1;
        else 
            B_3_6_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_3_7_read assign process. --
    B_3_7_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_3_7_read <= ap_const_logic_1;
        else 
            B_3_7_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_4_0_read assign process. --
    B_4_0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_4_0_read <= ap_const_logic_1;
        else 
            B_4_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_4_1_read assign process. --
    B_4_1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_4_1_read <= ap_const_logic_1;
        else 
            B_4_1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_4_2_read assign process. --
    B_4_2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_4_2_read <= ap_const_logic_1;
        else 
            B_4_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_4_3_read assign process. --
    B_4_3_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_4_3_read <= ap_const_logic_1;
        else 
            B_4_3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_4_4_read assign process. --
    B_4_4_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_4_4_read <= ap_const_logic_1;
        else 
            B_4_4_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_4_5_read assign process. --
    B_4_5_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_4_5_read <= ap_const_logic_1;
        else 
            B_4_5_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_4_6_read assign process. --
    B_4_6_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_4_6_read <= ap_const_logic_1;
        else 
            B_4_6_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_4_7_read assign process. --
    B_4_7_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_4_7_read <= ap_const_logic_1;
        else 
            B_4_7_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_5_0_read assign process. --
    B_5_0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_5_0_read <= ap_const_logic_1;
        else 
            B_5_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_5_1_read assign process. --
    B_5_1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_5_1_read <= ap_const_logic_1;
        else 
            B_5_1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_5_2_read assign process. --
    B_5_2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_5_2_read <= ap_const_logic_1;
        else 
            B_5_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_5_3_read assign process. --
    B_5_3_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_5_3_read <= ap_const_logic_1;
        else 
            B_5_3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_5_4_read assign process. --
    B_5_4_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_5_4_read <= ap_const_logic_1;
        else 
            B_5_4_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_5_5_read assign process. --
    B_5_5_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_5_5_read <= ap_const_logic_1;
        else 
            B_5_5_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_5_6_read assign process. --
    B_5_6_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_5_6_read <= ap_const_logic_1;
        else 
            B_5_6_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_5_7_read assign process. --
    B_5_7_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_5_7_read <= ap_const_logic_1;
        else 
            B_5_7_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_6_0_read assign process. --
    B_6_0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_6_0_read <= ap_const_logic_1;
        else 
            B_6_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_6_1_read assign process. --
    B_6_1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_6_1_read <= ap_const_logic_1;
        else 
            B_6_1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_6_2_read assign process. --
    B_6_2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_6_2_read <= ap_const_logic_1;
        else 
            B_6_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_6_3_read assign process. --
    B_6_3_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_6_3_read <= ap_const_logic_1;
        else 
            B_6_3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_6_4_read assign process. --
    B_6_4_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_6_4_read <= ap_const_logic_1;
        else 
            B_6_4_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_6_5_read assign process. --
    B_6_5_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_6_5_read <= ap_const_logic_1;
        else 
            B_6_5_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_6_6_read assign process. --
    B_6_6_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_6_6_read <= ap_const_logic_1;
        else 
            B_6_6_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_6_7_read assign process. --
    B_6_7_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_6_7_read <= ap_const_logic_1;
        else 
            B_6_7_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_7_0_read assign process. --
    B_7_0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_7_0_read <= ap_const_logic_1;
        else 
            B_7_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_7_1_read assign process. --
    B_7_1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_7_1_read <= ap_const_logic_1;
        else 
            B_7_1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_7_2_read assign process. --
    B_7_2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_7_2_read <= ap_const_logic_1;
        else 
            B_7_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_7_3_read assign process. --
    B_7_3_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_7_3_read <= ap_const_logic_1;
        else 
            B_7_3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_7_4_read assign process. --
    B_7_4_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_7_4_read <= ap_const_logic_1;
        else 
            B_7_4_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_7_5_read assign process. --
    B_7_5_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_7_5_read <= ap_const_logic_1;
        else 
            B_7_5_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_7_6_read assign process. --
    B_7_6_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_7_6_read <= ap_const_logic_1;
        else 
            B_7_6_read <= ap_const_logic_0;
        end if; 
    end process;


    -- B_7_7_read assign process. --
    B_7_7_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_432)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_432))) then 
            B_7_7_read <= ap_const_logic_1;
        else 
            B_7_7_read <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= temp_2_7_i_reg_1456;

    -- C_write assign process. --
    C_write_assign_proc : process(ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st47_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st47_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1268 assign process. --
    ap_sig_bdd_1268_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1268 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_432 assign process. --
    ap_sig_bdd_432_assign_proc : process(ap_start, ap_done_reg, B_0_0_empty_n, B_0_1_empty_n, B_0_2_empty_n, B_0_3_empty_n, B_0_4_empty_n, B_0_5_empty_n, B_0_6_empty_n, B_0_7_empty_n, B_1_0_empty_n, B_1_1_empty_n, B_1_2_empty_n, B_1_3_empty_n, B_1_4_empty_n, B_1_5_empty_n, B_1_6_empty_n, B_1_7_empty_n, B_2_0_empty_n, B_2_1_empty_n, B_2_2_empty_n, B_2_3_empty_n, B_2_4_empty_n, B_2_5_empty_n, B_2_6_empty_n, B_2_7_empty_n, B_3_0_empty_n, B_3_1_empty_n, B_3_2_empty_n, B_3_3_empty_n, B_3_4_empty_n, B_3_5_empty_n, B_3_6_empty_n, B_3_7_empty_n, B_4_0_empty_n, B_4_1_empty_n, B_4_2_empty_n, B_4_3_empty_n, B_4_4_empty_n, B_4_5_empty_n, B_4_6_empty_n, B_4_7_empty_n, B_5_0_empty_n, B_5_1_empty_n, B_5_2_empty_n, B_5_3_empty_n, B_5_4_empty_n, B_5_5_empty_n, B_5_6_empty_n, B_5_7_empty_n, B_6_0_empty_n, B_6_1_empty_n, B_6_2_empty_n, B_6_3_empty_n, B_6_4_empty_n, B_6_5_empty_n, B_6_6_empty_n, B_6_7_empty_n, B_7_0_empty_n, B_7_1_empty_n, B_7_2_empty_n, B_7_3_empty_n, B_7_4_empty_n, B_7_5_empty_n, B_7_6_empty_n, B_7_7_empty_n)
    begin
                ap_sig_bdd_432 <= ((B_0_0_empty_n = ap_const_logic_0) or (B_0_1_empty_n = ap_const_logic_0) or (B_0_2_empty_n = ap_const_logic_0) or (B_0_3_empty_n = ap_const_logic_0) or (B_0_4_empty_n = ap_const_logic_0) or (B_0_5_empty_n = ap_const_logic_0) or (B_0_6_empty_n = ap_const_logic_0) or (B_0_7_empty_n = ap_const_logic_0) or (B_1_0_empty_n = ap_const_logic_0) or (B_1_1_empty_n = ap_const_logic_0) or (B_1_2_empty_n = ap_const_logic_0) or (B_1_3_empty_n = ap_const_logic_0) or (B_1_4_empty_n = ap_const_logic_0) or (B_1_5_empty_n = ap_const_logic_0) or (B_1_6_empty_n = ap_const_logic_0) or (B_1_7_empty_n = ap_const_logic_0) or (B_2_0_empty_n = ap_const_logic_0) or (B_2_1_empty_n = ap_const_logic_0) or (B_2_2_empty_n = ap_const_logic_0) or (B_2_3_empty_n = ap_const_logic_0) or (B_2_4_empty_n = ap_const_logic_0) or (B_2_5_empty_n = ap_const_logic_0) or (B_2_6_empty_n = ap_const_logic_0) or (B_2_7_empty_n = ap_const_logic_0) or (B_3_0_empty_n = ap_const_logic_0) or (B_3_1_empty_n = ap_const_logic_0) or (B_3_2_empty_n = ap_const_logic_0) or (B_3_3_empty_n = ap_const_logic_0) or (B_3_4_empty_n = ap_const_logic_0) or (B_3_5_empty_n = ap_const_logic_0) or (B_3_6_empty_n = ap_const_logic_0) or (B_3_7_empty_n = ap_const_logic_0) or (B_4_0_empty_n = ap_const_logic_0) or (B_4_1_empty_n = ap_const_logic_0) or (B_4_2_empty_n = ap_const_logic_0) or (B_4_3_empty_n = ap_const_logic_0) or (B_4_4_empty_n = ap_const_logic_0) or (B_4_5_empty_n = ap_const_logic_0) or (B_4_6_empty_n = ap_const_logic_0) or (B_4_7_empty_n = ap_const_logic_0) or (B_5_0_empty_n = ap_const_logic_0) or (B_5_1_empty_n = ap_const_logic_0) or (B_5_2_empty_n = ap_const_logic_0) or (B_5_3_empty_n = ap_const_logic_0) or (B_5_4_empty_n = ap_const_logic_0) or (B_5_5_empty_n = ap_const_logic_0) or (B_5_6_empty_n = ap_const_logic_0) or (B_5_7_empty_n = ap_const_logic_0) or (B_6_0_empty_n = ap_const_logic_0) or (B_6_1_empty_n = ap_const_logic_0) or (B_6_2_empty_n = ap_const_logic_0) or (B_6_3_empty_n = ap_const_logic_0) or (B_6_4_empty_n = ap_const_logic_0) or (B_6_5_empty_n = ap_const_logic_0) or (B_6_6_empty_n = ap_const_logic_0) or (B_6_7_empty_n = ap_const_logic_0) or (B_7_0_empty_n = ap_const_logic_0) or (B_7_1_empty_n = ap_const_logic_0) or (B_7_2_empty_n = ap_const_logic_0) or (B_7_3_empty_n = ap_const_logic_0) or (B_7_4_empty_n = ap_const_logic_0) or (B_7_5_empty_n = ap_const_logic_0) or (B_7_6_empty_n = ap_const_logic_0) or (B_7_7_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_584 assign process. --
    ap_sig_bdd_584_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_584 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_679 assign process. --
    ap_sig_bdd_679_assign_proc : process(C_full_n, ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43)
    begin
                ap_sig_bdd_679 <= ((C_full_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond1_i_reg_1321_pp0_it43 = ap_const_lv1_0));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_584)
    begin
        if (ap_sig_bdd_584) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_2 assign process. --
    ap_sig_cseq_ST_st47_fsm_2_assign_proc : process(ap_sig_bdd_1268)
    begin
        if (ap_sig_bdd_1268) then 
            ap_sig_cseq_ST_st47_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_832_p2 <= "1" when (j_i_reg_755 = ap_const_lv4_8) else "0";

    -- grp_fu_767_ce assign process. --
    grp_fu_767_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_767_ce <= ap_const_logic_1;
        else 
            grp_fu_767_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_767_p0 <= tmp_4_i_reg_1346;
    grp_fu_767_p1 <= ap_const_lv32_0;

    -- grp_fu_772_ce assign process. --
    grp_fu_772_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_772_ce <= ap_const_logic_1;
        else 
            grp_fu_772_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_772_p0 <= temp_2_i_reg_1356;
    grp_fu_772_p1 <= tmp_4_1_i_reg_1361;

    -- grp_fu_776_ce assign process. --
    grp_fu_776_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_776_ce <= ap_const_logic_1;
        else 
            grp_fu_776_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_776_p0 <= temp_2_1_i_reg_1371;
    grp_fu_776_p1 <= tmp_4_2_i_reg_1376;

    -- grp_fu_780_ce assign process. --
    grp_fu_780_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_780_ce <= ap_const_logic_1;
        else 
            grp_fu_780_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_780_p0 <= temp_2_2_i_reg_1386;
    grp_fu_780_p1 <= tmp_4_3_i_reg_1391;

    -- grp_fu_784_ce assign process. --
    grp_fu_784_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_784_ce <= ap_const_logic_1;
        else 
            grp_fu_784_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_784_p0 <= temp_2_3_i_reg_1401;
    grp_fu_784_p1 <= tmp_4_4_i_reg_1406;

    -- grp_fu_788_ce assign process. --
    grp_fu_788_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_788_ce <= ap_const_logic_1;
        else 
            grp_fu_788_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_788_p0 <= temp_2_4_i_reg_1416;
    grp_fu_788_p1 <= tmp_4_5_i_reg_1421;

    -- grp_fu_792_ce assign process. --
    grp_fu_792_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_792_ce <= ap_const_logic_1;
        else 
            grp_fu_792_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_792_p0 <= temp_2_5_i_reg_1431;
    grp_fu_792_p1 <= tmp_4_6_i_reg_1436;

    -- grp_fu_796_ce assign process. --
    grp_fu_796_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_796_ce <= ap_const_logic_1;
        else 
            grp_fu_796_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_796_p0 <= temp_2_6_i_reg_1446;
    grp_fu_796_p1 <= tmp_4_7_i_reg_1451;

    -- grp_fu_800_ce assign process. --
    grp_fu_800_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_800_ce <= ap_const_logic_1;
        else 
            grp_fu_800_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_800_p0 <= tmp_fu_848_p10;
    grp_fu_800_p1 <= p_read;

    -- grp_fu_804_ce assign process. --
    grp_fu_804_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_804_ce <= ap_const_logic_1;
        else 
            grp_fu_804_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_804_p0 <= tmp_s_fu_863_p10;
    grp_fu_804_p1 <= p_read1;

    -- grp_fu_808_ce assign process. --
    grp_fu_808_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_808_ce <= ap_const_logic_1;
        else 
            grp_fu_808_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_808_p0 <= tmp_15_fu_877_p10;
    grp_fu_808_p1 <= p_read2;

    -- grp_fu_812_ce assign process. --
    grp_fu_812_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_812_ce <= ap_const_logic_1;
        else 
            grp_fu_812_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_812_p0 <= tmp_16_fu_891_p10;
    grp_fu_812_p1 <= p_read3;

    -- grp_fu_816_ce assign process. --
    grp_fu_816_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_816_ce <= ap_const_logic_1;
        else 
            grp_fu_816_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_816_p0 <= tmp_17_fu_905_p10;
    grp_fu_816_p1 <= p_read4;

    -- grp_fu_820_ce assign process. --
    grp_fu_820_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_820_ce <= ap_const_logic_1;
        else 
            grp_fu_820_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_820_p0 <= tmp_18_fu_919_p10;
    grp_fu_820_p1 <= p_read5;

    -- grp_fu_824_ce assign process. --
    grp_fu_824_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_824_ce <= ap_const_logic_1;
        else 
            grp_fu_824_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_824_p0 <= tmp_19_fu_933_p10;
    grp_fu_824_p1 <= p_read6;

    -- grp_fu_828_ce assign process. --
    grp_fu_828_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_679, ap_reg_ppiten_pp0_it44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_679 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it44))))) then 
            grp_fu_828_ce <= ap_const_logic_1;
        else 
            grp_fu_828_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_828_p0 <= tmp_20_fu_947_p10;
    grp_fu_828_p1 <= p_read7;
    j_fu_838_p2 <= std_logic_vector(unsigned(j_i_reg_755) + unsigned(ap_const_lv4_1));
    tmp_15_fu_877_p1 <= B_2_0_read_reg_1081;
    tmp_15_fu_877_p2 <= B_2_1_read_reg_1086;
    tmp_15_fu_877_p3 <= B_2_2_read_reg_1091;
    tmp_15_fu_877_p4 <= B_2_3_read_reg_1096;
    tmp_15_fu_877_p5 <= B_2_4_read_reg_1101;
    tmp_15_fu_877_p6 <= B_2_5_read_reg_1106;
    tmp_15_fu_877_p7 <= B_2_6_read_reg_1111;
    tmp_15_fu_877_p8 <= B_2_7_read_reg_1116;
    tmp_15_fu_877_p9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it9;
    tmp_16_fu_891_p1 <= B_3_0_read_reg_1121;
    tmp_16_fu_891_p2 <= B_3_1_read_reg_1126;
    tmp_16_fu_891_p3 <= B_3_2_read_reg_1131;
    tmp_16_fu_891_p4 <= B_3_3_read_reg_1136;
    tmp_16_fu_891_p5 <= B_3_4_read_reg_1141;
    tmp_16_fu_891_p6 <= B_3_5_read_reg_1146;
    tmp_16_fu_891_p7 <= B_3_6_read_reg_1151;
    tmp_16_fu_891_p8 <= B_3_7_read_reg_1156;
    tmp_16_fu_891_p9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it14;
    tmp_17_fu_905_p1 <= B_4_0_read_reg_1161;
    tmp_17_fu_905_p2 <= B_4_1_read_reg_1166;
    tmp_17_fu_905_p3 <= B_4_2_read_reg_1171;
    tmp_17_fu_905_p4 <= B_4_3_read_reg_1176;
    tmp_17_fu_905_p5 <= B_4_4_read_reg_1181;
    tmp_17_fu_905_p6 <= B_4_5_read_reg_1186;
    tmp_17_fu_905_p7 <= B_4_6_read_reg_1191;
    tmp_17_fu_905_p8 <= B_4_7_read_reg_1196;
    tmp_17_fu_905_p9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it19;
    tmp_18_fu_919_p1 <= B_5_0_read_reg_1201;
    tmp_18_fu_919_p2 <= B_5_1_read_reg_1206;
    tmp_18_fu_919_p3 <= B_5_2_read_reg_1211;
    tmp_18_fu_919_p4 <= B_5_3_read_reg_1216;
    tmp_18_fu_919_p5 <= B_5_4_read_reg_1221;
    tmp_18_fu_919_p6 <= B_5_5_read_reg_1226;
    tmp_18_fu_919_p7 <= B_5_6_read_reg_1231;
    tmp_18_fu_919_p8 <= B_5_7_read_reg_1236;
    tmp_18_fu_919_p9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it24;
    tmp_19_fu_933_p1 <= B_6_0_read_reg_1241;
    tmp_19_fu_933_p2 <= B_6_1_read_reg_1246;
    tmp_19_fu_933_p3 <= B_6_2_read_reg_1251;
    tmp_19_fu_933_p4 <= B_6_3_read_reg_1256;
    tmp_19_fu_933_p5 <= B_6_4_read_reg_1261;
    tmp_19_fu_933_p6 <= B_6_5_read_reg_1266;
    tmp_19_fu_933_p7 <= B_6_6_read_reg_1271;
    tmp_19_fu_933_p8 <= B_6_7_read_reg_1276;
    tmp_19_fu_933_p9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it29;
    tmp_20_fu_947_p1 <= B_7_0_read_reg_1281;
    tmp_20_fu_947_p2 <= B_7_1_read_reg_1286;
    tmp_20_fu_947_p3 <= B_7_2_read_reg_1291;
    tmp_20_fu_947_p4 <= B_7_3_read_reg_1296;
    tmp_20_fu_947_p5 <= B_7_4_read_reg_1301;
    tmp_20_fu_947_p6 <= B_7_5_read_reg_1306;
    tmp_20_fu_947_p7 <= B_7_6_read_reg_1311;
    tmp_20_fu_947_p8 <= B_7_7_read_reg_1316;
    tmp_20_fu_947_p9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it34;
    tmp_21_fu_844_p1 <= j_i_reg_755(3 - 1 downto 0);
    tmp_fu_848_p1 <= B_0_0_read_reg_1001;
    tmp_fu_848_p2 <= B_0_1_read_reg_1006;
    tmp_fu_848_p3 <= B_0_2_read_reg_1011;
    tmp_fu_848_p4 <= B_0_3_read_reg_1016;
    tmp_fu_848_p5 <= B_0_4_read_reg_1021;
    tmp_fu_848_p6 <= B_0_5_read_reg_1026;
    tmp_fu_848_p7 <= B_0_6_read_reg_1031;
    tmp_fu_848_p8 <= B_0_7_read_reg_1036;
    tmp_fu_848_p9 <= j_i_reg_755(3 - 1 downto 0);
    tmp_s_fu_863_p1 <= B_1_0_read_reg_1041;
    tmp_s_fu_863_p2 <= B_1_1_read_reg_1046;
    tmp_s_fu_863_p3 <= B_1_2_read_reg_1051;
    tmp_s_fu_863_p4 <= B_1_3_read_reg_1056;
    tmp_s_fu_863_p5 <= B_1_4_read_reg_1061;
    tmp_s_fu_863_p6 <= B_1_5_read_reg_1066;
    tmp_s_fu_863_p7 <= B_1_6_read_reg_1071;
    tmp_s_fu_863_p8 <= B_1_7_read_reg_1076;
    tmp_s_fu_863_p9 <= ap_reg_ppstg_tmp_21_reg_1330_pp0_it4;
end behav;
