// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DCT,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.583500,HLS_SYN_LAT=12581,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=4,HLS_SYN_FF=671,HLS_SYN_LUT=1679}" *)

module DCT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_address0,
        X_ce0,
        X_q0,
        function_r,
        Y_address0,
        Y_ce0,
        Y_we0,
        Y_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] X_address0;
output   X_ce0;
input  [31:0] X_q0;
input  [7:0] function_r;
output  [5:0] Y_address0;
output   Y_ce0;
output   Y_we0;
output  [31:0] Y_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_ce0;
reg Y_ce0;
reg Y_we0;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm = 6'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg   [5:0] Tinv_address0;
reg    Tinv_ce0;
wire   [31:0] Tinv_q0;
reg   [5:0] T_address0;
reg    T_ce0;
wire   [31:0] T_q0;
wire   [0:0] cond_fu_49_p2;
reg   [0:0] cond_reg_55;
reg   [5:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
wire   [31:0] temp_d0;
wire   [31:0] temp_q0;
wire    grp_DCT_MAT_Multiply_fu_35_ap_start;
wire    grp_DCT_MAT_Multiply_fu_35_ap_done;
wire    grp_DCT_MAT_Multiply_fu_35_ap_idle;
wire    grp_DCT_MAT_Multiply_fu_35_ap_ready;
wire   [5:0] grp_DCT_MAT_Multiply_fu_35_A_address0;
wire    grp_DCT_MAT_Multiply_fu_35_A_ce0;
reg   [31:0] grp_DCT_MAT_Multiply_fu_35_A_q0;
wire   [5:0] grp_DCT_MAT_Multiply_fu_35_B_address0;
wire    grp_DCT_MAT_Multiply_fu_35_B_ce0;
reg   [31:0] grp_DCT_MAT_Multiply_fu_35_B_q0;
wire   [5:0] grp_DCT_MAT_Multiply_fu_35_C_address0;
wire    grp_DCT_MAT_Multiply_fu_35_C_ce0;
wire    grp_DCT_MAT_Multiply_fu_35_C_we0;
wire   [31:0] grp_DCT_MAT_Multiply_fu_35_C_d0;
reg    grp_DCT_MAT_Multiply_fu_35_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_103;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_111;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_119;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_126;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_133;
reg   [5:0] ap_NS_fsm;


DCT_Tinv #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
Tinv_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Tinv_address0 ),
    .ce0( Tinv_ce0 ),
    .q0( Tinv_q0 )
);

DCT_T #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
T_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_address0 ),
    .ce0( T_ce0 ),
    .q0( T_q0 )
);

DCT_MAT_Multiply_B_cached #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( temp_address0 ),
    .ce0( temp_ce0 ),
    .we0( temp_we0 ),
    .d0( temp_d0 ),
    .q0( temp_q0 )
);

DCT_MAT_Multiply grp_DCT_MAT_Multiply_fu_35(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_DCT_MAT_Multiply_fu_35_ap_start ),
    .ap_done( grp_DCT_MAT_Multiply_fu_35_ap_done ),
    .ap_idle( grp_DCT_MAT_Multiply_fu_35_ap_idle ),
    .ap_ready( grp_DCT_MAT_Multiply_fu_35_ap_ready ),
    .A_address0( grp_DCT_MAT_Multiply_fu_35_A_address0 ),
    .A_ce0( grp_DCT_MAT_Multiply_fu_35_A_ce0 ),
    .A_q0( grp_DCT_MAT_Multiply_fu_35_A_q0 ),
    .B_address0( grp_DCT_MAT_Multiply_fu_35_B_address0 ),
    .B_ce0( grp_DCT_MAT_Multiply_fu_35_B_ce0 ),
    .B_q0( grp_DCT_MAT_Multiply_fu_35_B_q0 ),
    .C_address0( grp_DCT_MAT_Multiply_fu_35_C_address0 ),
    .C_ce0( grp_DCT_MAT_Multiply_fu_35_C_ce0 ),
    .C_we0( grp_DCT_MAT_Multiply_fu_35_C_we0 ),
    .C_d0( grp_DCT_MAT_Multiply_fu_35_C_d0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_DCT_MAT_Multiply_fu_35_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_DCT_MAT_Multiply_fu_35_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_DCT_MAT_Multiply_fu_35_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (cond_fu_49_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(cond_fu_49_p2 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5))) begin
            grp_DCT_MAT_Multiply_fu_35_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_DCT_MAT_Multiply_fu_35_ap_ready)) begin
            grp_DCT_MAT_Multiply_fu_35_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        cond_reg_55 <= cond_fu_49_p2;
    end
end

/// T_address0 assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_A_address0 or grp_DCT_MAT_Multiply_fu_35_B_address0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_55 == ap_const_lv1_0))) begin
        T_address0 = grp_DCT_MAT_Multiply_fu_35_B_address0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_address0 = grp_DCT_MAT_Multiply_fu_35_A_address0;
    end else begin
        T_address0 = 'bx;
    end
end

/// T_ce0 assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_A_ce0 or grp_DCT_MAT_Multiply_fu_35_B_ce0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_55 == ap_const_lv1_0))) begin
        T_ce0 = grp_DCT_MAT_Multiply_fu_35_B_ce0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_ce0 = grp_DCT_MAT_Multiply_fu_35_A_ce0;
    end else begin
        T_ce0 = ap_const_logic_0;
    end
end

/// Tinv_address0 assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_A_address0 or grp_DCT_MAT_Multiply_fu_35_B_address0 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_55 == ap_const_lv1_0))) begin
        Tinv_address0 = grp_DCT_MAT_Multiply_fu_35_B_address0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        Tinv_address0 = grp_DCT_MAT_Multiply_fu_35_A_address0;
    end else begin
        Tinv_address0 = 'bx;
    end
end

/// Tinv_ce0 assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_A_ce0 or grp_DCT_MAT_Multiply_fu_35_B_ce0 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_55 == ap_const_lv1_0))) begin
        Tinv_ce0 = grp_DCT_MAT_Multiply_fu_35_B_ce0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        Tinv_ce0 = grp_DCT_MAT_Multiply_fu_35_A_ce0;
    end else begin
        Tinv_ce0 = ap_const_logic_0;
    end
end

/// X_ce0 assign process. ///
always @ (grp_DCT_MAT_Multiply_fu_35_B_ce0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        X_ce0 = grp_DCT_MAT_Multiply_fu_35_B_ce0;
    end else begin
        X_ce0 = ap_const_logic_0;
    end
end

/// Y_ce0 assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_C_ce0 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_55 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_55 == ap_const_lv1_0)))) begin
        Y_ce0 = grp_DCT_MAT_Multiply_fu_35_C_ce0;
    end else begin
        Y_ce0 = ap_const_logic_0;
    end
end

/// Y_we0 assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_C_we0 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_55 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_55 == ap_const_lv1_0)))) begin
        Y_we0 = grp_DCT_MAT_Multiply_fu_35_C_we0;
    end else begin
        Y_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_ap_done or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(((cond_reg_55 == ap_const_lv1_0) & (ap_const_logic_0 == grp_DCT_MAT_Multiply_fu_35_ap_done)) | (~(cond_reg_55 == ap_const_lv1_0) & (ap_const_logic_0 == grp_DCT_MAT_Multiply_fu_35_ap_done))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_ap_done or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(((cond_reg_55 == ap_const_lv1_0) & (ap_const_logic_0 == grp_DCT_MAT_Multiply_fu_35_ap_done)) | (~(cond_reg_55 == ap_const_lv1_0) & (ap_const_logic_0 == grp_DCT_MAT_Multiply_fu_35_ap_done))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_119)
begin
    if (ap_sig_bdd_119) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_103)
begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_133)
begin
    if (ap_sig_bdd_133) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_126)
begin
    if (ap_sig_bdd_126) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_111)
begin
    if (ap_sig_bdd_111) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// grp_DCT_MAT_Multiply_fu_35_A_q0 assign process. ///
always @ (Tinv_q0 or T_q0 or cond_reg_55 or temp_q0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_55 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_55 == ap_const_lv1_0)))) begin
        grp_DCT_MAT_Multiply_fu_35_A_q0 = temp_q0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_DCT_MAT_Multiply_fu_35_A_q0 = Tinv_q0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_DCT_MAT_Multiply_fu_35_A_q0 = T_q0;
    end else begin
        grp_DCT_MAT_Multiply_fu_35_A_q0 = 'bx;
    end
end

/// grp_DCT_MAT_Multiply_fu_35_B_q0 assign process. ///
always @ (X_q0 or Tinv_q0 or T_q0 or cond_reg_55 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_55 == ap_const_lv1_0))) begin
        grp_DCT_MAT_Multiply_fu_35_B_q0 = T_q0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_55 == ap_const_lv1_0))) begin
        grp_DCT_MAT_Multiply_fu_35_B_q0 = Tinv_q0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        grp_DCT_MAT_Multiply_fu_35_B_q0 = X_q0;
    end else begin
        grp_DCT_MAT_Multiply_fu_35_B_q0 = 'bx;
    end
end

/// temp_address0 assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_A_address0 or grp_DCT_MAT_Multiply_fu_35_C_address0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        temp_address0 = grp_DCT_MAT_Multiply_fu_35_C_address0;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_55 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_55 == ap_const_lv1_0)))) begin
        temp_address0 = grp_DCT_MAT_Multiply_fu_35_A_address0;
    end else begin
        temp_address0 = 'bx;
    end
end

/// temp_ce0 assign process. ///
always @ (cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_A_ce0 or grp_DCT_MAT_Multiply_fu_35_C_ce0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        temp_ce0 = grp_DCT_MAT_Multiply_fu_35_C_ce0;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_55 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_55 == ap_const_lv1_0)))) begin
        temp_ce0 = grp_DCT_MAT_Multiply_fu_35_A_ce0;
    end else begin
        temp_ce0 = ap_const_logic_0;
    end
end

/// temp_we0 assign process. ///
always @ (grp_DCT_MAT_Multiply_fu_35_C_we0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        temp_we0 = grp_DCT_MAT_Multiply_fu_35_C_we0;
    end else begin
        temp_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or cond_fu_49_p2 or cond_reg_55 or grp_DCT_MAT_Multiply_fu_35_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & ~(cond_fu_49_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else if ((~(ap_start == ap_const_logic_0) & (cond_fu_49_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_DCT_MAT_Multiply_fu_35_ap_done)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(((cond_reg_55 == ap_const_lv1_0) & (ap_const_logic_0 == grp_DCT_MAT_Multiply_fu_35_ap_done)) | (~(cond_reg_55 == ap_const_lv1_0) & (ap_const_logic_0 == grp_DCT_MAT_Multiply_fu_35_ap_done)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_logic_0 == grp_DCT_MAT_Multiply_fu_35_ap_done)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_address0 = grp_DCT_MAT_Multiply_fu_35_B_address0;
assign Y_address0 = grp_DCT_MAT_Multiply_fu_35_C_address0;
assign Y_d0 = grp_DCT_MAT_Multiply_fu_35_C_d0;

/// ap_sig_bdd_103 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_111 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_111 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_119 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_119 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_126 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_126 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_133 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_133 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end
assign cond_fu_49_p2 = (function_r == ap_const_lv8_1? 1'b1: 1'b0);
assign grp_DCT_MAT_Multiply_fu_35_ap_start = grp_DCT_MAT_Multiply_fu_35_ap_start_ap_start_reg;
assign temp_d0 = grp_DCT_MAT_Multiply_fu_35_C_d0;


endmodule //DCT

