-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_MAT_Multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DCT_MAT_Multiply is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_41 : BOOLEAN;
    signal i_1_fu_231_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_685 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_72 : BOOLEAN;
    signal tmp_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr4_cast_fu_251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr4_cast_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_261_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_703 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal tmp_3_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_3_reg_715 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal exitcond2_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_trn7_cast_fu_299_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_trn7_cast_reg_725 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_130 : BOOLEAN;
    signal isNeg_fu_351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_4_fu_453_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_4_reg_753 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal tmp_12_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_758 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_trn_cast_fu_481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast_reg_768 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_reg_774 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_168 : BOOLEAN;
    signal isNeg_1_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_784 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_5_fu_630_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_5_reg_797 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal exitcond_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr3_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_201 : BOOLEAN;
    signal B_cached_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_load_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_212 : BOOLEAN;
    signal temp_1_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal A_cached_row_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_cached_row_ce0 : STD_LOGIC;
    signal A_cached_row_we0 : STD_LOGIC;
    signal A_cached_row_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_cached_ce0 : STD_LOGIC;
    signal B_cached_we0 : STD_LOGIC;
    signal B_cached_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal k_reg_173 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_274 : BOOLEAN;
    signal k_1_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_287 : BOOLEAN;
    signal k_2_reg_196 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_243_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_trn_cast_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_325_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_1_fu_329_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_315_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast5_fu_341_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_i_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_i_cast_fu_365_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_369_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_381_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_fu_337_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_2_i_i_fu_385_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_3_i_i_fu_389_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_i_i_fu_395_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_7_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_427_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_459_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr8_cast_fu_467_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr9_fu_471_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_3_fu_507_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_3_fu_511_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_2_fu_497_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i1_cast3_fu_523_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_527_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_i1_fu_541_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_i1_cast_fu_547_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_551_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_cast_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cast_fu_563_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i1_fu_519_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_2_i_i1_fu_567_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_3_i_i1_fu_571_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_i_i1_fu_577_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_13_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i1_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_636_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_644_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_648_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_667_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_ce : STD_LOGIC;
    signal grp_fu_667_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component DCT_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_MAT_Multiply_A_cached_row IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_MAT_Multiply_B_cached IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_cached_row_U : component DCT_MAT_Multiply_A_cached_row
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_cached_row_address0,
        ce0 => A_cached_row_ce0,
        we0 => A_cached_row_we0,
        d0 => A_cached_row_d0,
        q0 => A_cached_row_q0);

    B_cached_U : component DCT_MAT_Multiply_B_cached
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_cached_address0,
        ce0 => B_cached_ce0,
        we0 => B_cached_we0,
        d0 => B_cached_d0,
        q0 => B_cached_q0);

    DCT_sitofp_32ns_32_6_U0 : component DCT_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_221_p0,
        ce => grp_fu_221_ce,
        dout => grp_fu_221_p1);

    DCT_mul_32s_32s_32_6_U1 : component DCT_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_667_p0,
        din1 => grp_fu_667_p1,
        ce => grp_fu_667_ce,
        dout => grp_fu_667_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_150 assign process. --
    i_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_255_p2)))) then 
                i_reg_150 <= i_1_reg_685;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_150 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_161 assign process. --
    j_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                j_reg_161 <= j_1_reg_703;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_225_p2 = ap_const_lv1_0))) then 
                j_reg_161 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_185 assign process. --
    k_1_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (((ap_const_lv1_0 = tmp_3_reg_708) and not((tmp_reg_690 = ap_const_lv1_0))) or (not((tmp_reg_690 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond2_fu_273_p2)))))) then 
                k_1_reg_185 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                k_1_reg_185 <= k_4_reg_753;
            end if; 
        end if;
    end process;

    -- k_2_reg_196 assign process. --
    k_2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                k_2_reg_196 <= k_5_reg_797;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and ((tmp_reg_690 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_447_p2))))) then 
                k_2_reg_196 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- k_reg_173 assign process. --
    k_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_255_p2) and not((ap_const_lv1_0 = tmp_3_fu_267_p2)))) then 
                k_reg_173 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                k_reg_173 <= k_3_reg_715;
            end if; 
        end if;
    end process;

    -- temp_reg_208 assign process. --
    temp_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                temp_reg_208 <= temp_1_fu_672_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and ((tmp_reg_690 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_447_p2))))) then 
                temp_reg_208 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                B_cached_load_reg_817 <= B_cached_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_685 <= i_1_fu_231_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                isNeg_1_reg_779 <= sh_assign_2_fu_527_p2(8 downto 8);
                p_Result_2_reg_774 <= p_Val2_6_fu_485_p1(31 downto 31);
                tmp_15_reg_789 <= tmp_5_i_i1_fu_577_p2(54 downto 23);
                tmp_20_reg_784 <= tmp_3_i_i1_fu_571_p2(23 downto 23);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                isNeg_reg_735 <= sh_assign_fu_345_p2(8 downto 8);
                p_Result_s_reg_730 <= p_Val2_s_fu_303_p1(31 downto 31);
                tmp_10_reg_745 <= tmp_5_i_i_fu_395_p2(54 downto 23);
                tmp_14_reg_740 <= tmp_3_i_i_fu_389_p2(23 downto 23);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_703 <= j_1_fu_261_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_3_reg_708)))) then
                k_3_reg_715 <= k_3_fu_279_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_reg_690 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then
                k_4_reg_753 <= k_4_fu_453_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                k_5_reg_797 <= k_5_fu_630_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_624_p2)))) then
                p_addr3_reg_807 <= p_addr3_fu_658_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_225_p2 = ap_const_lv1_0))) then
                    p_addr4_cast_reg_694(6 downto 3) <= p_addr4_cast_fu_251_p1(6 downto 3);
                tmp_reg_690 <= tmp_fu_237_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_reg_690 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond1_fu_447_p2))) then
                    tmp_12_reg_758(7 downto 0) <= tmp_12_fu_476_p1(7 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                tmp_2_reg_832 <= grp_fu_221_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_255_p2))) then
                tmp_3_reg_708 <= tmp_3_fu_267_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (((ap_const_lv1_0 = tmp_3_reg_708) and not((tmp_reg_690 = ap_const_lv1_0))) or (not((tmp_reg_690 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond2_fu_273_p2)))))) then
                    tmp_7_trn7_cast_reg_725(3 downto 0) <= tmp_7_trn7_cast_fu_299_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and ((tmp_reg_690 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_447_p2))))) then
                    tmp_trn_cast_reg_768(3 downto 0) <= tmp_trn_cast_fu_481_p1(3 downto 0);
            end if;
        end if;
    end process;
    p_addr4_cast_reg_694(2 downto 0) <= "000";
    p_addr4_cast_reg_694(7) <= '0';
    tmp_7_trn7_cast_reg_725(7 downto 4) <= "0000";
    tmp_12_reg_758(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_trn_cast_reg_768(7 downto 4) <= "0000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_reg_690, exitcond4_fu_225_p2, tmp_3_reg_708, exitcond3_fu_255_p2, exitcond2_fu_273_p2, exitcond1_fu_447_p2, exitcond_fu_624_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond4_fu_225_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_255_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((ap_const_lv1_0 = tmp_3_reg_708) or not((ap_const_lv1_0 = exitcond2_fu_273_p2)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st7_fsm_6 => 
                if (((tmp_reg_690 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_fu_447_p2)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond_fu_624_p2))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_8_fu_294_p1(6 - 1 downto 0);

    -- A_cached_row_address0 assign process. --
    A_cached_row_address0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st6_fsm_5, tmp_4_fu_419_p1, tmp_6_fu_662_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            A_cached_row_address0 <= tmp_4_fu_419_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            A_cached_row_address0 <= tmp_6_fu_662_p1(3 - 1 downto 0);
        else 
            A_cached_row_address0 <= "XXX";
        end if; 
    end process;


    -- A_cached_row_ce0 assign process. --
    A_cached_row_ce0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            A_cached_row_ce0 <= ap_const_logic_1;
        else 
            A_cached_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_cached_row_d0 <= 
        p_Val2_7_i_i_fu_433_p2 when (p_Result_s_reg_730(0) = '1') else 
        p_Val2_3_fu_427_p3;

    -- A_cached_row_we0 assign process. --
    A_cached_row_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            A_cached_row_we0 <= ap_const_logic_1;
        else 
            A_cached_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_12_fu_476_p1(6 - 1 downto 0);

    -- B_cached_address0 assign process. --
    B_cached_address0_assign_proc : process(tmp_12_reg_758, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8, tmp_18_fu_653_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            B_cached_address0 <= tmp_12_reg_758(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            B_cached_address0 <= tmp_18_fu_653_p1(6 - 1 downto 0);
        else 
            B_cached_address0 <= "XXXXXX";
        end if; 
    end process;


    -- B_cached_ce0 assign process. --
    B_cached_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            B_cached_ce0 <= ap_const_logic_1;
        else 
            B_cached_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_cached_d0 <= 
        p_Val2_7_i_i1_fu_610_p2 when (p_Result_2_reg_774(0) = '1') else 
        p_Val2_9_fu_604_p3;

    -- B_cached_we0 assign process. --
    B_cached_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            B_cached_we0 <= ap_const_logic_1;
        else 
            B_cached_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B_ce0 assign process. --
    B_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= tmp_16_fu_678_p1(6 - 1 downto 0);

    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= tmp_2_reg_832;

    -- C_we0 assign process. --
    C_we0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_225_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_225_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_225_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_225_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_130 assign process. --
    ap_sig_bdd_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_130 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_168 assign process. --
    ap_sig_bdd_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_168 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_201 assign process. --
    ap_sig_bdd_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_201 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_212 assign process. --
    ap_sig_bdd_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_212 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_274 assign process. --
    ap_sig_bdd_274_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_274 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_287 assign process. --
    ap_sig_bdd_287_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_287 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_41 assign process. --
    ap_sig_bdd_41_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_41 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_72 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_201)
    begin
        if (ap_sig_bdd_201) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_212)
    begin
        if (ap_sig_bdd_212) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_41)
    begin
        if (ap_sig_bdd_41) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_72)
    begin
        if (ap_sig_bdd_72) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_130)
    begin
        if (ap_sig_bdd_130) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_274)
    begin
        if (ap_sig_bdd_274) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_168)
    begin
        if (ap_sig_bdd_168) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_287)
    begin
        if (ap_sig_bdd_287) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_447_p2 <= "1" when (k_1_reg_185 = ap_const_lv4_8) else "0";
    exitcond2_fu_273_p2 <= "1" when (k_reg_173 = ap_const_lv4_8) else "0";
    exitcond3_fu_255_p2 <= "1" when (j_reg_161 = ap_const_lv4_8) else "0";
    exitcond4_fu_225_p2 <= "1" when (i_reg_150 = ap_const_lv4_8) else "0";
    exitcond_fu_624_p2 <= "1" when (k_2_reg_196 = ap_const_lv4_8) else "0";
    grp_fu_221_ce <= ap_const_logic_1;
    grp_fu_221_p0 <= temp_reg_208;
    grp_fu_667_ce <= ap_const_logic_1;
    grp_fu_667_p0 <= B_cached_load_reg_817;
    grp_fu_667_p1 <= A_cached_row_q0;
    i_1_fu_231_p2 <= std_logic_vector(unsigned(i_reg_150) + unsigned(ap_const_lv4_1));
    isNeg_1_fu_533_p3 <= sh_assign_2_fu_527_p2(8 downto 8);
    isNeg_fu_351_p3 <= sh_assign_fu_345_p2(8 downto 8);
    j_1_fu_261_p2 <= std_logic_vector(unsigned(j_reg_161) + unsigned(ap_const_lv4_1));
    k_3_fu_279_p2 <= std_logic_vector(unsigned(k_reg_173) + unsigned(ap_const_lv4_1));
    k_4_fu_453_p2 <= std_logic_vector(unsigned(k_1_reg_185) + unsigned(ap_const_lv4_1));
    k_5_fu_630_p2 <= std_logic_vector(unsigned(k_2_reg_196) + unsigned(ap_const_lv4_1));
    loc_V_1_fu_325_p1 <= p_Val2_s_fu_303_p1(23 - 1 downto 0);
    loc_V_2_fu_497_p4 <= p_Val2_6_fu_485_p1(30 downto 23);
    loc_V_3_fu_507_p1 <= p_Val2_6_fu_485_p1(23 - 1 downto 0);
    loc_V_fu_315_p4 <= p_Val2_s_fu_303_p1(30 downto 23);
    p_Result_1_fu_329_p3 <= (ap_const_lv1_1 & loc_V_1_fu_325_p1);
    p_Result_3_fu_511_p3 <= (ap_const_lv1_1 & loc_V_3_fu_507_p1);
    p_Val2_3_fu_427_p3 <= 
        tmp_7_fu_424_p1 when (isNeg_reg_735(0) = '1') else 
        tmp_10_reg_745;
    p_Val2_6_fu_485_p1 <= B_q0;
    p_Val2_7_i_i1_fu_610_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_9_fu_604_p3));
    p_Val2_7_i_i_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_3_fu_427_p3));
    p_Val2_9_fu_604_p3 <= 
        tmp_13_fu_601_p1 when (isNeg_1_reg_779(0) = '1') else 
        tmp_15_reg_789;
    p_Val2_s_fu_303_p1 <= A_q0;
    p_addr1_fu_648_p2 <= std_logic_vector(unsigned(tmp_trn_cast_reg_768) + unsigned(p_addr_cast_fu_644_p1));
    p_addr3_fu_658_p2 <= std_logic_vector(unsigned(tmp_trn_cast_reg_768) + unsigned(p_addr4_cast_reg_694));
    p_addr4_cast_fu_251_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_243_p3),8));
    p_addr5_fu_289_p2 <= std_logic_vector(unsigned(p_addr4_cast_reg_694) + unsigned(tmp_4_trn_cast_fu_285_p1));
    p_addr8_cast_fu_467_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_459_p3),8));
    p_addr9_fu_471_p2 <= std_logic_vector(unsigned(p_addr8_cast_fu_467_p1) + unsigned(tmp_7_trn7_cast_reg_725));
    p_addr_cast_fu_644_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_636_p3),8));
        sh_assign_1_cast_cast_fu_381_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_369_p3),24));

        sh_assign_1_cast_fu_377_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_369_p3),32));

    sh_assign_1_fu_369_p3 <= 
        tmp_1_i_i_cast_fu_365_p1 when (isNeg_fu_351_p3(0) = '1') else 
        sh_assign_fu_345_p2;
    sh_assign_2_fu_527_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i1_cast3_fu_523_p1));
        sh_assign_3_cast_cast_fu_563_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_551_p3),24));

        sh_assign_3_cast_fu_559_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_551_p3),32));

    sh_assign_3_fu_551_p3 <= 
        tmp_1_i_i1_cast_fu_547_p1 when (isNeg_1_fu_533_p3(0) = '1') else 
        sh_assign_2_fu_527_p2;
    sh_assign_fu_345_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast5_fu_341_p1));
    temp_1_fu_672_p2 <= std_logic_vector(signed(grp_fu_667_p2) + signed(temp_reg_208));
    tmp_11_fu_459_p3 <= (k_1_reg_185 & ap_const_lv3_0);
    tmp_12_fu_476_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_471_p2),64));
    tmp_13_fu_601_p1 <= std_logic_vector(resize(unsigned(tmp_20_reg_784),32));
    tmp_16_fu_678_p1 <= std_logic_vector(resize(unsigned(p_addr3_reg_807),64));
    tmp_17_fu_636_p3 <= (k_2_reg_196 & ap_const_lv3_0);
    tmp_18_fu_653_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_648_p2),64));
    tmp_1_fu_243_p3 <= (i_reg_150 & ap_const_lv3_0);
        tmp_1_i_i1_cast_fu_547_p1 <= std_logic_vector(resize(signed(tmp_1_i_i1_fu_541_p2),9));

    tmp_1_i_i1_fu_541_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_2_fu_497_p4));
        tmp_1_i_i_cast_fu_365_p1 <= std_logic_vector(resize(signed(tmp_1_i_i_fu_359_p2),9));

    tmp_1_i_i_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_315_p4));
    tmp_2_i_i1_fu_567_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_559_p1),78));
    tmp_2_i_i_fu_385_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_377_p1),78));
    tmp_3_fu_267_p2 <= "1" when (j_reg_161 = ap_const_lv4_0) else "0";
    tmp_3_i_i1_fu_571_p2 <= std_logic_vector(shift_right(unsigned(p_Result_3_fu_511_p3),to_integer(unsigned('0' & sh_assign_3_cast_cast_fu_563_p1(24-1 downto 0)))));
    tmp_3_i_i_fu_389_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_329_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_381_p1(24-1 downto 0)))));
    tmp_4_fu_419_p1 <= std_logic_vector(resize(unsigned(k_reg_173),64));
    tmp_4_trn_cast_fu_285_p1 <= std_logic_vector(resize(unsigned(k_reg_173),8));
    tmp_5_i_i1_fu_577_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i1_fu_519_p1),to_integer(unsigned('0' & tmp_2_i_i1_fu_567_p1(31-1 downto 0)))));
    tmp_5_i_i_fu_395_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_337_p1),to_integer(unsigned('0' & tmp_2_i_i_fu_385_p1(31-1 downto 0)))));
    tmp_6_fu_662_p1 <= std_logic_vector(resize(unsigned(k_2_reg_196),64));
    tmp_7_fu_424_p1 <= std_logic_vector(resize(unsigned(tmp_14_reg_740),32));
    tmp_7_trn7_cast_fu_299_p1 <= std_logic_vector(resize(unsigned(j_reg_161),8));
    tmp_8_fu_294_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_289_p2),64));
    tmp_fu_237_p2 <= "1" when (i_reg_150 = ap_const_lv4_0) else "0";
    tmp_i_i1_fu_519_p1 <= std_logic_vector(resize(unsigned(p_Result_3_fu_511_p3),78));
    tmp_i_i_fu_337_p1 <= std_logic_vector(resize(unsigned(p_Result_1_fu_329_p3),78));
    tmp_i_i_i1_cast3_fu_523_p1 <= std_logic_vector(resize(unsigned(loc_V_2_fu_497_p4),9));
    tmp_i_i_i_cast5_fu_341_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_315_p4),9));
    tmp_trn_cast_fu_481_p1 <= std_logic_vector(resize(unsigned(j_reg_161),8));
end behav;
