// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _DCT_HH_
#define _DCT_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "DCT_MAT_Multiply.h"
#include "DCT_Tinv.h"
#include "DCT_T.h"
#include "DCT_MAT_Multiply_B_cached.h"

namespace ap_rtl {

struct DCT : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > X_address0;
    sc_out< sc_logic > X_ce0;
    sc_in< sc_lv<32> > X_q0;
    sc_in< sc_lv<8> > function_r;
    sc_out< sc_lv<6> > Y_address0;
    sc_out< sc_logic > Y_ce0;
    sc_out< sc_logic > Y_we0;
    sc_out< sc_lv<32> > Y_d0;


    // Module declarations
    DCT(sc_module_name name);
    SC_HAS_PROCESS(DCT);

    ~DCT();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    DCT_Tinv* Tinv_U;
    DCT_T* T_U;
    DCT_MAT_Multiply_B_cached* temp_U;
    DCT_MAT_Multiply* grp_DCT_MAT_Multiply_fu_35;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<6> > Tinv_address0;
    sc_signal< sc_logic > Tinv_ce0;
    sc_signal< sc_lv<32> > Tinv_q0;
    sc_signal< sc_lv<6> > T_address0;
    sc_signal< sc_logic > T_ce0;
    sc_signal< sc_lv<32> > T_q0;
    sc_signal< sc_lv<1> > cond_fu_49_p2;
    sc_signal< sc_lv<1> > cond_reg_55;
    sc_signal< sc_lv<6> > temp_address0;
    sc_signal< sc_logic > temp_ce0;
    sc_signal< sc_logic > temp_we0;
    sc_signal< sc_lv<32> > temp_d0;
    sc_signal< sc_lv<32> > temp_q0;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_ap_start;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_ap_done;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_ap_idle;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_ap_ready;
    sc_signal< sc_lv<6> > grp_DCT_MAT_Multiply_fu_35_A_address0;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_A_ce0;
    sc_signal< sc_lv<32> > grp_DCT_MAT_Multiply_fu_35_A_q0;
    sc_signal< sc_lv<6> > grp_DCT_MAT_Multiply_fu_35_B_address0;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_B_ce0;
    sc_signal< sc_lv<32> > grp_DCT_MAT_Multiply_fu_35_B_q0;
    sc_signal< sc_lv<6> > grp_DCT_MAT_Multiply_fu_35_C_address0;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_C_ce0;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_C_we0;
    sc_signal< sc_lv<32> > grp_DCT_MAT_Multiply_fu_35_C_d0;
    sc_signal< sc_logic > grp_DCT_MAT_Multiply_fu_35_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_103;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_111;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_119;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_126;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_133;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_st1_fsm_0;
    static const sc_lv<6> ap_ST_st2_fsm_1;
    static const sc_lv<6> ap_ST_st3_fsm_2;
    static const sc_lv<6> ap_ST_st4_fsm_3;
    static const sc_lv<6> ap_ST_st5_fsm_4;
    static const sc_lv<6> ap_ST_st6_fsm_5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_T_address0();
    void thread_T_ce0();
    void thread_Tinv_address0();
    void thread_Tinv_ce0();
    void thread_X_address0();
    void thread_X_ce0();
    void thread_Y_address0();
    void thread_Y_ce0();
    void thread_Y_d0();
    void thread_Y_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_103();
    void thread_ap_sig_bdd_111();
    void thread_ap_sig_bdd_119();
    void thread_ap_sig_bdd_126();
    void thread_ap_sig_bdd_133();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_cond_fu_49_p2();
    void thread_grp_DCT_MAT_Multiply_fu_35_A_q0();
    void thread_grp_DCT_MAT_Multiply_fu_35_B_q0();
    void thread_grp_DCT_MAT_Multiply_fu_35_ap_start();
    void thread_temp_address0();
    void thread_temp_ce0();
    void thread_temp_d0();
    void thread_temp_we0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
