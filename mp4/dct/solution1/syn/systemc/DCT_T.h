// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __DCT_T_H__
#define __DCT_T_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct DCT_T_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(DCT_T_ram) {
        for (unsigned i = 0; i < 8 ; i = i + 1) {
            ram[i] = "0b00111110101101010000010011110011";
        }
        ram[8] = "0b00111110111110110001010010111110";
        ram[9] = "0b00111110110101001101101100110001";
        ram[10] = "0b00111110100011100011100111011010";
        ram[11] = "0b00111101110001111100010111000010";
        ram[12] = "0b10111101110001111100010111000010";
        ram[13] = "0b10111110100011100011100111011010";
        ram[14] = "0b10111110110101001101101100110001";
        ram[15] = "0b10111110111110110001010010111110";
        ram[16] = "0b00111110111011001000001101011111";
        ram[17] = "0b00111110010000111110111100010101";
        ram[18] = "0b10111110010000111110111100010101";
        ram[19] = "0b10111110111011001000001101011111";
        ram[20] = "0b10111110111011001000001101011111";
        ram[21] = "0b10111110010000111110111100010101";
        ram[22] = "0b00111110010000111110111100010101";
        ram[23] = "0b00111110111011001000001101011111";
        ram[24] = "0b00111110110101001101101100110001";
        ram[25] = "0b10111101110001111100010111000010";
        ram[26] = "0b10111110111110110001010010111110";
        ram[27] = "0b10111110100011100011100111011010";
        ram[28] = "0b00111110100011100011100111011010";
        ram[29] = "0b00111110111110110001010010111110";
        ram[30] = "0b00111101110001111100010111000010";
        ram[31] = "0b10111110110101001101101100110001";
        ram[32] = "0b00111110101101010000010011110011";
        ram[33] = "0b10111110101101010000010011110011";
        ram[34] = "0b10111110101101010000010011110011";
        ram[35] = "0b00111110101101010000010011110011";
        ram[36] = "0b00111110101101010000010011110011";
        ram[37] = "0b10111110101101010000010011110011";
        ram[38] = "0b10111110101101010000010011110011";
        ram[39] = "0b00111110101101010000010011110011";
        ram[40] = "0b00111110100011100011100111011010";
        ram[41] = "0b10111110111110110001010010111110";
        ram[42] = "0b00111101110001111100010111000010";
        ram[43] = "0b00111110110101001101101100110001";
        ram[44] = "0b10111110110101001101101100110001";
        ram[45] = "0b10111101110001111100010111000010";
        ram[46] = "0b00111110111110110001010010111110";
        ram[47] = "0b10111110100011100011100111011010";
        ram[48] = "0b00111110010000111110111100010101";
        ram[49] = "0b10111110111011001000001101011111";
        ram[50] = "0b00111110111011001000001101011111";
        ram[51] = "0b10111110010000111110111100010101";
        ram[52] = "0b10111110010000111110111100010101";
        ram[53] = "0b00111110111011001000001101011111";
        ram[54] = "0b10111110111011001000001101011111";
        ram[55] = "0b00111110010000111110111100010101";
        ram[56] = "0b00111101110001111100010111000010";
        ram[57] = "0b10111110100011100011100111011010";
        ram[58] = "0b00111110110101001101101100110001";
        ram[59] = "0b10111110111110110001010010111110";
        ram[60] = "0b00111110111110110001010010111110";
        ram[61] = "0b10111110110101001101101100110001";
        ram[62] = "0b00111110100011100011100111011010";
        ram[63] = "0b10111101110001111100010111000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(DCT_T) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


DCT_T_ram* meminst;


SC_CTOR(DCT_T) {
meminst = new DCT_T_ram("DCT_T_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~DCT_T() {
    delete meminst;
}


};//endmodule
#endif
