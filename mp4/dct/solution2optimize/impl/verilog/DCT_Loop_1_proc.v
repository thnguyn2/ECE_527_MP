// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DCT_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Y_din,
        Y_full_n,
        Y_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv7_8 = 7'b1000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] Y_din;
input   Y_full_n;
output   Y_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Y_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [3:0] rowrcv_fu_86_p2;
reg   [3:0] rowrcv_reg_124;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_40;
wire   [6:0] count_fu_92_p2;
reg   [6:0] count_reg_129;
wire   [0:0] exitcond4_i_i_fu_80_p2;
wire   [3:0] p_rec_i_i_fu_104_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_55;
wire   [0:0] exitcond_fu_98_p2;
reg    ap_sig_bdd_61;
wire   [6:0] tmp_i_fu_110_p2;
reg   [3:0] rowrcv_0_i_i_reg_35;
reg    ap_sig_bdd_73;
reg   [6:0] p_01_i_idx_i_reg_46;
reg   [3:0] p_12_rec_i_i_reg_58;
reg   [6:0] count_1_i_i_reg_69;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_i_i_fu_80_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_98_p2) & ~ap_sig_bdd_61)) begin
        count_1_i_i_reg_69 <= tmp_i_fu_110_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_i_i_fu_80_p2 == ap_const_lv1_0))) begin
        count_1_i_i_reg_69 <= p_01_i_idx_i_reg_46;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_61 & ~(ap_const_lv1_0 == exitcond_fu_98_p2))) begin
        p_01_i_idx_i_reg_46 <= count_reg_129;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_73)) begin
        p_01_i_idx_i_reg_46 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_98_p2) & ~ap_sig_bdd_61)) begin
        p_12_rec_i_i_reg_58 <= p_rec_i_i_fu_104_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_i_i_fu_80_p2 == ap_const_lv1_0))) begin
        p_12_rec_i_i_reg_58 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_61 & ~(ap_const_lv1_0 == exitcond_fu_98_p2))) begin
        rowrcv_0_i_i_reg_35 <= rowrcv_reg_124;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_73)) begin
        rowrcv_0_i_i_reg_35 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_i_i_fu_80_p2 == ap_const_lv1_0))) begin
        count_reg_129 <= count_fu_92_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        rowrcv_reg_124 <= rowrcv_fu_86_p2;
    end
end

/// Y_write assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond_fu_98_p2 or ap_sig_bdd_61)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_98_p2) & ~ap_sig_bdd_61)) begin
        Y_write = ap_const_logic_1;
    end else begin
        Y_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond4_i_i_fu_80_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_i_i_fu_80_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond4_i_i_fu_80_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_i_i_fu_80_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_40)
begin
    if (ap_sig_bdd_40) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_55)
begin
    if (ap_sig_bdd_55) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond4_i_i_fu_80_p2 or exitcond_fu_98_p2 or ap_sig_bdd_61 or ap_sig_bdd_73)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_73) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond4_i_i_fu_80_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (((ap_const_lv1_0 == exitcond_fu_98_p2) & ~ap_sig_bdd_61)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else if ((~ap_sig_bdd_61 & ~(ap_const_lv1_0 == exitcond_fu_98_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Y_din = tmp_i_fu_110_p2;

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_40 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_40 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_55 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_55 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_61 assign process. ///
always @ (Y_full_n or exitcond_fu_98_p2)
begin
    ap_sig_bdd_61 = ((Y_full_n == ap_const_logic_0) & (ap_const_lv1_0 == exitcond_fu_98_p2));
end

/// ap_sig_bdd_73 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_73 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign count_fu_92_p2 = (p_01_i_idx_i_reg_46 + ap_const_lv7_8);
assign exitcond4_i_i_fu_80_p2 = (rowrcv_0_i_i_reg_35 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_98_p2 = (p_12_rec_i_i_reg_58 == ap_const_lv4_8? 1'b1: 1'b0);
assign p_rec_i_i_fu_104_p2 = (p_12_rec_i_i_reg_58 + ap_const_lv4_1);
assign rowrcv_fu_86_p2 = (rowrcv_0_i_i_reg_35 + ap_const_lv4_1);
assign tmp_i_fu_110_p2 = (count_1_i_i_reg_69 + ap_const_lv7_1);


endmodule //DCT_Loop_1_proc

