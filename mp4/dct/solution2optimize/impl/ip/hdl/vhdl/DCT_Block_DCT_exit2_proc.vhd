-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_Block_DCT_exit2_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Ybuff_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Ybuff_ce0 : OUT STD_LOGIC;
    Ybuff_we0 : OUT STD_LOGIC;
    Ybuff_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Xbuff_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Xbuff_empty_n : IN STD_LOGIC;
    Xbuff_read : OUT STD_LOGIC );
end;


architecture behav of DCT_Block_DCT_exit2_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal rowrcv_fu_90_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal rowrcv_reg_137 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_47 : BOOLEAN;
    signal tmp_2_fu_100_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_142 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colrcv_fu_118_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_62 : BOOLEAN;
    signal exitcond2_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_68 : BOOLEAN;
    signal rowrcv_1_reg_61 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_77 : BOOLEAN;
    signal colrcv_1_reg_72 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_96_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal colrcv_1_cast_fu_108_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_124_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_84_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- colrcv_1_reg_72 assign process. --
    colrcv_1_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_84_p2 = ap_const_lv1_0))) then 
                colrcv_1_reg_72 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_112_p2) and not(ap_sig_bdd_68))) then 
                colrcv_1_reg_72 <= colrcv_fu_118_p2;
            end if; 
        end if;
    end process;

    -- rowrcv_1_reg_61 assign process. --
    rowrcv_1_reg_61_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_68) and not((ap_const_lv1_0 = exitcond2_fu_112_p2)))) then 
                rowrcv_1_reg_61 <= rowrcv_reg_137;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_77))) then 
                rowrcv_1_reg_61 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                rowrcv_reg_137 <= rowrcv_fu_90_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_84_p2 = ap_const_lv1_0))) then
                    tmp_2_reg_142(5 downto 3) <= tmp_2_fu_100_p3(5 downto 3);
            end if;
        end if;
    end process;
    tmp_2_reg_142(2 downto 0) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond3_fu_84_p2, exitcond2_fu_112_p2, ap_sig_bdd_68, ap_sig_bdd_77)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_77)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond3_fu_84_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (((ap_const_lv1_0 = exitcond2_fu_112_p2) and not(ap_sig_bdd_68))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not(ap_sig_bdd_68) and not((ap_const_lv1_0 = exitcond2_fu_112_p2)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- Xbuff_read assign process. --
    Xbuff_read_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond2_fu_112_p2, ap_sig_bdd_68)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_112_p2) and not(ap_sig_bdd_68))) then 
            Xbuff_read <= ap_const_logic_1;
        else 
            Xbuff_read <= ap_const_logic_0;
        end if; 
    end process;


    -- Ybuff_address0 assign process. --
    Ybuff_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, tmp_6_fu_129_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            Ybuff_address0 <= tmp_6_fu_129_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            Ybuff_address0 <= ap_const_lv64_40(7 - 1 downto 0);
        else 
            Ybuff_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- Ybuff_ce0 assign process. --
    Ybuff_ce0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_68, ap_sig_bdd_77)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_68)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_77)))) then 
            Ybuff_ce0 <= ap_const_logic_1;
        else 
            Ybuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- Ybuff_d0 assign process. --
    Ybuff_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, Xbuff_dout, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            Ybuff_d0 <= Xbuff_dout;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            Ybuff_d0 <= ap_const_lv32_BF800000;
        else 
            Ybuff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- Ybuff_we0 assign process. --
    Ybuff_we0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, exitcond2_fu_112_p2, ap_sig_bdd_68, ap_sig_bdd_77)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_77)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_112_p2) and not(ap_sig_bdd_68)))) then 
            Ybuff_we0 <= ap_const_logic_1;
        else 
            Ybuff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_84_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_84_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_84_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_84_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_47 assign process. --
    ap_sig_bdd_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_47 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_62 assign process. --
    ap_sig_bdd_62_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_62 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_68 assign process. --
    ap_sig_bdd_68_assign_proc : process(Xbuff_empty_n, exitcond2_fu_112_p2)
    begin
                ap_sig_bdd_68 <= ((Xbuff_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond2_fu_112_p2));
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_77 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_47)
    begin
        if (ap_sig_bdd_47) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_62)
    begin
        if (ap_sig_bdd_62) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    colrcv_1_cast_fu_108_p1 <= std_logic_vector(resize(unsigned(colrcv_1_reg_72),6));
    colrcv_fu_118_p2 <= std_logic_vector(unsigned(colrcv_1_reg_72) + unsigned(ap_const_lv4_1));
    exitcond2_fu_112_p2 <= "1" when (colrcv_1_reg_72 = ap_const_lv4_8) else "0";
    exitcond3_fu_84_p2 <= "1" when (rowrcv_1_reg_61 = ap_const_lv4_8) else "0";
    rowrcv_fu_90_p2 <= std_logic_vector(unsigned(rowrcv_1_reg_61) + unsigned(ap_const_lv4_1));
    tmp_2_fu_100_p3 <= (tmp_fu_96_p1 & ap_const_lv3_0);
    tmp_3_fu_124_p2 <= std_logic_vector(unsigned(tmp_2_reg_142) + unsigned(colrcv_1_cast_fu_108_p1));
    tmp_6_fu_129_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_124_p2),64));
    tmp_fu_96_p1 <= rowrcv_1_reg_61(3 - 1 downto 0);
end behav;
