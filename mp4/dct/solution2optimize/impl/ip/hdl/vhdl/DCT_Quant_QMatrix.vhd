-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DCT_Quant_QMatrix_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DCT_Quant_QMatrix_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "01000001100000000000000000000000", 
    1 => "01000001001100000000000000000000", 
    2 => "01000001001000000000000000000000", 
    3 => "01000001100000000000000000000000", 
    4 => "01000001110000000000000000000000", 
    5 => "01000010001000000000000000000000", 
    6 => "01000010010011000000000000000000", 
    7 => "01000010011101000000000000000000", 
    8 to 9=> "01000001010000000000000000000000", 
    10 => "01000001011000000000000000000000", 
    11 => "01000001100110000000000000000000", 
    12 => "01000001110100000000000000000000", 
    13 => "01000010011010000000000000000000", 
    14 => "01000010011100000000000000000000", 
    15 => "01000010010111000000000000000000", 
    16 => "01000001011000000000000000000000", 
    17 => "01000001010100000000000000000000", 
    18 => "01000001100000000000000000000000", 
    19 => "01000001110000000000000000000000", 
    20 => "01000010001000000000000000000000", 
    21 => "01000010011001000000000000000000", 
    22 => "01000010100010100000000000000000", 
    23 => "01000010011000000000000000000000", 
    24 => "01000001011000000000000000000000", 
    25 => "01000001100010000000000000000000", 
    26 => "01000001101100000000000000000000", 
    27 => "01000001111010000000000000000000", 
    28 => "01000010010011000000000000000000", 
    29 => "01000010101011100000000000000000", 
    30 => "01000010101000000000000000000000", 
    31 => "01000010011110000000000000000000", 
    32 => "01000001100100000000000000000000", 
    33 => "01000001101100000000000000000000", 
    34 => "01000010000101000000000000000000", 
    35 => "01000010011000000000000000000000", 
    36 => "01000010100010000000000000000000", 
    37 => "01000010110110100000000000000000", 
    38 => "01000010110011100000000000000000", 
    39 => "01000010100110100000000000000000", 
    40 => "01000001110000000000000000000000", 
    41 => "01000010000011000000000000000000", 
    42 => "01000010010111000000000000000000", 
    43 => "01000010100000000000000000000000", 
    44 => "01000010101000100000000000000000", 
    45 => "01000010110100000000000000000000", 
    46 => "01000010111000100000000000000000", 
    47 => "01000010101110000000000000000000", 
    48 => "01000010010001000000000000000000", 
    49 => "01000010100000000000000000000000", 
    50 => "01000010100111000000000000000000", 
    51 => "01000010101011100000000000000000", 
    52 => "01000010110011100000000000000000", 
    53 => "01000010111100100000000000000000", 
    54 => "01000010111100000000000000000000", 
    55 => "01000010110010100000000000000000", 
    56 => "01000010100100000000000000000000", 
    57 => "01000010101110000000000000000000", 
    58 => "01000010101111100000000000000000", 
    59 => "01000010110001000000000000000000", 
    60 => "01000010111000000000000000000000", 
    61 => "01000010110010000000000000000000", 
    62 => "01000010110011100000000000000000", 
    63 => "01000010110001100000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity DCT_Quant_QMatrix is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DCT_Quant_QMatrix is
    component DCT_Quant_QMatrix_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DCT_Quant_QMatrix_rom_U :  component DCT_Quant_QMatrix_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


