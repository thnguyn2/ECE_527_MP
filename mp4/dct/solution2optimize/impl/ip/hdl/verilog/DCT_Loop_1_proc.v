// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DCT_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        X_dout,
        X_empty_n,
        X_read,
        Xbuff_address0,
        Xbuff_ce0,
        Xbuff_we0,
        Xbuff_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv7_42 = 7'b1000010;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
output  [6:0] Xbuff_address0;
output   Xbuff_ce0;
output   Xbuff_we0;
output  [31:0] Xbuff_d0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_read;
reg Xbuff_ce0;
reg Xbuff_we0;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [6:0] read_idx_fu_78_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_49;
wire   [0:0] exitcond1_fu_72_p2;
reg    ap_sig_bdd_56;
reg   [6:0] read_idx_0_i_i_reg_52;
reg    ap_sig_bdd_65;
wire   [63:0] p_0_rec_i_i_cast_fu_67_p1;
reg   [31:0] opt_type_02_loc_loc_loc0_fu_30;
wire   [31:0] tempin_0_opt_type_02_i_i_fu_95_p3;
wire   [0:0] tmp_3_i_fu_89_p2;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_56 & ~(exitcond1_fu_72_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_72_p2 == ap_const_lv1_0) & ~ap_sig_bdd_56)) begin
        read_idx_0_i_i_reg_52 <= read_idx_fu_78_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_65)) begin
        read_idx_0_i_i_reg_52 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_72_p2 == ap_const_lv1_0) & ~ap_sig_bdd_56)) begin
        opt_type_02_loc_loc_loc0_fu_30 <= tempin_0_opt_type_02_i_i_fu_95_p3;
    end
end

/// X_read assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_72_p2 or ap_sig_bdd_56)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_72_p2 == ap_const_lv1_0) & ~ap_sig_bdd_56)) begin
        X_read = ap_const_logic_1;
    end else begin
        X_read = ap_const_logic_0;
    end
end

/// Xbuff_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_56)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_56)) begin
        Xbuff_ce0 = ap_const_logic_1;
    end else begin
        Xbuff_ce0 = ap_const_logic_0;
    end
end

/// Xbuff_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_72_p2 or ap_sig_bdd_56)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_72_p2 == ap_const_lv1_0) & ~ap_sig_bdd_56)) begin
        Xbuff_we0 = ap_const_logic_1;
    end else begin
        Xbuff_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_72_p2 or ap_sig_bdd_56)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_56 & ~(exitcond1_fu_72_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_72_p2 or ap_sig_bdd_56)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_56 & ~(exitcond1_fu_72_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_49)
begin
    if (ap_sig_bdd_49) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond1_fu_72_p2 or ap_sig_bdd_56 or ap_sig_bdd_65)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_65) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~ap_sig_bdd_56 & ~(exitcond1_fu_72_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond1_fu_72_p2 == ap_const_lv1_0) & ~ap_sig_bdd_56)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Xbuff_address0 = p_0_rec_i_i_cast_fu_67_p1;
assign Xbuff_d0 = X_dout;
assign ap_return_0 = opt_type_02_loc_loc_loc0_fu_30;
assign ap_return_1 = opt_type_02_loc_loc_loc0_fu_30;

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_49 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_49 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_56 assign process. ///
always @ (X_empty_n or exitcond1_fu_72_p2)
begin
    ap_sig_bdd_56 = ((X_empty_n == ap_const_logic_0) & (exitcond1_fu_72_p2 == ap_const_lv1_0));
end

/// ap_sig_bdd_65 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_65 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign exitcond1_fu_72_p2 = (read_idx_0_i_i_reg_52 == ap_const_lv7_42? 1'b1: 1'b0);
assign p_0_rec_i_i_cast_fu_67_p1 = read_idx_0_i_i_reg_52;
assign read_idx_fu_78_p2 = (read_idx_0_i_i_reg_52 + ap_const_lv7_1);
assign tempin_0_opt_type_02_i_i_fu_95_p3 = ((tmp_3_i_fu_89_p2[0:0]===1'b1)? X_dout: opt_type_02_loc_loc_loc0_fu_30);
assign tmp_3_i_fu_89_p2 = (read_idx_0_i_i_reg_52 == ap_const_lv7_1? 1'b1: 1'b0);


endmodule //DCT_Loop_1_proc

