// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DCT_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        X_dout,
        X_empty_n,
        X_read,
        Xbuff_din,
        Xbuff_full_n,
        Xbuff_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] X_dout;
input   X_empty_n;
output   X_read;
output  [31:0] Xbuff_din;
input   Xbuff_full_n;
output   Xbuff_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_read;
reg Xbuff_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [3:0] rowrcv_fu_70_p2;
reg   [3:0] rowrcv_reg_96;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_44;
wire   [3:0] p_rec4_i_i_fu_82_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_53;
wire   [0:0] exitcond1_fu_76_p2;
reg    ap_sig_bdd_63;
reg   [3:0] rowrcv_0_i_i_reg_41;
reg    ap_sig_bdd_72;
reg   [3:0] p_1_rec_i_i_reg_52;
wire   [0:0] exitcond7_i_i_fu_64_p2;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond7_i_i_fu_64_p2))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond7_i_i_fu_64_p2))) begin
        p_1_rec_i_i_reg_52 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_76_p2 == ap_const_lv1_0) & ~ap_sig_bdd_63)) begin
        p_1_rec_i_i_reg_52 <= p_rec4_i_i_fu_82_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_63 & ~(exitcond1_fu_76_p2 == ap_const_lv1_0))) begin
        rowrcv_0_i_i_reg_41 <= rowrcv_reg_96;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_72)) begin
        rowrcv_0_i_i_reg_41 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        rowrcv_reg_96 <= rowrcv_fu_70_p2;
    end
end

/// X_read assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond1_fu_76_p2 or ap_sig_bdd_63)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_76_p2 == ap_const_lv1_0) & ~ap_sig_bdd_63)) begin
        X_read = ap_const_logic_1;
    end else begin
        X_read = ap_const_logic_0;
    end
end

/// Xbuff_write assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond1_fu_76_p2 or ap_sig_bdd_63)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_76_p2 == ap_const_lv1_0) & ~ap_sig_bdd_63)) begin
        Xbuff_write = ap_const_logic_1;
    end else begin
        Xbuff_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond7_i_i_fu_64_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond7_i_i_fu_64_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond7_i_i_fu_64_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond7_i_i_fu_64_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_44)
begin
    if (ap_sig_bdd_44) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_53)
begin
    if (ap_sig_bdd_53) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond1_fu_76_p2 or ap_sig_bdd_63 or ap_sig_bdd_72 or exitcond7_i_i_fu_64_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_72) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond7_i_i_fu_64_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (((exitcond1_fu_76_p2 == ap_const_lv1_0) & ~ap_sig_bdd_63)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else if ((~ap_sig_bdd_63 & ~(exitcond1_fu_76_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Xbuff_din = X_dout;

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_44 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_44 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_53 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_53 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_63 assign process. ///
always @ (X_empty_n or Xbuff_full_n or exitcond1_fu_76_p2)
begin
    ap_sig_bdd_63 = (((X_empty_n == ap_const_logic_0) & (exitcond1_fu_76_p2 == ap_const_lv1_0)) | ((exitcond1_fu_76_p2 == ap_const_lv1_0) & (Xbuff_full_n == ap_const_logic_0)));
end

/// ap_sig_bdd_72 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_72 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign exitcond1_fu_76_p2 = (p_1_rec_i_i_reg_52 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond7_i_i_fu_64_p2 = (rowrcv_0_i_i_reg_41 == ap_const_lv4_8? 1'b1: 1'b0);
assign p_rec4_i_i_fu_82_p2 = (p_1_rec_i_i_reg_52 + ap_const_lv4_1);
assign rowrcv_fu_70_p2 = (rowrcv_0_i_i_reg_41 + ap_const_lv4_1);


endmodule //DCT_Loop_1_proc

