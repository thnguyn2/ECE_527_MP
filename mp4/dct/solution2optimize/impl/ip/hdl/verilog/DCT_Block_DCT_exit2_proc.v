// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DCT_Block_DCT_exit2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Ybuff_address0,
        Ybuff_ce0,
        Ybuff_we0,
        Ybuff_d0,
        Xbuff_dout,
        Xbuff_empty_n,
        Xbuff_read
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv64_40 = 64'b1000000;
parameter    ap_const_lv32_BF800000 = 32'b10111111100000000000000000000000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [6:0] Ybuff_address0;
output   Ybuff_ce0;
output   Ybuff_we0;
output  [31:0] Ybuff_d0;
input  [31:0] Xbuff_dout;
input   Xbuff_empty_n;
output   Xbuff_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] Ybuff_address0;
reg Ybuff_ce0;
reg Ybuff_we0;
reg[31:0] Ybuff_d0;
reg Xbuff_read;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [3:0] rowrcv_fu_90_p2;
reg   [3:0] rowrcv_reg_137;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_47;
wire   [5:0] tmp_2_fu_100_p3;
reg   [5:0] tmp_2_reg_142;
wire   [0:0] exitcond3_fu_84_p2;
wire   [3:0] colrcv_fu_118_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_62;
wire   [0:0] exitcond2_fu_112_p2;
reg    ap_sig_bdd_68;
reg   [3:0] rowrcv_1_reg_61;
reg    ap_sig_bdd_77;
reg   [3:0] colrcv_1_reg_72;
wire   [63:0] tmp_6_fu_129_p1;
wire   [2:0] tmp_fu_96_p1;
wire   [5:0] colrcv_1_cast_fu_108_p1;
wire   [5:0] tmp_3_fu_124_p2;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_84_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_84_p2 == ap_const_lv1_0))) begin
        colrcv_1_reg_72 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_112_p2) & ~ap_sig_bdd_68)) begin
        colrcv_1_reg_72 <= colrcv_fu_118_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_68 & ~(ap_const_lv1_0 == exitcond2_fu_112_p2))) begin
        rowrcv_1_reg_61 <= rowrcv_reg_137;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_77)) begin
        rowrcv_1_reg_61 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        rowrcv_reg_137 <= rowrcv_fu_90_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_84_p2 == ap_const_lv1_0))) begin
        tmp_2_reg_142[5 : 3] <= tmp_2_fu_100_p3[5 : 3];
    end
end

/// Xbuff_read assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond2_fu_112_p2 or ap_sig_bdd_68)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_112_p2) & ~ap_sig_bdd_68)) begin
        Xbuff_read = ap_const_logic_1;
    end else begin
        Xbuff_read = ap_const_logic_0;
    end
end

/// Ybuff_address0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st3_fsm_2 or tmp_6_fu_129_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        Ybuff_address0 = tmp_6_fu_129_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        Ybuff_address0 = ap_const_lv64_40;
    end else begin
        Ybuff_address0 = 'bx;
    end
end

/// Ybuff_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_68 or ap_sig_bdd_77)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_68) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_77))) begin
        Ybuff_ce0 = ap_const_logic_1;
    end else begin
        Ybuff_ce0 = ap_const_logic_0;
    end
end

/// Ybuff_d0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or Xbuff_dout or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        Ybuff_d0 = Xbuff_dout;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        Ybuff_d0 = ap_const_lv32_BF800000;
    end else begin
        Ybuff_d0 = 'bx;
    end
end

/// Ybuff_we0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st3_fsm_2 or exitcond2_fu_112_p2 or ap_sig_bdd_68 or ap_sig_bdd_77)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_77) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_112_p2) & ~ap_sig_bdd_68))) begin
        Ybuff_we0 = ap_const_logic_1;
    end else begin
        Ybuff_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_84_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_84_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_84_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_84_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_47)
begin
    if (ap_sig_bdd_47) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_62)
begin
    if (ap_sig_bdd_62) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond3_fu_84_p2 or exitcond2_fu_112_p2 or ap_sig_bdd_68 or ap_sig_bdd_77)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_77) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond3_fu_84_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (((ap_const_lv1_0 == exitcond2_fu_112_p2) & ~ap_sig_bdd_68)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else if ((~ap_sig_bdd_68 & ~(ap_const_lv1_0 == exitcond2_fu_112_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_47 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_47 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_62 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_62 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_68 assign process. ///
always @ (Xbuff_empty_n or exitcond2_fu_112_p2)
begin
    ap_sig_bdd_68 = ((Xbuff_empty_n == ap_const_logic_0) & (ap_const_lv1_0 == exitcond2_fu_112_p2));
end

/// ap_sig_bdd_77 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_77 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign colrcv_1_cast_fu_108_p1 = colrcv_1_reg_72;
assign colrcv_fu_118_p2 = (colrcv_1_reg_72 + ap_const_lv4_1);
assign exitcond2_fu_112_p2 = (colrcv_1_reg_72 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond3_fu_84_p2 = (rowrcv_1_reg_61 == ap_const_lv4_8? 1'b1: 1'b0);
assign rowrcv_fu_90_p2 = (rowrcv_1_reg_61 + ap_const_lv4_1);
assign tmp_2_fu_100_p3 = {{tmp_fu_96_p1}, {ap_const_lv3_0}};
assign tmp_3_fu_124_p2 = (tmp_2_reg_142 + colrcv_1_cast_fu_108_p1);
assign tmp_6_fu_129_p1 = tmp_3_fu_124_p2;
assign tmp_fu_96_p1 = rowrcv_1_reg_61[2:0];
always @ (posedge ap_clk)
begin
    tmp_2_reg_142[2:0] <= 3'b000;
end



endmodule //DCT_Block_DCT_exit2_proc

