-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_full_n : IN STD_LOGIC;
    Y_write : OUT STD_LOGIC );
end;


architecture behav of DCT_Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal rowrcv_fu_86_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal rowrcv_reg_124 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_40 : BOOLEAN;
    signal count_fu_92_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal count_reg_129 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond4_i_i_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_rec_i_i_fu_104_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_55 : BOOLEAN;
    signal exitcond_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_61 : BOOLEAN;
    signal tmp_i_fu_110_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal rowrcv_0_i_i_reg_35 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_73 : BOOLEAN;
    signal p_01_i_idx_i_reg_46 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_12_rec_i_i_reg_58 : STD_LOGIC_VECTOR (3 downto 0);
    signal count_1_i_i_reg_69 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_i_i_fu_80_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- count_1_i_i_reg_69 assign process. --
    count_1_i_i_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_98_p2) and not(ap_sig_bdd_61))) then 
                count_1_i_i_reg_69 <= tmp_i_fu_110_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_i_i_fu_80_p2 = ap_const_lv1_0))) then 
                count_1_i_i_reg_69 <= p_01_i_idx_i_reg_46;
            end if; 
        end if;
    end process;

    -- p_01_i_idx_i_reg_46 assign process. --
    p_01_i_idx_i_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_61) and not((ap_const_lv1_0 = exitcond_fu_98_p2)))) then 
                p_01_i_idx_i_reg_46 <= count_reg_129;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_73))) then 
                p_01_i_idx_i_reg_46 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- p_12_rec_i_i_reg_58 assign process. --
    p_12_rec_i_i_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_98_p2) and not(ap_sig_bdd_61))) then 
                p_12_rec_i_i_reg_58 <= p_rec_i_i_fu_104_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_i_i_fu_80_p2 = ap_const_lv1_0))) then 
                p_12_rec_i_i_reg_58 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- rowrcv_0_i_i_reg_35 assign process. --
    rowrcv_0_i_i_reg_35_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_61) and not((ap_const_lv1_0 = exitcond_fu_98_p2)))) then 
                rowrcv_0_i_i_reg_35 <= rowrcv_reg_124;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_73))) then 
                rowrcv_0_i_i_reg_35 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_i_i_fu_80_p2 = ap_const_lv1_0))) then
                count_reg_129 <= count_fu_92_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                rowrcv_reg_124 <= rowrcv_fu_86_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond4_i_i_fu_80_p2, exitcond_fu_98_p2, ap_sig_bdd_61, ap_sig_bdd_73)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_73)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond4_i_i_fu_80_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (((ap_const_lv1_0 = exitcond_fu_98_p2) and not(ap_sig_bdd_61))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not(ap_sig_bdd_61) and not((ap_const_lv1_0 = exitcond_fu_98_p2)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Y_din <= std_logic_vector(resize(unsigned(tmp_i_fu_110_p2),32));

    -- Y_write assign process. --
    Y_write_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_98_p2, ap_sig_bdd_61)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_98_p2) and not(ap_sig_bdd_61))) then 
            Y_write <= ap_const_logic_1;
        else 
            Y_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond4_i_i_fu_80_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_i_i_fu_80_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond4_i_i_fu_80_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_i_i_fu_80_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_40 assign process. --
    ap_sig_bdd_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_40 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_55 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_61 assign process. --
    ap_sig_bdd_61_assign_proc : process(Y_full_n, exitcond_fu_98_p2)
    begin
                ap_sig_bdd_61 <= ((Y_full_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond_fu_98_p2));
    end process;


    -- ap_sig_bdd_73 assign process. --
    ap_sig_bdd_73_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_73 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_40)
    begin
        if (ap_sig_bdd_40) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_55)
    begin
        if (ap_sig_bdd_55) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    count_fu_92_p2 <= std_logic_vector(unsigned(p_01_i_idx_i_reg_46) + unsigned(ap_const_lv7_8));
    exitcond4_i_i_fu_80_p2 <= "1" when (rowrcv_0_i_i_reg_35 = ap_const_lv4_8) else "0";
    exitcond_fu_98_p2 <= "1" when (p_12_rec_i_i_reg_58 = ap_const_lv4_8) else "0";
    p_rec_i_i_fu_104_p2 <= std_logic_vector(unsigned(p_12_rec_i_i_reg_58) + unsigned(ap_const_lv4_1));
    rowrcv_fu_86_p2 <= std_logic_vector(unsigned(rowrcv_0_i_i_reg_35) + unsigned(ap_const_lv4_1));
    tmp_i_fu_110_p2 <= std_logic_vector(unsigned(count_1_i_i_reg_69) + unsigned(ap_const_lv7_1));
end behav;
