// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "DCT.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic DCT::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> DCT::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic DCT::ap_const_logic_1 = sc_dt::Log_1;
const bool DCT::ap_true = true;

DCT::DCT(sc_module_name name) : sc_module(name), mVcdFile(0) {
    DCT_Loop_1_proc_U0 = new DCT_Loop_1_proc("DCT_Loop_1_proc_U0");
    DCT_Loop_1_proc_U0->ap_clk(ap_clk);
    DCT_Loop_1_proc_U0->ap_rst(ap_rst);
    DCT_Loop_1_proc_U0->ap_start(DCT_Loop_1_proc_U0_ap_start);
    DCT_Loop_1_proc_U0->ap_done(DCT_Loop_1_proc_U0_ap_done);
    DCT_Loop_1_proc_U0->ap_continue(DCT_Loop_1_proc_U0_ap_continue);
    DCT_Loop_1_proc_U0->ap_idle(DCT_Loop_1_proc_U0_ap_idle);
    DCT_Loop_1_proc_U0->ap_ready(DCT_Loop_1_proc_U0_ap_ready);
    DCT_Loop_1_proc_U0->X_dout(DCT_Loop_1_proc_U0_X_dout);
    DCT_Loop_1_proc_U0->X_empty_n(DCT_Loop_1_proc_U0_X_empty_n);
    DCT_Loop_1_proc_U0->X_read(DCT_Loop_1_proc_U0_X_read);
    DCT_Loop_1_proc_U0->Y_din(DCT_Loop_1_proc_U0_Y_din);
    DCT_Loop_1_proc_U0->Y_full_n(DCT_Loop_1_proc_U0_Y_full_n);
    DCT_Loop_1_proc_U0->Y_write(DCT_Loop_1_proc_U0_Y_write);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DCT_Loop_1_proc_U0_X_dout);
    sensitive << ( X_dout );

    SC_METHOD(thread_DCT_Loop_1_proc_U0_X_empty_n);
    sensitive << ( X_empty_n );

    SC_METHOD(thread_DCT_Loop_1_proc_U0_Y_full_n);
    sensitive << ( Y_full_n );

    SC_METHOD(thread_DCT_Loop_1_proc_U0_ap_continue);

    SC_METHOD(thread_X_read);
    sensitive << ( DCT_Loop_1_proc_U0_X_read );

    SC_METHOD(thread_Y_din);
    sensitive << ( DCT_Loop_1_proc_U0_Y_din );

    SC_METHOD(thread_Y_write);
    sensitive << ( DCT_Loop_1_proc_U0_Y_write );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( DCT_Loop_1_proc_U0_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    DCT_Loop_1_proc_U0_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "DCT_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, X_dout, "(port)X_dout");
    sc_trace(mVcdFile, X_empty_n, "(port)X_empty_n");
    sc_trace(mVcdFile, X_read, "(port)X_read");
    sc_trace(mVcdFile, function_r, "(port)function_r");
    sc_trace(mVcdFile, Y_din, "(port)Y_din");
    sc_trace(mVcdFile, Y_full_n, "(port)Y_full_n");
    sc_trace(mVcdFile, Y_write, "(port)Y_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_ap_start, "DCT_Loop_1_proc_U0_ap_start");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_ap_done, "DCT_Loop_1_proc_U0_ap_done");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_ap_continue, "DCT_Loop_1_proc_U0_ap_continue");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_ap_idle, "DCT_Loop_1_proc_U0_ap_idle");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_ap_ready, "DCT_Loop_1_proc_U0_ap_ready");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_X_dout, "DCT_Loop_1_proc_U0_X_dout");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_X_empty_n, "DCT_Loop_1_proc_U0_X_empty_n");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_X_read, "DCT_Loop_1_proc_U0_X_read");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_Y_din, "DCT_Loop_1_proc_U0_Y_din");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_Y_full_n, "DCT_Loop_1_proc_U0_Y_full_n");
    sc_trace(mVcdFile, DCT_Loop_1_proc_U0_Y_write, "DCT_Loop_1_proc_U0_Y_write");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
#endif

    }
    mHdltvinHandle.open("DCT.hdltvin.dat");
    mHdltvoutHandle.open("DCT.hdltvout.dat");
}

DCT::~DCT() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete DCT_Loop_1_proc_U0;
}

void DCT::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        DCT_Loop_1_proc_U0_ap_start = ap_const_logic_0;
    } else {
        DCT_Loop_1_proc_U0_ap_start = ap_const_logic_1;
    }
    ap_CS = ap_const_logic_0;
}

void DCT::thread_DCT_Loop_1_proc_U0_X_dout() {
    DCT_Loop_1_proc_U0_X_dout = X_dout.read();
}

void DCT::thread_DCT_Loop_1_proc_U0_X_empty_n() {
    DCT_Loop_1_proc_U0_X_empty_n = X_empty_n.read();
}

void DCT::thread_DCT_Loop_1_proc_U0_Y_full_n() {
    DCT_Loop_1_proc_U0_Y_full_n = Y_full_n.read();
}

void DCT::thread_DCT_Loop_1_proc_U0_ap_continue() {
    DCT_Loop_1_proc_U0_ap_continue = ap_const_logic_1;
}

void DCT::thread_X_read() {
    X_read = DCT_Loop_1_proc_U0_X_read.read();
}

void DCT::thread_Y_din() {
    Y_din = DCT_Loop_1_proc_U0_Y_din.read();
}

void DCT::thread_Y_write() {
    Y_write = DCT_Loop_1_proc_U0_Y_write.read();
}

void DCT::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_0;
}

void DCT::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(DCT_Loop_1_proc_U0_ap_done.read(), ap_const_logic_1)) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void DCT::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"X_dout\" :  \"" << X_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"X_empty_n\" :  \"" << X_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"X_read\" :  \"" << X_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"function_r\" :  \"" << function_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Y_din\" :  \"" << Y_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Y_full_n\" :  \"" << Y_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Y_write\" :  \"" << Y_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

