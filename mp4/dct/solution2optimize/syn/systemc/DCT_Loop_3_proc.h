// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _DCT_Loop_3_proc_HH_
#define _DCT_Loop_3_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct DCT_Loop_3_proc : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > Y_din;
    sc_in< sc_logic > Y_full_n;
    sc_out< sc_logic > Y_write;
    sc_out< sc_lv<7> > Ybuff_address0;
    sc_out< sc_logic > Ybuff_ce0;
    sc_in< sc_lv<32> > Ybuff_q0;


    // Module declarations
    DCT_Loop_3_proc(sc_module_name name);
    SC_HAS_PROCESS(DCT_Loop_3_proc);

    ~DCT_Loop_3_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<7> > write_idx_fu_68_p2;
    sc_signal< sc_lv<7> > write_idx_reg_82;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_46;
    sc_signal< sc_lv<1> > exitcond_fu_62_p2;
    sc_signal< sc_lv<7> > p_01_rec_reg_45;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_61;
    sc_signal< bool > ap_sig_bdd_70;
    sc_signal< sc_lv<64> > p_01_rec_cast_fu_57_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<7> ap_const_lv7_41;
    static const sc_lv<7> ap_const_lv7_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Y_din();
    void thread_Y_write();
    void thread_Ybuff_address0();
    void thread_Ybuff_ce0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_46();
    void thread_ap_sig_bdd_61();
    void thread_ap_sig_bdd_70();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_exitcond_fu_62_p2();
    void thread_p_01_rec_cast_fu_57_p1();
    void thread_write_idx_fu_68_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
