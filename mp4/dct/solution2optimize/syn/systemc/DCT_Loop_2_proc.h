// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _DCT_Loop_2_proc_HH_
#define _DCT_Loop_2_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct DCT_Loop_2_proc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > Xbuff_address0;
    sc_out< sc_logic > Xbuff_ce0;
    sc_in< sc_lv<32> > Xbuff_q0;
    sc_out< sc_lv<6> > Xmat_address0;
    sc_out< sc_logic > Xmat_ce0;
    sc_out< sc_logic > Xmat_we0;
    sc_out< sc_lv<32> > Xmat_d0;


    // Module declarations
    DCT_Loop_2_proc(sc_module_name name);
    SC_HAS_PROCESS(DCT_Loop_2_proc);

    ~DCT_Loop_2_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_23;
    sc_signal< sc_lv<4> > rowidx_1_fu_78_p2;
    sc_signal< sc_lv<4> > rowidx_1_reg_160;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_50;
    sc_signal< sc_lv<7> > idx_cast_fu_102_p1;
    sc_signal< sc_lv<7> > idx_cast_reg_165;
    sc_signal< sc_lv<1> > exitcond3_fu_72_p2;
    sc_signal< sc_lv<8> > p_addr_cast_fu_114_p1;
    sc_signal< sc_lv<8> > p_addr_cast_reg_170;
    sc_signal< sc_lv<4> > colidx_1_fu_128_p2;
    sc_signal< sc_lv<4> > colidx_1_reg_178;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_67;
    sc_signal< sc_lv<1> > exitcond2_fu_122_p2;
    sc_signal< sc_lv<8> > p_addr1_fu_148_p2;
    sc_signal< sc_lv<8> > p_addr1_reg_188;
    sc_signal< sc_lv<4> > rowidx_reg_49;
    sc_signal< bool > ap_sig_bdd_82;
    sc_signal< sc_lv<4> > colidx_reg_60;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_94;
    sc_signal< sc_lv<64> > tmp_5_fu_139_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_153_p1;
    sc_signal< sc_lv<3> > tmp_fu_84_p1;
    sc_signal< sc_lv<6> > tmp_1_fu_88_p3;
    sc_signal< sc_lv<6> > idx_fu_96_p2;
    sc_signal< sc_lv<7> > tmp_2_fu_106_p3;
    sc_signal< sc_lv<7> > colidx_cast_fu_118_p1;
    sc_signal< sc_lv<7> > tmp_4_fu_134_p2;
    sc_signal< sc_lv<8> > tmp_6_trn_cast_fu_144_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_st3_fsm_2;
    static const sc_lv<4> ap_ST_st4_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<6> ap_const_lv6_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Xbuff_address0();
    void thread_Xbuff_ce0();
    void thread_Xmat_address0();
    void thread_Xmat_ce0();
    void thread_Xmat_d0();
    void thread_Xmat_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_23();
    void thread_ap_sig_bdd_50();
    void thread_ap_sig_bdd_67();
    void thread_ap_sig_bdd_82();
    void thread_ap_sig_bdd_94();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_colidx_1_fu_128_p2();
    void thread_colidx_cast_fu_118_p1();
    void thread_exitcond2_fu_122_p2();
    void thread_exitcond3_fu_72_p2();
    void thread_idx_cast_fu_102_p1();
    void thread_idx_fu_96_p2();
    void thread_p_addr1_fu_148_p2();
    void thread_p_addr_cast_fu_114_p1();
    void thread_rowidx_1_fu_78_p2();
    void thread_tmp_1_fu_88_p3();
    void thread_tmp_2_fu_106_p3();
    void thread_tmp_3_fu_153_p1();
    void thread_tmp_4_fu_134_p2();
    void thread_tmp_5_fu_139_p1();
    void thread_tmp_6_trn_cast_fu_144_p1();
    void thread_tmp_fu_84_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
