// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _DCT_Block_DCT_exit2_proc_HH_
#define _DCT_Block_DCT_exit2_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct DCT_Block_DCT_exit2_proc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > Ybuff_address0;
    sc_out< sc_logic > Ybuff_ce0;
    sc_out< sc_logic > Ybuff_we0;
    sc_out< sc_lv<32> > Ybuff_d0;
    sc_in< sc_lv<32> > Xbuff_dout;
    sc_in< sc_logic > Xbuff_empty_n;
    sc_out< sc_logic > Xbuff_read;


    // Module declarations
    DCT_Block_DCT_exit2_proc(sc_module_name name);
    SC_HAS_PROCESS(DCT_Block_DCT_exit2_proc);

    ~DCT_Block_DCT_exit2_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<4> > rowrcv_fu_90_p2;
    sc_signal< sc_lv<4> > rowrcv_reg_137;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_47;
    sc_signal< sc_lv<6> > tmp_2_fu_100_p3;
    sc_signal< sc_lv<6> > tmp_2_reg_142;
    sc_signal< sc_lv<1> > exitcond3_fu_84_p2;
    sc_signal< sc_lv<4> > colrcv_fu_118_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_62;
    sc_signal< sc_lv<1> > exitcond2_fu_112_p2;
    sc_signal< bool > ap_sig_bdd_68;
    sc_signal< sc_lv<4> > rowrcv_1_reg_61;
    sc_signal< bool > ap_sig_bdd_77;
    sc_signal< sc_lv<4> > colrcv_1_reg_72;
    sc_signal< sc_lv<64> > tmp_6_fu_129_p1;
    sc_signal< sc_lv<3> > tmp_fu_96_p1;
    sc_signal< sc_lv<6> > colrcv_1_cast_fu_108_p1;
    sc_signal< sc_lv<6> > tmp_3_fu_124_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_40;
    static const sc_lv<32> ap_const_lv32_BF800000;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<3> ap_const_lv3_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Xbuff_read();
    void thread_Ybuff_address0();
    void thread_Ybuff_ce0();
    void thread_Ybuff_d0();
    void thread_Ybuff_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_47();
    void thread_ap_sig_bdd_62();
    void thread_ap_sig_bdd_68();
    void thread_ap_sig_bdd_77();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_colrcv_1_cast_fu_108_p1();
    void thread_colrcv_fu_118_p2();
    void thread_exitcond2_fu_112_p2();
    void thread_exitcond3_fu_84_p2();
    void thread_rowrcv_fu_90_p2();
    void thread_tmp_2_fu_100_p3();
    void thread_tmp_3_fu_124_p2();
    void thread_tmp_6_fu_129_p1();
    void thread_tmp_fu_96_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
