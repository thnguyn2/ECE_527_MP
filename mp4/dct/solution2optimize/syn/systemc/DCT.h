// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _DCT_HH_
#define _DCT_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "DCT_Loop_1_proc.h"
#include "DCT_Loop_2_proc.h"
#include "DCT_Xbuff.h"

namespace ap_rtl {

struct DCT : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > X_dout;
    sc_in< sc_logic > X_empty_n;
    sc_out< sc_logic > X_read;
    sc_in< sc_lv<8> > function_r;
    sc_out< sc_lv<32> > Y_din;
    sc_in< sc_logic > Y_full_n;
    sc_out< sc_logic > Y_write;


    // Module declarations
    DCT(sc_module_name name);
    SC_HAS_PROCESS(DCT);

    ~DCT();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    DCT_Xbuff* Xbuff_U;
    DCT_Loop_1_proc* DCT_Loop_1_proc_U0;
    DCT_Loop_2_proc* DCT_Loop_2_proc_U0;
    sc_signal< sc_lv<7> > Xbuff_i_address0;
    sc_signal< sc_logic > Xbuff_i_ce0;
    sc_signal< sc_logic > Xbuff_i_we0;
    sc_signal< sc_lv<32> > Xbuff_i_d0;
    sc_signal< sc_lv<32> > Xbuff_i_q0;
    sc_signal< sc_lv<7> > Xbuff_t_address0;
    sc_signal< sc_logic > Xbuff_t_ce0;
    sc_signal< sc_logic > Xbuff_t_we0;
    sc_signal< sc_lv<32> > Xbuff_t_d0;
    sc_signal< sc_lv<32> > Xbuff_t_q0;
    sc_signal< sc_logic > Xbuff_U_ap_dummy_ce;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_ap_start;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_ap_done;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_ap_continue;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_ap_idle;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_ap_ready;
    sc_signal< sc_lv<32> > DCT_Loop_1_proc_U0_X_dout;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_X_empty_n;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_X_read;
    sc_signal< sc_lv<7> > DCT_Loop_1_proc_U0_Xbuff_address0;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_Xbuff_ce0;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_Xbuff_we0;
    sc_signal< sc_lv<32> > DCT_Loop_1_proc_U0_Xbuff_d0;
    sc_signal< sc_logic > ap_chn_write_DCT_Loop_1_proc_U0_Xbuff;
    sc_signal< sc_logic > DCT_Loop_1_proc_U0_Xbuff_pipo_status;
    sc_signal< sc_logic > DCT_Loop_2_proc_U0_ap_start;
    sc_signal< sc_logic > DCT_Loop_2_proc_U0_ap_done;
    sc_signal< sc_logic > DCT_Loop_2_proc_U0_ap_continue;
    sc_signal< sc_logic > DCT_Loop_2_proc_U0_ap_idle;
    sc_signal< sc_logic > DCT_Loop_2_proc_U0_ap_ready;
    sc_signal< sc_lv<32> > DCT_Loop_2_proc_U0_Y_din;
    sc_signal< sc_logic > DCT_Loop_2_proc_U0_Y_full_n;
    sc_signal< sc_logic > DCT_Loop_2_proc_U0_Y_write;
    sc_signal< sc_lv<7> > DCT_Loop_2_proc_U0_Xbuff_address0;
    sc_signal< sc_logic > DCT_Loop_2_proc_U0_Xbuff_ce0;
    sc_signal< sc_lv<32> > DCT_Loop_2_proc_U0_Xbuff_q0;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > Xbuff_i_full_n;
    sc_signal< sc_logic > Xbuff_i_write;
    sc_signal< sc_logic > Xbuff_t_empty_n;
    sc_signal< sc_logic > Xbuff_t_read;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_hs_done;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_DCT_Loop_1_proc_U0_X_dout();
    void thread_DCT_Loop_1_proc_U0_X_empty_n();
    void thread_DCT_Loop_1_proc_U0_Xbuff_pipo_status();
    void thread_DCT_Loop_1_proc_U0_ap_continue();
    void thread_DCT_Loop_2_proc_U0_Xbuff_q0();
    void thread_DCT_Loop_2_proc_U0_Y_full_n();
    void thread_DCT_Loop_2_proc_U0_ap_continue();
    void thread_DCT_Loop_2_proc_U0_ap_start();
    void thread_X_read();
    void thread_Xbuff_U_ap_dummy_ce();
    void thread_Xbuff_i_address0();
    void thread_Xbuff_i_ce0();
    void thread_Xbuff_i_d0();
    void thread_Xbuff_i_we0();
    void thread_Xbuff_i_write();
    void thread_Xbuff_t_address0();
    void thread_Xbuff_t_ce0();
    void thread_Xbuff_t_d0();
    void thread_Xbuff_t_read();
    void thread_Xbuff_t_we0();
    void thread_Y_din();
    void thread_Y_write();
    void thread_ap_chn_write_DCT_Loop_1_proc_U0_Xbuff();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
