// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "DCT_Block_DCT_exit2_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic DCT_Block_DCT_exit2_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic DCT_Block_DCT_exit2_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> DCT_Block_DCT_exit2_proc::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> DCT_Block_DCT_exit2_proc::ap_ST_st2_fsm_1 = "10";
const sc_lv<3> DCT_Block_DCT_exit2_proc::ap_ST_st3_fsm_2 = "100";
const sc_lv<32> DCT_Block_DCT_exit2_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> DCT_Block_DCT_exit2_proc::ap_const_lv1_1 = "1";
const sc_lv<32> DCT_Block_DCT_exit2_proc::ap_const_lv32_1 = "1";
const sc_lv<1> DCT_Block_DCT_exit2_proc::ap_const_lv1_0 = "0";
const sc_lv<32> DCT_Block_DCT_exit2_proc::ap_const_lv32_2 = "10";
const sc_lv<4> DCT_Block_DCT_exit2_proc::ap_const_lv4_0 = "0000";
const sc_lv<64> DCT_Block_DCT_exit2_proc::ap_const_lv64_40 = "1000000";
const sc_lv<32> DCT_Block_DCT_exit2_proc::ap_const_lv32_BF800000 = "10111111100000000000000000000000";
const sc_lv<4> DCT_Block_DCT_exit2_proc::ap_const_lv4_8 = "1000";
const sc_lv<4> DCT_Block_DCT_exit2_proc::ap_const_lv4_1 = "1";
const sc_lv<3> DCT_Block_DCT_exit2_proc::ap_const_lv3_0 = "000";

DCT_Block_DCT_exit2_proc::DCT_Block_DCT_exit2_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Xbuff_read);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond2_fu_112_p2 );
    sensitive << ( ap_sig_bdd_68 );

    SC_METHOD(thread_Ybuff_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_6_fu_129_p1 );

    SC_METHOD(thread_Ybuff_ce0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_bdd_68 );
    sensitive << ( ap_sig_bdd_77 );

    SC_METHOD(thread_Ybuff_d0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( Xbuff_dout );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_Ybuff_we0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond2_fu_112_p2 );
    sensitive << ( ap_sig_bdd_68 );
    sensitive << ( ap_sig_bdd_77 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond3_fu_84_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond3_fu_84_p2 );

    SC_METHOD(thread_ap_sig_bdd_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_62);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_68);
    sensitive << ( Xbuff_empty_n );
    sensitive << ( exitcond2_fu_112_p2 );

    SC_METHOD(thread_ap_sig_bdd_77);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_47 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_62 );

    SC_METHOD(thread_colrcv_1_cast_fu_108_p1);
    sensitive << ( colrcv_1_reg_72 );

    SC_METHOD(thread_colrcv_fu_118_p2);
    sensitive << ( colrcv_1_reg_72 );

    SC_METHOD(thread_exitcond2_fu_112_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_bdd_68 );
    sensitive << ( colrcv_1_reg_72 );

    SC_METHOD(thread_exitcond3_fu_84_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( rowrcv_1_reg_61 );

    SC_METHOD(thread_rowrcv_fu_90_p2);
    sensitive << ( rowrcv_1_reg_61 );

    SC_METHOD(thread_tmp_2_fu_100_p3);
    sensitive << ( tmp_fu_96_p1 );

    SC_METHOD(thread_tmp_3_fu_124_p2);
    sensitive << ( tmp_2_reg_142 );
    sensitive << ( colrcv_1_cast_fu_108_p1 );

    SC_METHOD(thread_tmp_6_fu_129_p1);
    sensitive << ( tmp_3_fu_124_p2 );

    SC_METHOD(thread_tmp_fu_96_p1);
    sensitive << ( rowrcv_1_reg_61 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond3_fu_84_p2 );
    sensitive << ( exitcond2_fu_112_p2 );
    sensitive << ( ap_sig_bdd_68 );
    sensitive << ( ap_sig_bdd_77 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "DCT_Block_DCT_exit2_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Ybuff_address0, "(port)Ybuff_address0");
    sc_trace(mVcdFile, Ybuff_ce0, "(port)Ybuff_ce0");
    sc_trace(mVcdFile, Ybuff_we0, "(port)Ybuff_we0");
    sc_trace(mVcdFile, Ybuff_d0, "(port)Ybuff_d0");
    sc_trace(mVcdFile, Xbuff_dout, "(port)Xbuff_dout");
    sc_trace(mVcdFile, Xbuff_empty_n, "(port)Xbuff_empty_n");
    sc_trace(mVcdFile, Xbuff_read, "(port)Xbuff_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_22, "ap_sig_bdd_22");
    sc_trace(mVcdFile, rowrcv_fu_90_p2, "rowrcv_fu_90_p2");
    sc_trace(mVcdFile, rowrcv_reg_137, "rowrcv_reg_137");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_47, "ap_sig_bdd_47");
    sc_trace(mVcdFile, tmp_2_fu_100_p3, "tmp_2_fu_100_p3");
    sc_trace(mVcdFile, tmp_2_reg_142, "tmp_2_reg_142");
    sc_trace(mVcdFile, exitcond3_fu_84_p2, "exitcond3_fu_84_p2");
    sc_trace(mVcdFile, colrcv_fu_118_p2, "colrcv_fu_118_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_62, "ap_sig_bdd_62");
    sc_trace(mVcdFile, exitcond2_fu_112_p2, "exitcond2_fu_112_p2");
    sc_trace(mVcdFile, ap_sig_bdd_68, "ap_sig_bdd_68");
    sc_trace(mVcdFile, rowrcv_1_reg_61, "rowrcv_1_reg_61");
    sc_trace(mVcdFile, ap_sig_bdd_77, "ap_sig_bdd_77");
    sc_trace(mVcdFile, colrcv_1_reg_72, "colrcv_1_reg_72");
    sc_trace(mVcdFile, tmp_6_fu_129_p1, "tmp_6_fu_129_p1");
    sc_trace(mVcdFile, tmp_fu_96_p1, "tmp_fu_96_p1");
    sc_trace(mVcdFile, colrcv_1_cast_fu_108_p1, "colrcv_1_cast_fu_108_p1");
    sc_trace(mVcdFile, tmp_3_fu_124_p2, "tmp_3_fu_124_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

DCT_Block_DCT_exit2_proc::~DCT_Block_DCT_exit2_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void DCT_Block_DCT_exit2_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                    !esl_seteq<1,1,1>(exitcond3_fu_84_p2.read(), ap_const_lv1_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_84_p2.read(), ap_const_lv1_0))) {
        colrcv_1_reg_72 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_112_p2.read()) && 
                !ap_sig_bdd_68.read())) {
        colrcv_1_reg_72 = colrcv_fu_118_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !ap_sig_bdd_68.read() && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_112_p2.read()))) {
        rowrcv_1_reg_61 = rowrcv_reg_137.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !ap_sig_bdd_77.read())) {
        rowrcv_1_reg_61 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        rowrcv_reg_137 = rowrcv_fu_90_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond3_fu_84_p2.read(), ap_const_lv1_0))) {
        tmp_2_reg_142 = tmp_2_fu_100_p3.read();
    }
}

void DCT_Block_DCT_exit2_proc::thread_Xbuff_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_112_p2.read()) && 
         !ap_sig_bdd_68.read())) {
        Xbuff_read = ap_const_logic_1;
    } else {
        Xbuff_read = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_Ybuff_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        Ybuff_address0 =  (sc_lv<7>) (tmp_6_fu_129_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        Ybuff_address0 =  (sc_lv<7>) (ap_const_lv64_40);
    } else {
        Ybuff_address0 = "XXXXXXX";
    }
}

void DCT_Block_DCT_exit2_proc::thread_Ybuff_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          !ap_sig_bdd_68.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !ap_sig_bdd_77.read()))) {
        Ybuff_ce0 = ap_const_logic_1;
    } else {
        Ybuff_ce0 = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_Ybuff_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        Ybuff_d0 = Xbuff_dout.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        Ybuff_d0 = ap_const_lv32_BF800000;
    } else {
        Ybuff_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void DCT_Block_DCT_exit2_proc::thread_Ybuff_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !ap_sig_bdd_77.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_112_p2.read()) && 
          !ap_sig_bdd_68.read()))) {
        Ybuff_we0 = ap_const_logic_1;
    } else {
        Ybuff_we0 = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond3_fu_84_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond3_fu_84_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_ap_sig_bdd_22() {
    ap_sig_bdd_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void DCT_Block_DCT_exit2_proc::thread_ap_sig_bdd_47() {
    ap_sig_bdd_47 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void DCT_Block_DCT_exit2_proc::thread_ap_sig_bdd_62() {
    ap_sig_bdd_62 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void DCT_Block_DCT_exit2_proc::thread_ap_sig_bdd_68() {
    ap_sig_bdd_68 = (esl_seteq<1,1,1>(Xbuff_empty_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_112_p2.read()));
}

void DCT_Block_DCT_exit2_proc::thread_ap_sig_bdd_77() {
    ap_sig_bdd_77 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void DCT_Block_DCT_exit2_proc::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_47.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_62.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void DCT_Block_DCT_exit2_proc::thread_colrcv_1_cast_fu_108_p1() {
    colrcv_1_cast_fu_108_p1 = esl_zext<6,4>(colrcv_1_reg_72.read());
}

void DCT_Block_DCT_exit2_proc::thread_colrcv_fu_118_p2() {
    colrcv_fu_118_p2 = (!colrcv_1_reg_72.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(colrcv_1_reg_72.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void DCT_Block_DCT_exit2_proc::thread_exitcond2_fu_112_p2() {
    exitcond2_fu_112_p2 = (!colrcv_1_reg_72.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(colrcv_1_reg_72.read() == ap_const_lv4_8);
}

void DCT_Block_DCT_exit2_proc::thread_exitcond3_fu_84_p2() {
    exitcond3_fu_84_p2 = (!rowrcv_1_reg_61.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(rowrcv_1_reg_61.read() == ap_const_lv4_8);
}

void DCT_Block_DCT_exit2_proc::thread_rowrcv_fu_90_p2() {
    rowrcv_fu_90_p2 = (!rowrcv_1_reg_61.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(rowrcv_1_reg_61.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void DCT_Block_DCT_exit2_proc::thread_tmp_2_fu_100_p3() {
    tmp_2_fu_100_p3 = esl_concat<3,3>(tmp_fu_96_p1.read(), ap_const_lv3_0);
}

void DCT_Block_DCT_exit2_proc::thread_tmp_3_fu_124_p2() {
    tmp_3_fu_124_p2 = (!tmp_2_reg_142.read().is_01() || !colrcv_1_cast_fu_108_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_2_reg_142.read()) + sc_biguint<6>(colrcv_1_cast_fu_108_p1.read()));
}

void DCT_Block_DCT_exit2_proc::thread_tmp_6_fu_129_p1() {
    tmp_6_fu_129_p1 = esl_zext<64,6>(tmp_3_fu_124_p2.read());
}

void DCT_Block_DCT_exit2_proc::thread_tmp_fu_96_p1() {
    tmp_fu_96_p1 = rowrcv_1_reg_61.read().range(3-1, 0);
}

void DCT_Block_DCT_exit2_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_bdd_77.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond3_fu_84_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_112_p2.read()) && !ap_sig_bdd_68.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else if ((!ap_sig_bdd_68.read() && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_112_p2.read()))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

