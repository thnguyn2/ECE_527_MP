// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "DCT_Loop_3_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic DCT_Loop_3_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic DCT_Loop_3_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> DCT_Loop_3_proc::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> DCT_Loop_3_proc::ap_ST_st2_fsm_1 = "10";
const sc_lv<3> DCT_Loop_3_proc::ap_ST_st3_fsm_2 = "100";
const sc_lv<32> DCT_Loop_3_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> DCT_Loop_3_proc::ap_const_lv1_1 = "1";
const sc_lv<32> DCT_Loop_3_proc::ap_const_lv32_1 = "1";
const sc_lv<1> DCT_Loop_3_proc::ap_const_lv1_0 = "0";
const sc_lv<7> DCT_Loop_3_proc::ap_const_lv7_0 = "0000000";
const sc_lv<32> DCT_Loop_3_proc::ap_const_lv32_2 = "10";
const sc_lv<7> DCT_Loop_3_proc::ap_const_lv7_41 = "1000001";
const sc_lv<7> DCT_Loop_3_proc::ap_const_lv7_1 = "1";
const sc_lv<32> DCT_Loop_3_proc::ap_const_lv32_6 = "110";

DCT_Loop_3_proc::DCT_Loop_3_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Y_din);
    sensitive << ( Y_full_n );
    sensitive << ( tmp_1_reg_110 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_fu_90_p1 );

    SC_METHOD(thread_Y_write);
    sensitive << ( Y_full_n );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_Ymat_address0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_5_fu_85_p1 );

    SC_METHOD(thread_Ymat_ce0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_61_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_61_p2 );

    SC_METHOD(thread_ap_sig_bdd_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_62);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_bdd_70);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_46 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_70 );

    SC_METHOD(thread_exitcond_fu_61_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( write_idx_reg_49 );

    SC_METHOD(thread_tmp_2_fu_81_p1);
    sensitive << ( write_idx_reg_49 );

    SC_METHOD(thread_tmp_5_fu_85_p1);
    sensitive << ( tmp_2_fu_81_p1 );

    SC_METHOD(thread_tmp_fu_90_p1);
    sensitive << ( Ymat_q0 );

    SC_METHOD(thread_write_idx_1_fu_67_p2);
    sensitive << ( write_idx_reg_49 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( Y_full_n );
    sensitive << ( exitcond_fu_61_p2 );
    sensitive << ( ap_sig_bdd_62 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "DCT_Loop_3_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Y_din, "(port)Y_din");
    sc_trace(mVcdFile, Y_full_n, "(port)Y_full_n");
    sc_trace(mVcdFile, Y_write, "(port)Y_write");
    sc_trace(mVcdFile, Ymat_address0, "(port)Ymat_address0");
    sc_trace(mVcdFile, Ymat_ce0, "(port)Ymat_ce0");
    sc_trace(mVcdFile, Ymat_q0, "(port)Ymat_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_22, "ap_sig_bdd_22");
    sc_trace(mVcdFile, write_idx_1_fu_67_p2, "write_idx_1_fu_67_p2");
    sc_trace(mVcdFile, write_idx_1_reg_105, "write_idx_1_reg_105");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_46, "ap_sig_bdd_46");
    sc_trace(mVcdFile, tmp_1_reg_110, "tmp_1_reg_110");
    sc_trace(mVcdFile, exitcond_fu_61_p2, "exitcond_fu_61_p2");
    sc_trace(mVcdFile, write_idx_reg_49, "write_idx_reg_49");
    sc_trace(mVcdFile, ap_sig_bdd_62, "ap_sig_bdd_62");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_70, "ap_sig_bdd_70");
    sc_trace(mVcdFile, tmp_5_fu_85_p1, "tmp_5_fu_85_p1");
    sc_trace(mVcdFile, tmp_2_fu_81_p1, "tmp_2_fu_81_p1");
    sc_trace(mVcdFile, tmp_fu_90_p1, "tmp_fu_90_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

DCT_Loop_3_proc::~DCT_Loop_3_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void DCT_Loop_3_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                    !esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(Y_full_n.read(), ap_const_logic_0))) {
        write_idx_reg_49 = write_idx_1_reg_105.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !ap_sig_bdd_62.read())) {
        write_idx_reg_49 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_0))) {
        tmp_1_reg_110 = write_idx_reg_49.read().range(6, 6);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        write_idx_1_reg_105 = write_idx_1_fu_67_p2.read();
    }
}

void DCT_Loop_3_proc::thread_Y_din() {
    Y_din = (!tmp_1_reg_110.read()[0].is_01())? sc_lv<32>(): ((tmp_1_reg_110.read()[0].to_bool())? ap_const_lv32_0: tmp_fu_90_p1.read());
}

void DCT_Loop_3_proc::thread_Y_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(Y_full_n.read(), ap_const_logic_0))) {
        Y_write = ap_const_logic_1;
    } else {
        Y_write = ap_const_logic_0;
    }
}

void DCT_Loop_3_proc::thread_Ymat_address0() {
    Ymat_address0 =  (sc_lv<6>) (tmp_5_fu_85_p1.read());
}

void DCT_Loop_3_proc::thread_Ymat_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        Ymat_ce0 = ap_const_logic_1;
    } else {
        Ymat_ce0 = ap_const_logic_0;
    }
}

void DCT_Loop_3_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void DCT_Loop_3_proc::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void DCT_Loop_3_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void DCT_Loop_3_proc::thread_ap_sig_bdd_22() {
    ap_sig_bdd_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void DCT_Loop_3_proc::thread_ap_sig_bdd_46() {
    ap_sig_bdd_46 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void DCT_Loop_3_proc::thread_ap_sig_bdd_62() {
    ap_sig_bdd_62 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void DCT_Loop_3_proc::thread_ap_sig_bdd_70() {
    ap_sig_bdd_70 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void DCT_Loop_3_proc::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void DCT_Loop_3_proc::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_46.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void DCT_Loop_3_proc::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_70.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void DCT_Loop_3_proc::thread_exitcond_fu_61_p2() {
    exitcond_fu_61_p2 = (!write_idx_reg_49.read().is_01() || !ap_const_lv7_41.is_01())? sc_lv<1>(): sc_lv<1>(write_idx_reg_49.read() == ap_const_lv7_41);
}

void DCT_Loop_3_proc::thread_tmp_2_fu_81_p1() {
    tmp_2_fu_81_p1 = write_idx_reg_49.read().range(6-1, 0);
}

void DCT_Loop_3_proc::thread_tmp_5_fu_85_p1() {
    tmp_5_fu_85_p1 = esl_zext<64,6>(tmp_2_fu_81_p1.read());
}

void DCT_Loop_3_proc::thread_tmp_fu_90_p1() {
    tmp_fu_90_p1 = Ymat_q0.read();
}

void DCT_Loop_3_proc::thread_write_idx_1_fu_67_p2() {
    write_idx_1_fu_67_p2 = (!write_idx_reg_49.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(write_idx_reg_49.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void DCT_Loop_3_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_bdd_62.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_61_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(Y_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

