// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DCT_MAT_Multiply (
        A_0_address0,
        A_0_ce0,
        A_0_d0,
        A_0_q0,
        A_0_we0,
        A_0_address1,
        A_0_ce1,
        A_0_d1,
        A_0_q1,
        A_0_we1,
        A_1_address0,
        A_1_ce0,
        A_1_d0,
        A_1_q0,
        A_1_we0,
        A_1_address1,
        A_1_ce1,
        A_1_d1,
        A_1_q1,
        A_1_we1,
        A_2_address0,
        A_2_ce0,
        A_2_d0,
        A_2_q0,
        A_2_we0,
        A_2_address1,
        A_2_ce1,
        A_2_d1,
        A_2_q1,
        A_2_we1,
        A_3_address0,
        A_3_ce0,
        A_3_d0,
        A_3_q0,
        A_3_we0,
        A_3_address1,
        A_3_ce1,
        A_3_d1,
        A_3_q1,
        A_3_we1,
        A_4_address0,
        A_4_ce0,
        A_4_d0,
        A_4_q0,
        A_4_we0,
        A_4_address1,
        A_4_ce1,
        A_4_d1,
        A_4_q1,
        A_4_we1,
        A_5_address0,
        A_5_ce0,
        A_5_d0,
        A_5_q0,
        A_5_we0,
        A_5_address1,
        A_5_ce1,
        A_5_d1,
        A_5_q1,
        A_5_we1,
        A_6_address0,
        A_6_ce0,
        A_6_d0,
        A_6_q0,
        A_6_we0,
        A_6_address1,
        A_6_ce1,
        A_6_d1,
        A_6_q1,
        A_6_we1,
        A_7_address0,
        A_7_ce0,
        A_7_d0,
        A_7_q0,
        A_7_we0,
        A_7_address1,
        A_7_ce1,
        A_7_d1,
        A_7_q1,
        A_7_we1,
        B_address0,
        B_ce0,
        B_d0,
        B_q0,
        B_we0,
        B_address1,
        B_ce1,
        B_d1,
        B_q1,
        B_we1,
        C_0_address0,
        C_0_ce0,
        C_0_d0,
        C_0_q0,
        C_0_we0,
        C_0_address1,
        C_0_ce1,
        C_0_d1,
        C_0_q1,
        C_0_we1,
        C_1_address0,
        C_1_ce0,
        C_1_d0,
        C_1_q0,
        C_1_we0,
        C_1_address1,
        C_1_ce1,
        C_1_d1,
        C_1_q1,
        C_1_we1,
        C_2_address0,
        C_2_ce0,
        C_2_d0,
        C_2_q0,
        C_2_we0,
        C_2_address1,
        C_2_ce1,
        C_2_d1,
        C_2_q1,
        C_2_we1,
        C_3_address0,
        C_3_ce0,
        C_3_d0,
        C_3_q0,
        C_3_we0,
        C_3_address1,
        C_3_ce1,
        C_3_d1,
        C_3_q1,
        C_3_we1,
        C_4_address0,
        C_4_ce0,
        C_4_d0,
        C_4_q0,
        C_4_we0,
        C_4_address1,
        C_4_ce1,
        C_4_d1,
        C_4_q1,
        C_4_we1,
        C_5_address0,
        C_5_ce0,
        C_5_d0,
        C_5_q0,
        C_5_we0,
        C_5_address1,
        C_5_ce1,
        C_5_d1,
        C_5_q1,
        C_5_we1,
        C_6_address0,
        C_6_ce0,
        C_6_d0,
        C_6_q0,
        C_6_we0,
        C_6_address1,
        C_6_ce1,
        C_6_d1,
        C_6_q1,
        C_6_we1,
        C_7_address0,
        C_7_ce0,
        C_7_d0,
        C_7_q0,
        C_7_we0,
        C_7_address1,
        C_7_ce1,
        C_7_d1,
        C_7_q1,
        C_7_we1,
        ap_clk,
        ap_rst,
        B_pipo_status,
        B_pipo_update,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;

output  [2:0] A_0_address0;
output   A_0_ce0;
output  [31:0] A_0_d0;
input  [31:0] A_0_q0;
output   A_0_we0;
output  [2:0] A_0_address1;
output   A_0_ce1;
output  [31:0] A_0_d1;
input  [31:0] A_0_q1;
output   A_0_we1;
output  [2:0] A_1_address0;
output   A_1_ce0;
output  [31:0] A_1_d0;
input  [31:0] A_1_q0;
output   A_1_we0;
output  [2:0] A_1_address1;
output   A_1_ce1;
output  [31:0] A_1_d1;
input  [31:0] A_1_q1;
output   A_1_we1;
output  [2:0] A_2_address0;
output   A_2_ce0;
output  [31:0] A_2_d0;
input  [31:0] A_2_q0;
output   A_2_we0;
output  [2:0] A_2_address1;
output   A_2_ce1;
output  [31:0] A_2_d1;
input  [31:0] A_2_q1;
output   A_2_we1;
output  [2:0] A_3_address0;
output   A_3_ce0;
output  [31:0] A_3_d0;
input  [31:0] A_3_q0;
output   A_3_we0;
output  [2:0] A_3_address1;
output   A_3_ce1;
output  [31:0] A_3_d1;
input  [31:0] A_3_q1;
output   A_3_we1;
output  [2:0] A_4_address0;
output   A_4_ce0;
output  [31:0] A_4_d0;
input  [31:0] A_4_q0;
output   A_4_we0;
output  [2:0] A_4_address1;
output   A_4_ce1;
output  [31:0] A_4_d1;
input  [31:0] A_4_q1;
output   A_4_we1;
output  [2:0] A_5_address0;
output   A_5_ce0;
output  [31:0] A_5_d0;
input  [31:0] A_5_q0;
output   A_5_we0;
output  [2:0] A_5_address1;
output   A_5_ce1;
output  [31:0] A_5_d1;
input  [31:0] A_5_q1;
output   A_5_we1;
output  [2:0] A_6_address0;
output   A_6_ce0;
output  [31:0] A_6_d0;
input  [31:0] A_6_q0;
output   A_6_we0;
output  [2:0] A_6_address1;
output   A_6_ce1;
output  [31:0] A_6_d1;
input  [31:0] A_6_q1;
output   A_6_we1;
output  [2:0] A_7_address0;
output   A_7_ce0;
output  [31:0] A_7_d0;
input  [31:0] A_7_q0;
output   A_7_we0;
output  [2:0] A_7_address1;
output   A_7_ce1;
output  [31:0] A_7_d1;
input  [31:0] A_7_q1;
output   A_7_we1;
output  [5:0] B_address0;
output   B_ce0;
output  [31:0] B_d0;
input  [31:0] B_q0;
output   B_we0;
output  [5:0] B_address1;
output   B_ce1;
output  [31:0] B_d1;
input  [31:0] B_q1;
output   B_we1;
output  [2:0] C_0_address0;
output   C_0_ce0;
output  [31:0] C_0_d0;
input  [31:0] C_0_q0;
output   C_0_we0;
output  [2:0] C_0_address1;
output   C_0_ce1;
output  [31:0] C_0_d1;
input  [31:0] C_0_q1;
output   C_0_we1;
output  [2:0] C_1_address0;
output   C_1_ce0;
output  [31:0] C_1_d0;
input  [31:0] C_1_q0;
output   C_1_we0;
output  [2:0] C_1_address1;
output   C_1_ce1;
output  [31:0] C_1_d1;
input  [31:0] C_1_q1;
output   C_1_we1;
output  [2:0] C_2_address0;
output   C_2_ce0;
output  [31:0] C_2_d0;
input  [31:0] C_2_q0;
output   C_2_we0;
output  [2:0] C_2_address1;
output   C_2_ce1;
output  [31:0] C_2_d1;
input  [31:0] C_2_q1;
output   C_2_we1;
output  [2:0] C_3_address0;
output   C_3_ce0;
output  [31:0] C_3_d0;
input  [31:0] C_3_q0;
output   C_3_we0;
output  [2:0] C_3_address1;
output   C_3_ce1;
output  [31:0] C_3_d1;
input  [31:0] C_3_q1;
output   C_3_we1;
output  [2:0] C_4_address0;
output   C_4_ce0;
output  [31:0] C_4_d0;
input  [31:0] C_4_q0;
output   C_4_we0;
output  [2:0] C_4_address1;
output   C_4_ce1;
output  [31:0] C_4_d1;
input  [31:0] C_4_q1;
output   C_4_we1;
output  [2:0] C_5_address0;
output   C_5_ce0;
output  [31:0] C_5_d0;
input  [31:0] C_5_q0;
output   C_5_we0;
output  [2:0] C_5_address1;
output   C_5_ce1;
output  [31:0] C_5_d1;
input  [31:0] C_5_q1;
output   C_5_we1;
output  [2:0] C_6_address0;
output   C_6_ce0;
output  [31:0] C_6_d0;
input  [31:0] C_6_q0;
output   C_6_we0;
output  [2:0] C_6_address1;
output   C_6_ce1;
output  [31:0] C_6_d1;
input  [31:0] C_6_q1;
output   C_6_we1;
output  [2:0] C_7_address0;
output   C_7_ce0;
output  [31:0] C_7_d0;
input  [31:0] C_7_q0;
output   C_7_we0;
output  [2:0] C_7_address1;
output   C_7_ce1;
output  [31:0] C_7_d1;
input  [31:0] C_7_q1;
output   C_7_we1;
input   ap_clk;
input   ap_rst;
input   B_pipo_status;
output   B_pipo_update;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
wire    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
reg    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue;
wire    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle;
wire    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
wire   [5:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_address0;
wire    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_q0;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62;
wire   [31:0] DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63;
wire    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_status;
wire    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_update;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel;
wire    B_cached_0_1_channel_full_n;
reg    ap_reg_ready_B_cached_0_1_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_0_1_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel;
wire    B_cached_0_0_channel_full_n;
reg    ap_reg_ready_B_cached_0_0_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_0_0_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel;
wire    B_cached_0_2_channel_full_n;
reg    ap_reg_ready_B_cached_0_2_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_0_2_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel;
wire    B_cached_0_3_channel_full_n;
reg    ap_reg_ready_B_cached_0_3_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_0_3_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel;
wire    B_cached_0_4_channel_full_n;
reg    ap_reg_ready_B_cached_0_4_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_0_4_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel;
wire    B_cached_0_5_channel_full_n;
reg    ap_reg_ready_B_cached_0_5_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_0_5_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel;
wire    B_cached_0_6_channel_full_n;
reg    ap_reg_ready_B_cached_0_6_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_0_6_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel;
wire    B_cached_1_2_channel_full_n;
reg    ap_reg_ready_B_cached_1_2_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_1_2_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel;
wire    B_cached_0_7_channel_full_n;
reg    ap_reg_ready_B_cached_0_7_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_0_7_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel;
wire    B_cached_1_6_channel_full_n;
reg    ap_reg_ready_B_cached_1_6_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_1_6_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel;
wire    B_cached_1_0_channel_full_n;
reg    ap_reg_ready_B_cached_1_0_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_1_0_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel;
wire    B_cached_1_1_channel_full_n;
reg    ap_reg_ready_B_cached_1_1_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_1_1_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel;
wire    B_cached_1_3_channel_full_n;
reg    ap_reg_ready_B_cached_1_3_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_1_3_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel;
wire    B_cached_1_4_channel_full_n;
reg    ap_reg_ready_B_cached_1_4_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_1_4_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel;
wire    B_cached_1_5_channel_full_n;
reg    ap_reg_ready_B_cached_1_5_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_1_5_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel;
wire    B_cached_2_4_channel_full_n;
reg    ap_reg_ready_B_cached_2_4_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_2_4_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel;
wire    B_cached_1_7_channel_full_n;
reg    ap_reg_ready_B_cached_1_7_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_1_7_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel;
wire    B_cached_2_0_channel_full_n;
reg    ap_reg_ready_B_cached_2_0_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_2_0_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel;
wire    B_cached_2_1_channel_full_n;
reg    ap_reg_ready_B_cached_2_1_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_2_1_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel;
wire    B_cached_2_2_channel_full_n;
reg    ap_reg_ready_B_cached_2_2_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_2_2_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel;
wire    B_cached_2_3_channel_full_n;
reg    ap_reg_ready_B_cached_2_3_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_2_3_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel;
wire    B_cached_2_5_channel_full_n;
reg    ap_reg_ready_B_cached_2_5_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_2_5_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel;
wire    B_cached_2_6_channel_full_n;
reg    ap_reg_ready_B_cached_2_6_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_2_6_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel;
wire    B_cached_2_7_channel_full_n;
reg    ap_reg_ready_B_cached_2_7_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_2_7_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel;
wire    B_cached_3_0_channel_full_n;
reg    ap_reg_ready_B_cached_3_0_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_3_0_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel;
wire    B_cached_3_1_channel_full_n;
reg    ap_reg_ready_B_cached_3_1_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_3_1_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel;
wire    B_cached_3_2_channel_full_n;
reg    ap_reg_ready_B_cached_3_2_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_3_2_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel;
wire    B_cached_3_3_channel_full_n;
reg    ap_reg_ready_B_cached_3_3_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_3_3_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel;
wire    B_cached_3_4_channel_full_n;
reg    ap_reg_ready_B_cached_3_4_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_3_4_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel;
wire    B_cached_3_5_channel_full_n;
reg    ap_reg_ready_B_cached_3_5_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_3_5_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel;
wire    B_cached_3_6_channel_full_n;
reg    ap_reg_ready_B_cached_3_6_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_3_6_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel;
wire    B_cached_3_7_channel_full_n;
reg    ap_reg_ready_B_cached_3_7_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_3_7_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel;
wire    B_cached_4_0_channel_full_n;
reg    ap_reg_ready_B_cached_4_0_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_4_0_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel;
wire    B_cached_4_1_channel_full_n;
reg    ap_reg_ready_B_cached_4_1_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_4_1_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel;
wire    B_cached_4_2_channel_full_n;
reg    ap_reg_ready_B_cached_4_2_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_4_2_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel;
wire    B_cached_4_3_channel_full_n;
reg    ap_reg_ready_B_cached_4_3_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_4_3_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel;
wire    B_cached_4_4_channel_full_n;
reg    ap_reg_ready_B_cached_4_4_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_4_4_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel;
wire    B_cached_4_5_channel_full_n;
reg    ap_reg_ready_B_cached_4_5_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_4_5_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel;
wire    B_cached_4_6_channel_full_n;
reg    ap_reg_ready_B_cached_4_6_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_4_6_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel;
wire    B_cached_4_7_channel_full_n;
reg    ap_reg_ready_B_cached_4_7_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_4_7_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel;
wire    B_cached_5_0_channel_full_n;
reg    ap_reg_ready_B_cached_5_0_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_5_0_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel;
wire    B_cached_5_1_channel_full_n;
reg    ap_reg_ready_B_cached_5_1_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_5_1_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel;
wire    B_cached_5_2_channel_full_n;
reg    ap_reg_ready_B_cached_5_2_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_5_2_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel;
wire    B_cached_5_3_channel_full_n;
reg    ap_reg_ready_B_cached_5_3_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_5_3_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel;
wire    B_cached_5_4_channel_full_n;
reg    ap_reg_ready_B_cached_5_4_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_5_4_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel;
wire    B_cached_5_5_channel_full_n;
reg    ap_reg_ready_B_cached_5_5_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_5_5_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel;
wire    B_cached_5_6_channel_full_n;
reg    ap_reg_ready_B_cached_5_6_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_5_6_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel;
wire    B_cached_5_7_channel_full_n;
reg    ap_reg_ready_B_cached_5_7_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_5_7_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel;
wire    B_cached_6_0_channel_full_n;
reg    ap_reg_ready_B_cached_6_0_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_6_0_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel;
wire    B_cached_6_1_channel_full_n;
reg    ap_reg_ready_B_cached_6_1_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_6_1_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel;
wire    B_cached_6_2_channel_full_n;
reg    ap_reg_ready_B_cached_6_2_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_6_2_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel;
wire    B_cached_6_3_channel_full_n;
reg    ap_reg_ready_B_cached_6_3_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_6_3_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel;
wire    B_cached_6_4_channel_full_n;
reg    ap_reg_ready_B_cached_6_4_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_6_4_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel;
wire    B_cached_6_5_channel_full_n;
reg    ap_reg_ready_B_cached_6_5_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_6_5_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel;
wire    B_cached_6_6_channel_full_n;
reg    ap_reg_ready_B_cached_6_6_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_6_6_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel;
wire    B_cached_6_7_channel_full_n;
reg    ap_reg_ready_B_cached_6_7_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_6_7_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel;
wire    B_cached_7_0_channel_full_n;
reg    ap_reg_ready_B_cached_7_0_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_7_0_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel;
wire    B_cached_7_1_channel_full_n;
reg    ap_reg_ready_B_cached_7_1_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_7_1_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel;
wire    B_cached_7_2_channel_full_n;
reg    ap_reg_ready_B_cached_7_2_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_7_2_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel;
wire    B_cached_7_3_channel_full_n;
reg    ap_reg_ready_B_cached_7_3_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_7_3_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel;
wire    B_cached_7_4_channel_full_n;
reg    ap_reg_ready_B_cached_7_4_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_7_4_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel;
wire    B_cached_7_5_channel_full_n;
reg    ap_reg_ready_B_cached_7_5_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_7_5_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel;
wire    B_cached_7_6_channel_full_n;
reg    ap_reg_ready_B_cached_7_6_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_7_6_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel;
wire    B_cached_7_7_channel_full_n;
reg    ap_reg_ready_B_cached_7_7_channel_full_n = 1'b0;
reg    ap_sig_ready_B_cached_7_7_channel_full_n;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_ap_continue;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_ap_idle;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address1;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q1;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address1;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q1;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address1;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q1;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address1;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q1;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address1;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q1;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address1;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q1;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address1;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q1;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address1;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read1;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read2;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read3;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read4;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read5;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read6;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read7;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read8;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read9;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read10;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read11;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read12;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read13;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read14;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read15;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read16;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read17;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read18;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read19;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read20;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read21;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read22;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read23;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read24;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read25;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read26;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read27;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read28;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read29;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read30;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read31;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read32;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read33;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read34;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read35;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read36;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read37;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read38;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read39;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read40;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read41;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read42;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read43;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read44;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read45;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read46;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read47;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read48;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read49;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read50;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read51;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read52;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read53;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read54;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read55;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read56;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read57;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read58;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read59;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read60;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read61;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read62;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_p_read63;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_ce0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_we0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_d0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_ce0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_we0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_d0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_ce0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_we0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_d0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_ce0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_we0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_d0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_ce0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_we0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_d0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_ce0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_we0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_d0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_ce0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_we0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_d0;
wire   [2:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_address0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_ce0;
wire    DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_we0;
wire   [31:0] DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_d0;
wire    ap_sig_hs_continue;
wire    B_cached_0_0_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_0_0_channel_din;
wire    B_cached_0_0_channel_write;
wire   [31:0] B_cached_0_0_channel_dout;
wire    B_cached_0_0_channel_empty_n;
wire    B_cached_0_0_channel_read;
wire    B_cached_0_1_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_0_1_channel_din;
wire    B_cached_0_1_channel_write;
wire   [31:0] B_cached_0_1_channel_dout;
wire    B_cached_0_1_channel_empty_n;
wire    B_cached_0_1_channel_read;
wire    B_cached_0_2_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_0_2_channel_din;
wire    B_cached_0_2_channel_write;
wire   [31:0] B_cached_0_2_channel_dout;
wire    B_cached_0_2_channel_empty_n;
wire    B_cached_0_2_channel_read;
wire    B_cached_0_3_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_0_3_channel_din;
wire    B_cached_0_3_channel_write;
wire   [31:0] B_cached_0_3_channel_dout;
wire    B_cached_0_3_channel_empty_n;
wire    B_cached_0_3_channel_read;
wire    B_cached_0_4_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_0_4_channel_din;
wire    B_cached_0_4_channel_write;
wire   [31:0] B_cached_0_4_channel_dout;
wire    B_cached_0_4_channel_empty_n;
wire    B_cached_0_4_channel_read;
wire    B_cached_0_5_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_0_5_channel_din;
wire    B_cached_0_5_channel_write;
wire   [31:0] B_cached_0_5_channel_dout;
wire    B_cached_0_5_channel_empty_n;
wire    B_cached_0_5_channel_read;
wire    B_cached_0_6_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_0_6_channel_din;
wire    B_cached_0_6_channel_write;
wire   [31:0] B_cached_0_6_channel_dout;
wire    B_cached_0_6_channel_empty_n;
wire    B_cached_0_6_channel_read;
wire    B_cached_0_7_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_0_7_channel_din;
wire    B_cached_0_7_channel_write;
wire   [31:0] B_cached_0_7_channel_dout;
wire    B_cached_0_7_channel_empty_n;
wire    B_cached_0_7_channel_read;
wire    B_cached_1_0_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_1_0_channel_din;
wire    B_cached_1_0_channel_write;
wire   [31:0] B_cached_1_0_channel_dout;
wire    B_cached_1_0_channel_empty_n;
wire    B_cached_1_0_channel_read;
wire    B_cached_1_1_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_1_1_channel_din;
wire    B_cached_1_1_channel_write;
wire   [31:0] B_cached_1_1_channel_dout;
wire    B_cached_1_1_channel_empty_n;
wire    B_cached_1_1_channel_read;
wire    B_cached_1_2_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_1_2_channel_din;
wire    B_cached_1_2_channel_write;
wire   [31:0] B_cached_1_2_channel_dout;
wire    B_cached_1_2_channel_empty_n;
wire    B_cached_1_2_channel_read;
wire    B_cached_1_3_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_1_3_channel_din;
wire    B_cached_1_3_channel_write;
wire   [31:0] B_cached_1_3_channel_dout;
wire    B_cached_1_3_channel_empty_n;
wire    B_cached_1_3_channel_read;
wire    B_cached_1_4_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_1_4_channel_din;
wire    B_cached_1_4_channel_write;
wire   [31:0] B_cached_1_4_channel_dout;
wire    B_cached_1_4_channel_empty_n;
wire    B_cached_1_4_channel_read;
wire    B_cached_1_5_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_1_5_channel_din;
wire    B_cached_1_5_channel_write;
wire   [31:0] B_cached_1_5_channel_dout;
wire    B_cached_1_5_channel_empty_n;
wire    B_cached_1_5_channel_read;
wire    B_cached_1_6_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_1_6_channel_din;
wire    B_cached_1_6_channel_write;
wire   [31:0] B_cached_1_6_channel_dout;
wire    B_cached_1_6_channel_empty_n;
wire    B_cached_1_6_channel_read;
wire    B_cached_1_7_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_1_7_channel_din;
wire    B_cached_1_7_channel_write;
wire   [31:0] B_cached_1_7_channel_dout;
wire    B_cached_1_7_channel_empty_n;
wire    B_cached_1_7_channel_read;
wire    B_cached_2_0_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_2_0_channel_din;
wire    B_cached_2_0_channel_write;
wire   [31:0] B_cached_2_0_channel_dout;
wire    B_cached_2_0_channel_empty_n;
wire    B_cached_2_0_channel_read;
wire    B_cached_2_1_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_2_1_channel_din;
wire    B_cached_2_1_channel_write;
wire   [31:0] B_cached_2_1_channel_dout;
wire    B_cached_2_1_channel_empty_n;
wire    B_cached_2_1_channel_read;
wire    B_cached_2_2_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_2_2_channel_din;
wire    B_cached_2_2_channel_write;
wire   [31:0] B_cached_2_2_channel_dout;
wire    B_cached_2_2_channel_empty_n;
wire    B_cached_2_2_channel_read;
wire    B_cached_2_3_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_2_3_channel_din;
wire    B_cached_2_3_channel_write;
wire   [31:0] B_cached_2_3_channel_dout;
wire    B_cached_2_3_channel_empty_n;
wire    B_cached_2_3_channel_read;
wire    B_cached_2_4_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_2_4_channel_din;
wire    B_cached_2_4_channel_write;
wire   [31:0] B_cached_2_4_channel_dout;
wire    B_cached_2_4_channel_empty_n;
wire    B_cached_2_4_channel_read;
wire    B_cached_2_5_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_2_5_channel_din;
wire    B_cached_2_5_channel_write;
wire   [31:0] B_cached_2_5_channel_dout;
wire    B_cached_2_5_channel_empty_n;
wire    B_cached_2_5_channel_read;
wire    B_cached_2_6_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_2_6_channel_din;
wire    B_cached_2_6_channel_write;
wire   [31:0] B_cached_2_6_channel_dout;
wire    B_cached_2_6_channel_empty_n;
wire    B_cached_2_6_channel_read;
wire    B_cached_2_7_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_2_7_channel_din;
wire    B_cached_2_7_channel_write;
wire   [31:0] B_cached_2_7_channel_dout;
wire    B_cached_2_7_channel_empty_n;
wire    B_cached_2_7_channel_read;
wire    B_cached_3_0_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_3_0_channel_din;
wire    B_cached_3_0_channel_write;
wire   [31:0] B_cached_3_0_channel_dout;
wire    B_cached_3_0_channel_empty_n;
wire    B_cached_3_0_channel_read;
wire    B_cached_3_1_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_3_1_channel_din;
wire    B_cached_3_1_channel_write;
wire   [31:0] B_cached_3_1_channel_dout;
wire    B_cached_3_1_channel_empty_n;
wire    B_cached_3_1_channel_read;
wire    B_cached_3_2_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_3_2_channel_din;
wire    B_cached_3_2_channel_write;
wire   [31:0] B_cached_3_2_channel_dout;
wire    B_cached_3_2_channel_empty_n;
wire    B_cached_3_2_channel_read;
wire    B_cached_3_3_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_3_3_channel_din;
wire    B_cached_3_3_channel_write;
wire   [31:0] B_cached_3_3_channel_dout;
wire    B_cached_3_3_channel_empty_n;
wire    B_cached_3_3_channel_read;
wire    B_cached_3_4_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_3_4_channel_din;
wire    B_cached_3_4_channel_write;
wire   [31:0] B_cached_3_4_channel_dout;
wire    B_cached_3_4_channel_empty_n;
wire    B_cached_3_4_channel_read;
wire    B_cached_3_5_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_3_5_channel_din;
wire    B_cached_3_5_channel_write;
wire   [31:0] B_cached_3_5_channel_dout;
wire    B_cached_3_5_channel_empty_n;
wire    B_cached_3_5_channel_read;
wire    B_cached_3_6_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_3_6_channel_din;
wire    B_cached_3_6_channel_write;
wire   [31:0] B_cached_3_6_channel_dout;
wire    B_cached_3_6_channel_empty_n;
wire    B_cached_3_6_channel_read;
wire    B_cached_3_7_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_3_7_channel_din;
wire    B_cached_3_7_channel_write;
wire   [31:0] B_cached_3_7_channel_dout;
wire    B_cached_3_7_channel_empty_n;
wire    B_cached_3_7_channel_read;
wire    B_cached_4_0_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_4_0_channel_din;
wire    B_cached_4_0_channel_write;
wire   [31:0] B_cached_4_0_channel_dout;
wire    B_cached_4_0_channel_empty_n;
wire    B_cached_4_0_channel_read;
wire    B_cached_4_1_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_4_1_channel_din;
wire    B_cached_4_1_channel_write;
wire   [31:0] B_cached_4_1_channel_dout;
wire    B_cached_4_1_channel_empty_n;
wire    B_cached_4_1_channel_read;
wire    B_cached_4_2_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_4_2_channel_din;
wire    B_cached_4_2_channel_write;
wire   [31:0] B_cached_4_2_channel_dout;
wire    B_cached_4_2_channel_empty_n;
wire    B_cached_4_2_channel_read;
wire    B_cached_4_3_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_4_3_channel_din;
wire    B_cached_4_3_channel_write;
wire   [31:0] B_cached_4_3_channel_dout;
wire    B_cached_4_3_channel_empty_n;
wire    B_cached_4_3_channel_read;
wire    B_cached_4_4_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_4_4_channel_din;
wire    B_cached_4_4_channel_write;
wire   [31:0] B_cached_4_4_channel_dout;
wire    B_cached_4_4_channel_empty_n;
wire    B_cached_4_4_channel_read;
wire    B_cached_4_5_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_4_5_channel_din;
wire    B_cached_4_5_channel_write;
wire   [31:0] B_cached_4_5_channel_dout;
wire    B_cached_4_5_channel_empty_n;
wire    B_cached_4_5_channel_read;
wire    B_cached_4_6_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_4_6_channel_din;
wire    B_cached_4_6_channel_write;
wire   [31:0] B_cached_4_6_channel_dout;
wire    B_cached_4_6_channel_empty_n;
wire    B_cached_4_6_channel_read;
wire    B_cached_4_7_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_4_7_channel_din;
wire    B_cached_4_7_channel_write;
wire   [31:0] B_cached_4_7_channel_dout;
wire    B_cached_4_7_channel_empty_n;
wire    B_cached_4_7_channel_read;
wire    B_cached_5_0_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_5_0_channel_din;
wire    B_cached_5_0_channel_write;
wire   [31:0] B_cached_5_0_channel_dout;
wire    B_cached_5_0_channel_empty_n;
wire    B_cached_5_0_channel_read;
wire    B_cached_5_1_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_5_1_channel_din;
wire    B_cached_5_1_channel_write;
wire   [31:0] B_cached_5_1_channel_dout;
wire    B_cached_5_1_channel_empty_n;
wire    B_cached_5_1_channel_read;
wire    B_cached_5_2_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_5_2_channel_din;
wire    B_cached_5_2_channel_write;
wire   [31:0] B_cached_5_2_channel_dout;
wire    B_cached_5_2_channel_empty_n;
wire    B_cached_5_2_channel_read;
wire    B_cached_5_3_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_5_3_channel_din;
wire    B_cached_5_3_channel_write;
wire   [31:0] B_cached_5_3_channel_dout;
wire    B_cached_5_3_channel_empty_n;
wire    B_cached_5_3_channel_read;
wire    B_cached_5_4_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_5_4_channel_din;
wire    B_cached_5_4_channel_write;
wire   [31:0] B_cached_5_4_channel_dout;
wire    B_cached_5_4_channel_empty_n;
wire    B_cached_5_4_channel_read;
wire    B_cached_5_5_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_5_5_channel_din;
wire    B_cached_5_5_channel_write;
wire   [31:0] B_cached_5_5_channel_dout;
wire    B_cached_5_5_channel_empty_n;
wire    B_cached_5_5_channel_read;
wire    B_cached_5_6_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_5_6_channel_din;
wire    B_cached_5_6_channel_write;
wire   [31:0] B_cached_5_6_channel_dout;
wire    B_cached_5_6_channel_empty_n;
wire    B_cached_5_6_channel_read;
wire    B_cached_5_7_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_5_7_channel_din;
wire    B_cached_5_7_channel_write;
wire   [31:0] B_cached_5_7_channel_dout;
wire    B_cached_5_7_channel_empty_n;
wire    B_cached_5_7_channel_read;
wire    B_cached_6_0_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_6_0_channel_din;
wire    B_cached_6_0_channel_write;
wire   [31:0] B_cached_6_0_channel_dout;
wire    B_cached_6_0_channel_empty_n;
wire    B_cached_6_0_channel_read;
wire    B_cached_6_1_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_6_1_channel_din;
wire    B_cached_6_1_channel_write;
wire   [31:0] B_cached_6_1_channel_dout;
wire    B_cached_6_1_channel_empty_n;
wire    B_cached_6_1_channel_read;
wire    B_cached_6_2_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_6_2_channel_din;
wire    B_cached_6_2_channel_write;
wire   [31:0] B_cached_6_2_channel_dout;
wire    B_cached_6_2_channel_empty_n;
wire    B_cached_6_2_channel_read;
wire    B_cached_6_3_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_6_3_channel_din;
wire    B_cached_6_3_channel_write;
wire   [31:0] B_cached_6_3_channel_dout;
wire    B_cached_6_3_channel_empty_n;
wire    B_cached_6_3_channel_read;
wire    B_cached_6_4_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_6_4_channel_din;
wire    B_cached_6_4_channel_write;
wire   [31:0] B_cached_6_4_channel_dout;
wire    B_cached_6_4_channel_empty_n;
wire    B_cached_6_4_channel_read;
wire    B_cached_6_5_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_6_5_channel_din;
wire    B_cached_6_5_channel_write;
wire   [31:0] B_cached_6_5_channel_dout;
wire    B_cached_6_5_channel_empty_n;
wire    B_cached_6_5_channel_read;
wire    B_cached_6_6_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_6_6_channel_din;
wire    B_cached_6_6_channel_write;
wire   [31:0] B_cached_6_6_channel_dout;
wire    B_cached_6_6_channel_empty_n;
wire    B_cached_6_6_channel_read;
wire    B_cached_6_7_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_6_7_channel_din;
wire    B_cached_6_7_channel_write;
wire   [31:0] B_cached_6_7_channel_dout;
wire    B_cached_6_7_channel_empty_n;
wire    B_cached_6_7_channel_read;
wire    B_cached_7_0_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_7_0_channel_din;
wire    B_cached_7_0_channel_write;
wire   [31:0] B_cached_7_0_channel_dout;
wire    B_cached_7_0_channel_empty_n;
wire    B_cached_7_0_channel_read;
wire    B_cached_7_1_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_7_1_channel_din;
wire    B_cached_7_1_channel_write;
wire   [31:0] B_cached_7_1_channel_dout;
wire    B_cached_7_1_channel_empty_n;
wire    B_cached_7_1_channel_read;
wire    B_cached_7_2_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_7_2_channel_din;
wire    B_cached_7_2_channel_write;
wire   [31:0] B_cached_7_2_channel_dout;
wire    B_cached_7_2_channel_empty_n;
wire    B_cached_7_2_channel_read;
wire    B_cached_7_3_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_7_3_channel_din;
wire    B_cached_7_3_channel_write;
wire   [31:0] B_cached_7_3_channel_dout;
wire    B_cached_7_3_channel_empty_n;
wire    B_cached_7_3_channel_read;
wire    B_cached_7_4_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_7_4_channel_din;
wire    B_cached_7_4_channel_write;
wire   [31:0] B_cached_7_4_channel_dout;
wire    B_cached_7_4_channel_empty_n;
wire    B_cached_7_4_channel_read;
wire    B_cached_7_5_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_7_5_channel_din;
wire    B_cached_7_5_channel_write;
wire   [31:0] B_cached_7_5_channel_dout;
wire    B_cached_7_5_channel_empty_n;
wire    B_cached_7_5_channel_read;
wire    B_cached_7_6_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_7_6_channel_din;
wire    B_cached_7_6_channel_write;
wire   [31:0] B_cached_7_6_channel_dout;
wire    B_cached_7_6_channel_empty_n;
wire    B_cached_7_6_channel_read;
wire    B_cached_7_7_channel_U_ap_dummy_ce;
wire   [31:0] B_cached_7_7_channel_din;
wire    B_cached_7_7_channel_write;
wire   [31:0] B_cached_7_7_channel_dout;
wire    B_cached_7_7_channel_empty_n;
wire    B_cached_7_7_channel_read;
reg    ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 = 1'b0;
reg    ap_CS;
reg    ap_sig_top_allready;
reg    ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = 1'b0;
reg    ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
reg    ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
reg    ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready = 1'b0;
reg    ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
reg    ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start;


DCT_MAT_Multiply_Loop_LoadRow_proc DCT_MAT_Multiply_Loop_LoadRow_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start ),
    .ap_done( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done ),
    .ap_continue( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue ),
    .ap_idle( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle ),
    .ap_ready( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready ),
    .B_address0( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_address0 ),
    .B_ce0( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_ce0 ),
    .B_q0( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_q0 ),
    .ap_return_0( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0 ),
    .ap_return_1( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1 ),
    .ap_return_2( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2 ),
    .ap_return_3( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3 ),
    .ap_return_4( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4 ),
    .ap_return_5( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5 ),
    .ap_return_6( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6 ),
    .ap_return_7( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7 ),
    .ap_return_8( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8 ),
    .ap_return_9( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9 ),
    .ap_return_10( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10 ),
    .ap_return_11( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11 ),
    .ap_return_12( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12 ),
    .ap_return_13( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13 ),
    .ap_return_14( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14 ),
    .ap_return_15( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15 ),
    .ap_return_16( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16 ),
    .ap_return_17( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17 ),
    .ap_return_18( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18 ),
    .ap_return_19( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19 ),
    .ap_return_20( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20 ),
    .ap_return_21( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21 ),
    .ap_return_22( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22 ),
    .ap_return_23( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23 ),
    .ap_return_24( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24 ),
    .ap_return_25( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25 ),
    .ap_return_26( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26 ),
    .ap_return_27( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27 ),
    .ap_return_28( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28 ),
    .ap_return_29( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29 ),
    .ap_return_30( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30 ),
    .ap_return_31( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31 ),
    .ap_return_32( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32 ),
    .ap_return_33( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33 ),
    .ap_return_34( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34 ),
    .ap_return_35( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35 ),
    .ap_return_36( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36 ),
    .ap_return_37( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37 ),
    .ap_return_38( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38 ),
    .ap_return_39( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39 ),
    .ap_return_40( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40 ),
    .ap_return_41( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41 ),
    .ap_return_42( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42 ),
    .ap_return_43( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43 ),
    .ap_return_44( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44 ),
    .ap_return_45( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45 ),
    .ap_return_46( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46 ),
    .ap_return_47( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47 ),
    .ap_return_48( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48 ),
    .ap_return_49( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49 ),
    .ap_return_50( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50 ),
    .ap_return_51( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51 ),
    .ap_return_52( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52 ),
    .ap_return_53( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53 ),
    .ap_return_54( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54 ),
    .ap_return_55( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55 ),
    .ap_return_56( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56 ),
    .ap_return_57( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57 ),
    .ap_return_58( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58 ),
    .ap_return_59( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59 ),
    .ap_return_60( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60 ),
    .ap_return_61( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61 ),
    .ap_return_62( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62 ),
    .ap_return_63( DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63 )
);

DCT_MAT_Multiply_Loop_Row_proc DCT_MAT_Multiply_Loop_Row_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start ),
    .ap_done( DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done ),
    .ap_continue( DCT_MAT_Multiply_Loop_Row_proc_U0_ap_continue ),
    .ap_idle( DCT_MAT_Multiply_Loop_Row_proc_U0_ap_idle ),
    .ap_ready( DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready ),
    .A_0_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address0 ),
    .A_0_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0 ),
    .A_0_q0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 ),
    .A_0_address1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address1 ),
    .A_0_ce1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1 ),
    .A_0_q1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 ),
    .A_1_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address0 ),
    .A_1_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0 ),
    .A_1_q0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 ),
    .A_1_address1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address1 ),
    .A_1_ce1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1 ),
    .A_1_q1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 ),
    .A_2_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address0 ),
    .A_2_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0 ),
    .A_2_q0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 ),
    .A_2_address1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address1 ),
    .A_2_ce1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1 ),
    .A_2_q1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 ),
    .A_3_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address0 ),
    .A_3_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0 ),
    .A_3_q0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 ),
    .A_3_address1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address1 ),
    .A_3_ce1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1 ),
    .A_3_q1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 ),
    .A_4_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address0 ),
    .A_4_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0 ),
    .A_4_q0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 ),
    .A_4_address1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address1 ),
    .A_4_ce1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1 ),
    .A_4_q1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 ),
    .A_5_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address0 ),
    .A_5_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0 ),
    .A_5_q0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 ),
    .A_5_address1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address1 ),
    .A_5_ce1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1 ),
    .A_5_q1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 ),
    .A_6_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address0 ),
    .A_6_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0 ),
    .A_6_q0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 ),
    .A_6_address1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address1 ),
    .A_6_ce1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1 ),
    .A_6_q1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 ),
    .A_7_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address0 ),
    .A_7_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0 ),
    .A_7_q0( DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 ),
    .A_7_address1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address1 ),
    .A_7_ce1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1 ),
    .A_7_q1( DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 ),
    .p_read( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read ),
    .p_read1( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read1 ),
    .p_read2( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read2 ),
    .p_read3( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read3 ),
    .p_read4( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read4 ),
    .p_read5( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read5 ),
    .p_read6( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read6 ),
    .p_read7( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read7 ),
    .p_read8( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read8 ),
    .p_read9( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read9 ),
    .p_read10( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read10 ),
    .p_read11( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read11 ),
    .p_read12( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read12 ),
    .p_read13( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read13 ),
    .p_read14( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read14 ),
    .p_read15( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read15 ),
    .p_read16( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read16 ),
    .p_read17( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read17 ),
    .p_read18( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read18 ),
    .p_read19( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read19 ),
    .p_read20( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read20 ),
    .p_read21( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read21 ),
    .p_read22( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read22 ),
    .p_read23( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read23 ),
    .p_read24( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read24 ),
    .p_read25( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read25 ),
    .p_read26( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read26 ),
    .p_read27( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read27 ),
    .p_read28( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read28 ),
    .p_read29( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read29 ),
    .p_read30( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read30 ),
    .p_read31( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read31 ),
    .p_read32( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read32 ),
    .p_read33( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read33 ),
    .p_read34( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read34 ),
    .p_read35( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read35 ),
    .p_read36( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read36 ),
    .p_read37( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read37 ),
    .p_read38( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read38 ),
    .p_read39( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read39 ),
    .p_read40( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read40 ),
    .p_read41( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read41 ),
    .p_read42( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read42 ),
    .p_read43( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read43 ),
    .p_read44( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read44 ),
    .p_read45( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read45 ),
    .p_read46( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read46 ),
    .p_read47( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read47 ),
    .p_read48( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read48 ),
    .p_read49( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read49 ),
    .p_read50( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read50 ),
    .p_read51( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read51 ),
    .p_read52( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read52 ),
    .p_read53( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read53 ),
    .p_read54( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read54 ),
    .p_read55( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read55 ),
    .p_read56( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read56 ),
    .p_read57( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read57 ),
    .p_read58( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read58 ),
    .p_read59( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read59 ),
    .p_read60( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read60 ),
    .p_read61( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read61 ),
    .p_read62( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read62 ),
    .p_read63( DCT_MAT_Multiply_Loop_Row_proc_U0_p_read63 ),
    .C_0_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_address0 ),
    .C_0_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_ce0 ),
    .C_0_we0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_we0 ),
    .C_0_d0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_d0 ),
    .C_1_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_address0 ),
    .C_1_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_ce0 ),
    .C_1_we0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_we0 ),
    .C_1_d0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_d0 ),
    .C_2_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_address0 ),
    .C_2_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_ce0 ),
    .C_2_we0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_we0 ),
    .C_2_d0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_d0 ),
    .C_3_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_address0 ),
    .C_3_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_ce0 ),
    .C_3_we0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_we0 ),
    .C_3_d0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_d0 ),
    .C_4_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_address0 ),
    .C_4_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_ce0 ),
    .C_4_we0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_we0 ),
    .C_4_d0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_d0 ),
    .C_5_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_address0 ),
    .C_5_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_ce0 ),
    .C_5_we0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_we0 ),
    .C_5_d0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_d0 ),
    .C_6_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_address0 ),
    .C_6_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_ce0 ),
    .C_6_we0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_we0 ),
    .C_6_d0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_d0 ),
    .C_7_address0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_address0 ),
    .C_7_ce0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_ce0 ),
    .C_7_we0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_we0 ),
    .C_7_d0( DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_d0 )
);

FIFO_DCT_MAT_Multiply_B_cached_0_0_channel B_cached_0_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_0_0_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_0_0_channel_U_ap_dummy_ce ),
    .if_din( B_cached_0_0_channel_din ),
    .if_full_n( B_cached_0_0_channel_full_n ),
    .if_write( B_cached_0_0_channel_write ),
    .if_dout( B_cached_0_0_channel_dout ),
    .if_empty_n( B_cached_0_0_channel_empty_n ),
    .if_read( B_cached_0_0_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_0_1_channel B_cached_0_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_0_1_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_0_1_channel_U_ap_dummy_ce ),
    .if_din( B_cached_0_1_channel_din ),
    .if_full_n( B_cached_0_1_channel_full_n ),
    .if_write( B_cached_0_1_channel_write ),
    .if_dout( B_cached_0_1_channel_dout ),
    .if_empty_n( B_cached_0_1_channel_empty_n ),
    .if_read( B_cached_0_1_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_0_2_channel B_cached_0_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_0_2_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_0_2_channel_U_ap_dummy_ce ),
    .if_din( B_cached_0_2_channel_din ),
    .if_full_n( B_cached_0_2_channel_full_n ),
    .if_write( B_cached_0_2_channel_write ),
    .if_dout( B_cached_0_2_channel_dout ),
    .if_empty_n( B_cached_0_2_channel_empty_n ),
    .if_read( B_cached_0_2_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_0_3_channel B_cached_0_3_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_0_3_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_0_3_channel_U_ap_dummy_ce ),
    .if_din( B_cached_0_3_channel_din ),
    .if_full_n( B_cached_0_3_channel_full_n ),
    .if_write( B_cached_0_3_channel_write ),
    .if_dout( B_cached_0_3_channel_dout ),
    .if_empty_n( B_cached_0_3_channel_empty_n ),
    .if_read( B_cached_0_3_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_0_4_channel B_cached_0_4_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_0_4_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_0_4_channel_U_ap_dummy_ce ),
    .if_din( B_cached_0_4_channel_din ),
    .if_full_n( B_cached_0_4_channel_full_n ),
    .if_write( B_cached_0_4_channel_write ),
    .if_dout( B_cached_0_4_channel_dout ),
    .if_empty_n( B_cached_0_4_channel_empty_n ),
    .if_read( B_cached_0_4_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_0_5_channel B_cached_0_5_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_0_5_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_0_5_channel_U_ap_dummy_ce ),
    .if_din( B_cached_0_5_channel_din ),
    .if_full_n( B_cached_0_5_channel_full_n ),
    .if_write( B_cached_0_5_channel_write ),
    .if_dout( B_cached_0_5_channel_dout ),
    .if_empty_n( B_cached_0_5_channel_empty_n ),
    .if_read( B_cached_0_5_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_0_6_channel B_cached_0_6_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_0_6_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_0_6_channel_U_ap_dummy_ce ),
    .if_din( B_cached_0_6_channel_din ),
    .if_full_n( B_cached_0_6_channel_full_n ),
    .if_write( B_cached_0_6_channel_write ),
    .if_dout( B_cached_0_6_channel_dout ),
    .if_empty_n( B_cached_0_6_channel_empty_n ),
    .if_read( B_cached_0_6_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_0_7_channel B_cached_0_7_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_0_7_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_0_7_channel_U_ap_dummy_ce ),
    .if_din( B_cached_0_7_channel_din ),
    .if_full_n( B_cached_0_7_channel_full_n ),
    .if_write( B_cached_0_7_channel_write ),
    .if_dout( B_cached_0_7_channel_dout ),
    .if_empty_n( B_cached_0_7_channel_empty_n ),
    .if_read( B_cached_0_7_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_1_0_channel B_cached_1_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_1_0_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_1_0_channel_U_ap_dummy_ce ),
    .if_din( B_cached_1_0_channel_din ),
    .if_full_n( B_cached_1_0_channel_full_n ),
    .if_write( B_cached_1_0_channel_write ),
    .if_dout( B_cached_1_0_channel_dout ),
    .if_empty_n( B_cached_1_0_channel_empty_n ),
    .if_read( B_cached_1_0_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_1_1_channel B_cached_1_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_1_1_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_1_1_channel_U_ap_dummy_ce ),
    .if_din( B_cached_1_1_channel_din ),
    .if_full_n( B_cached_1_1_channel_full_n ),
    .if_write( B_cached_1_1_channel_write ),
    .if_dout( B_cached_1_1_channel_dout ),
    .if_empty_n( B_cached_1_1_channel_empty_n ),
    .if_read( B_cached_1_1_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_1_2_channel B_cached_1_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_1_2_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_1_2_channel_U_ap_dummy_ce ),
    .if_din( B_cached_1_2_channel_din ),
    .if_full_n( B_cached_1_2_channel_full_n ),
    .if_write( B_cached_1_2_channel_write ),
    .if_dout( B_cached_1_2_channel_dout ),
    .if_empty_n( B_cached_1_2_channel_empty_n ),
    .if_read( B_cached_1_2_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_1_3_channel B_cached_1_3_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_1_3_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_1_3_channel_U_ap_dummy_ce ),
    .if_din( B_cached_1_3_channel_din ),
    .if_full_n( B_cached_1_3_channel_full_n ),
    .if_write( B_cached_1_3_channel_write ),
    .if_dout( B_cached_1_3_channel_dout ),
    .if_empty_n( B_cached_1_3_channel_empty_n ),
    .if_read( B_cached_1_3_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_1_4_channel B_cached_1_4_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_1_4_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_1_4_channel_U_ap_dummy_ce ),
    .if_din( B_cached_1_4_channel_din ),
    .if_full_n( B_cached_1_4_channel_full_n ),
    .if_write( B_cached_1_4_channel_write ),
    .if_dout( B_cached_1_4_channel_dout ),
    .if_empty_n( B_cached_1_4_channel_empty_n ),
    .if_read( B_cached_1_4_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_1_5_channel B_cached_1_5_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_1_5_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_1_5_channel_U_ap_dummy_ce ),
    .if_din( B_cached_1_5_channel_din ),
    .if_full_n( B_cached_1_5_channel_full_n ),
    .if_write( B_cached_1_5_channel_write ),
    .if_dout( B_cached_1_5_channel_dout ),
    .if_empty_n( B_cached_1_5_channel_empty_n ),
    .if_read( B_cached_1_5_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_1_6_channel B_cached_1_6_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_1_6_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_1_6_channel_U_ap_dummy_ce ),
    .if_din( B_cached_1_6_channel_din ),
    .if_full_n( B_cached_1_6_channel_full_n ),
    .if_write( B_cached_1_6_channel_write ),
    .if_dout( B_cached_1_6_channel_dout ),
    .if_empty_n( B_cached_1_6_channel_empty_n ),
    .if_read( B_cached_1_6_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_1_7_channel B_cached_1_7_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_1_7_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_1_7_channel_U_ap_dummy_ce ),
    .if_din( B_cached_1_7_channel_din ),
    .if_full_n( B_cached_1_7_channel_full_n ),
    .if_write( B_cached_1_7_channel_write ),
    .if_dout( B_cached_1_7_channel_dout ),
    .if_empty_n( B_cached_1_7_channel_empty_n ),
    .if_read( B_cached_1_7_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_2_0_channel B_cached_2_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_2_0_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_2_0_channel_U_ap_dummy_ce ),
    .if_din( B_cached_2_0_channel_din ),
    .if_full_n( B_cached_2_0_channel_full_n ),
    .if_write( B_cached_2_0_channel_write ),
    .if_dout( B_cached_2_0_channel_dout ),
    .if_empty_n( B_cached_2_0_channel_empty_n ),
    .if_read( B_cached_2_0_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_2_1_channel B_cached_2_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_2_1_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_2_1_channel_U_ap_dummy_ce ),
    .if_din( B_cached_2_1_channel_din ),
    .if_full_n( B_cached_2_1_channel_full_n ),
    .if_write( B_cached_2_1_channel_write ),
    .if_dout( B_cached_2_1_channel_dout ),
    .if_empty_n( B_cached_2_1_channel_empty_n ),
    .if_read( B_cached_2_1_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_2_2_channel B_cached_2_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_2_2_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_2_2_channel_U_ap_dummy_ce ),
    .if_din( B_cached_2_2_channel_din ),
    .if_full_n( B_cached_2_2_channel_full_n ),
    .if_write( B_cached_2_2_channel_write ),
    .if_dout( B_cached_2_2_channel_dout ),
    .if_empty_n( B_cached_2_2_channel_empty_n ),
    .if_read( B_cached_2_2_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_2_3_channel B_cached_2_3_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_2_3_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_2_3_channel_U_ap_dummy_ce ),
    .if_din( B_cached_2_3_channel_din ),
    .if_full_n( B_cached_2_3_channel_full_n ),
    .if_write( B_cached_2_3_channel_write ),
    .if_dout( B_cached_2_3_channel_dout ),
    .if_empty_n( B_cached_2_3_channel_empty_n ),
    .if_read( B_cached_2_3_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_2_4_channel B_cached_2_4_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_2_4_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_2_4_channel_U_ap_dummy_ce ),
    .if_din( B_cached_2_4_channel_din ),
    .if_full_n( B_cached_2_4_channel_full_n ),
    .if_write( B_cached_2_4_channel_write ),
    .if_dout( B_cached_2_4_channel_dout ),
    .if_empty_n( B_cached_2_4_channel_empty_n ),
    .if_read( B_cached_2_4_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_2_5_channel B_cached_2_5_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_2_5_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_2_5_channel_U_ap_dummy_ce ),
    .if_din( B_cached_2_5_channel_din ),
    .if_full_n( B_cached_2_5_channel_full_n ),
    .if_write( B_cached_2_5_channel_write ),
    .if_dout( B_cached_2_5_channel_dout ),
    .if_empty_n( B_cached_2_5_channel_empty_n ),
    .if_read( B_cached_2_5_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_2_6_channel B_cached_2_6_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_2_6_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_2_6_channel_U_ap_dummy_ce ),
    .if_din( B_cached_2_6_channel_din ),
    .if_full_n( B_cached_2_6_channel_full_n ),
    .if_write( B_cached_2_6_channel_write ),
    .if_dout( B_cached_2_6_channel_dout ),
    .if_empty_n( B_cached_2_6_channel_empty_n ),
    .if_read( B_cached_2_6_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_2_7_channel B_cached_2_7_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_2_7_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_2_7_channel_U_ap_dummy_ce ),
    .if_din( B_cached_2_7_channel_din ),
    .if_full_n( B_cached_2_7_channel_full_n ),
    .if_write( B_cached_2_7_channel_write ),
    .if_dout( B_cached_2_7_channel_dout ),
    .if_empty_n( B_cached_2_7_channel_empty_n ),
    .if_read( B_cached_2_7_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_3_0_channel B_cached_3_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_3_0_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_3_0_channel_U_ap_dummy_ce ),
    .if_din( B_cached_3_0_channel_din ),
    .if_full_n( B_cached_3_0_channel_full_n ),
    .if_write( B_cached_3_0_channel_write ),
    .if_dout( B_cached_3_0_channel_dout ),
    .if_empty_n( B_cached_3_0_channel_empty_n ),
    .if_read( B_cached_3_0_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_3_1_channel B_cached_3_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_3_1_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_3_1_channel_U_ap_dummy_ce ),
    .if_din( B_cached_3_1_channel_din ),
    .if_full_n( B_cached_3_1_channel_full_n ),
    .if_write( B_cached_3_1_channel_write ),
    .if_dout( B_cached_3_1_channel_dout ),
    .if_empty_n( B_cached_3_1_channel_empty_n ),
    .if_read( B_cached_3_1_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_3_2_channel B_cached_3_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_3_2_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_3_2_channel_U_ap_dummy_ce ),
    .if_din( B_cached_3_2_channel_din ),
    .if_full_n( B_cached_3_2_channel_full_n ),
    .if_write( B_cached_3_2_channel_write ),
    .if_dout( B_cached_3_2_channel_dout ),
    .if_empty_n( B_cached_3_2_channel_empty_n ),
    .if_read( B_cached_3_2_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_3_3_channel B_cached_3_3_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_3_3_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_3_3_channel_U_ap_dummy_ce ),
    .if_din( B_cached_3_3_channel_din ),
    .if_full_n( B_cached_3_3_channel_full_n ),
    .if_write( B_cached_3_3_channel_write ),
    .if_dout( B_cached_3_3_channel_dout ),
    .if_empty_n( B_cached_3_3_channel_empty_n ),
    .if_read( B_cached_3_3_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_3_4_channel B_cached_3_4_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_3_4_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_3_4_channel_U_ap_dummy_ce ),
    .if_din( B_cached_3_4_channel_din ),
    .if_full_n( B_cached_3_4_channel_full_n ),
    .if_write( B_cached_3_4_channel_write ),
    .if_dout( B_cached_3_4_channel_dout ),
    .if_empty_n( B_cached_3_4_channel_empty_n ),
    .if_read( B_cached_3_4_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_3_5_channel B_cached_3_5_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_3_5_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_3_5_channel_U_ap_dummy_ce ),
    .if_din( B_cached_3_5_channel_din ),
    .if_full_n( B_cached_3_5_channel_full_n ),
    .if_write( B_cached_3_5_channel_write ),
    .if_dout( B_cached_3_5_channel_dout ),
    .if_empty_n( B_cached_3_5_channel_empty_n ),
    .if_read( B_cached_3_5_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_3_6_channel B_cached_3_6_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_3_6_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_3_6_channel_U_ap_dummy_ce ),
    .if_din( B_cached_3_6_channel_din ),
    .if_full_n( B_cached_3_6_channel_full_n ),
    .if_write( B_cached_3_6_channel_write ),
    .if_dout( B_cached_3_6_channel_dout ),
    .if_empty_n( B_cached_3_6_channel_empty_n ),
    .if_read( B_cached_3_6_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_3_7_channel B_cached_3_7_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_3_7_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_3_7_channel_U_ap_dummy_ce ),
    .if_din( B_cached_3_7_channel_din ),
    .if_full_n( B_cached_3_7_channel_full_n ),
    .if_write( B_cached_3_7_channel_write ),
    .if_dout( B_cached_3_7_channel_dout ),
    .if_empty_n( B_cached_3_7_channel_empty_n ),
    .if_read( B_cached_3_7_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_4_0_channel B_cached_4_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_4_0_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_4_0_channel_U_ap_dummy_ce ),
    .if_din( B_cached_4_0_channel_din ),
    .if_full_n( B_cached_4_0_channel_full_n ),
    .if_write( B_cached_4_0_channel_write ),
    .if_dout( B_cached_4_0_channel_dout ),
    .if_empty_n( B_cached_4_0_channel_empty_n ),
    .if_read( B_cached_4_0_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_4_1_channel B_cached_4_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_4_1_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_4_1_channel_U_ap_dummy_ce ),
    .if_din( B_cached_4_1_channel_din ),
    .if_full_n( B_cached_4_1_channel_full_n ),
    .if_write( B_cached_4_1_channel_write ),
    .if_dout( B_cached_4_1_channel_dout ),
    .if_empty_n( B_cached_4_1_channel_empty_n ),
    .if_read( B_cached_4_1_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_4_2_channel B_cached_4_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_4_2_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_4_2_channel_U_ap_dummy_ce ),
    .if_din( B_cached_4_2_channel_din ),
    .if_full_n( B_cached_4_2_channel_full_n ),
    .if_write( B_cached_4_2_channel_write ),
    .if_dout( B_cached_4_2_channel_dout ),
    .if_empty_n( B_cached_4_2_channel_empty_n ),
    .if_read( B_cached_4_2_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_4_3_channel B_cached_4_3_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_4_3_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_4_3_channel_U_ap_dummy_ce ),
    .if_din( B_cached_4_3_channel_din ),
    .if_full_n( B_cached_4_3_channel_full_n ),
    .if_write( B_cached_4_3_channel_write ),
    .if_dout( B_cached_4_3_channel_dout ),
    .if_empty_n( B_cached_4_3_channel_empty_n ),
    .if_read( B_cached_4_3_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_4_4_channel B_cached_4_4_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_4_4_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_4_4_channel_U_ap_dummy_ce ),
    .if_din( B_cached_4_4_channel_din ),
    .if_full_n( B_cached_4_4_channel_full_n ),
    .if_write( B_cached_4_4_channel_write ),
    .if_dout( B_cached_4_4_channel_dout ),
    .if_empty_n( B_cached_4_4_channel_empty_n ),
    .if_read( B_cached_4_4_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_4_5_channel B_cached_4_5_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_4_5_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_4_5_channel_U_ap_dummy_ce ),
    .if_din( B_cached_4_5_channel_din ),
    .if_full_n( B_cached_4_5_channel_full_n ),
    .if_write( B_cached_4_5_channel_write ),
    .if_dout( B_cached_4_5_channel_dout ),
    .if_empty_n( B_cached_4_5_channel_empty_n ),
    .if_read( B_cached_4_5_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_4_6_channel B_cached_4_6_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_4_6_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_4_6_channel_U_ap_dummy_ce ),
    .if_din( B_cached_4_6_channel_din ),
    .if_full_n( B_cached_4_6_channel_full_n ),
    .if_write( B_cached_4_6_channel_write ),
    .if_dout( B_cached_4_6_channel_dout ),
    .if_empty_n( B_cached_4_6_channel_empty_n ),
    .if_read( B_cached_4_6_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_4_7_channel B_cached_4_7_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_4_7_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_4_7_channel_U_ap_dummy_ce ),
    .if_din( B_cached_4_7_channel_din ),
    .if_full_n( B_cached_4_7_channel_full_n ),
    .if_write( B_cached_4_7_channel_write ),
    .if_dout( B_cached_4_7_channel_dout ),
    .if_empty_n( B_cached_4_7_channel_empty_n ),
    .if_read( B_cached_4_7_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_5_0_channel B_cached_5_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_5_0_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_5_0_channel_U_ap_dummy_ce ),
    .if_din( B_cached_5_0_channel_din ),
    .if_full_n( B_cached_5_0_channel_full_n ),
    .if_write( B_cached_5_0_channel_write ),
    .if_dout( B_cached_5_0_channel_dout ),
    .if_empty_n( B_cached_5_0_channel_empty_n ),
    .if_read( B_cached_5_0_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_5_1_channel B_cached_5_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_5_1_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_5_1_channel_U_ap_dummy_ce ),
    .if_din( B_cached_5_1_channel_din ),
    .if_full_n( B_cached_5_1_channel_full_n ),
    .if_write( B_cached_5_1_channel_write ),
    .if_dout( B_cached_5_1_channel_dout ),
    .if_empty_n( B_cached_5_1_channel_empty_n ),
    .if_read( B_cached_5_1_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_5_2_channel B_cached_5_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_5_2_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_5_2_channel_U_ap_dummy_ce ),
    .if_din( B_cached_5_2_channel_din ),
    .if_full_n( B_cached_5_2_channel_full_n ),
    .if_write( B_cached_5_2_channel_write ),
    .if_dout( B_cached_5_2_channel_dout ),
    .if_empty_n( B_cached_5_2_channel_empty_n ),
    .if_read( B_cached_5_2_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_5_3_channel B_cached_5_3_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_5_3_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_5_3_channel_U_ap_dummy_ce ),
    .if_din( B_cached_5_3_channel_din ),
    .if_full_n( B_cached_5_3_channel_full_n ),
    .if_write( B_cached_5_3_channel_write ),
    .if_dout( B_cached_5_3_channel_dout ),
    .if_empty_n( B_cached_5_3_channel_empty_n ),
    .if_read( B_cached_5_3_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_5_4_channel B_cached_5_4_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_5_4_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_5_4_channel_U_ap_dummy_ce ),
    .if_din( B_cached_5_4_channel_din ),
    .if_full_n( B_cached_5_4_channel_full_n ),
    .if_write( B_cached_5_4_channel_write ),
    .if_dout( B_cached_5_4_channel_dout ),
    .if_empty_n( B_cached_5_4_channel_empty_n ),
    .if_read( B_cached_5_4_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_5_5_channel B_cached_5_5_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_5_5_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_5_5_channel_U_ap_dummy_ce ),
    .if_din( B_cached_5_5_channel_din ),
    .if_full_n( B_cached_5_5_channel_full_n ),
    .if_write( B_cached_5_5_channel_write ),
    .if_dout( B_cached_5_5_channel_dout ),
    .if_empty_n( B_cached_5_5_channel_empty_n ),
    .if_read( B_cached_5_5_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_5_6_channel B_cached_5_6_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_5_6_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_5_6_channel_U_ap_dummy_ce ),
    .if_din( B_cached_5_6_channel_din ),
    .if_full_n( B_cached_5_6_channel_full_n ),
    .if_write( B_cached_5_6_channel_write ),
    .if_dout( B_cached_5_6_channel_dout ),
    .if_empty_n( B_cached_5_6_channel_empty_n ),
    .if_read( B_cached_5_6_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_5_7_channel B_cached_5_7_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_5_7_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_5_7_channel_U_ap_dummy_ce ),
    .if_din( B_cached_5_7_channel_din ),
    .if_full_n( B_cached_5_7_channel_full_n ),
    .if_write( B_cached_5_7_channel_write ),
    .if_dout( B_cached_5_7_channel_dout ),
    .if_empty_n( B_cached_5_7_channel_empty_n ),
    .if_read( B_cached_5_7_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_6_0_channel B_cached_6_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_6_0_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_6_0_channel_U_ap_dummy_ce ),
    .if_din( B_cached_6_0_channel_din ),
    .if_full_n( B_cached_6_0_channel_full_n ),
    .if_write( B_cached_6_0_channel_write ),
    .if_dout( B_cached_6_0_channel_dout ),
    .if_empty_n( B_cached_6_0_channel_empty_n ),
    .if_read( B_cached_6_0_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_6_1_channel B_cached_6_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_6_1_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_6_1_channel_U_ap_dummy_ce ),
    .if_din( B_cached_6_1_channel_din ),
    .if_full_n( B_cached_6_1_channel_full_n ),
    .if_write( B_cached_6_1_channel_write ),
    .if_dout( B_cached_6_1_channel_dout ),
    .if_empty_n( B_cached_6_1_channel_empty_n ),
    .if_read( B_cached_6_1_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_6_2_channel B_cached_6_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_6_2_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_6_2_channel_U_ap_dummy_ce ),
    .if_din( B_cached_6_2_channel_din ),
    .if_full_n( B_cached_6_2_channel_full_n ),
    .if_write( B_cached_6_2_channel_write ),
    .if_dout( B_cached_6_2_channel_dout ),
    .if_empty_n( B_cached_6_2_channel_empty_n ),
    .if_read( B_cached_6_2_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_6_3_channel B_cached_6_3_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_6_3_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_6_3_channel_U_ap_dummy_ce ),
    .if_din( B_cached_6_3_channel_din ),
    .if_full_n( B_cached_6_3_channel_full_n ),
    .if_write( B_cached_6_3_channel_write ),
    .if_dout( B_cached_6_3_channel_dout ),
    .if_empty_n( B_cached_6_3_channel_empty_n ),
    .if_read( B_cached_6_3_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_6_4_channel B_cached_6_4_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_6_4_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_6_4_channel_U_ap_dummy_ce ),
    .if_din( B_cached_6_4_channel_din ),
    .if_full_n( B_cached_6_4_channel_full_n ),
    .if_write( B_cached_6_4_channel_write ),
    .if_dout( B_cached_6_4_channel_dout ),
    .if_empty_n( B_cached_6_4_channel_empty_n ),
    .if_read( B_cached_6_4_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_6_5_channel B_cached_6_5_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_6_5_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_6_5_channel_U_ap_dummy_ce ),
    .if_din( B_cached_6_5_channel_din ),
    .if_full_n( B_cached_6_5_channel_full_n ),
    .if_write( B_cached_6_5_channel_write ),
    .if_dout( B_cached_6_5_channel_dout ),
    .if_empty_n( B_cached_6_5_channel_empty_n ),
    .if_read( B_cached_6_5_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_6_6_channel B_cached_6_6_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_6_6_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_6_6_channel_U_ap_dummy_ce ),
    .if_din( B_cached_6_6_channel_din ),
    .if_full_n( B_cached_6_6_channel_full_n ),
    .if_write( B_cached_6_6_channel_write ),
    .if_dout( B_cached_6_6_channel_dout ),
    .if_empty_n( B_cached_6_6_channel_empty_n ),
    .if_read( B_cached_6_6_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_6_7_channel B_cached_6_7_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_6_7_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_6_7_channel_U_ap_dummy_ce ),
    .if_din( B_cached_6_7_channel_din ),
    .if_full_n( B_cached_6_7_channel_full_n ),
    .if_write( B_cached_6_7_channel_write ),
    .if_dout( B_cached_6_7_channel_dout ),
    .if_empty_n( B_cached_6_7_channel_empty_n ),
    .if_read( B_cached_6_7_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_7_0_channel B_cached_7_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_7_0_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_7_0_channel_U_ap_dummy_ce ),
    .if_din( B_cached_7_0_channel_din ),
    .if_full_n( B_cached_7_0_channel_full_n ),
    .if_write( B_cached_7_0_channel_write ),
    .if_dout( B_cached_7_0_channel_dout ),
    .if_empty_n( B_cached_7_0_channel_empty_n ),
    .if_read( B_cached_7_0_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_7_1_channel B_cached_7_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_7_1_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_7_1_channel_U_ap_dummy_ce ),
    .if_din( B_cached_7_1_channel_din ),
    .if_full_n( B_cached_7_1_channel_full_n ),
    .if_write( B_cached_7_1_channel_write ),
    .if_dout( B_cached_7_1_channel_dout ),
    .if_empty_n( B_cached_7_1_channel_empty_n ),
    .if_read( B_cached_7_1_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_7_2_channel B_cached_7_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_7_2_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_7_2_channel_U_ap_dummy_ce ),
    .if_din( B_cached_7_2_channel_din ),
    .if_full_n( B_cached_7_2_channel_full_n ),
    .if_write( B_cached_7_2_channel_write ),
    .if_dout( B_cached_7_2_channel_dout ),
    .if_empty_n( B_cached_7_2_channel_empty_n ),
    .if_read( B_cached_7_2_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_7_3_channel B_cached_7_3_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_7_3_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_7_3_channel_U_ap_dummy_ce ),
    .if_din( B_cached_7_3_channel_din ),
    .if_full_n( B_cached_7_3_channel_full_n ),
    .if_write( B_cached_7_3_channel_write ),
    .if_dout( B_cached_7_3_channel_dout ),
    .if_empty_n( B_cached_7_3_channel_empty_n ),
    .if_read( B_cached_7_3_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_7_4_channel B_cached_7_4_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_7_4_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_7_4_channel_U_ap_dummy_ce ),
    .if_din( B_cached_7_4_channel_din ),
    .if_full_n( B_cached_7_4_channel_full_n ),
    .if_write( B_cached_7_4_channel_write ),
    .if_dout( B_cached_7_4_channel_dout ),
    .if_empty_n( B_cached_7_4_channel_empty_n ),
    .if_read( B_cached_7_4_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_7_5_channel B_cached_7_5_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_7_5_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_7_5_channel_U_ap_dummy_ce ),
    .if_din( B_cached_7_5_channel_din ),
    .if_full_n( B_cached_7_5_channel_full_n ),
    .if_write( B_cached_7_5_channel_write ),
    .if_dout( B_cached_7_5_channel_dout ),
    .if_empty_n( B_cached_7_5_channel_empty_n ),
    .if_read( B_cached_7_5_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_7_6_channel B_cached_7_6_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_7_6_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_7_6_channel_U_ap_dummy_ce ),
    .if_din( B_cached_7_6_channel_din ),
    .if_full_n( B_cached_7_6_channel_full_n ),
    .if_write( B_cached_7_6_channel_write ),
    .if_dout( B_cached_7_6_channel_dout ),
    .if_empty_n( B_cached_7_6_channel_empty_n ),
    .if_read( B_cached_7_6_channel_read )
);

FIFO_DCT_MAT_Multiply_B_cached_7_7_channel B_cached_7_7_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( B_cached_7_7_channel_U_ap_dummy_ce ),
    .if_write_ce( B_cached_7_7_channel_U_ap_dummy_ce ),
    .if_din( B_cached_7_7_channel_din ),
    .if_full_n( B_cached_7_7_channel_full_n ),
    .if_write( B_cached_7_7_channel_write ),
    .if_dout( B_cached_7_7_channel_dout ),
    .if_empty_n( B_cached_7_7_channel_empty_n ),
    .if_read( B_cached_7_7_channel_read )
);



/// ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
        end else if ((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done)) begin
            ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_0_0_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_0_0_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_0_0_channel_full_n))) begin
            ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_0_1_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_0_1_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_0_1_channel_full_n))) begin
            ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_0_2_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_0_2_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_0_2_channel_full_n))) begin
            ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_0_3_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_0_3_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_0_3_channel_full_n))) begin
            ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_0_4_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_0_4_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_0_4_channel_full_n))) begin
            ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_0_5_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_0_5_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_0_5_channel_full_n))) begin
            ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_0_6_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_0_6_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_0_6_channel_full_n))) begin
            ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_0_7_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_0_7_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_0_7_channel_full_n))) begin
            ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_1_0_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_1_0_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_1_0_channel_full_n))) begin
            ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_1_1_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_1_1_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_1_1_channel_full_n))) begin
            ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_1_2_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_1_2_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_1_2_channel_full_n))) begin
            ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_1_3_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_1_3_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_1_3_channel_full_n))) begin
            ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_1_4_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_1_4_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_1_4_channel_full_n))) begin
            ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_1_5_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_1_5_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_1_5_channel_full_n))) begin
            ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_1_6_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_1_6_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_1_6_channel_full_n))) begin
            ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_1_7_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_1_7_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_1_7_channel_full_n))) begin
            ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_2_0_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_2_0_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_2_0_channel_full_n))) begin
            ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_2_1_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_2_1_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_2_1_channel_full_n))) begin
            ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_2_2_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_2_2_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_2_2_channel_full_n))) begin
            ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_2_3_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_2_3_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_2_3_channel_full_n))) begin
            ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_2_4_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_2_4_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_2_4_channel_full_n))) begin
            ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_2_5_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_2_5_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_2_5_channel_full_n))) begin
            ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_2_6_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_2_6_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_2_6_channel_full_n))) begin
            ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_2_7_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_2_7_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_2_7_channel_full_n))) begin
            ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_3_0_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_3_0_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_3_0_channel_full_n))) begin
            ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_3_1_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_3_1_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_3_1_channel_full_n))) begin
            ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_3_2_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_3_2_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_3_2_channel_full_n))) begin
            ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_3_3_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_3_3_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_3_3_channel_full_n))) begin
            ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_3_4_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_3_4_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_3_4_channel_full_n))) begin
            ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_3_5_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_3_5_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_3_5_channel_full_n))) begin
            ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_3_6_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_3_6_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_3_6_channel_full_n))) begin
            ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_3_7_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_3_7_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_3_7_channel_full_n))) begin
            ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_4_0_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_4_0_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_4_0_channel_full_n))) begin
            ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_4_1_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_4_1_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_4_1_channel_full_n))) begin
            ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_4_2_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_4_2_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_4_2_channel_full_n))) begin
            ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_4_3_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_4_3_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_4_3_channel_full_n))) begin
            ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_4_4_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_4_4_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_4_4_channel_full_n))) begin
            ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_4_5_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_4_5_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_4_5_channel_full_n))) begin
            ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_4_6_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_4_6_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_4_6_channel_full_n))) begin
            ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_4_7_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_4_7_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_4_7_channel_full_n))) begin
            ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_5_0_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_5_0_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_5_0_channel_full_n))) begin
            ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_5_1_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_5_1_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_5_1_channel_full_n))) begin
            ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_5_2_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_5_2_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_5_2_channel_full_n))) begin
            ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_5_3_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_5_3_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_5_3_channel_full_n))) begin
            ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_5_4_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_5_4_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_5_4_channel_full_n))) begin
            ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_5_5_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_5_5_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_5_5_channel_full_n))) begin
            ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_5_6_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_5_6_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_5_6_channel_full_n))) begin
            ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_5_7_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_5_7_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_5_7_channel_full_n))) begin
            ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_6_0_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_6_0_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_6_0_channel_full_n))) begin
            ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_6_1_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_6_1_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_6_1_channel_full_n))) begin
            ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_6_2_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_6_2_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_6_2_channel_full_n))) begin
            ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_6_3_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_6_3_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_6_3_channel_full_n))) begin
            ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_6_4_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_6_4_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_6_4_channel_full_n))) begin
            ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_6_5_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_6_5_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_6_5_channel_full_n))) begin
            ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_6_6_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_6_6_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_6_6_channel_full_n))) begin
            ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_6_7_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_6_7_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_6_7_channel_full_n))) begin
            ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_7_0_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_7_0_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_7_0_channel_full_n))) begin
            ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_7_1_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_7_1_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_7_1_channel_full_n))) begin
            ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_7_2_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_7_2_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_7_2_channel_full_n))) begin
            ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_7_3_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_7_3_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_7_3_channel_full_n))) begin
            ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_7_4_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_7_4_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_7_4_channel_full_n))) begin
            ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_7_5_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_7_5_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_7_5_channel_full_n))) begin
            ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_7_6_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_7_6_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_7_6_channel_full_n))) begin
            ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_B_cached_7_7_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_B_cached_7_7_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == B_cached_7_7_channel_full_n))) begin
            ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_0;
        end else if ((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready == ap_const_logic_1)) begin
            ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)) begin
            ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue assign process. ///
always @ (ap_sig_ready_B_cached_0_1_channel_full_n or ap_sig_ready_B_cached_0_0_channel_full_n or ap_sig_ready_B_cached_0_2_channel_full_n or ap_sig_ready_B_cached_0_3_channel_full_n or ap_sig_ready_B_cached_0_4_channel_full_n or ap_sig_ready_B_cached_0_5_channel_full_n or ap_sig_ready_B_cached_0_6_channel_full_n or ap_sig_ready_B_cached_1_2_channel_full_n or ap_sig_ready_B_cached_0_7_channel_full_n or ap_sig_ready_B_cached_1_6_channel_full_n or ap_sig_ready_B_cached_1_0_channel_full_n or ap_sig_ready_B_cached_1_1_channel_full_n or ap_sig_ready_B_cached_1_3_channel_full_n or ap_sig_ready_B_cached_1_4_channel_full_n or ap_sig_ready_B_cached_1_5_channel_full_n or ap_sig_ready_B_cached_2_4_channel_full_n or ap_sig_ready_B_cached_1_7_channel_full_n or ap_sig_ready_B_cached_2_0_channel_full_n or ap_sig_ready_B_cached_2_1_channel_full_n or ap_sig_ready_B_cached_2_2_channel_full_n or ap_sig_ready_B_cached_2_3_channel_full_n or ap_sig_ready_B_cached_2_5_channel_full_n or ap_sig_ready_B_cached_2_6_channel_full_n or ap_sig_ready_B_cached_2_7_channel_full_n or ap_sig_ready_B_cached_3_0_channel_full_n or ap_sig_ready_B_cached_3_1_channel_full_n or ap_sig_ready_B_cached_3_2_channel_full_n or ap_sig_ready_B_cached_3_3_channel_full_n or ap_sig_ready_B_cached_3_4_channel_full_n or ap_sig_ready_B_cached_3_5_channel_full_n or ap_sig_ready_B_cached_3_6_channel_full_n or ap_sig_ready_B_cached_3_7_channel_full_n or ap_sig_ready_B_cached_4_0_channel_full_n or ap_sig_ready_B_cached_4_1_channel_full_n or ap_sig_ready_B_cached_4_2_channel_full_n or ap_sig_ready_B_cached_4_3_channel_full_n or ap_sig_ready_B_cached_4_4_channel_full_n or ap_sig_ready_B_cached_4_5_channel_full_n or ap_sig_ready_B_cached_4_6_channel_full_n or ap_sig_ready_B_cached_4_7_channel_full_n or ap_sig_ready_B_cached_5_0_channel_full_n or ap_sig_ready_B_cached_5_1_channel_full_n or ap_sig_ready_B_cached_5_2_channel_full_n or ap_sig_ready_B_cached_5_3_channel_full_n or ap_sig_ready_B_cached_5_4_channel_full_n or ap_sig_ready_B_cached_5_5_channel_full_n or ap_sig_ready_B_cached_5_6_channel_full_n or ap_sig_ready_B_cached_5_7_channel_full_n or ap_sig_ready_B_cached_6_0_channel_full_n or ap_sig_ready_B_cached_6_1_channel_full_n or ap_sig_ready_B_cached_6_2_channel_full_n or ap_sig_ready_B_cached_6_3_channel_full_n or ap_sig_ready_B_cached_6_4_channel_full_n or ap_sig_ready_B_cached_6_5_channel_full_n or ap_sig_ready_B_cached_6_6_channel_full_n or ap_sig_ready_B_cached_6_7_channel_full_n or ap_sig_ready_B_cached_7_0_channel_full_n or ap_sig_ready_B_cached_7_1_channel_full_n or ap_sig_ready_B_cached_7_2_channel_full_n or ap_sig_ready_B_cached_7_3_channel_full_n or ap_sig_ready_B_cached_7_4_channel_full_n or ap_sig_ready_B_cached_7_5_channel_full_n or ap_sig_ready_B_cached_7_6_channel_full_n or ap_sig_ready_B_cached_7_7_channel_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_B_cached_0_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_0_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_0_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_0_3_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_0_4_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_0_5_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_0_6_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_1_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_0_7_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_1_6_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_1_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_1_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_1_3_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_1_4_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_1_5_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_2_4_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_1_7_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_2_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_2_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_2_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_2_3_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_2_5_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_2_6_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_2_7_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_3_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_3_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_3_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_3_3_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_3_4_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_3_5_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_3_6_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_3_7_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_4_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_4_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_4_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_4_3_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_4_4_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_4_5_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_4_6_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_4_7_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_5_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_5_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_5_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_5_3_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_5_4_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_5_5_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_5_6_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_5_7_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_6_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_6_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_6_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_6_3_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_6_4_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_6_5_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_6_6_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_6_7_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_7_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_7_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_7_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_7_3_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_7_4_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_7_5_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_7_6_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_B_cached_7_7_channel_full_n))) begin
        DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1;
    end else begin
        DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_0;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_0_0_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_0_0_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_0_1_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_0_1_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_0_2_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_0_2_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_0_3_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_0_3_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_0_4_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_0_4_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_0_5_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_0_5_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_0_6_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_0_6_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_0_7_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_0_7_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_1_0_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_1_0_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_1_1_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_1_1_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_1_2_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_1_2_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_1_3_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_1_3_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_1_4_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_1_4_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_1_5_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_1_5_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_1_6_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_1_6_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_1_7_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_1_7_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_2_0_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_2_0_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_2_1_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_2_1_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_2_2_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_2_2_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_2_3_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_2_3_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_2_4_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_2_4_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_2_5_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_2_5_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_2_6_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_2_6_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_2_7_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_2_7_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_3_0_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_3_0_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_3_1_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_3_1_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_3_2_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_3_2_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_3_3_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_3_3_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_3_4_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_3_4_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_3_5_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_3_5_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_3_6_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_3_6_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_3_7_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_3_7_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_4_0_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_4_0_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_4_1_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_4_1_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_4_2_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_4_2_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_4_3_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_4_3_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_4_4_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_4_4_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_4_5_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_4_5_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_4_6_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_4_6_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_4_7_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_4_7_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_5_0_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_5_0_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_5_1_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_5_1_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_5_2_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_5_2_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_5_3_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_5_3_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_5_4_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_5_4_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_5_5_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_5_5_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_5_6_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_5_6_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_5_7_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_5_7_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_6_0_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_6_0_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_6_1_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_6_1_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_6_2_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_6_2_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_6_3_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_6_3_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_6_4_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_6_4_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_6_5_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_6_5_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_6_6_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_6_6_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_6_7_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_6_7_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_7_0_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_7_0_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_7_1_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_7_1_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_7_2_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_7_2_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_7_3_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_7_3_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_7_4_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_7_4_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_7_5_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_7_5_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_7_6_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_7_6_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done or ap_reg_ready_B_cached_7_7_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_B_cached_7_7_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
    end
end

/// ap_idle assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle or DCT_MAT_Multiply_Loop_Row_proc_U0_ap_idle or B_cached_0_0_channel_empty_n or B_cached_0_1_channel_empty_n or B_cached_0_2_channel_empty_n or B_cached_0_3_channel_empty_n or B_cached_0_4_channel_empty_n or B_cached_0_5_channel_empty_n or B_cached_0_6_channel_empty_n or B_cached_0_7_channel_empty_n or B_cached_1_0_channel_empty_n or B_cached_1_1_channel_empty_n or B_cached_1_2_channel_empty_n or B_cached_1_3_channel_empty_n or B_cached_1_4_channel_empty_n or B_cached_1_5_channel_empty_n or B_cached_1_6_channel_empty_n or B_cached_1_7_channel_empty_n or B_cached_2_0_channel_empty_n or B_cached_2_1_channel_empty_n or B_cached_2_2_channel_empty_n or B_cached_2_3_channel_empty_n or B_cached_2_4_channel_empty_n or B_cached_2_5_channel_empty_n or B_cached_2_6_channel_empty_n or B_cached_2_7_channel_empty_n or B_cached_3_0_channel_empty_n or B_cached_3_1_channel_empty_n or B_cached_3_2_channel_empty_n or B_cached_3_3_channel_empty_n or B_cached_3_4_channel_empty_n or B_cached_3_5_channel_empty_n or B_cached_3_6_channel_empty_n or B_cached_3_7_channel_empty_n or B_cached_4_0_channel_empty_n or B_cached_4_1_channel_empty_n or B_cached_4_2_channel_empty_n or B_cached_4_3_channel_empty_n or B_cached_4_4_channel_empty_n or B_cached_4_5_channel_empty_n or B_cached_4_6_channel_empty_n or B_cached_4_7_channel_empty_n or B_cached_5_0_channel_empty_n or B_cached_5_1_channel_empty_n or B_cached_5_2_channel_empty_n or B_cached_5_3_channel_empty_n or B_cached_5_4_channel_empty_n or B_cached_5_5_channel_empty_n or B_cached_5_6_channel_empty_n or B_cached_5_7_channel_empty_n or B_cached_6_0_channel_empty_n or B_cached_6_1_channel_empty_n or B_cached_6_2_channel_empty_n or B_cached_6_3_channel_empty_n or B_cached_6_4_channel_empty_n or B_cached_6_5_channel_empty_n or B_cached_6_6_channel_empty_n or B_cached_6_7_channel_empty_n or B_cached_7_0_channel_empty_n or B_cached_7_1_channel_empty_n or B_cached_7_2_channel_empty_n or B_cached_7_3_channel_empty_n or B_cached_7_4_channel_empty_n or B_cached_7_5_channel_empty_n or B_cached_7_6_channel_empty_n or B_cached_7_7_channel_empty_n)
begin
    if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle == ap_const_logic_1) & (ap_const_logic_1 == DCT_MAT_Multiply_Loop_Row_proc_U0_ap_idle) & (ap_const_logic_0 == B_cached_0_0_channel_empty_n) & (ap_const_logic_0 == B_cached_0_1_channel_empty_n) & (ap_const_logic_0 == B_cached_0_2_channel_empty_n) & (ap_const_logic_0 == B_cached_0_3_channel_empty_n) & (ap_const_logic_0 == B_cached_0_4_channel_empty_n) & (ap_const_logic_0 == B_cached_0_5_channel_empty_n) & (ap_const_logic_0 == B_cached_0_6_channel_empty_n) & (ap_const_logic_0 == B_cached_0_7_channel_empty_n) & (ap_const_logic_0 == B_cached_1_0_channel_empty_n) & (ap_const_logic_0 == B_cached_1_1_channel_empty_n) & (ap_const_logic_0 == B_cached_1_2_channel_empty_n) & (ap_const_logic_0 == B_cached_1_3_channel_empty_n) & (ap_const_logic_0 == B_cached_1_4_channel_empty_n) & (ap_const_logic_0 == B_cached_1_5_channel_empty_n) & (ap_const_logic_0 == B_cached_1_6_channel_empty_n) & (ap_const_logic_0 == B_cached_1_7_channel_empty_n) & (ap_const_logic_0 == B_cached_2_0_channel_empty_n) & (ap_const_logic_0 == B_cached_2_1_channel_empty_n) & (ap_const_logic_0 == B_cached_2_2_channel_empty_n) & (ap_const_logic_0 == B_cached_2_3_channel_empty_n) & (ap_const_logic_0 == B_cached_2_4_channel_empty_n) & (ap_const_logic_0 == B_cached_2_5_channel_empty_n) & (ap_const_logic_0 == B_cached_2_6_channel_empty_n) & (ap_const_logic_0 == B_cached_2_7_channel_empty_n) & (ap_const_logic_0 == B_cached_3_0_channel_empty_n) & (ap_const_logic_0 == B_cached_3_1_channel_empty_n) & (ap_const_logic_0 == B_cached_3_2_channel_empty_n) & (ap_const_logic_0 == B_cached_3_3_channel_empty_n) & (ap_const_logic_0 == B_cached_3_4_channel_empty_n) & (ap_const_logic_0 == B_cached_3_5_channel_empty_n) & (ap_const_logic_0 == B_cached_3_6_channel_empty_n) & (ap_const_logic_0 == B_cached_3_7_channel_empty_n) & (ap_const_logic_0 == B_cached_4_0_channel_empty_n) & (ap_const_logic_0 == B_cached_4_1_channel_empty_n) & (ap_const_logic_0 == B_cached_4_2_channel_empty_n) & (ap_const_logic_0 == B_cached_4_3_channel_empty_n) & (ap_const_logic_0 == B_cached_4_4_channel_empty_n) & (ap_const_logic_0 == B_cached_4_5_channel_empty_n) & (ap_const_logic_0 == B_cached_4_6_channel_empty_n) & (ap_const_logic_0 == B_cached_4_7_channel_empty_n) & (ap_const_logic_0 == B_cached_5_0_channel_empty_n) & (ap_const_logic_0 == B_cached_5_1_channel_empty_n) & (ap_const_logic_0 == B_cached_5_2_channel_empty_n) & (ap_const_logic_0 == B_cached_5_3_channel_empty_n) & (ap_const_logic_0 == B_cached_5_4_channel_empty_n) & (ap_const_logic_0 == B_cached_5_5_channel_empty_n) & (ap_const_logic_0 == B_cached_5_6_channel_empty_n) & (ap_const_logic_0 == B_cached_5_7_channel_empty_n) & (ap_const_logic_0 == B_cached_6_0_channel_empty_n) & (ap_const_logic_0 == B_cached_6_1_channel_empty_n) & (ap_const_logic_0 == B_cached_6_2_channel_empty_n) & (ap_const_logic_0 == B_cached_6_3_channel_empty_n) & (ap_const_logic_0 == B_cached_6_4_channel_empty_n) & (ap_const_logic_0 == B_cached_6_5_channel_empty_n) & (ap_const_logic_0 == B_cached_6_6_channel_empty_n) & (ap_const_logic_0 == B_cached_6_7_channel_empty_n) & (ap_const_logic_0 == B_cached_7_0_channel_empty_n) & (ap_const_logic_0 == B_cached_7_1_channel_empty_n) & (ap_const_logic_0 == B_cached_7_2_channel_empty_n) & (ap_const_logic_0 == B_cached_7_3_channel_empty_n) & (ap_const_logic_0 == B_cached_7_4_channel_empty_n) & (ap_const_logic_0 == B_cached_7_5_channel_empty_n) & (ap_const_logic_0 == B_cached_7_6_channel_empty_n) & (ap_const_logic_0 == B_cached_7_7_channel_empty_n))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done)
begin
    if ((ap_const_logic_1 == DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end

/// ap_sig_ready_B_cached_0_0_channel_full_n assign process. ///
always @ (B_cached_0_0_channel_full_n or ap_reg_ready_B_cached_0_0_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_0_0_channel_full_n)) begin
        ap_sig_ready_B_cached_0_0_channel_full_n = B_cached_0_0_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_0_0_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_0_1_channel_full_n assign process. ///
always @ (B_cached_0_1_channel_full_n or ap_reg_ready_B_cached_0_1_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_0_1_channel_full_n)) begin
        ap_sig_ready_B_cached_0_1_channel_full_n = B_cached_0_1_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_0_1_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_0_2_channel_full_n assign process. ///
always @ (B_cached_0_2_channel_full_n or ap_reg_ready_B_cached_0_2_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_0_2_channel_full_n)) begin
        ap_sig_ready_B_cached_0_2_channel_full_n = B_cached_0_2_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_0_2_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_0_3_channel_full_n assign process. ///
always @ (B_cached_0_3_channel_full_n or ap_reg_ready_B_cached_0_3_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_0_3_channel_full_n)) begin
        ap_sig_ready_B_cached_0_3_channel_full_n = B_cached_0_3_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_0_3_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_0_4_channel_full_n assign process. ///
always @ (B_cached_0_4_channel_full_n or ap_reg_ready_B_cached_0_4_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_0_4_channel_full_n)) begin
        ap_sig_ready_B_cached_0_4_channel_full_n = B_cached_0_4_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_0_4_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_0_5_channel_full_n assign process. ///
always @ (B_cached_0_5_channel_full_n or ap_reg_ready_B_cached_0_5_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_0_5_channel_full_n)) begin
        ap_sig_ready_B_cached_0_5_channel_full_n = B_cached_0_5_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_0_5_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_0_6_channel_full_n assign process. ///
always @ (B_cached_0_6_channel_full_n or ap_reg_ready_B_cached_0_6_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_0_6_channel_full_n)) begin
        ap_sig_ready_B_cached_0_6_channel_full_n = B_cached_0_6_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_0_6_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_0_7_channel_full_n assign process. ///
always @ (B_cached_0_7_channel_full_n or ap_reg_ready_B_cached_0_7_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_0_7_channel_full_n)) begin
        ap_sig_ready_B_cached_0_7_channel_full_n = B_cached_0_7_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_0_7_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_1_0_channel_full_n assign process. ///
always @ (B_cached_1_0_channel_full_n or ap_reg_ready_B_cached_1_0_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_1_0_channel_full_n)) begin
        ap_sig_ready_B_cached_1_0_channel_full_n = B_cached_1_0_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_1_0_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_1_1_channel_full_n assign process. ///
always @ (B_cached_1_1_channel_full_n or ap_reg_ready_B_cached_1_1_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_1_1_channel_full_n)) begin
        ap_sig_ready_B_cached_1_1_channel_full_n = B_cached_1_1_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_1_1_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_1_2_channel_full_n assign process. ///
always @ (B_cached_1_2_channel_full_n or ap_reg_ready_B_cached_1_2_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_1_2_channel_full_n)) begin
        ap_sig_ready_B_cached_1_2_channel_full_n = B_cached_1_2_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_1_2_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_1_3_channel_full_n assign process. ///
always @ (B_cached_1_3_channel_full_n or ap_reg_ready_B_cached_1_3_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_1_3_channel_full_n)) begin
        ap_sig_ready_B_cached_1_3_channel_full_n = B_cached_1_3_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_1_3_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_1_4_channel_full_n assign process. ///
always @ (B_cached_1_4_channel_full_n or ap_reg_ready_B_cached_1_4_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_1_4_channel_full_n)) begin
        ap_sig_ready_B_cached_1_4_channel_full_n = B_cached_1_4_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_1_4_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_1_5_channel_full_n assign process. ///
always @ (B_cached_1_5_channel_full_n or ap_reg_ready_B_cached_1_5_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_1_5_channel_full_n)) begin
        ap_sig_ready_B_cached_1_5_channel_full_n = B_cached_1_5_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_1_5_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_1_6_channel_full_n assign process. ///
always @ (B_cached_1_6_channel_full_n or ap_reg_ready_B_cached_1_6_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_1_6_channel_full_n)) begin
        ap_sig_ready_B_cached_1_6_channel_full_n = B_cached_1_6_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_1_6_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_1_7_channel_full_n assign process. ///
always @ (B_cached_1_7_channel_full_n or ap_reg_ready_B_cached_1_7_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_1_7_channel_full_n)) begin
        ap_sig_ready_B_cached_1_7_channel_full_n = B_cached_1_7_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_1_7_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_2_0_channel_full_n assign process. ///
always @ (B_cached_2_0_channel_full_n or ap_reg_ready_B_cached_2_0_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_2_0_channel_full_n)) begin
        ap_sig_ready_B_cached_2_0_channel_full_n = B_cached_2_0_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_2_0_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_2_1_channel_full_n assign process. ///
always @ (B_cached_2_1_channel_full_n or ap_reg_ready_B_cached_2_1_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_2_1_channel_full_n)) begin
        ap_sig_ready_B_cached_2_1_channel_full_n = B_cached_2_1_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_2_1_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_2_2_channel_full_n assign process. ///
always @ (B_cached_2_2_channel_full_n or ap_reg_ready_B_cached_2_2_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_2_2_channel_full_n)) begin
        ap_sig_ready_B_cached_2_2_channel_full_n = B_cached_2_2_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_2_2_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_2_3_channel_full_n assign process. ///
always @ (B_cached_2_3_channel_full_n or ap_reg_ready_B_cached_2_3_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_2_3_channel_full_n)) begin
        ap_sig_ready_B_cached_2_3_channel_full_n = B_cached_2_3_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_2_3_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_2_4_channel_full_n assign process. ///
always @ (B_cached_2_4_channel_full_n or ap_reg_ready_B_cached_2_4_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_2_4_channel_full_n)) begin
        ap_sig_ready_B_cached_2_4_channel_full_n = B_cached_2_4_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_2_4_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_2_5_channel_full_n assign process. ///
always @ (B_cached_2_5_channel_full_n or ap_reg_ready_B_cached_2_5_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_2_5_channel_full_n)) begin
        ap_sig_ready_B_cached_2_5_channel_full_n = B_cached_2_5_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_2_5_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_2_6_channel_full_n assign process. ///
always @ (B_cached_2_6_channel_full_n or ap_reg_ready_B_cached_2_6_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_2_6_channel_full_n)) begin
        ap_sig_ready_B_cached_2_6_channel_full_n = B_cached_2_6_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_2_6_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_2_7_channel_full_n assign process. ///
always @ (B_cached_2_7_channel_full_n or ap_reg_ready_B_cached_2_7_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_2_7_channel_full_n)) begin
        ap_sig_ready_B_cached_2_7_channel_full_n = B_cached_2_7_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_2_7_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_3_0_channel_full_n assign process. ///
always @ (B_cached_3_0_channel_full_n or ap_reg_ready_B_cached_3_0_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_3_0_channel_full_n)) begin
        ap_sig_ready_B_cached_3_0_channel_full_n = B_cached_3_0_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_3_0_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_3_1_channel_full_n assign process. ///
always @ (B_cached_3_1_channel_full_n or ap_reg_ready_B_cached_3_1_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_3_1_channel_full_n)) begin
        ap_sig_ready_B_cached_3_1_channel_full_n = B_cached_3_1_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_3_1_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_3_2_channel_full_n assign process. ///
always @ (B_cached_3_2_channel_full_n or ap_reg_ready_B_cached_3_2_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_3_2_channel_full_n)) begin
        ap_sig_ready_B_cached_3_2_channel_full_n = B_cached_3_2_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_3_2_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_3_3_channel_full_n assign process. ///
always @ (B_cached_3_3_channel_full_n or ap_reg_ready_B_cached_3_3_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_3_3_channel_full_n)) begin
        ap_sig_ready_B_cached_3_3_channel_full_n = B_cached_3_3_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_3_3_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_3_4_channel_full_n assign process. ///
always @ (B_cached_3_4_channel_full_n or ap_reg_ready_B_cached_3_4_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_3_4_channel_full_n)) begin
        ap_sig_ready_B_cached_3_4_channel_full_n = B_cached_3_4_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_3_4_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_3_5_channel_full_n assign process. ///
always @ (B_cached_3_5_channel_full_n or ap_reg_ready_B_cached_3_5_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_3_5_channel_full_n)) begin
        ap_sig_ready_B_cached_3_5_channel_full_n = B_cached_3_5_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_3_5_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_3_6_channel_full_n assign process. ///
always @ (B_cached_3_6_channel_full_n or ap_reg_ready_B_cached_3_6_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_3_6_channel_full_n)) begin
        ap_sig_ready_B_cached_3_6_channel_full_n = B_cached_3_6_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_3_6_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_3_7_channel_full_n assign process. ///
always @ (B_cached_3_7_channel_full_n or ap_reg_ready_B_cached_3_7_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_3_7_channel_full_n)) begin
        ap_sig_ready_B_cached_3_7_channel_full_n = B_cached_3_7_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_3_7_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_4_0_channel_full_n assign process. ///
always @ (B_cached_4_0_channel_full_n or ap_reg_ready_B_cached_4_0_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_4_0_channel_full_n)) begin
        ap_sig_ready_B_cached_4_0_channel_full_n = B_cached_4_0_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_4_0_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_4_1_channel_full_n assign process. ///
always @ (B_cached_4_1_channel_full_n or ap_reg_ready_B_cached_4_1_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_4_1_channel_full_n)) begin
        ap_sig_ready_B_cached_4_1_channel_full_n = B_cached_4_1_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_4_1_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_4_2_channel_full_n assign process. ///
always @ (B_cached_4_2_channel_full_n or ap_reg_ready_B_cached_4_2_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_4_2_channel_full_n)) begin
        ap_sig_ready_B_cached_4_2_channel_full_n = B_cached_4_2_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_4_2_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_4_3_channel_full_n assign process. ///
always @ (B_cached_4_3_channel_full_n or ap_reg_ready_B_cached_4_3_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_4_3_channel_full_n)) begin
        ap_sig_ready_B_cached_4_3_channel_full_n = B_cached_4_3_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_4_3_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_4_4_channel_full_n assign process. ///
always @ (B_cached_4_4_channel_full_n or ap_reg_ready_B_cached_4_4_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_4_4_channel_full_n)) begin
        ap_sig_ready_B_cached_4_4_channel_full_n = B_cached_4_4_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_4_4_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_4_5_channel_full_n assign process. ///
always @ (B_cached_4_5_channel_full_n or ap_reg_ready_B_cached_4_5_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_4_5_channel_full_n)) begin
        ap_sig_ready_B_cached_4_5_channel_full_n = B_cached_4_5_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_4_5_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_4_6_channel_full_n assign process. ///
always @ (B_cached_4_6_channel_full_n or ap_reg_ready_B_cached_4_6_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_4_6_channel_full_n)) begin
        ap_sig_ready_B_cached_4_6_channel_full_n = B_cached_4_6_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_4_6_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_4_7_channel_full_n assign process. ///
always @ (B_cached_4_7_channel_full_n or ap_reg_ready_B_cached_4_7_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_4_7_channel_full_n)) begin
        ap_sig_ready_B_cached_4_7_channel_full_n = B_cached_4_7_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_4_7_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_5_0_channel_full_n assign process. ///
always @ (B_cached_5_0_channel_full_n or ap_reg_ready_B_cached_5_0_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_5_0_channel_full_n)) begin
        ap_sig_ready_B_cached_5_0_channel_full_n = B_cached_5_0_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_5_0_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_5_1_channel_full_n assign process. ///
always @ (B_cached_5_1_channel_full_n or ap_reg_ready_B_cached_5_1_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_5_1_channel_full_n)) begin
        ap_sig_ready_B_cached_5_1_channel_full_n = B_cached_5_1_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_5_1_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_5_2_channel_full_n assign process. ///
always @ (B_cached_5_2_channel_full_n or ap_reg_ready_B_cached_5_2_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_5_2_channel_full_n)) begin
        ap_sig_ready_B_cached_5_2_channel_full_n = B_cached_5_2_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_5_2_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_5_3_channel_full_n assign process. ///
always @ (B_cached_5_3_channel_full_n or ap_reg_ready_B_cached_5_3_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_5_3_channel_full_n)) begin
        ap_sig_ready_B_cached_5_3_channel_full_n = B_cached_5_3_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_5_3_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_5_4_channel_full_n assign process. ///
always @ (B_cached_5_4_channel_full_n or ap_reg_ready_B_cached_5_4_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_5_4_channel_full_n)) begin
        ap_sig_ready_B_cached_5_4_channel_full_n = B_cached_5_4_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_5_4_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_5_5_channel_full_n assign process. ///
always @ (B_cached_5_5_channel_full_n or ap_reg_ready_B_cached_5_5_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_5_5_channel_full_n)) begin
        ap_sig_ready_B_cached_5_5_channel_full_n = B_cached_5_5_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_5_5_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_5_6_channel_full_n assign process. ///
always @ (B_cached_5_6_channel_full_n or ap_reg_ready_B_cached_5_6_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_5_6_channel_full_n)) begin
        ap_sig_ready_B_cached_5_6_channel_full_n = B_cached_5_6_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_5_6_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_5_7_channel_full_n assign process. ///
always @ (B_cached_5_7_channel_full_n or ap_reg_ready_B_cached_5_7_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_5_7_channel_full_n)) begin
        ap_sig_ready_B_cached_5_7_channel_full_n = B_cached_5_7_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_5_7_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_6_0_channel_full_n assign process. ///
always @ (B_cached_6_0_channel_full_n or ap_reg_ready_B_cached_6_0_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_6_0_channel_full_n)) begin
        ap_sig_ready_B_cached_6_0_channel_full_n = B_cached_6_0_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_6_0_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_6_1_channel_full_n assign process. ///
always @ (B_cached_6_1_channel_full_n or ap_reg_ready_B_cached_6_1_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_6_1_channel_full_n)) begin
        ap_sig_ready_B_cached_6_1_channel_full_n = B_cached_6_1_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_6_1_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_6_2_channel_full_n assign process. ///
always @ (B_cached_6_2_channel_full_n or ap_reg_ready_B_cached_6_2_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_6_2_channel_full_n)) begin
        ap_sig_ready_B_cached_6_2_channel_full_n = B_cached_6_2_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_6_2_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_6_3_channel_full_n assign process. ///
always @ (B_cached_6_3_channel_full_n or ap_reg_ready_B_cached_6_3_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_6_3_channel_full_n)) begin
        ap_sig_ready_B_cached_6_3_channel_full_n = B_cached_6_3_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_6_3_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_6_4_channel_full_n assign process. ///
always @ (B_cached_6_4_channel_full_n or ap_reg_ready_B_cached_6_4_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_6_4_channel_full_n)) begin
        ap_sig_ready_B_cached_6_4_channel_full_n = B_cached_6_4_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_6_4_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_6_5_channel_full_n assign process. ///
always @ (B_cached_6_5_channel_full_n or ap_reg_ready_B_cached_6_5_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_6_5_channel_full_n)) begin
        ap_sig_ready_B_cached_6_5_channel_full_n = B_cached_6_5_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_6_5_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_6_6_channel_full_n assign process. ///
always @ (B_cached_6_6_channel_full_n or ap_reg_ready_B_cached_6_6_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_6_6_channel_full_n)) begin
        ap_sig_ready_B_cached_6_6_channel_full_n = B_cached_6_6_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_6_6_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_6_7_channel_full_n assign process. ///
always @ (B_cached_6_7_channel_full_n or ap_reg_ready_B_cached_6_7_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_6_7_channel_full_n)) begin
        ap_sig_ready_B_cached_6_7_channel_full_n = B_cached_6_7_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_6_7_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_7_0_channel_full_n assign process. ///
always @ (B_cached_7_0_channel_full_n or ap_reg_ready_B_cached_7_0_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_7_0_channel_full_n)) begin
        ap_sig_ready_B_cached_7_0_channel_full_n = B_cached_7_0_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_7_0_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_7_1_channel_full_n assign process. ///
always @ (B_cached_7_1_channel_full_n or ap_reg_ready_B_cached_7_1_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_7_1_channel_full_n)) begin
        ap_sig_ready_B_cached_7_1_channel_full_n = B_cached_7_1_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_7_1_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_7_2_channel_full_n assign process. ///
always @ (B_cached_7_2_channel_full_n or ap_reg_ready_B_cached_7_2_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_7_2_channel_full_n)) begin
        ap_sig_ready_B_cached_7_2_channel_full_n = B_cached_7_2_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_7_2_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_7_3_channel_full_n assign process. ///
always @ (B_cached_7_3_channel_full_n or ap_reg_ready_B_cached_7_3_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_7_3_channel_full_n)) begin
        ap_sig_ready_B_cached_7_3_channel_full_n = B_cached_7_3_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_7_3_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_7_4_channel_full_n assign process. ///
always @ (B_cached_7_4_channel_full_n or ap_reg_ready_B_cached_7_4_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_7_4_channel_full_n)) begin
        ap_sig_ready_B_cached_7_4_channel_full_n = B_cached_7_4_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_7_4_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_7_5_channel_full_n assign process. ///
always @ (B_cached_7_5_channel_full_n or ap_reg_ready_B_cached_7_5_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_7_5_channel_full_n)) begin
        ap_sig_ready_B_cached_7_5_channel_full_n = B_cached_7_5_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_7_5_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_7_6_channel_full_n assign process. ///
always @ (B_cached_7_6_channel_full_n or ap_reg_ready_B_cached_7_6_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_7_6_channel_full_n)) begin
        ap_sig_ready_B_cached_7_6_channel_full_n = B_cached_7_6_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_7_6_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_B_cached_7_7_channel_full_n assign process. ///
always @ (B_cached_7_7_channel_full_n or ap_reg_ready_B_cached_7_7_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_B_cached_7_7_channel_full_n)) begin
        ap_sig_ready_B_cached_7_7_channel_full_n = B_cached_7_7_channel_full_n;
    end else begin
        ap_sig_ready_B_cached_7_7_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready assign process. ///
always @ (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready or ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)) begin
        ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
    end else begin
        ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready assign process. ///
always @ (DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready or ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)) begin
        ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    end else begin
        ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)
begin
    if (((ap_const_logic_0 == ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready) & (ap_const_logic_1 == ap_start))) begin
        ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready))) begin
        ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_top_allready assign process. ///
always @ (ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready or ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready))) begin
        ap_sig_top_allready = ap_const_logic_1;
    end else begin
        ap_sig_top_allready = ap_const_logic_0;
    end
end
assign A_0_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address0;
assign A_0_address1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address1;
assign A_0_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0;
assign A_0_ce1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1;
assign A_0_d0 = ap_const_lv32_0;
assign A_0_d1 = ap_const_lv32_0;
assign A_0_we0 = ap_const_logic_0;
assign A_0_we1 = ap_const_logic_0;
assign A_1_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address0;
assign A_1_address1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address1;
assign A_1_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0;
assign A_1_ce1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1;
assign A_1_d0 = ap_const_lv32_0;
assign A_1_d1 = ap_const_lv32_0;
assign A_1_we0 = ap_const_logic_0;
assign A_1_we1 = ap_const_logic_0;
assign A_2_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address0;
assign A_2_address1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address1;
assign A_2_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0;
assign A_2_ce1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1;
assign A_2_d0 = ap_const_lv32_0;
assign A_2_d1 = ap_const_lv32_0;
assign A_2_we0 = ap_const_logic_0;
assign A_2_we1 = ap_const_logic_0;
assign A_3_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address0;
assign A_3_address1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address1;
assign A_3_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0;
assign A_3_ce1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1;
assign A_3_d0 = ap_const_lv32_0;
assign A_3_d1 = ap_const_lv32_0;
assign A_3_we0 = ap_const_logic_0;
assign A_3_we1 = ap_const_logic_0;
assign A_4_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address0;
assign A_4_address1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address1;
assign A_4_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0;
assign A_4_ce1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1;
assign A_4_d0 = ap_const_lv32_0;
assign A_4_d1 = ap_const_lv32_0;
assign A_4_we0 = ap_const_logic_0;
assign A_4_we1 = ap_const_logic_0;
assign A_5_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address0;
assign A_5_address1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address1;
assign A_5_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0;
assign A_5_ce1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1;
assign A_5_d0 = ap_const_lv32_0;
assign A_5_d1 = ap_const_lv32_0;
assign A_5_we0 = ap_const_logic_0;
assign A_5_we1 = ap_const_logic_0;
assign A_6_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address0;
assign A_6_address1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address1;
assign A_6_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0;
assign A_6_ce1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1;
assign A_6_d0 = ap_const_lv32_0;
assign A_6_d1 = ap_const_lv32_0;
assign A_6_we0 = ap_const_logic_0;
assign A_6_we1 = ap_const_logic_0;
assign A_7_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address0;
assign A_7_address1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address1;
assign A_7_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0;
assign A_7_ce1 = DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1;
assign A_7_d0 = ap_const_lv32_0;
assign A_7_d1 = ap_const_lv32_0;
assign A_7_we0 = ap_const_logic_0;
assign A_7_we1 = ap_const_logic_0;
assign B_address0 = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_address0;
assign B_address1 = ap_const_lv6_0;
assign B_cached_0_0_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_0_0_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0;
assign B_cached_0_0_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_0_0_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel;
assign B_cached_0_1_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_0_1_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1;
assign B_cached_0_1_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_0_1_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel;
assign B_cached_0_2_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_0_2_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2;
assign B_cached_0_2_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_0_2_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel;
assign B_cached_0_3_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_0_3_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3;
assign B_cached_0_3_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_0_3_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel;
assign B_cached_0_4_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_0_4_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4;
assign B_cached_0_4_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_0_4_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel;
assign B_cached_0_5_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_0_5_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5;
assign B_cached_0_5_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_0_5_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel;
assign B_cached_0_6_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_0_6_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6;
assign B_cached_0_6_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_0_6_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel;
assign B_cached_0_7_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_0_7_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7;
assign B_cached_0_7_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_0_7_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel;
assign B_cached_1_0_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_1_0_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8;
assign B_cached_1_0_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_1_0_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel;
assign B_cached_1_1_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_1_1_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9;
assign B_cached_1_1_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_1_1_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel;
assign B_cached_1_2_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_1_2_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10;
assign B_cached_1_2_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_1_2_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel;
assign B_cached_1_3_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_1_3_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11;
assign B_cached_1_3_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_1_3_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel;
assign B_cached_1_4_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_1_4_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12;
assign B_cached_1_4_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_1_4_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel;
assign B_cached_1_5_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_1_5_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13;
assign B_cached_1_5_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_1_5_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel;
assign B_cached_1_6_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_1_6_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14;
assign B_cached_1_6_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_1_6_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel;
assign B_cached_1_7_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_1_7_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15;
assign B_cached_1_7_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_1_7_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel;
assign B_cached_2_0_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_2_0_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16;
assign B_cached_2_0_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_2_0_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel;
assign B_cached_2_1_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_2_1_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17;
assign B_cached_2_1_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_2_1_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel;
assign B_cached_2_2_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_2_2_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18;
assign B_cached_2_2_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_2_2_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel;
assign B_cached_2_3_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_2_3_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19;
assign B_cached_2_3_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_2_3_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel;
assign B_cached_2_4_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_2_4_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20;
assign B_cached_2_4_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_2_4_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel;
assign B_cached_2_5_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_2_5_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21;
assign B_cached_2_5_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_2_5_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel;
assign B_cached_2_6_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_2_6_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22;
assign B_cached_2_6_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_2_6_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel;
assign B_cached_2_7_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_2_7_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23;
assign B_cached_2_7_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_2_7_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel;
assign B_cached_3_0_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_3_0_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24;
assign B_cached_3_0_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_3_0_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel;
assign B_cached_3_1_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_3_1_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25;
assign B_cached_3_1_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_3_1_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel;
assign B_cached_3_2_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_3_2_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26;
assign B_cached_3_2_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_3_2_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel;
assign B_cached_3_3_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_3_3_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27;
assign B_cached_3_3_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_3_3_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel;
assign B_cached_3_4_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_3_4_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28;
assign B_cached_3_4_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_3_4_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel;
assign B_cached_3_5_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_3_5_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29;
assign B_cached_3_5_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_3_5_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel;
assign B_cached_3_6_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_3_6_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30;
assign B_cached_3_6_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_3_6_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel;
assign B_cached_3_7_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_3_7_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31;
assign B_cached_3_7_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_3_7_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel;
assign B_cached_4_0_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_4_0_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32;
assign B_cached_4_0_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_4_0_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel;
assign B_cached_4_1_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_4_1_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33;
assign B_cached_4_1_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_4_1_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel;
assign B_cached_4_2_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_4_2_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34;
assign B_cached_4_2_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_4_2_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel;
assign B_cached_4_3_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_4_3_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35;
assign B_cached_4_3_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_4_3_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel;
assign B_cached_4_4_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_4_4_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36;
assign B_cached_4_4_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_4_4_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel;
assign B_cached_4_5_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_4_5_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37;
assign B_cached_4_5_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_4_5_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel;
assign B_cached_4_6_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_4_6_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38;
assign B_cached_4_6_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_4_6_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel;
assign B_cached_4_7_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_4_7_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39;
assign B_cached_4_7_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_4_7_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel;
assign B_cached_5_0_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_5_0_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40;
assign B_cached_5_0_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_5_0_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel;
assign B_cached_5_1_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_5_1_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41;
assign B_cached_5_1_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_5_1_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel;
assign B_cached_5_2_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_5_2_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42;
assign B_cached_5_2_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_5_2_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel;
assign B_cached_5_3_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_5_3_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43;
assign B_cached_5_3_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_5_3_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel;
assign B_cached_5_4_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_5_4_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44;
assign B_cached_5_4_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_5_4_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel;
assign B_cached_5_5_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_5_5_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45;
assign B_cached_5_5_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_5_5_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel;
assign B_cached_5_6_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_5_6_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46;
assign B_cached_5_6_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_5_6_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel;
assign B_cached_5_7_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_5_7_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47;
assign B_cached_5_7_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_5_7_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel;
assign B_cached_6_0_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_6_0_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48;
assign B_cached_6_0_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_6_0_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel;
assign B_cached_6_1_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_6_1_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49;
assign B_cached_6_1_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_6_1_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel;
assign B_cached_6_2_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_6_2_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50;
assign B_cached_6_2_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_6_2_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel;
assign B_cached_6_3_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_6_3_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51;
assign B_cached_6_3_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_6_3_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel;
assign B_cached_6_4_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_6_4_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52;
assign B_cached_6_4_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_6_4_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel;
assign B_cached_6_5_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_6_5_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53;
assign B_cached_6_5_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_6_5_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel;
assign B_cached_6_6_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_6_6_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54;
assign B_cached_6_6_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_6_6_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel;
assign B_cached_6_7_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_6_7_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55;
assign B_cached_6_7_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_6_7_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel;
assign B_cached_7_0_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_7_0_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56;
assign B_cached_7_0_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_7_0_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel;
assign B_cached_7_1_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_7_1_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57;
assign B_cached_7_1_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_7_1_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel;
assign B_cached_7_2_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_7_2_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58;
assign B_cached_7_2_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_7_2_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel;
assign B_cached_7_3_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_7_3_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59;
assign B_cached_7_3_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_7_3_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel;
assign B_cached_7_4_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_7_4_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60;
assign B_cached_7_4_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_7_4_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel;
assign B_cached_7_5_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_7_5_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61;
assign B_cached_7_5_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_7_5_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel;
assign B_cached_7_6_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_7_6_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62;
assign B_cached_7_6_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_7_6_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel;
assign B_cached_7_7_channel_U_ap_dummy_ce = ap_const_logic_1;
assign B_cached_7_7_channel_din = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63;
assign B_cached_7_7_channel_read = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
assign B_cached_7_7_channel_write = ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel;
assign B_ce0 = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_ce0;
assign B_ce1 = ap_const_logic_0;
assign B_d0 = ap_const_lv32_0;
assign B_d1 = ap_const_lv32_0;
assign B_pipo_update = DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_update;
assign B_we0 = ap_const_logic_0;
assign B_we1 = ap_const_logic_0;
assign C_0_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_address0;
assign C_0_address1 = ap_const_lv3_0;
assign C_0_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_ce0;
assign C_0_ce1 = ap_const_logic_0;
assign C_0_d0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_d0;
assign C_0_d1 = ap_const_lv32_0;
assign C_0_we0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_we0;
assign C_0_we1 = ap_const_logic_0;
assign C_1_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_address0;
assign C_1_address1 = ap_const_lv3_0;
assign C_1_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_ce0;
assign C_1_ce1 = ap_const_logic_0;
assign C_1_d0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_d0;
assign C_1_d1 = ap_const_lv32_0;
assign C_1_we0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_we0;
assign C_1_we1 = ap_const_logic_0;
assign C_2_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_address0;
assign C_2_address1 = ap_const_lv3_0;
assign C_2_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_ce0;
assign C_2_ce1 = ap_const_logic_0;
assign C_2_d0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_d0;
assign C_2_d1 = ap_const_lv32_0;
assign C_2_we0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_we0;
assign C_2_we1 = ap_const_logic_0;
assign C_3_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_address0;
assign C_3_address1 = ap_const_lv3_0;
assign C_3_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_ce0;
assign C_3_ce1 = ap_const_logic_0;
assign C_3_d0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_d0;
assign C_3_d1 = ap_const_lv32_0;
assign C_3_we0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_we0;
assign C_3_we1 = ap_const_logic_0;
assign C_4_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_address0;
assign C_4_address1 = ap_const_lv3_0;
assign C_4_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_ce0;
assign C_4_ce1 = ap_const_logic_0;
assign C_4_d0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_d0;
assign C_4_d1 = ap_const_lv32_0;
assign C_4_we0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_we0;
assign C_4_we1 = ap_const_logic_0;
assign C_5_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_address0;
assign C_5_address1 = ap_const_lv3_0;
assign C_5_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_ce0;
assign C_5_ce1 = ap_const_logic_0;
assign C_5_d0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_d0;
assign C_5_d1 = ap_const_lv32_0;
assign C_5_we0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_we0;
assign C_5_we1 = ap_const_logic_0;
assign C_6_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_address0;
assign C_6_address1 = ap_const_lv3_0;
assign C_6_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_ce0;
assign C_6_ce1 = ap_const_logic_0;
assign C_6_d0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_d0;
assign C_6_d1 = ap_const_lv32_0;
assign C_6_we0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_we0;
assign C_6_we1 = ap_const_logic_0;
assign C_7_address0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_address0;
assign C_7_address1 = ap_const_lv3_0;
assign C_7_ce0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_ce0;
assign C_7_ce1 = ap_const_logic_0;
assign C_7_d0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_d0;
assign C_7_d1 = ap_const_lv32_0;
assign C_7_we0 = DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_we0;
assign C_7_we1 = ap_const_logic_0;
assign DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_status = B_pipo_status;
assign DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_update = ap_const_logic_0;
assign DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_q0 = B_q0;
assign DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start = ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 = A_0_q0;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 = A_0_q1;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 = A_1_q0;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 = A_1_q1;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 = A_2_q0;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 = A_2_q1;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 = A_3_q0;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 = A_3_q1;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 = A_4_q0;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 = A_4_q1;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 = A_5_q0;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 = A_5_q1;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 = A_6_q0;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 = A_6_q1;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 = A_7_q0;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 = A_7_q1;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_ap_continue = ap_sig_hs_continue;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start = (B_cached_0_0_channel_empty_n & B_cached_0_1_channel_empty_n & B_cached_0_2_channel_empty_n & B_cached_0_3_channel_empty_n & B_cached_0_4_channel_empty_n & B_cached_0_5_channel_empty_n & B_cached_0_6_channel_empty_n & B_cached_0_7_channel_empty_n & B_cached_1_0_channel_empty_n & B_cached_1_1_channel_empty_n & B_cached_1_2_channel_empty_n & B_cached_1_3_channel_empty_n & B_cached_1_4_channel_empty_n & B_cached_1_5_channel_empty_n & B_cached_1_6_channel_empty_n & B_cached_1_7_channel_empty_n & B_cached_2_0_channel_empty_n & B_cached_2_1_channel_empty_n & B_cached_2_2_channel_empty_n & B_cached_2_3_channel_empty_n & B_cached_2_4_channel_empty_n & B_cached_2_5_channel_empty_n & B_cached_2_6_channel_empty_n & B_cached_2_7_channel_empty_n & B_cached_3_0_channel_empty_n & B_cached_3_1_channel_empty_n & B_cached_3_2_channel_empty_n & B_cached_3_3_channel_empty_n & B_cached_3_4_channel_empty_n & B_cached_3_5_channel_empty_n & B_cached_3_6_channel_empty_n & B_cached_3_7_channel_empty_n & B_cached_4_0_channel_empty_n & B_cached_4_1_channel_empty_n & B_cached_4_2_channel_empty_n & B_cached_4_3_channel_empty_n & B_cached_4_4_channel_empty_n & B_cached_4_5_channel_empty_n & B_cached_4_6_channel_empty_n & B_cached_4_7_channel_empty_n & B_cached_5_0_channel_empty_n & B_cached_5_1_channel_empty_n & B_cached_5_2_channel_empty_n & B_cached_5_3_channel_empty_n & B_cached_5_4_channel_empty_n & B_cached_5_5_channel_empty_n & B_cached_5_6_channel_empty_n & B_cached_5_7_channel_empty_n & B_cached_6_0_channel_empty_n & B_cached_6_1_channel_empty_n & B_cached_6_2_channel_empty_n & B_cached_6_3_channel_empty_n & B_cached_6_4_channel_empty_n & B_cached_6_5_channel_empty_n & B_cached_6_6_channel_empty_n & B_cached_6_7_channel_empty_n & B_cached_7_0_channel_empty_n & B_cached_7_1_channel_empty_n & B_cached_7_2_channel_empty_n & B_cached_7_3_channel_empty_n & B_cached_7_4_channel_empty_n & B_cached_7_5_channel_empty_n & B_cached_7_6_channel_empty_n & B_cached_7_7_channel_empty_n & ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start);
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read = B_cached_0_0_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read1 = B_cached_0_1_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read10 = B_cached_1_2_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read11 = B_cached_1_3_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read12 = B_cached_1_4_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read13 = B_cached_1_5_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read14 = B_cached_1_6_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read15 = B_cached_1_7_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read16 = B_cached_2_0_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read17 = B_cached_2_1_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read18 = B_cached_2_2_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read19 = B_cached_2_3_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read2 = B_cached_0_2_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read20 = B_cached_2_4_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read21 = B_cached_2_5_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read22 = B_cached_2_6_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read23 = B_cached_2_7_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read24 = B_cached_3_0_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read25 = B_cached_3_1_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read26 = B_cached_3_2_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read27 = B_cached_3_3_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read28 = B_cached_3_4_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read29 = B_cached_3_5_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read3 = B_cached_0_3_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read30 = B_cached_3_6_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read31 = B_cached_3_7_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read32 = B_cached_4_0_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read33 = B_cached_4_1_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read34 = B_cached_4_2_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read35 = B_cached_4_3_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read36 = B_cached_4_4_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read37 = B_cached_4_5_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read38 = B_cached_4_6_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read39 = B_cached_4_7_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read4 = B_cached_0_4_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read40 = B_cached_5_0_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read41 = B_cached_5_1_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read42 = B_cached_5_2_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read43 = B_cached_5_3_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read44 = B_cached_5_4_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read45 = B_cached_5_5_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read46 = B_cached_5_6_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read47 = B_cached_5_7_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read48 = B_cached_6_0_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read49 = B_cached_6_1_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read5 = B_cached_0_5_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read50 = B_cached_6_2_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read51 = B_cached_6_3_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read52 = B_cached_6_4_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read53 = B_cached_6_5_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read54 = B_cached_6_6_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read55 = B_cached_6_7_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read56 = B_cached_7_0_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read57 = B_cached_7_1_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read58 = B_cached_7_2_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read59 = B_cached_7_3_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read6 = B_cached_0_6_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read60 = B_cached_7_4_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read61 = B_cached_7_5_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read62 = B_cached_7_6_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read63 = B_cached_7_7_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read7 = B_cached_0_7_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read8 = B_cached_1_0_channel_dout;
assign DCT_MAT_Multiply_Loop_Row_proc_U0_p_read9 = B_cached_1_1_channel_dout;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_const_logic_1;


endmodule //DCT_MAT_Multiply

