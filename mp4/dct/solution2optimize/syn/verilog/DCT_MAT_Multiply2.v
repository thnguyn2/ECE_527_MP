// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DCT_MAT_Multiply2 (
        A_address0,
        A_ce0,
        A_d0,
        A_q0,
        A_we0,
        A_address1,
        A_ce1,
        A_d1,
        A_q1,
        A_we1,
        B_0_address0,
        B_0_ce0,
        B_0_d0,
        B_0_q0,
        B_0_we0,
        B_0_address1,
        B_0_ce1,
        B_0_d1,
        B_0_q1,
        B_0_we1,
        B_1_address0,
        B_1_ce0,
        B_1_d0,
        B_1_q0,
        B_1_we0,
        B_1_address1,
        B_1_ce1,
        B_1_d1,
        B_1_q1,
        B_1_we1,
        B_2_address0,
        B_2_ce0,
        B_2_d0,
        B_2_q0,
        B_2_we0,
        B_2_address1,
        B_2_ce1,
        B_2_d1,
        B_2_q1,
        B_2_we1,
        B_3_address0,
        B_3_ce0,
        B_3_d0,
        B_3_q0,
        B_3_we0,
        B_3_address1,
        B_3_ce1,
        B_3_d1,
        B_3_q1,
        B_3_we1,
        B_4_address0,
        B_4_ce0,
        B_4_d0,
        B_4_q0,
        B_4_we0,
        B_4_address1,
        B_4_ce1,
        B_4_d1,
        B_4_q1,
        B_4_we1,
        B_5_address0,
        B_5_ce0,
        B_5_d0,
        B_5_q0,
        B_5_we0,
        B_5_address1,
        B_5_ce1,
        B_5_d1,
        B_5_q1,
        B_5_we1,
        B_6_address0,
        B_6_ce0,
        B_6_d0,
        B_6_q0,
        B_6_we0,
        B_6_address1,
        B_6_ce1,
        B_6_d1,
        B_6_q1,
        B_6_we1,
        B_7_address0,
        B_7_ce0,
        B_7_d0,
        B_7_q0,
        B_7_we0,
        B_7_address1,
        B_7_ce1,
        B_7_d1,
        B_7_q1,
        B_7_we1,
        C_din,
        C_full_n,
        C_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_idle,
        ap_ready
);

parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;

output  [5:0] A_address0;
output   A_ce0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output   A_we0;
output  [5:0] A_address1;
output   A_ce1;
output  [31:0] A_d1;
input  [31:0] A_q1;
output   A_we1;
output  [2:0] B_0_address0;
output   B_0_ce0;
output  [31:0] B_0_d0;
input  [31:0] B_0_q0;
output   B_0_we0;
output  [2:0] B_0_address1;
output   B_0_ce1;
output  [31:0] B_0_d1;
input  [31:0] B_0_q1;
output   B_0_we1;
output  [2:0] B_1_address0;
output   B_1_ce0;
output  [31:0] B_1_d0;
input  [31:0] B_1_q0;
output   B_1_we0;
output  [2:0] B_1_address1;
output   B_1_ce1;
output  [31:0] B_1_d1;
input  [31:0] B_1_q1;
output   B_1_we1;
output  [2:0] B_2_address0;
output   B_2_ce0;
output  [31:0] B_2_d0;
input  [31:0] B_2_q0;
output   B_2_we0;
output  [2:0] B_2_address1;
output   B_2_ce1;
output  [31:0] B_2_d1;
input  [31:0] B_2_q1;
output   B_2_we1;
output  [2:0] B_3_address0;
output   B_3_ce0;
output  [31:0] B_3_d0;
input  [31:0] B_3_q0;
output   B_3_we0;
output  [2:0] B_3_address1;
output   B_3_ce1;
output  [31:0] B_3_d1;
input  [31:0] B_3_q1;
output   B_3_we1;
output  [2:0] B_4_address0;
output   B_4_ce0;
output  [31:0] B_4_d0;
input  [31:0] B_4_q0;
output   B_4_we0;
output  [2:0] B_4_address1;
output   B_4_ce1;
output  [31:0] B_4_d1;
input  [31:0] B_4_q1;
output   B_4_we1;
output  [2:0] B_5_address0;
output   B_5_ce0;
output  [31:0] B_5_d0;
input  [31:0] B_5_q0;
output   B_5_we0;
output  [2:0] B_5_address1;
output   B_5_ce1;
output  [31:0] B_5_d1;
input  [31:0] B_5_q1;
output   B_5_we1;
output  [2:0] B_6_address0;
output   B_6_ce0;
output  [31:0] B_6_d0;
input  [31:0] B_6_q0;
output   B_6_we0;
output  [2:0] B_6_address1;
output   B_6_ce1;
output  [31:0] B_6_d1;
input  [31:0] B_6_q1;
output   B_6_we1;
output  [2:0] B_7_address0;
output   B_7_ce0;
output  [31:0] B_7_d0;
input  [31:0] B_7_q0;
output   B_7_we0;
output  [2:0] B_7_address1;
output   B_7_ce1;
output  [31:0] B_7_d1;
input  [31:0] B_7_q1;
output   B_7_we1;
output  [31:0] C_din;
input   C_full_n;
output   C_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_idle;
output   ap_ready;

reg ap_idle;
wire    DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start;
wire    DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
reg    DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue;
wire    DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_idle;
wire    DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready;
wire   [5:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_A_address0;
wire    DCT_MAT_Multiply2_Loop_Row_proc_U0_A_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_A_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_1;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_2;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_3;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_4;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_5;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_6;
wire   [31:0] DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_7;
reg    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel;
wire    A_cached_row_0_loc_channel_full_n;
reg    ap_reg_ready_A_cached_row_0_loc_channel_full_n = 1'b0;
reg    ap_sig_ready_A_cached_row_0_loc_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel;
wire    A_cached_row_4_loc_channel_full_n;
reg    ap_reg_ready_A_cached_row_4_loc_channel_full_n = 1'b0;
reg    ap_sig_ready_A_cached_row_4_loc_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel;
wire    A_cached_row_6_loc_channel_full_n;
reg    ap_reg_ready_A_cached_row_6_loc_channel_full_n = 1'b0;
reg    ap_sig_ready_A_cached_row_6_loc_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel;
wire    A_cached_row_7_loc_channel_full_n;
reg    ap_reg_ready_A_cached_row_7_loc_channel_full_n = 1'b0;
reg    ap_sig_ready_A_cached_row_7_loc_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel;
wire    A_cached_row_1_loc_channel_full_n;
reg    ap_reg_ready_A_cached_row_1_loc_channel_full_n = 1'b0;
reg    ap_sig_ready_A_cached_row_1_loc_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel;
wire    A_cached_row_3_loc_channel_full_n;
reg    ap_reg_ready_A_cached_row_3_loc_channel_full_n = 1'b0;
reg    ap_sig_ready_A_cached_row_3_loc_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel;
wire    A_cached_row_2_loc_channel_full_n;
reg    ap_reg_ready_A_cached_row_2_loc_channel_full_n = 1'b0;
reg    ap_sig_ready_A_cached_row_2_loc_channel_full_n;
reg    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel;
wire    A_cached_row_5_loc_channel_full_n;
reg    ap_reg_ready_A_cached_row_5_loc_channel_full_n = 1'b0;
reg    ap_sig_ready_A_cached_row_5_loc_channel_full_n;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_continue;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_idle;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
wire   [2:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_address0;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read;
wire   [2:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_address0;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read1;
wire   [2:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_address0;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read2;
wire   [2:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_address0;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read3;
wire   [2:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_address0;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read4;
wire   [2:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_address0;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read5;
wire   [2:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_address0;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read6;
wire   [2:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_address0;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_ce0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_q0;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read7;
wire   [31:0] DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_din;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_full_n;
wire    DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_write;
wire    ap_sig_hs_continue;
wire    A_cached_row_7_loc_channel_U_ap_dummy_ce;
wire   [31:0] A_cached_row_7_loc_channel_din;
wire    A_cached_row_7_loc_channel_write;
wire   [31:0] A_cached_row_7_loc_channel_dout;
wire    A_cached_row_7_loc_channel_empty_n;
wire    A_cached_row_7_loc_channel_read;
wire    A_cached_row_6_loc_channel_U_ap_dummy_ce;
wire   [31:0] A_cached_row_6_loc_channel_din;
wire    A_cached_row_6_loc_channel_write;
wire   [31:0] A_cached_row_6_loc_channel_dout;
wire    A_cached_row_6_loc_channel_empty_n;
wire    A_cached_row_6_loc_channel_read;
wire    A_cached_row_5_loc_channel_U_ap_dummy_ce;
wire   [31:0] A_cached_row_5_loc_channel_din;
wire    A_cached_row_5_loc_channel_write;
wire   [31:0] A_cached_row_5_loc_channel_dout;
wire    A_cached_row_5_loc_channel_empty_n;
wire    A_cached_row_5_loc_channel_read;
wire    A_cached_row_4_loc_channel_U_ap_dummy_ce;
wire   [31:0] A_cached_row_4_loc_channel_din;
wire    A_cached_row_4_loc_channel_write;
wire   [31:0] A_cached_row_4_loc_channel_dout;
wire    A_cached_row_4_loc_channel_empty_n;
wire    A_cached_row_4_loc_channel_read;
wire    A_cached_row_3_loc_channel_U_ap_dummy_ce;
wire   [31:0] A_cached_row_3_loc_channel_din;
wire    A_cached_row_3_loc_channel_write;
wire   [31:0] A_cached_row_3_loc_channel_dout;
wire    A_cached_row_3_loc_channel_empty_n;
wire    A_cached_row_3_loc_channel_read;
wire    A_cached_row_2_loc_channel_U_ap_dummy_ce;
wire   [31:0] A_cached_row_2_loc_channel_din;
wire    A_cached_row_2_loc_channel_write;
wire   [31:0] A_cached_row_2_loc_channel_dout;
wire    A_cached_row_2_loc_channel_empty_n;
wire    A_cached_row_2_loc_channel_read;
wire    A_cached_row_1_loc_channel_U_ap_dummy_ce;
wire   [31:0] A_cached_row_1_loc_channel_din;
wire    A_cached_row_1_loc_channel_write;
wire   [31:0] A_cached_row_1_loc_channel_dout;
wire    A_cached_row_1_loc_channel_empty_n;
wire    A_cached_row_1_loc_channel_read;
wire    A_cached_row_0_loc_channel_U_ap_dummy_ce;
wire   [31:0] A_cached_row_0_loc_channel_din;
wire    A_cached_row_0_loc_channel_write;
wire   [31:0] A_cached_row_0_loc_channel_dout;
wire    A_cached_row_0_loc_channel_empty_n;
wire    A_cached_row_0_loc_channel_read;
reg    ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 = 1'b0;
reg    ap_CS;
reg    ap_sig_top_allready;
reg    ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready = 1'b0;
reg    ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready;
reg    ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start;
reg    ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready = 1'b0;
reg    ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
reg    ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start;


DCT_MAT_Multiply2_Loop_Row_proc DCT_MAT_Multiply2_Loop_Row_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start ),
    .ap_done( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done ),
    .ap_continue( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue ),
    .ap_idle( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_idle ),
    .ap_ready( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready ),
    .A_address0( DCT_MAT_Multiply2_Loop_Row_proc_U0_A_address0 ),
    .A_ce0( DCT_MAT_Multiply2_Loop_Row_proc_U0_A_ce0 ),
    .A_q0( DCT_MAT_Multiply2_Loop_Row_proc_U0_A_q0 ),
    .ap_return_0( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_0 ),
    .ap_return_1( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_1 ),
    .ap_return_2( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_2 ),
    .ap_return_3( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_3 ),
    .ap_return_4( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_4 ),
    .ap_return_5( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_5 ),
    .ap_return_6( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_6 ),
    .ap_return_7( DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_7 )
);

DCT_MAT_Multiply2_Loop_Col_proc2 DCT_MAT_Multiply2_Loop_Col_proc2_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start ),
    .ap_done( DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done ),
    .ap_continue( DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_continue ),
    .ap_idle( DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_idle ),
    .ap_ready( DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready ),
    .B_0_address0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_address0 ),
    .B_0_ce0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_ce0 ),
    .B_0_q0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_q0 ),
    .p_read( DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read ),
    .B_1_address0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_address0 ),
    .B_1_ce0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_ce0 ),
    .B_1_q0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_q0 ),
    .p_read1( DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read1 ),
    .B_2_address0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_address0 ),
    .B_2_ce0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_ce0 ),
    .B_2_q0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_q0 ),
    .p_read2( DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read2 ),
    .B_3_address0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_address0 ),
    .B_3_ce0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_ce0 ),
    .B_3_q0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_q0 ),
    .p_read3( DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read3 ),
    .B_4_address0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_address0 ),
    .B_4_ce0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_ce0 ),
    .B_4_q0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_q0 ),
    .p_read4( DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read4 ),
    .B_5_address0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_address0 ),
    .B_5_ce0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_ce0 ),
    .B_5_q0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_q0 ),
    .p_read5( DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read5 ),
    .B_6_address0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_address0 ),
    .B_6_ce0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_ce0 ),
    .B_6_q0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_q0 ),
    .p_read6( DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read6 ),
    .B_7_address0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_address0 ),
    .B_7_ce0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_ce0 ),
    .B_7_q0( DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_q0 ),
    .p_read7( DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read7 ),
    .C_din( DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_din ),
    .C_full_n( DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_full_n ),
    .C_write( DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_write )
);

FIFO_DCT_MAT_Multiply2_A_cached_row_7_loc_channel A_cached_row_7_loc_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( A_cached_row_7_loc_channel_U_ap_dummy_ce ),
    .if_write_ce( A_cached_row_7_loc_channel_U_ap_dummy_ce ),
    .if_din( A_cached_row_7_loc_channel_din ),
    .if_full_n( A_cached_row_7_loc_channel_full_n ),
    .if_write( A_cached_row_7_loc_channel_write ),
    .if_dout( A_cached_row_7_loc_channel_dout ),
    .if_empty_n( A_cached_row_7_loc_channel_empty_n ),
    .if_read( A_cached_row_7_loc_channel_read )
);

FIFO_DCT_MAT_Multiply2_A_cached_row_6_loc_channel A_cached_row_6_loc_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( A_cached_row_6_loc_channel_U_ap_dummy_ce ),
    .if_write_ce( A_cached_row_6_loc_channel_U_ap_dummy_ce ),
    .if_din( A_cached_row_6_loc_channel_din ),
    .if_full_n( A_cached_row_6_loc_channel_full_n ),
    .if_write( A_cached_row_6_loc_channel_write ),
    .if_dout( A_cached_row_6_loc_channel_dout ),
    .if_empty_n( A_cached_row_6_loc_channel_empty_n ),
    .if_read( A_cached_row_6_loc_channel_read )
);

FIFO_DCT_MAT_Multiply2_A_cached_row_5_loc_channel A_cached_row_5_loc_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( A_cached_row_5_loc_channel_U_ap_dummy_ce ),
    .if_write_ce( A_cached_row_5_loc_channel_U_ap_dummy_ce ),
    .if_din( A_cached_row_5_loc_channel_din ),
    .if_full_n( A_cached_row_5_loc_channel_full_n ),
    .if_write( A_cached_row_5_loc_channel_write ),
    .if_dout( A_cached_row_5_loc_channel_dout ),
    .if_empty_n( A_cached_row_5_loc_channel_empty_n ),
    .if_read( A_cached_row_5_loc_channel_read )
);

FIFO_DCT_MAT_Multiply2_A_cached_row_4_loc_channel A_cached_row_4_loc_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( A_cached_row_4_loc_channel_U_ap_dummy_ce ),
    .if_write_ce( A_cached_row_4_loc_channel_U_ap_dummy_ce ),
    .if_din( A_cached_row_4_loc_channel_din ),
    .if_full_n( A_cached_row_4_loc_channel_full_n ),
    .if_write( A_cached_row_4_loc_channel_write ),
    .if_dout( A_cached_row_4_loc_channel_dout ),
    .if_empty_n( A_cached_row_4_loc_channel_empty_n ),
    .if_read( A_cached_row_4_loc_channel_read )
);

FIFO_DCT_MAT_Multiply2_A_cached_row_3_loc_channel A_cached_row_3_loc_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( A_cached_row_3_loc_channel_U_ap_dummy_ce ),
    .if_write_ce( A_cached_row_3_loc_channel_U_ap_dummy_ce ),
    .if_din( A_cached_row_3_loc_channel_din ),
    .if_full_n( A_cached_row_3_loc_channel_full_n ),
    .if_write( A_cached_row_3_loc_channel_write ),
    .if_dout( A_cached_row_3_loc_channel_dout ),
    .if_empty_n( A_cached_row_3_loc_channel_empty_n ),
    .if_read( A_cached_row_3_loc_channel_read )
);

FIFO_DCT_MAT_Multiply2_A_cached_row_2_loc_channel A_cached_row_2_loc_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( A_cached_row_2_loc_channel_U_ap_dummy_ce ),
    .if_write_ce( A_cached_row_2_loc_channel_U_ap_dummy_ce ),
    .if_din( A_cached_row_2_loc_channel_din ),
    .if_full_n( A_cached_row_2_loc_channel_full_n ),
    .if_write( A_cached_row_2_loc_channel_write ),
    .if_dout( A_cached_row_2_loc_channel_dout ),
    .if_empty_n( A_cached_row_2_loc_channel_empty_n ),
    .if_read( A_cached_row_2_loc_channel_read )
);

FIFO_DCT_MAT_Multiply2_A_cached_row_1_loc_channel A_cached_row_1_loc_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( A_cached_row_1_loc_channel_U_ap_dummy_ce ),
    .if_write_ce( A_cached_row_1_loc_channel_U_ap_dummy_ce ),
    .if_din( A_cached_row_1_loc_channel_din ),
    .if_full_n( A_cached_row_1_loc_channel_full_n ),
    .if_write( A_cached_row_1_loc_channel_write ),
    .if_dout( A_cached_row_1_loc_channel_dout ),
    .if_empty_n( A_cached_row_1_loc_channel_empty_n ),
    .if_read( A_cached_row_1_loc_channel_read )
);

FIFO_DCT_MAT_Multiply2_A_cached_row_0_loc_channel A_cached_row_0_loc_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .if_read_ce( A_cached_row_0_loc_channel_U_ap_dummy_ce ),
    .if_write_ce( A_cached_row_0_loc_channel_U_ap_dummy_ce ),
    .if_din( A_cached_row_0_loc_channel_din ),
    .if_full_n( A_cached_row_0_loc_channel_full_n ),
    .if_write( A_cached_row_0_loc_channel_write ),
    .if_dout( A_cached_row_0_loc_channel_dout ),
    .if_empty_n( A_cached_row_0_loc_channel_empty_n ),
    .if_read( A_cached_row_0_loc_channel_read )
);



/// ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done)) begin
            ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0
    if (ap_rst == 1'b1) begin
        ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_0;
        end else if ((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1)) begin
            ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_A_cached_row_0_loc_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_A_cached_row_0_loc_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_A_cached_row_0_loc_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_A_cached_row_0_loc_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == A_cached_row_0_loc_channel_full_n))) begin
            ap_reg_ready_A_cached_row_0_loc_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_A_cached_row_1_loc_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_A_cached_row_1_loc_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_A_cached_row_1_loc_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_A_cached_row_1_loc_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == A_cached_row_1_loc_channel_full_n))) begin
            ap_reg_ready_A_cached_row_1_loc_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_A_cached_row_2_loc_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_A_cached_row_2_loc_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_A_cached_row_2_loc_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_A_cached_row_2_loc_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == A_cached_row_2_loc_channel_full_n))) begin
            ap_reg_ready_A_cached_row_2_loc_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_A_cached_row_3_loc_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_A_cached_row_3_loc_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_A_cached_row_3_loc_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_A_cached_row_3_loc_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == A_cached_row_3_loc_channel_full_n))) begin
            ap_reg_ready_A_cached_row_3_loc_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_A_cached_row_4_loc_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_A_cached_row_4_loc_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_A_cached_row_4_loc_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_A_cached_row_4_loc_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == A_cached_row_4_loc_channel_full_n))) begin
            ap_reg_ready_A_cached_row_4_loc_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_A_cached_row_5_loc_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_A_cached_row_5_loc_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_A_cached_row_5_loc_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_A_cached_row_5_loc_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == A_cached_row_5_loc_channel_full_n))) begin
            ap_reg_ready_A_cached_row_5_loc_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_A_cached_row_6_loc_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_A_cached_row_6_loc_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_A_cached_row_6_loc_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_A_cached_row_6_loc_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == A_cached_row_6_loc_channel_full_n))) begin
            ap_reg_ready_A_cached_row_6_loc_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_A_cached_row_7_loc_channel_full_n assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_A_cached_row_7_loc_channel_full_n
    if (ap_rst == 1'b1) begin
        ap_reg_ready_A_cached_row_7_loc_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue == ap_const_logic_1))) begin
            ap_reg_ready_A_cached_row_7_loc_channel_full_n <= ap_const_logic_0;
        end else if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done == ap_const_logic_1) & (ap_const_logic_1 == A_cached_row_7_loc_channel_full_n))) begin
            ap_reg_ready_A_cached_row_7_loc_channel_full_n <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)) begin
            ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready
    if (ap_rst == 1'b1) begin
        ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
        end else if ((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready == ap_const_logic_1)) begin
            ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue assign process. ///
always @ (ap_sig_ready_A_cached_row_0_loc_channel_full_n or ap_sig_ready_A_cached_row_4_loc_channel_full_n or ap_sig_ready_A_cached_row_6_loc_channel_full_n or ap_sig_ready_A_cached_row_7_loc_channel_full_n or ap_sig_ready_A_cached_row_1_loc_channel_full_n or ap_sig_ready_A_cached_row_3_loc_channel_full_n or ap_sig_ready_A_cached_row_2_loc_channel_full_n or ap_sig_ready_A_cached_row_5_loc_channel_full_n)
begin
    if (((ap_const_logic_1 == ap_sig_ready_A_cached_row_0_loc_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_A_cached_row_4_loc_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_A_cached_row_6_loc_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_A_cached_row_7_loc_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_A_cached_row_1_loc_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_A_cached_row_3_loc_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_A_cached_row_2_loc_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_A_cached_row_5_loc_channel_full_n))) begin
        DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1;
    end else begin
        DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_0;
    end
end

/// ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done or ap_reg_ready_A_cached_row_0_loc_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_A_cached_row_0_loc_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done or ap_reg_ready_A_cached_row_1_loc_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_A_cached_row_1_loc_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done or ap_reg_ready_A_cached_row_2_loc_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_A_cached_row_2_loc_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done or ap_reg_ready_A_cached_row_3_loc_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_A_cached_row_3_loc_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done or ap_reg_ready_A_cached_row_4_loc_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_A_cached_row_4_loc_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done or ap_reg_ready_A_cached_row_5_loc_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_A_cached_row_5_loc_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done or ap_reg_ready_A_cached_row_6_loc_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_A_cached_row_6_loc_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    end
end

/// ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done or ap_reg_ready_A_cached_row_7_loc_channel_full_n)
begin
    if ((ap_const_logic_1 == ap_reg_ready_A_cached_row_7_loc_channel_full_n)) begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
    end
end

/// ap_idle assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_idle or DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_idle or A_cached_row_7_loc_channel_empty_n or A_cached_row_6_loc_channel_empty_n or A_cached_row_5_loc_channel_empty_n or A_cached_row_4_loc_channel_empty_n or A_cached_row_3_loc_channel_empty_n or A_cached_row_2_loc_channel_empty_n or A_cached_row_1_loc_channel_empty_n or A_cached_row_0_loc_channel_empty_n)
begin
    if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_idle == ap_const_logic_1) & (ap_const_logic_1 == DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_idle) & (ap_const_logic_0 == A_cached_row_7_loc_channel_empty_n) & (ap_const_logic_0 == A_cached_row_6_loc_channel_empty_n) & (ap_const_logic_0 == A_cached_row_5_loc_channel_empty_n) & (ap_const_logic_0 == A_cached_row_4_loc_channel_empty_n) & (ap_const_logic_0 == A_cached_row_3_loc_channel_empty_n) & (ap_const_logic_0 == A_cached_row_2_loc_channel_empty_n) & (ap_const_logic_0 == A_cached_row_1_loc_channel_empty_n) & (ap_const_logic_0 == A_cached_row_0_loc_channel_empty_n))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_sig_hs_done assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done)
begin
    if ((ap_const_logic_1 == DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end

/// ap_sig_ready_A_cached_row_0_loc_channel_full_n assign process. ///
always @ (A_cached_row_0_loc_channel_full_n or ap_reg_ready_A_cached_row_0_loc_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_A_cached_row_0_loc_channel_full_n)) begin
        ap_sig_ready_A_cached_row_0_loc_channel_full_n = A_cached_row_0_loc_channel_full_n;
    end else begin
        ap_sig_ready_A_cached_row_0_loc_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_A_cached_row_1_loc_channel_full_n assign process. ///
always @ (A_cached_row_1_loc_channel_full_n or ap_reg_ready_A_cached_row_1_loc_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_A_cached_row_1_loc_channel_full_n)) begin
        ap_sig_ready_A_cached_row_1_loc_channel_full_n = A_cached_row_1_loc_channel_full_n;
    end else begin
        ap_sig_ready_A_cached_row_1_loc_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_A_cached_row_2_loc_channel_full_n assign process. ///
always @ (A_cached_row_2_loc_channel_full_n or ap_reg_ready_A_cached_row_2_loc_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_A_cached_row_2_loc_channel_full_n)) begin
        ap_sig_ready_A_cached_row_2_loc_channel_full_n = A_cached_row_2_loc_channel_full_n;
    end else begin
        ap_sig_ready_A_cached_row_2_loc_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_A_cached_row_3_loc_channel_full_n assign process. ///
always @ (A_cached_row_3_loc_channel_full_n or ap_reg_ready_A_cached_row_3_loc_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_A_cached_row_3_loc_channel_full_n)) begin
        ap_sig_ready_A_cached_row_3_loc_channel_full_n = A_cached_row_3_loc_channel_full_n;
    end else begin
        ap_sig_ready_A_cached_row_3_loc_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_A_cached_row_4_loc_channel_full_n assign process. ///
always @ (A_cached_row_4_loc_channel_full_n or ap_reg_ready_A_cached_row_4_loc_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_A_cached_row_4_loc_channel_full_n)) begin
        ap_sig_ready_A_cached_row_4_loc_channel_full_n = A_cached_row_4_loc_channel_full_n;
    end else begin
        ap_sig_ready_A_cached_row_4_loc_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_A_cached_row_5_loc_channel_full_n assign process. ///
always @ (A_cached_row_5_loc_channel_full_n or ap_reg_ready_A_cached_row_5_loc_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_A_cached_row_5_loc_channel_full_n)) begin
        ap_sig_ready_A_cached_row_5_loc_channel_full_n = A_cached_row_5_loc_channel_full_n;
    end else begin
        ap_sig_ready_A_cached_row_5_loc_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_A_cached_row_6_loc_channel_full_n assign process. ///
always @ (A_cached_row_6_loc_channel_full_n or ap_reg_ready_A_cached_row_6_loc_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_A_cached_row_6_loc_channel_full_n)) begin
        ap_sig_ready_A_cached_row_6_loc_channel_full_n = A_cached_row_6_loc_channel_full_n;
    end else begin
        ap_sig_ready_A_cached_row_6_loc_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_A_cached_row_7_loc_channel_full_n assign process. ///
always @ (A_cached_row_7_loc_channel_full_n or ap_reg_ready_A_cached_row_7_loc_channel_full_n)
begin
    if ((ap_const_logic_0 == ap_reg_ready_A_cached_row_7_loc_channel_full_n)) begin
        ap_sig_ready_A_cached_row_7_loc_channel_full_n = A_cached_row_7_loc_channel_full_n;
    end else begin
        ap_sig_ready_A_cached_row_7_loc_channel_full_n = ap_const_logic_1;
    end
end

/// ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready or ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)) begin
        ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    end else begin
        ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready assign process. ///
always @ (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready or ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready)
begin
    if ((ap_const_logic_0 == ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready)) begin
        ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready;
    end else begin
        ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready = ap_const_logic_1;
    end
end

/// ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready))) begin
        ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start assign process. ///
always @ (ap_start or ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready)
begin
    if (((ap_const_logic_0 == ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready) & (ap_const_logic_1 == ap_start))) begin
        ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start = ap_const_logic_0;
    end
end

/// ap_sig_top_allready assign process. ///
always @ (ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready or ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)
begin
    if (((ap_const_logic_1 == ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready))) begin
        ap_sig_top_allready = ap_const_logic_1;
    end else begin
        ap_sig_top_allready = ap_const_logic_0;
    end
end
assign A_address0 = DCT_MAT_Multiply2_Loop_Row_proc_U0_A_address0;
assign A_address1 = ap_const_lv6_0;
assign A_cached_row_0_loc_channel_U_ap_dummy_ce = ap_const_logic_1;
assign A_cached_row_0_loc_channel_din = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_7;
assign A_cached_row_0_loc_channel_read = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
assign A_cached_row_0_loc_channel_write = ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel;
assign A_cached_row_1_loc_channel_U_ap_dummy_ce = ap_const_logic_1;
assign A_cached_row_1_loc_channel_din = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_6;
assign A_cached_row_1_loc_channel_read = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
assign A_cached_row_1_loc_channel_write = ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel;
assign A_cached_row_2_loc_channel_U_ap_dummy_ce = ap_const_logic_1;
assign A_cached_row_2_loc_channel_din = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_5;
assign A_cached_row_2_loc_channel_read = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
assign A_cached_row_2_loc_channel_write = ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel;
assign A_cached_row_3_loc_channel_U_ap_dummy_ce = ap_const_logic_1;
assign A_cached_row_3_loc_channel_din = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_4;
assign A_cached_row_3_loc_channel_read = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
assign A_cached_row_3_loc_channel_write = ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel;
assign A_cached_row_4_loc_channel_U_ap_dummy_ce = ap_const_logic_1;
assign A_cached_row_4_loc_channel_din = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_3;
assign A_cached_row_4_loc_channel_read = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
assign A_cached_row_4_loc_channel_write = ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel;
assign A_cached_row_5_loc_channel_U_ap_dummy_ce = ap_const_logic_1;
assign A_cached_row_5_loc_channel_din = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_2;
assign A_cached_row_5_loc_channel_read = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
assign A_cached_row_5_loc_channel_write = ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel;
assign A_cached_row_6_loc_channel_U_ap_dummy_ce = ap_const_logic_1;
assign A_cached_row_6_loc_channel_din = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_1;
assign A_cached_row_6_loc_channel_read = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
assign A_cached_row_6_loc_channel_write = ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel;
assign A_cached_row_7_loc_channel_U_ap_dummy_ce = ap_const_logic_1;
assign A_cached_row_7_loc_channel_din = DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_0;
assign A_cached_row_7_loc_channel_read = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
assign A_cached_row_7_loc_channel_write = ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel;
assign A_ce0 = DCT_MAT_Multiply2_Loop_Row_proc_U0_A_ce0;
assign A_ce1 = ap_const_logic_0;
assign A_d0 = ap_const_lv32_0;
assign A_d1 = ap_const_lv32_0;
assign A_we0 = ap_const_logic_0;
assign A_we1 = ap_const_logic_0;
assign B_0_address0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_address0;
assign B_0_address1 = ap_const_lv3_0;
assign B_0_ce0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_ce0;
assign B_0_ce1 = ap_const_logic_0;
assign B_0_d0 = ap_const_lv32_0;
assign B_0_d1 = ap_const_lv32_0;
assign B_0_we0 = ap_const_logic_0;
assign B_0_we1 = ap_const_logic_0;
assign B_1_address0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_address0;
assign B_1_address1 = ap_const_lv3_0;
assign B_1_ce0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_ce0;
assign B_1_ce1 = ap_const_logic_0;
assign B_1_d0 = ap_const_lv32_0;
assign B_1_d1 = ap_const_lv32_0;
assign B_1_we0 = ap_const_logic_0;
assign B_1_we1 = ap_const_logic_0;
assign B_2_address0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_address0;
assign B_2_address1 = ap_const_lv3_0;
assign B_2_ce0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_ce0;
assign B_2_ce1 = ap_const_logic_0;
assign B_2_d0 = ap_const_lv32_0;
assign B_2_d1 = ap_const_lv32_0;
assign B_2_we0 = ap_const_logic_0;
assign B_2_we1 = ap_const_logic_0;
assign B_3_address0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_address0;
assign B_3_address1 = ap_const_lv3_0;
assign B_3_ce0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_ce0;
assign B_3_ce1 = ap_const_logic_0;
assign B_3_d0 = ap_const_lv32_0;
assign B_3_d1 = ap_const_lv32_0;
assign B_3_we0 = ap_const_logic_0;
assign B_3_we1 = ap_const_logic_0;
assign B_4_address0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_address0;
assign B_4_address1 = ap_const_lv3_0;
assign B_4_ce0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_ce0;
assign B_4_ce1 = ap_const_logic_0;
assign B_4_d0 = ap_const_lv32_0;
assign B_4_d1 = ap_const_lv32_0;
assign B_4_we0 = ap_const_logic_0;
assign B_4_we1 = ap_const_logic_0;
assign B_5_address0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_address0;
assign B_5_address1 = ap_const_lv3_0;
assign B_5_ce0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_ce0;
assign B_5_ce1 = ap_const_logic_0;
assign B_5_d0 = ap_const_lv32_0;
assign B_5_d1 = ap_const_lv32_0;
assign B_5_we0 = ap_const_logic_0;
assign B_5_we1 = ap_const_logic_0;
assign B_6_address0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_address0;
assign B_6_address1 = ap_const_lv3_0;
assign B_6_ce0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_ce0;
assign B_6_ce1 = ap_const_logic_0;
assign B_6_d0 = ap_const_lv32_0;
assign B_6_d1 = ap_const_lv32_0;
assign B_6_we0 = ap_const_logic_0;
assign B_6_we1 = ap_const_logic_0;
assign B_7_address0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_address0;
assign B_7_address1 = ap_const_lv3_0;
assign B_7_ce0 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_ce0;
assign B_7_ce1 = ap_const_logic_0;
assign B_7_d0 = ap_const_lv32_0;
assign B_7_d1 = ap_const_lv32_0;
assign B_7_we0 = ap_const_logic_0;
assign B_7_we1 = ap_const_logic_0;
assign C_din = DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_din;
assign C_write = DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_write;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_q0 = B_0_q0;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_q0 = B_1_q0;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_q0 = B_2_q0;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_q0 = B_3_q0;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_q0 = B_4_q0;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_q0 = B_5_q0;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_q0 = B_6_q0;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_q0 = B_7_q0;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_full_n = C_full_n;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_continue = ap_sig_hs_continue;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start = (A_cached_row_7_loc_channel_empty_n & A_cached_row_6_loc_channel_empty_n & A_cached_row_5_loc_channel_empty_n & A_cached_row_4_loc_channel_empty_n & A_cached_row_3_loc_channel_empty_n & A_cached_row_2_loc_channel_empty_n & A_cached_row_1_loc_channel_empty_n & A_cached_row_0_loc_channel_empty_n & ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start);
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read = A_cached_row_0_loc_channel_dout;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read1 = A_cached_row_1_loc_channel_dout;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read2 = A_cached_row_2_loc_channel_dout;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read3 = A_cached_row_3_loc_channel_dout;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read4 = A_cached_row_4_loc_channel_dout;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read5 = A_cached_row_5_loc_channel_dout;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read6 = A_cached_row_6_loc_channel_dout;
assign DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read7 = A_cached_row_7_loc_channel_dout;
assign DCT_MAT_Multiply2_Loop_Row_proc_U0_A_q0 = A_q0;
assign DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start = ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start;
assign ap_done = ap_sig_hs_done;
assign ap_ready = ap_sig_top_allready;
assign ap_sig_hs_continue = ap_const_logic_1;


endmodule //DCT_MAT_Multiply2

