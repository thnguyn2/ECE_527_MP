-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_Quant is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    X_ce0 : OUT STD_LOGIC;
    X_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    function_r : IN STD_LOGIC_VECTOR (0 downto 0);
    Y_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Y_ce0 : OUT STD_LOGIC;
    Y_we0 : OUT STD_LOGIC;
    Y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DCT_Quant is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_44 : BOOLEAN;
    signal QMatrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal QMatrix_ce0 : STD_LOGIC;
    signal QMatrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_76 : BOOLEAN;
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal function_read_read_fu_36_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_177_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_279 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_107 : BOOLEAN;
    signal p_addr_cast_fu_191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr_cast_reg_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_i3_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_201_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_292 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_addr2_cast_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr2_cast_reg_297 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_i_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_305 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal tmp_3_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i6_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i1_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal j_fu_251_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal tmp_2_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_339 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i2_reg_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i_reg_113 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_i5_reg_124 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_191 : BOOLEAN;
    signal j_i_reg_135 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_183_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_207_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i7_trn_cast_fu_231_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_trn_cast_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_fu_261_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_147_ce : STD_LOGIC;
    signal grp_fu_154_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component DCT_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_Quant_QMatrix IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    QMatrix_U : component DCT_Quant_QMatrix
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => QMatrix_address0,
        ce0 => QMatrix_ce0,
        q0 => QMatrix_q0);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U4 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_147_p0,
        din1 => grp_fu_147_p1,
        ce => grp_fu_147_ce,
        dout => grp_fu_147_p2);

    DCT_fdiv_32ns_32ns_32_16_U5 : component DCT_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_154_p0,
        din1 => grp_fu_154_p1,
        ce => grp_fu_154_ce,
        dout => grp_fu_154_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_i2_reg_102 assign process. --
    i_i2_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (function_read_read_fu_36_p2 = ap_const_lv1_0))) then 
                i_i2_reg_102 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_i6_fu_219_p2)))) then 
                i_i2_reg_102 <= i_1_reg_279;
            end if; 
        end if;
    end process;

    -- i_i_reg_113 assign process. --
    i_i_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((function_read_read_fu_36_p2 = ap_const_lv1_0)))) then 
                i_i_reg_113 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = exitcond_i_fu_245_p2)))) then 
                i_i_reg_113 <= i_reg_292;
            end if; 
        end if;
    end process;

    -- j_i5_reg_124 assign process. --
    j_i5_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                j_i5_reg_124 <= j_1_reg_305;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (function_read_read_fu_36_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond1_i3_fu_171_p2))) then 
                j_i5_reg_124 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_i_reg_135 assign process. --
    j_i_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
                j_i_reg_135 <= j_reg_334;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((function_read_read_fu_36_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_i_fu_195_p2))) then 
                j_i_reg_135 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (function_read_read_fu_36_p2 = ap_const_lv1_0))) then
                i_1_reg_279 <= i_1_fu_177_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((function_read_read_fu_36_p2 = ap_const_lv1_0)))) then
                i_reg_292 <= i_fu_201_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_305 <= j_1_fu_225_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                j_reg_334 <= j_fu_251_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((function_read_read_fu_36_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_i_fu_195_p2))) then
                    p_addr2_cast_reg_297(6 downto 3) <= p_addr2_cast_fu_215_p1(6 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (function_read_read_fu_36_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond1_i3_fu_171_p2))) then
                    p_addr_cast_reg_284(6 downto 3) <= p_addr_cast_fu_191_p1(6 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then
                reg_159 <= X_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond_i_fu_245_p2))) then
                    tmp_2_reg_339(7 downto 0) <= tmp_2_fu_266_p1(7 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                tmp_3_i1_reg_326 <= grp_fu_154_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_i6_fu_219_p2))) then
                    tmp_3_reg_310(7 downto 0) <= tmp_3_fu_240_p1(7 downto 0);
            end if;
        end if;
    end process;
    p_addr_cast_reg_284(2 downto 0) <= "000";
    p_addr_cast_reg_284(7) <= '0';
    p_addr2_cast_reg_297(2 downto 0) <= "000";
    p_addr2_cast_reg_297(7) <= '0';
    tmp_3_reg_310(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_2_reg_339(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, function_read_read_fu_36_p2, exitcond1_i3_fu_171_p2, exitcond1_i_fu_195_p2, exitcond_i6_fu_219_p2, exitcond_i_fu_245_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((((function_read_read_fu_36_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond1_i3_fu_171_p2))) or (not((function_read_read_fu_36_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_i_fu_195_p2))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((function_read_read_fu_36_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_i_fu_195_p2))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_i6_fu_219_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st22_fsm_21 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_245_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- QMatrix_address0 assign process. --
    QMatrix_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, tmp_3_reg_310, ap_sig_cseq_ST_st22_fsm_21, tmp_2_fu_266_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            QMatrix_address0 <= tmp_2_fu_266_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            QMatrix_address0 <= tmp_3_reg_310(6 - 1 downto 0);
        else 
            QMatrix_address0 <= "XXXXXX";
        end if; 
    end process;


    -- QMatrix_ce0 assign process. --
    QMatrix_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            QMatrix_ce0 <= ap_const_logic_1;
        else 
            QMatrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- X_address0 assign process. --
    X_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_3_fu_240_p1, ap_sig_cseq_ST_st22_fsm_21, tmp_2_fu_266_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            X_address0 <= tmp_2_fu_266_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            X_address0 <= tmp_3_fu_240_p1(6 - 1 downto 0);
        else 
            X_address0 <= "XXXXXX";
        end if; 
    end process;


    -- X_ce0 assign process. --
    X_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- Y_address0 assign process. --
    Y_address0_assign_proc : process(tmp_3_reg_310, tmp_2_reg_339, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            Y_address0 <= tmp_2_reg_339(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            Y_address0 <= tmp_3_reg_310(6 - 1 downto 0);
        else 
            Y_address0 <= "XXXXXX";
        end if; 
    end process;


    -- Y_ce0 assign process. --
    Y_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            Y_ce0 <= ap_const_logic_1;
        else 
            Y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- Y_d0 assign process. --
    Y_d0_assign_proc : process(tmp_3_i1_reg_326, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st26_fsm_25, grp_fu_147_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            Y_d0 <= grp_fu_147_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            Y_d0 <= tmp_3_i1_reg_326;
        else 
            Y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- Y_we0 assign process. --
    Y_we0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            Y_we0 <= ap_const_logic_1;
        else 
            Y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, function_read_read_fu_36_p2, ap_sig_cseq_ST_st2_fsm_1, exitcond1_i3_fu_171_p2, exitcond1_i_fu_195_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (((function_read_read_fu_36_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond1_i3_fu_171_p2))) or (not((function_read_read_fu_36_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_i_fu_195_p2))))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(function_read_read_fu_36_p2, ap_sig_cseq_ST_st2_fsm_1, exitcond1_i3_fu_171_p2, exitcond1_i_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (((function_read_read_fu_36_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond1_i3_fu_171_p2))) or (not((function_read_read_fu_36_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_i_fu_195_p2)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_107 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_162 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_191 assign process. --
    ap_sig_bdd_191_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_191 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_44 assign process. --
    ap_sig_bdd_44_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_44 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_76 assign process. --
    ap_sig_bdd_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_76 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_44)
    begin
        if (ap_sig_bdd_44) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_191)
    begin
        if (ap_sig_bdd_191) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_162)
    begin
        if (ap_sig_bdd_162) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_107)
    begin
        if (ap_sig_bdd_107) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_76)
    begin
        if (ap_sig_bdd_76) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i3_fu_171_p2 <= "1" when (i_i2_reg_102 = ap_const_lv4_8) else "0";
    exitcond1_i_fu_195_p2 <= "1" when (i_i_reg_113 = ap_const_lv4_8) else "0";
    exitcond_i6_fu_219_p2 <= "1" when (j_i5_reg_124 = ap_const_lv4_8) else "0";
    exitcond_i_fu_245_p2 <= "1" when (j_i_reg_135 = ap_const_lv4_8) else "0";
    function_read_read_fu_36_p2 <= function_r;
    grp_fu_147_ce <= ap_const_logic_1;
    grp_fu_147_p0 <= X_q0;
    grp_fu_147_p1 <= QMatrix_q0;
    grp_fu_154_ce <= ap_const_logic_1;
    grp_fu_154_p0 <= reg_159;
    grp_fu_154_p1 <= QMatrix_q0;
    i_1_fu_177_p2 <= std_logic_vector(unsigned(i_i2_reg_102) + unsigned(ap_const_lv4_1));
    i_fu_201_p2 <= std_logic_vector(unsigned(i_i_reg_113) + unsigned(ap_const_lv4_1));
    j_1_fu_225_p2 <= std_logic_vector(unsigned(j_i5_reg_124) + unsigned(ap_const_lv4_1));
    j_fu_251_p2 <= std_logic_vector(unsigned(j_i_reg_135) + unsigned(ap_const_lv4_1));
    p_addr1_fu_235_p2 <= std_logic_vector(unsigned(tmp_i7_trn_cast_fu_231_p1) + unsigned(p_addr_cast_reg_284));
    p_addr2_cast_fu_215_p1 <= std_logic_vector(resize(unsigned(tmp_fu_207_p3),8));
    p_addr3_fu_261_p2 <= std_logic_vector(unsigned(tmp_i_trn_cast_fu_257_p1) + unsigned(p_addr2_cast_reg_297));
    p_addr_cast_fu_191_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_183_p3),8));
    tmp_1_fu_183_p3 <= (i_i2_reg_102 & ap_const_lv3_0);
    tmp_2_fu_266_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_261_p2),64));
    tmp_3_fu_240_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_235_p2),64));
    tmp_fu_207_p3 <= (i_i_reg_113 & ap_const_lv3_0);
    tmp_i7_trn_cast_fu_231_p1 <= std_logic_vector(resize(unsigned(j_i5_reg_124),8));
    tmp_i_trn_cast_fu_257_p1 <= std_logic_vector(resize(unsigned(j_i_reg_135),8));
end behav;
