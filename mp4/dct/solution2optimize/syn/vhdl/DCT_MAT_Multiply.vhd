-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_MAT_Multiply is
port (
    A_0_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_we0 : OUT STD_LOGIC;
    C_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce1 : OUT STD_LOGIC;
    C_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    A_5_1_read_ap_ack : OUT STD_LOGIC;
    A_6_2_read_ap_ack : OUT STD_LOGIC;
    A_4_1_read_ap_ack : OUT STD_LOGIC;
    A_5_0_read_ap_ack : OUT STD_LOGIC;
    A_1_2_read_ap_ack : OUT STD_LOGIC;
    A_3_6_read_ap_ack : OUT STD_LOGIC;
    A_5_6_read_ap_ack : OUT STD_LOGIC;
    A_1_5_read_ap_ack : OUT STD_LOGIC;
    A_6_4_read_ap_ack : OUT STD_LOGIC;
    A_4_7_read_ap_ack : OUT STD_LOGIC;
    A_0_7_read_ap_ack : OUT STD_LOGIC;
    A_7_5_read_ap_ack : OUT STD_LOGIC;
    A_2_0_read_ap_ack : OUT STD_LOGIC;
    A_1_4_read_ap_ack : OUT STD_LOGIC;
    A_0_1_read_ap_ack : OUT STD_LOGIC;
    A_0_6_read_ap_ack : OUT STD_LOGIC;
    A_0_5_read_ap_ack : OUT STD_LOGIC;
    A_5_3_read_ap_ack : OUT STD_LOGIC;
    A_4_3_read_ap_ack : OUT STD_LOGIC;
    A_4_2_read_ap_ack : OUT STD_LOGIC;
    A_2_5_read_ap_ack : OUT STD_LOGIC;
    A_5_4_read_ap_ack : OUT STD_LOGIC;
    A_5_7_read_ap_ack : OUT STD_LOGIC;
    A_6_3_read_ap_ack : OUT STD_LOGIC;
    A_1_7_read_ap_ack : OUT STD_LOGIC;
    A_6_5_read_ap_ack : OUT STD_LOGIC;
    A_6_7_read_ap_ack : OUT STD_LOGIC;
    A_5_2_read_ap_ack : OUT STD_LOGIC;
    A_6_0_read_ap_ack : OUT STD_LOGIC;
    A_0_2_read_ap_ack : OUT STD_LOGIC;
    A_7_2_read_ap_ack : OUT STD_LOGIC;
    A_0_3_read_ap_ack : OUT STD_LOGIC;
    A_7_3_read_ap_ack : OUT STD_LOGIC;
    A_2_4_read_ap_ack : OUT STD_LOGIC;
    A_4_6_read_ap_ack : OUT STD_LOGIC;
    A_7_4_read_ap_ack : OUT STD_LOGIC;
    A_3_1_read_ap_ack : OUT STD_LOGIC;
    A_2_1_read_ap_ack : OUT STD_LOGIC;
    A_7_6_read_ap_ack : OUT STD_LOGIC;
    A_3_2_read_ap_ack : OUT STD_LOGIC;
    A_7_1_read_ap_ack : OUT STD_LOGIC;
    A_1_3_read_ap_ack : OUT STD_LOGIC;
    A_6_1_read_ap_ack : OUT STD_LOGIC;
    A_7_0_read_ap_ack : OUT STD_LOGIC;
    A_2_6_read_ap_ack : OUT STD_LOGIC;
    A_3_0_read_ap_ack : OUT STD_LOGIC;
    A_3_7_read_ap_ack : OUT STD_LOGIC;
    A_1_6_read_ap_ack : OUT STD_LOGIC;
    A_1_0_read_ap_ack : OUT STD_LOGIC;
    A_2_7_read_ap_ack : OUT STD_LOGIC;
    A_3_5_read_ap_ack : OUT STD_LOGIC;
    A_3_4_read_ap_ack : OUT STD_LOGIC;
    A_2_3_read_ap_ack : OUT STD_LOGIC;
    A_4_5_read_ap_ack : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of DCT_MAT_Multiply is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read64 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read191 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read192 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read193 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read196 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read199 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read200 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read201 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read202 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read203 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read204 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read205 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read206 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read207 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read208 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read209 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read211 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read212 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read213 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read214 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read215 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read216 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read218 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read219 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read220 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read221 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read222 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read223 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read224 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read225 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read226 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read227 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read228 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read229 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read230 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read232 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read233 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read234 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read235 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read236 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read237 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read238 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read239 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read240 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read241 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read242 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read243 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read244 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read245 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read246 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read247 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read248 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read250 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read252 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_write : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel : STD_LOGIC;
    signal B_cached_2_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel : STD_LOGIC;
    signal B_cached_6_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel : STD_LOGIC;
    signal B_cached_0_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel : STD_LOGIC;
    signal B_cached_1_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel : STD_LOGIC;
    signal B_cached_1_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel : STD_LOGIC;
    signal B_cached_0_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel : STD_LOGIC;
    signal B_cached_6_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel : STD_LOGIC;
    signal B_cached_0_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel : STD_LOGIC;
    signal B_cached_0_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel : STD_LOGIC;
    signal B_cached_3_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel : STD_LOGIC;
    signal B_cached_4_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel : STD_LOGIC;
    signal B_cached_0_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel : STD_LOGIC;
    signal B_cached_4_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel : STD_LOGIC;
    signal B_cached_5_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel : STD_LOGIC;
    signal B_cached_1_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel : STD_LOGIC;
    signal B_cached_1_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel : STD_LOGIC;
    signal B_cached_2_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel : STD_LOGIC;
    signal B_cached_6_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel : STD_LOGIC;
    signal B_cached_6_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel : STD_LOGIC;
    signal B_cached_7_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel : STD_LOGIC;
    signal B_cached_7_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel : STD_LOGIC;
    signal B_cached_5_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel : STD_LOGIC;
    signal B_cached_6_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel : STD_LOGIC;
    signal B_cached_7_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel : STD_LOGIC;
    signal B_cached_4_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel : STD_LOGIC;
    signal B_cached_5_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel : STD_LOGIC;
    signal B_cached_4_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel : STD_LOGIC;
    signal B_cached_7_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel : STD_LOGIC;
    signal B_cached_7_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel : STD_LOGIC;
    signal B_cached_5_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel : STD_LOGIC;
    signal B_cached_2_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel : STD_LOGIC;
    signal B_cached_3_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel : STD_LOGIC;
    signal B_cached_4_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel : STD_LOGIC;
    signal B_cached_2_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel : STD_LOGIC;
    signal B_cached_3_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel : STD_LOGIC;
    signal B_cached_5_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel : STD_LOGIC;
    signal B_cached_4_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel : STD_LOGIC;
    signal B_cached_4_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel : STD_LOGIC;
    signal B_cached_2_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel : STD_LOGIC;
    signal B_cached_7_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel : STD_LOGIC;
    signal B_cached_0_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel : STD_LOGIC;
    signal B_cached_1_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel : STD_LOGIC;
    signal B_cached_4_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel : STD_LOGIC;
    signal B_cached_6_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel : STD_LOGIC;
    signal B_cached_7_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel : STD_LOGIC;
    signal B_cached_3_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel : STD_LOGIC;
    signal B_cached_7_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel : STD_LOGIC;
    signal B_cached_1_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel : STD_LOGIC;
    signal B_cached_2_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel : STD_LOGIC;
    signal B_cached_3_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel : STD_LOGIC;
    signal B_cached_1_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel : STD_LOGIC;
    signal B_cached_3_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel : STD_LOGIC;
    signal B_cached_3_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel : STD_LOGIC;
    signal B_cached_0_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel : STD_LOGIC;
    signal B_cached_5_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel : STD_LOGIC;
    signal B_cached_0_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel : STD_LOGIC;
    signal B_cached_2_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel : STD_LOGIC;
    signal B_cached_1_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel : STD_LOGIC;
    signal B_cached_3_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel : STD_LOGIC;
    signal B_cached_2_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel : STD_LOGIC;
    signal B_cached_5_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel : STD_LOGIC;
    signal B_cached_6_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel : STD_LOGIC;
    signal B_cached_6_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel : STD_LOGIC;
    signal B_cached_5_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_7_channel_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_start : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_done : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_continue : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_idle : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read3 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read7 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read8 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read9 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read10 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read11 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read12 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read13 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read14 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read15 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read16 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read17 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read18 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read19 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read20 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read21 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read22 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read23 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read24 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read25 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read26 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read27 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read28 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read29 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read30 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read31 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read32 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read33 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read34 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read35 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read36 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read37 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read38 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read39 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read40 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read41 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read42 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read43 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read44 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read45 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read46 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read47 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read48 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read49 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read50 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read51 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read52 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read53 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read54 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read55 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_empty_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_read : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read56 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read57 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read58 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read59 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read60 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read61 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read62 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read63 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_C_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_C_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc440_U0_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal A_5_171_U_ap_dummy_ce : STD_LOGIC;
    signal A_5_171_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_171_full_n : STD_LOGIC;
    signal A_5_171_write : STD_LOGIC;
    signal A_5_171_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_171_empty_n : STD_LOGIC;
    signal A_5_171_read : STD_LOGIC;
    signal A_6_272_U_ap_dummy_ce : STD_LOGIC;
    signal A_6_272_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_272_full_n : STD_LOGIC;
    signal A_6_272_write : STD_LOGIC;
    signal A_6_272_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_272_empty_n : STD_LOGIC;
    signal A_6_272_read : STD_LOGIC;
    signal A_4_173_U_ap_dummy_ce : STD_LOGIC;
    signal A_4_173_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_173_full_n : STD_LOGIC;
    signal A_4_173_write : STD_LOGIC;
    signal A_4_173_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_173_empty_n : STD_LOGIC;
    signal A_4_173_read : STD_LOGIC;
    signal A_5_074_U_ap_dummy_ce : STD_LOGIC;
    signal A_5_074_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_074_full_n : STD_LOGIC;
    signal A_5_074_write : STD_LOGIC;
    signal A_5_074_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_074_empty_n : STD_LOGIC;
    signal A_5_074_read : STD_LOGIC;
    signal A_6_675_U_ap_dummy_ce : STD_LOGIC;
    signal A_6_675_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_675_full_n : STD_LOGIC;
    signal A_6_675_write : STD_LOGIC;
    signal A_6_675_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_675_empty_n : STD_LOGIC;
    signal A_6_675_read : STD_LOGIC;
    signal A_4_076_U_ap_dummy_ce : STD_LOGIC;
    signal A_4_076_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_076_full_n : STD_LOGIC;
    signal A_4_076_write : STD_LOGIC;
    signal A_4_076_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_076_empty_n : STD_LOGIC;
    signal A_4_076_read : STD_LOGIC;
    signal A_1_277_U_ap_dummy_ce : STD_LOGIC;
    signal A_1_277_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_277_full_n : STD_LOGIC;
    signal A_1_277_write : STD_LOGIC;
    signal A_1_277_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_277_empty_n : STD_LOGIC;
    signal A_1_277_read : STD_LOGIC;
    signal A_1_178_U_ap_dummy_ce : STD_LOGIC;
    signal A_1_178_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_178_full_n : STD_LOGIC;
    signal A_1_178_write : STD_LOGIC;
    signal A_1_178_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_178_empty_n : STD_LOGIC;
    signal A_1_178_read : STD_LOGIC;
    signal A_7_779_U_ap_dummy_ce : STD_LOGIC;
    signal A_7_779_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_779_full_n : STD_LOGIC;
    signal A_7_779_write : STD_LOGIC;
    signal A_7_779_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_779_empty_n : STD_LOGIC;
    signal A_7_779_read : STD_LOGIC;
    signal A_3_680_U_ap_dummy_ce : STD_LOGIC;
    signal A_3_680_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_680_full_n : STD_LOGIC;
    signal A_3_680_write : STD_LOGIC;
    signal A_3_680_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_680_empty_n : STD_LOGIC;
    signal A_3_680_read : STD_LOGIC;
    signal A_5_681_U_ap_dummy_ce : STD_LOGIC;
    signal A_5_681_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_681_full_n : STD_LOGIC;
    signal A_5_681_write : STD_LOGIC;
    signal A_5_681_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_681_empty_n : STD_LOGIC;
    signal A_5_681_read : STD_LOGIC;
    signal A_1_582_U_ap_dummy_ce : STD_LOGIC;
    signal A_1_582_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_582_full_n : STD_LOGIC;
    signal A_1_582_write : STD_LOGIC;
    signal A_1_582_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_582_empty_n : STD_LOGIC;
    signal A_1_582_read : STD_LOGIC;
    signal A_6_483_U_ap_dummy_ce : STD_LOGIC;
    signal A_6_483_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_483_full_n : STD_LOGIC;
    signal A_6_483_write : STD_LOGIC;
    signal A_6_483_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_483_empty_n : STD_LOGIC;
    signal A_6_483_read : STD_LOGIC;
    signal A_4_784_U_ap_dummy_ce : STD_LOGIC;
    signal A_4_784_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_784_full_n : STD_LOGIC;
    signal A_4_784_write : STD_LOGIC;
    signal A_4_784_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_784_empty_n : STD_LOGIC;
    signal A_4_784_read : STD_LOGIC;
    signal A_0_785_U_ap_dummy_ce : STD_LOGIC;
    signal A_0_785_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_785_full_n : STD_LOGIC;
    signal A_0_785_write : STD_LOGIC;
    signal A_0_785_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_785_empty_n : STD_LOGIC;
    signal A_0_785_read : STD_LOGIC;
    signal A_7_586_U_ap_dummy_ce : STD_LOGIC;
    signal A_7_586_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_586_full_n : STD_LOGIC;
    signal A_7_586_write : STD_LOGIC;
    signal A_7_586_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_586_empty_n : STD_LOGIC;
    signal A_7_586_read : STD_LOGIC;
    signal A_2_087_U_ap_dummy_ce : STD_LOGIC;
    signal A_2_087_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_087_full_n : STD_LOGIC;
    signal A_2_087_write : STD_LOGIC;
    signal A_2_087_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_087_empty_n : STD_LOGIC;
    signal A_2_087_read : STD_LOGIC;
    signal A_1_488_U_ap_dummy_ce : STD_LOGIC;
    signal A_1_488_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_488_full_n : STD_LOGIC;
    signal A_1_488_write : STD_LOGIC;
    signal A_1_488_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_488_empty_n : STD_LOGIC;
    signal A_1_488_read : STD_LOGIC;
    signal A_0_189_U_ap_dummy_ce : STD_LOGIC;
    signal A_0_189_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_189_full_n : STD_LOGIC;
    signal A_0_189_write : STD_LOGIC;
    signal A_0_189_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_189_empty_n : STD_LOGIC;
    signal A_0_189_read : STD_LOGIC;
    signal A_0_690_U_ap_dummy_ce : STD_LOGIC;
    signal A_0_690_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_690_full_n : STD_LOGIC;
    signal A_0_690_write : STD_LOGIC;
    signal A_0_690_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_690_empty_n : STD_LOGIC;
    signal A_0_690_read : STD_LOGIC;
    signal A_0_091_U_ap_dummy_ce : STD_LOGIC;
    signal A_0_091_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_091_full_n : STD_LOGIC;
    signal A_0_091_write : STD_LOGIC;
    signal A_0_091_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_091_empty_n : STD_LOGIC;
    signal A_0_091_read : STD_LOGIC;
    signal A_0_592_U_ap_dummy_ce : STD_LOGIC;
    signal A_0_592_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_592_full_n : STD_LOGIC;
    signal A_0_592_write : STD_LOGIC;
    signal A_0_592_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_592_empty_n : STD_LOGIC;
    signal A_0_592_read : STD_LOGIC;
    signal A_5_393_U_ap_dummy_ce : STD_LOGIC;
    signal A_5_393_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_393_full_n : STD_LOGIC;
    signal A_5_393_write : STD_LOGIC;
    signal A_5_393_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_393_empty_n : STD_LOGIC;
    signal A_5_393_read : STD_LOGIC;
    signal A_4_394_U_ap_dummy_ce : STD_LOGIC;
    signal A_4_394_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_394_full_n : STD_LOGIC;
    signal A_4_394_write : STD_LOGIC;
    signal A_4_394_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_394_empty_n : STD_LOGIC;
    signal A_4_394_read : STD_LOGIC;
    signal A_4_295_U_ap_dummy_ce : STD_LOGIC;
    signal A_4_295_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_295_full_n : STD_LOGIC;
    signal A_4_295_write : STD_LOGIC;
    signal A_4_295_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_295_empty_n : STD_LOGIC;
    signal A_4_295_read : STD_LOGIC;
    signal A_2_596_U_ap_dummy_ce : STD_LOGIC;
    signal A_2_596_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_596_full_n : STD_LOGIC;
    signal A_2_596_write : STD_LOGIC;
    signal A_2_596_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_596_empty_n : STD_LOGIC;
    signal A_2_596_read : STD_LOGIC;
    signal A_5_497_U_ap_dummy_ce : STD_LOGIC;
    signal A_5_497_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_497_full_n : STD_LOGIC;
    signal A_5_497_write : STD_LOGIC;
    signal A_5_497_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_497_empty_n : STD_LOGIC;
    signal A_5_497_read : STD_LOGIC;
    signal A_4_498_U_ap_dummy_ce : STD_LOGIC;
    signal A_4_498_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_498_full_n : STD_LOGIC;
    signal A_4_498_write : STD_LOGIC;
    signal A_4_498_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_498_empty_n : STD_LOGIC;
    signal A_4_498_read : STD_LOGIC;
    signal A_5_799_U_ap_dummy_ce : STD_LOGIC;
    signal A_5_799_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_799_full_n : STD_LOGIC;
    signal A_5_799_write : STD_LOGIC;
    signal A_5_799_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_799_empty_n : STD_LOGIC;
    signal A_5_799_read : STD_LOGIC;
    signal A_6_3100_U_ap_dummy_ce : STD_LOGIC;
    signal A_6_3100_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_3100_full_n : STD_LOGIC;
    signal A_6_3100_write : STD_LOGIC;
    signal A_6_3100_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_3100_empty_n : STD_LOGIC;
    signal A_6_3100_read : STD_LOGIC;
    signal A_1_7101_U_ap_dummy_ce : STD_LOGIC;
    signal A_1_7101_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_7101_full_n : STD_LOGIC;
    signal A_1_7101_write : STD_LOGIC;
    signal A_1_7101_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_7101_empty_n : STD_LOGIC;
    signal A_1_7101_read : STD_LOGIC;
    signal A_6_5102_U_ap_dummy_ce : STD_LOGIC;
    signal A_6_5102_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_5102_full_n : STD_LOGIC;
    signal A_6_5102_write : STD_LOGIC;
    signal A_6_5102_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_5102_empty_n : STD_LOGIC;
    signal A_6_5102_read : STD_LOGIC;
    signal A_6_7103_U_ap_dummy_ce : STD_LOGIC;
    signal A_6_7103_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_7103_full_n : STD_LOGIC;
    signal A_6_7103_write : STD_LOGIC;
    signal A_6_7103_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_7103_empty_n : STD_LOGIC;
    signal A_6_7103_read : STD_LOGIC;
    signal A_5_2104_U_ap_dummy_ce : STD_LOGIC;
    signal A_5_2104_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_2104_full_n : STD_LOGIC;
    signal A_5_2104_write : STD_LOGIC;
    signal A_5_2104_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_2104_empty_n : STD_LOGIC;
    signal A_5_2104_read : STD_LOGIC;
    signal A_6_0105_U_ap_dummy_ce : STD_LOGIC;
    signal A_6_0105_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_0105_full_n : STD_LOGIC;
    signal A_6_0105_write : STD_LOGIC;
    signal A_6_0105_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_0105_empty_n : STD_LOGIC;
    signal A_6_0105_read : STD_LOGIC;
    signal A_0_2106_U_ap_dummy_ce : STD_LOGIC;
    signal A_0_2106_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_2106_full_n : STD_LOGIC;
    signal A_0_2106_write : STD_LOGIC;
    signal A_0_2106_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_2106_empty_n : STD_LOGIC;
    signal A_0_2106_read : STD_LOGIC;
    signal A_7_2107_U_ap_dummy_ce : STD_LOGIC;
    signal A_7_2107_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_2107_full_n : STD_LOGIC;
    signal A_7_2107_write : STD_LOGIC;
    signal A_7_2107_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_2107_empty_n : STD_LOGIC;
    signal A_7_2107_read : STD_LOGIC;
    signal A_0_3108_U_ap_dummy_ce : STD_LOGIC;
    signal A_0_3108_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_3108_full_n : STD_LOGIC;
    signal A_0_3108_write : STD_LOGIC;
    signal A_0_3108_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_3108_empty_n : STD_LOGIC;
    signal A_0_3108_read : STD_LOGIC;
    signal A_7_3109_U_ap_dummy_ce : STD_LOGIC;
    signal A_7_3109_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_3109_full_n : STD_LOGIC;
    signal A_7_3109_write : STD_LOGIC;
    signal A_7_3109_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_3109_empty_n : STD_LOGIC;
    signal A_7_3109_read : STD_LOGIC;
    signal A_2_4110_U_ap_dummy_ce : STD_LOGIC;
    signal A_2_4110_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_4110_full_n : STD_LOGIC;
    signal A_2_4110_write : STD_LOGIC;
    signal A_2_4110_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_4110_empty_n : STD_LOGIC;
    signal A_2_4110_read : STD_LOGIC;
    signal A_4_6111_U_ap_dummy_ce : STD_LOGIC;
    signal A_4_6111_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_6111_full_n : STD_LOGIC;
    signal A_4_6111_write : STD_LOGIC;
    signal A_4_6111_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_6111_empty_n : STD_LOGIC;
    signal A_4_6111_read : STD_LOGIC;
    signal A_0_4112_U_ap_dummy_ce : STD_LOGIC;
    signal A_0_4112_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_4112_full_n : STD_LOGIC;
    signal A_0_4112_write : STD_LOGIC;
    signal A_0_4112_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_4112_empty_n : STD_LOGIC;
    signal A_0_4112_read : STD_LOGIC;
    signal A_7_4113_U_ap_dummy_ce : STD_LOGIC;
    signal A_7_4113_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_4113_full_n : STD_LOGIC;
    signal A_7_4113_write : STD_LOGIC;
    signal A_7_4113_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_4113_empty_n : STD_LOGIC;
    signal A_7_4113_read : STD_LOGIC;
    signal A_3_1114_U_ap_dummy_ce : STD_LOGIC;
    signal A_3_1114_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_1114_full_n : STD_LOGIC;
    signal A_3_1114_write : STD_LOGIC;
    signal A_3_1114_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_1114_empty_n : STD_LOGIC;
    signal A_3_1114_read : STD_LOGIC;
    signal A_2_1115_U_ap_dummy_ce : STD_LOGIC;
    signal A_2_1115_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_1115_full_n : STD_LOGIC;
    signal A_2_1115_write : STD_LOGIC;
    signal A_2_1115_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_1115_empty_n : STD_LOGIC;
    signal A_2_1115_read : STD_LOGIC;
    signal A_7_6116_U_ap_dummy_ce : STD_LOGIC;
    signal A_7_6116_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_6116_full_n : STD_LOGIC;
    signal A_7_6116_write : STD_LOGIC;
    signal A_7_6116_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_6116_empty_n : STD_LOGIC;
    signal A_7_6116_read : STD_LOGIC;
    signal A_3_2117_U_ap_dummy_ce : STD_LOGIC;
    signal A_3_2117_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_2117_full_n : STD_LOGIC;
    signal A_3_2117_write : STD_LOGIC;
    signal A_3_2117_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_2117_empty_n : STD_LOGIC;
    signal A_3_2117_read : STD_LOGIC;
    signal A_7_1118_U_ap_dummy_ce : STD_LOGIC;
    signal A_7_1118_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_1118_full_n : STD_LOGIC;
    signal A_7_1118_write : STD_LOGIC;
    signal A_7_1118_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_1118_empty_n : STD_LOGIC;
    signal A_7_1118_read : STD_LOGIC;
    signal A_1_3119_U_ap_dummy_ce : STD_LOGIC;
    signal A_1_3119_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_3119_full_n : STD_LOGIC;
    signal A_1_3119_write : STD_LOGIC;
    signal A_1_3119_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_3119_empty_n : STD_LOGIC;
    signal A_1_3119_read : STD_LOGIC;
    signal A_6_1120_U_ap_dummy_ce : STD_LOGIC;
    signal A_6_1120_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_1120_full_n : STD_LOGIC;
    signal A_6_1120_write : STD_LOGIC;
    signal A_6_1120_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_1120_empty_n : STD_LOGIC;
    signal A_6_1120_read : STD_LOGIC;
    signal A_7_0121_U_ap_dummy_ce : STD_LOGIC;
    signal A_7_0121_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_0121_full_n : STD_LOGIC;
    signal A_7_0121_write : STD_LOGIC;
    signal A_7_0121_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_0121_empty_n : STD_LOGIC;
    signal A_7_0121_read : STD_LOGIC;
    signal A_2_6122_U_ap_dummy_ce : STD_LOGIC;
    signal A_2_6122_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_6122_full_n : STD_LOGIC;
    signal A_2_6122_write : STD_LOGIC;
    signal A_2_6122_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_6122_empty_n : STD_LOGIC;
    signal A_2_6122_read : STD_LOGIC;
    signal A_3_0123_U_ap_dummy_ce : STD_LOGIC;
    signal A_3_0123_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_0123_full_n : STD_LOGIC;
    signal A_3_0123_write : STD_LOGIC;
    signal A_3_0123_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_0123_empty_n : STD_LOGIC;
    signal A_3_0123_read : STD_LOGIC;
    signal A_3_7124_U_ap_dummy_ce : STD_LOGIC;
    signal A_3_7124_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_7124_full_n : STD_LOGIC;
    signal A_3_7124_write : STD_LOGIC;
    signal A_3_7124_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_7124_empty_n : STD_LOGIC;
    signal A_3_7124_read : STD_LOGIC;
    signal A_1_6125_U_ap_dummy_ce : STD_LOGIC;
    signal A_1_6125_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_6125_full_n : STD_LOGIC;
    signal A_1_6125_write : STD_LOGIC;
    signal A_1_6125_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_6125_empty_n : STD_LOGIC;
    signal A_1_6125_read : STD_LOGIC;
    signal A_1_0126_U_ap_dummy_ce : STD_LOGIC;
    signal A_1_0126_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_0126_full_n : STD_LOGIC;
    signal A_1_0126_write : STD_LOGIC;
    signal A_1_0126_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_0126_empty_n : STD_LOGIC;
    signal A_1_0126_read : STD_LOGIC;
    signal A_2_7127_U_ap_dummy_ce : STD_LOGIC;
    signal A_2_7127_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_7127_full_n : STD_LOGIC;
    signal A_2_7127_write : STD_LOGIC;
    signal A_2_7127_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_7127_empty_n : STD_LOGIC;
    signal A_2_7127_read : STD_LOGIC;
    signal A_3_5128_U_ap_dummy_ce : STD_LOGIC;
    signal A_3_5128_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_5128_full_n : STD_LOGIC;
    signal A_3_5128_write : STD_LOGIC;
    signal A_3_5128_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_5128_empty_n : STD_LOGIC;
    signal A_3_5128_read : STD_LOGIC;
    signal A_3_4129_U_ap_dummy_ce : STD_LOGIC;
    signal A_3_4129_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_4129_full_n : STD_LOGIC;
    signal A_3_4129_write : STD_LOGIC;
    signal A_3_4129_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_4129_empty_n : STD_LOGIC;
    signal A_3_4129_read : STD_LOGIC;
    signal A_3_3130_U_ap_dummy_ce : STD_LOGIC;
    signal A_3_3130_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_3130_full_n : STD_LOGIC;
    signal A_3_3130_write : STD_LOGIC;
    signal A_3_3130_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_3130_empty_n : STD_LOGIC;
    signal A_3_3130_read : STD_LOGIC;
    signal A_2_3131_U_ap_dummy_ce : STD_LOGIC;
    signal A_2_3131_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_3131_full_n : STD_LOGIC;
    signal A_2_3131_write : STD_LOGIC;
    signal A_2_3131_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_3131_empty_n : STD_LOGIC;
    signal A_2_3131_read : STD_LOGIC;
    signal A_5_5132_U_ap_dummy_ce : STD_LOGIC;
    signal A_5_5132_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_5132_full_n : STD_LOGIC;
    signal A_5_5132_write : STD_LOGIC;
    signal A_5_5132_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_5132_empty_n : STD_LOGIC;
    signal A_5_5132_read : STD_LOGIC;
    signal A_4_5133_U_ap_dummy_ce : STD_LOGIC;
    signal A_4_5133_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_5133_full_n : STD_LOGIC;
    signal A_4_5133_write : STD_LOGIC;
    signal A_4_5133_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_5133_empty_n : STD_LOGIC;
    signal A_4_5133_read : STD_LOGIC;
    signal A_2_2134_U_ap_dummy_ce : STD_LOGIC;
    signal A_2_2134_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_2134_full_n : STD_LOGIC;
    signal A_2_2134_write : STD_LOGIC;
    signal A_2_2134_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_2134_empty_n : STD_LOGIC;
    signal A_2_2134_read : STD_LOGIC;
    signal B_cached_0_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_0_channel_write : STD_LOGIC;
    signal B_cached_0_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_0_channel_empty_n : STD_LOGIC;
    signal B_cached_0_0_channel_read : STD_LOGIC;
    signal B_cached_0_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_1_channel_write : STD_LOGIC;
    signal B_cached_0_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_1_channel_empty_n : STD_LOGIC;
    signal B_cached_0_1_channel_read : STD_LOGIC;
    signal B_cached_0_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_2_channel_write : STD_LOGIC;
    signal B_cached_0_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_2_channel_empty_n : STD_LOGIC;
    signal B_cached_0_2_channel_read : STD_LOGIC;
    signal B_cached_0_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_3_channel_write : STD_LOGIC;
    signal B_cached_0_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_3_channel_empty_n : STD_LOGIC;
    signal B_cached_0_3_channel_read : STD_LOGIC;
    signal B_cached_0_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_4_channel_write : STD_LOGIC;
    signal B_cached_0_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_4_channel_empty_n : STD_LOGIC;
    signal B_cached_0_4_channel_read : STD_LOGIC;
    signal B_cached_0_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_5_channel_write : STD_LOGIC;
    signal B_cached_0_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_5_channel_empty_n : STD_LOGIC;
    signal B_cached_0_5_channel_read : STD_LOGIC;
    signal B_cached_0_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_6_channel_write : STD_LOGIC;
    signal B_cached_0_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_6_channel_empty_n : STD_LOGIC;
    signal B_cached_0_6_channel_read : STD_LOGIC;
    signal B_cached_0_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_7_channel_write : STD_LOGIC;
    signal B_cached_0_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_7_channel_empty_n : STD_LOGIC;
    signal B_cached_0_7_channel_read : STD_LOGIC;
    signal B_cached_1_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_0_channel_write : STD_LOGIC;
    signal B_cached_1_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_0_channel_empty_n : STD_LOGIC;
    signal B_cached_1_0_channel_read : STD_LOGIC;
    signal B_cached_1_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_1_channel_write : STD_LOGIC;
    signal B_cached_1_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_1_channel_empty_n : STD_LOGIC;
    signal B_cached_1_1_channel_read : STD_LOGIC;
    signal B_cached_1_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_2_channel_write : STD_LOGIC;
    signal B_cached_1_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_2_channel_empty_n : STD_LOGIC;
    signal B_cached_1_2_channel_read : STD_LOGIC;
    signal B_cached_1_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_3_channel_write : STD_LOGIC;
    signal B_cached_1_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_3_channel_empty_n : STD_LOGIC;
    signal B_cached_1_3_channel_read : STD_LOGIC;
    signal B_cached_1_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_4_channel_write : STD_LOGIC;
    signal B_cached_1_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_4_channel_empty_n : STD_LOGIC;
    signal B_cached_1_4_channel_read : STD_LOGIC;
    signal B_cached_1_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_5_channel_write : STD_LOGIC;
    signal B_cached_1_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_5_channel_empty_n : STD_LOGIC;
    signal B_cached_1_5_channel_read : STD_LOGIC;
    signal B_cached_1_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_6_channel_write : STD_LOGIC;
    signal B_cached_1_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_6_channel_empty_n : STD_LOGIC;
    signal B_cached_1_6_channel_read : STD_LOGIC;
    signal B_cached_1_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_7_channel_write : STD_LOGIC;
    signal B_cached_1_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_7_channel_empty_n : STD_LOGIC;
    signal B_cached_1_7_channel_read : STD_LOGIC;
    signal B_cached_2_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_0_channel_write : STD_LOGIC;
    signal B_cached_2_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_0_channel_empty_n : STD_LOGIC;
    signal B_cached_2_0_channel_read : STD_LOGIC;
    signal B_cached_2_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_1_channel_write : STD_LOGIC;
    signal B_cached_2_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_1_channel_empty_n : STD_LOGIC;
    signal B_cached_2_1_channel_read : STD_LOGIC;
    signal B_cached_2_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_2_channel_write : STD_LOGIC;
    signal B_cached_2_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_2_channel_empty_n : STD_LOGIC;
    signal B_cached_2_2_channel_read : STD_LOGIC;
    signal B_cached_2_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_3_channel_write : STD_LOGIC;
    signal B_cached_2_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_3_channel_empty_n : STD_LOGIC;
    signal B_cached_2_3_channel_read : STD_LOGIC;
    signal B_cached_2_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_4_channel_write : STD_LOGIC;
    signal B_cached_2_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_4_channel_empty_n : STD_LOGIC;
    signal B_cached_2_4_channel_read : STD_LOGIC;
    signal B_cached_2_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_5_channel_write : STD_LOGIC;
    signal B_cached_2_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_5_channel_empty_n : STD_LOGIC;
    signal B_cached_2_5_channel_read : STD_LOGIC;
    signal B_cached_2_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_6_channel_write : STD_LOGIC;
    signal B_cached_2_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_6_channel_empty_n : STD_LOGIC;
    signal B_cached_2_6_channel_read : STD_LOGIC;
    signal B_cached_2_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_7_channel_write : STD_LOGIC;
    signal B_cached_2_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_7_channel_empty_n : STD_LOGIC;
    signal B_cached_2_7_channel_read : STD_LOGIC;
    signal B_cached_3_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_0_channel_write : STD_LOGIC;
    signal B_cached_3_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_0_channel_empty_n : STD_LOGIC;
    signal B_cached_3_0_channel_read : STD_LOGIC;
    signal B_cached_3_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_1_channel_write : STD_LOGIC;
    signal B_cached_3_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_1_channel_empty_n : STD_LOGIC;
    signal B_cached_3_1_channel_read : STD_LOGIC;
    signal B_cached_3_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_2_channel_write : STD_LOGIC;
    signal B_cached_3_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_2_channel_empty_n : STD_LOGIC;
    signal B_cached_3_2_channel_read : STD_LOGIC;
    signal B_cached_3_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_3_channel_write : STD_LOGIC;
    signal B_cached_3_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_3_channel_empty_n : STD_LOGIC;
    signal B_cached_3_3_channel_read : STD_LOGIC;
    signal B_cached_3_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_4_channel_write : STD_LOGIC;
    signal B_cached_3_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_4_channel_empty_n : STD_LOGIC;
    signal B_cached_3_4_channel_read : STD_LOGIC;
    signal B_cached_3_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_5_channel_write : STD_LOGIC;
    signal B_cached_3_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_5_channel_empty_n : STD_LOGIC;
    signal B_cached_3_5_channel_read : STD_LOGIC;
    signal B_cached_3_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_6_channel_write : STD_LOGIC;
    signal B_cached_3_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_6_channel_empty_n : STD_LOGIC;
    signal B_cached_3_6_channel_read : STD_LOGIC;
    signal B_cached_3_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_7_channel_write : STD_LOGIC;
    signal B_cached_3_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_7_channel_empty_n : STD_LOGIC;
    signal B_cached_3_7_channel_read : STD_LOGIC;
    signal B_cached_4_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_0_channel_write : STD_LOGIC;
    signal B_cached_4_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_0_channel_empty_n : STD_LOGIC;
    signal B_cached_4_0_channel_read : STD_LOGIC;
    signal B_cached_4_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_1_channel_write : STD_LOGIC;
    signal B_cached_4_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_1_channel_empty_n : STD_LOGIC;
    signal B_cached_4_1_channel_read : STD_LOGIC;
    signal B_cached_4_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_2_channel_write : STD_LOGIC;
    signal B_cached_4_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_2_channel_empty_n : STD_LOGIC;
    signal B_cached_4_2_channel_read : STD_LOGIC;
    signal B_cached_4_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_3_channel_write : STD_LOGIC;
    signal B_cached_4_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_3_channel_empty_n : STD_LOGIC;
    signal B_cached_4_3_channel_read : STD_LOGIC;
    signal B_cached_4_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_4_channel_write : STD_LOGIC;
    signal B_cached_4_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_4_channel_empty_n : STD_LOGIC;
    signal B_cached_4_4_channel_read : STD_LOGIC;
    signal B_cached_4_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_5_channel_write : STD_LOGIC;
    signal B_cached_4_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_5_channel_empty_n : STD_LOGIC;
    signal B_cached_4_5_channel_read : STD_LOGIC;
    signal B_cached_4_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_6_channel_write : STD_LOGIC;
    signal B_cached_4_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_6_channel_empty_n : STD_LOGIC;
    signal B_cached_4_6_channel_read : STD_LOGIC;
    signal B_cached_4_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_7_channel_write : STD_LOGIC;
    signal B_cached_4_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_7_channel_empty_n : STD_LOGIC;
    signal B_cached_4_7_channel_read : STD_LOGIC;
    signal B_cached_5_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_0_channel_write : STD_LOGIC;
    signal B_cached_5_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_0_channel_empty_n : STD_LOGIC;
    signal B_cached_5_0_channel_read : STD_LOGIC;
    signal B_cached_5_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_1_channel_write : STD_LOGIC;
    signal B_cached_5_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_1_channel_empty_n : STD_LOGIC;
    signal B_cached_5_1_channel_read : STD_LOGIC;
    signal B_cached_5_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_2_channel_write : STD_LOGIC;
    signal B_cached_5_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_2_channel_empty_n : STD_LOGIC;
    signal B_cached_5_2_channel_read : STD_LOGIC;
    signal B_cached_5_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_3_channel_write : STD_LOGIC;
    signal B_cached_5_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_3_channel_empty_n : STD_LOGIC;
    signal B_cached_5_3_channel_read : STD_LOGIC;
    signal B_cached_5_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_4_channel_write : STD_LOGIC;
    signal B_cached_5_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_4_channel_empty_n : STD_LOGIC;
    signal B_cached_5_4_channel_read : STD_LOGIC;
    signal B_cached_5_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_5_channel_write : STD_LOGIC;
    signal B_cached_5_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_5_channel_empty_n : STD_LOGIC;
    signal B_cached_5_5_channel_read : STD_LOGIC;
    signal B_cached_5_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_6_channel_write : STD_LOGIC;
    signal B_cached_5_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_6_channel_empty_n : STD_LOGIC;
    signal B_cached_5_6_channel_read : STD_LOGIC;
    signal B_cached_5_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_7_channel_write : STD_LOGIC;
    signal B_cached_5_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_7_channel_empty_n : STD_LOGIC;
    signal B_cached_5_7_channel_read : STD_LOGIC;
    signal B_cached_6_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_0_channel_write : STD_LOGIC;
    signal B_cached_6_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_0_channel_empty_n : STD_LOGIC;
    signal B_cached_6_0_channel_read : STD_LOGIC;
    signal B_cached_6_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_1_channel_write : STD_LOGIC;
    signal B_cached_6_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_1_channel_empty_n : STD_LOGIC;
    signal B_cached_6_1_channel_read : STD_LOGIC;
    signal B_cached_6_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_2_channel_write : STD_LOGIC;
    signal B_cached_6_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_2_channel_empty_n : STD_LOGIC;
    signal B_cached_6_2_channel_read : STD_LOGIC;
    signal B_cached_6_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_3_channel_write : STD_LOGIC;
    signal B_cached_6_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_3_channel_empty_n : STD_LOGIC;
    signal B_cached_6_3_channel_read : STD_LOGIC;
    signal B_cached_6_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_4_channel_write : STD_LOGIC;
    signal B_cached_6_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_4_channel_empty_n : STD_LOGIC;
    signal B_cached_6_4_channel_read : STD_LOGIC;
    signal B_cached_6_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_5_channel_write : STD_LOGIC;
    signal B_cached_6_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_5_channel_empty_n : STD_LOGIC;
    signal B_cached_6_5_channel_read : STD_LOGIC;
    signal B_cached_6_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_6_channel_write : STD_LOGIC;
    signal B_cached_6_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_6_channel_empty_n : STD_LOGIC;
    signal B_cached_6_6_channel_read : STD_LOGIC;
    signal B_cached_6_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_7_channel_write : STD_LOGIC;
    signal B_cached_6_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_7_channel_empty_n : STD_LOGIC;
    signal B_cached_6_7_channel_read : STD_LOGIC;
    signal B_cached_7_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_0_channel_write : STD_LOGIC;
    signal B_cached_7_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_0_channel_empty_n : STD_LOGIC;
    signal B_cached_7_0_channel_read : STD_LOGIC;
    signal B_cached_7_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_1_channel_write : STD_LOGIC;
    signal B_cached_7_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_1_channel_empty_n : STD_LOGIC;
    signal B_cached_7_1_channel_read : STD_LOGIC;
    signal B_cached_7_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_2_channel_write : STD_LOGIC;
    signal B_cached_7_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_2_channel_empty_n : STD_LOGIC;
    signal B_cached_7_2_channel_read : STD_LOGIC;
    signal B_cached_7_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_3_channel_write : STD_LOGIC;
    signal B_cached_7_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_3_channel_empty_n : STD_LOGIC;
    signal B_cached_7_3_channel_read : STD_LOGIC;
    signal B_cached_7_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_4_channel_write : STD_LOGIC;
    signal B_cached_7_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_4_channel_empty_n : STD_LOGIC;
    signal B_cached_7_4_channel_read : STD_LOGIC;
    signal B_cached_7_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_5_channel_write : STD_LOGIC;
    signal B_cached_7_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_5_channel_empty_n : STD_LOGIC;
    signal B_cached_7_5_channel_read : STD_LOGIC;
    signal B_cached_7_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_6_channel_write : STD_LOGIC;
    signal B_cached_7_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_6_channel_empty_n : STD_LOGIC;
    signal B_cached_7_6_channel_read : STD_LOGIC;
    signal B_cached_7_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_7_channel_write : STD_LOGIC;
    signal B_cached_7_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_7_channel_empty_n : STD_LOGIC;
    signal B_cached_7_7_channel_read : STD_LOGIC;
    signal ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc440_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component DCT_MAT_Multiply_Loop_LoadRow_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_empty_n : IN STD_LOGIC;
        B_read : OUT STD_LOGIC;
        p_read64 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read191 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read192 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read193 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read196 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read199 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read200 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read201 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read202 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read203 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read204 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read205 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read206 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read207 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read208 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read209 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read211 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read212 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read213 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read214 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read215 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read216 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read218 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read219 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read220 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read221 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read222 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read223 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read224 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read225 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read226 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read227 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read228 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read229 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read230 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read232 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read233 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read234 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read235 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read236 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read237 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read238 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read239 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read240 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read241 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read242 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read243 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read244 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read245 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read246 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read247 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read248 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read250 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read252 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_1_out_full_n : IN STD_LOGIC;
        A_5_1_out_write : OUT STD_LOGIC;
        A_6_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_2_out_full_n : IN STD_LOGIC;
        A_6_2_out_write : OUT STD_LOGIC;
        A_4_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_1_out_full_n : IN STD_LOGIC;
        A_4_1_out_write : OUT STD_LOGIC;
        A_5_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_0_out_full_n : IN STD_LOGIC;
        A_5_0_out_write : OUT STD_LOGIC;
        A_6_6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_6_out_full_n : IN STD_LOGIC;
        A_6_6_out_write : OUT STD_LOGIC;
        A_4_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_0_out_full_n : IN STD_LOGIC;
        A_4_0_out_write : OUT STD_LOGIC;
        A_1_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_2_out_full_n : IN STD_LOGIC;
        A_1_2_out_write : OUT STD_LOGIC;
        A_1_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_1_out_full_n : IN STD_LOGIC;
        A_1_1_out_write : OUT STD_LOGIC;
        A_7_7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_7_out_full_n : IN STD_LOGIC;
        A_7_7_out_write : OUT STD_LOGIC;
        A_3_6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_6_out_full_n : IN STD_LOGIC;
        A_3_6_out_write : OUT STD_LOGIC;
        A_5_6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_6_out_full_n : IN STD_LOGIC;
        A_5_6_out_write : OUT STD_LOGIC;
        A_1_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_5_out_full_n : IN STD_LOGIC;
        A_1_5_out_write : OUT STD_LOGIC;
        A_6_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_4_out_full_n : IN STD_LOGIC;
        A_6_4_out_write : OUT STD_LOGIC;
        A_4_7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_7_out_full_n : IN STD_LOGIC;
        A_4_7_out_write : OUT STD_LOGIC;
        A_0_7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_7_out_full_n : IN STD_LOGIC;
        A_0_7_out_write : OUT STD_LOGIC;
        A_7_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_5_out_full_n : IN STD_LOGIC;
        A_7_5_out_write : OUT STD_LOGIC;
        A_2_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_0_out_full_n : IN STD_LOGIC;
        A_2_0_out_write : OUT STD_LOGIC;
        A_1_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_4_out_full_n : IN STD_LOGIC;
        A_1_4_out_write : OUT STD_LOGIC;
        A_0_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_1_out_full_n : IN STD_LOGIC;
        A_0_1_out_write : OUT STD_LOGIC;
        A_0_6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_6_out_full_n : IN STD_LOGIC;
        A_0_6_out_write : OUT STD_LOGIC;
        A_0_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_0_out_full_n : IN STD_LOGIC;
        A_0_0_out_write : OUT STD_LOGIC;
        A_0_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_5_out_full_n : IN STD_LOGIC;
        A_0_5_out_write : OUT STD_LOGIC;
        A_5_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_3_out_full_n : IN STD_LOGIC;
        A_5_3_out_write : OUT STD_LOGIC;
        A_4_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_3_out_full_n : IN STD_LOGIC;
        A_4_3_out_write : OUT STD_LOGIC;
        A_4_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_2_out_full_n : IN STD_LOGIC;
        A_4_2_out_write : OUT STD_LOGIC;
        A_2_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_5_out_full_n : IN STD_LOGIC;
        A_2_5_out_write : OUT STD_LOGIC;
        A_5_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_4_out_full_n : IN STD_LOGIC;
        A_5_4_out_write : OUT STD_LOGIC;
        A_4_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_4_out_full_n : IN STD_LOGIC;
        A_4_4_out_write : OUT STD_LOGIC;
        A_5_7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_7_out_full_n : IN STD_LOGIC;
        A_5_7_out_write : OUT STD_LOGIC;
        A_6_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_3_out_full_n : IN STD_LOGIC;
        A_6_3_out_write : OUT STD_LOGIC;
        A_1_7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_7_out_full_n : IN STD_LOGIC;
        A_1_7_out_write : OUT STD_LOGIC;
        A_6_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_5_out_full_n : IN STD_LOGIC;
        A_6_5_out_write : OUT STD_LOGIC;
        A_6_7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_7_out_full_n : IN STD_LOGIC;
        A_6_7_out_write : OUT STD_LOGIC;
        A_5_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_2_out_full_n : IN STD_LOGIC;
        A_5_2_out_write : OUT STD_LOGIC;
        A_6_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_0_out_full_n : IN STD_LOGIC;
        A_6_0_out_write : OUT STD_LOGIC;
        A_0_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_2_out_full_n : IN STD_LOGIC;
        A_0_2_out_write : OUT STD_LOGIC;
        A_7_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_2_out_full_n : IN STD_LOGIC;
        A_7_2_out_write : OUT STD_LOGIC;
        A_0_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_3_out_full_n : IN STD_LOGIC;
        A_0_3_out_write : OUT STD_LOGIC;
        A_7_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_3_out_full_n : IN STD_LOGIC;
        A_7_3_out_write : OUT STD_LOGIC;
        A_2_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_4_out_full_n : IN STD_LOGIC;
        A_2_4_out_write : OUT STD_LOGIC;
        A_4_6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_6_out_full_n : IN STD_LOGIC;
        A_4_6_out_write : OUT STD_LOGIC;
        A_0_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_4_out_full_n : IN STD_LOGIC;
        A_0_4_out_write : OUT STD_LOGIC;
        A_7_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_4_out_full_n : IN STD_LOGIC;
        A_7_4_out_write : OUT STD_LOGIC;
        A_3_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_1_out_full_n : IN STD_LOGIC;
        A_3_1_out_write : OUT STD_LOGIC;
        A_2_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_1_out_full_n : IN STD_LOGIC;
        A_2_1_out_write : OUT STD_LOGIC;
        A_7_6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_6_out_full_n : IN STD_LOGIC;
        A_7_6_out_write : OUT STD_LOGIC;
        A_3_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_2_out_full_n : IN STD_LOGIC;
        A_3_2_out_write : OUT STD_LOGIC;
        A_7_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_1_out_full_n : IN STD_LOGIC;
        A_7_1_out_write : OUT STD_LOGIC;
        A_1_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_3_out_full_n : IN STD_LOGIC;
        A_1_3_out_write : OUT STD_LOGIC;
        A_6_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_1_out_full_n : IN STD_LOGIC;
        A_6_1_out_write : OUT STD_LOGIC;
        A_7_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_0_out_full_n : IN STD_LOGIC;
        A_7_0_out_write : OUT STD_LOGIC;
        A_2_6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_6_out_full_n : IN STD_LOGIC;
        A_2_6_out_write : OUT STD_LOGIC;
        A_3_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_0_out_full_n : IN STD_LOGIC;
        A_3_0_out_write : OUT STD_LOGIC;
        A_3_7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_7_out_full_n : IN STD_LOGIC;
        A_3_7_out_write : OUT STD_LOGIC;
        A_1_6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_6_out_full_n : IN STD_LOGIC;
        A_1_6_out_write : OUT STD_LOGIC;
        A_1_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_0_out_full_n : IN STD_LOGIC;
        A_1_0_out_write : OUT STD_LOGIC;
        A_2_7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_7_out_full_n : IN STD_LOGIC;
        A_2_7_out_write : OUT STD_LOGIC;
        A_3_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_5_out_full_n : IN STD_LOGIC;
        A_3_5_out_write : OUT STD_LOGIC;
        A_3_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_4_out_full_n : IN STD_LOGIC;
        A_3_4_out_write : OUT STD_LOGIC;
        A_3_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_3_out_full_n : IN STD_LOGIC;
        A_3_3_out_write : OUT STD_LOGIC;
        A_2_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_3_out_full_n : IN STD_LOGIC;
        A_2_3_out_write : OUT STD_LOGIC;
        A_5_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_5_out_full_n : IN STD_LOGIC;
        A_5_5_out_write : OUT STD_LOGIC;
        A_4_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_5_out_full_n : IN STD_LOGIC;
        A_4_5_out_write : OUT STD_LOGIC;
        A_2_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_2_out_full_n : IN STD_LOGIC;
        A_2_2_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_52 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_53 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_54 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_55 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_56 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_57 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_58 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_59 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_60 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_61 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_62 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_63 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_MAT_Multiply_Loop_Row_proc440 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_0_empty_n : IN STD_LOGIC;
        A_0_0_read : OUT STD_LOGIC;
        A_1_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_0_empty_n : IN STD_LOGIC;
        A_1_0_read : OUT STD_LOGIC;
        A_2_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_0_empty_n : IN STD_LOGIC;
        A_2_0_read : OUT STD_LOGIC;
        A_3_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_0_empty_n : IN STD_LOGIC;
        A_3_0_read : OUT STD_LOGIC;
        A_4_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_0_empty_n : IN STD_LOGIC;
        A_4_0_read : OUT STD_LOGIC;
        A_5_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_0_empty_n : IN STD_LOGIC;
        A_5_0_read : OUT STD_LOGIC;
        A_6_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_0_empty_n : IN STD_LOGIC;
        A_6_0_read : OUT STD_LOGIC;
        A_7_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_0_empty_n : IN STD_LOGIC;
        A_7_0_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_1_empty_n : IN STD_LOGIC;
        A_0_1_read : OUT STD_LOGIC;
        A_1_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_1_empty_n : IN STD_LOGIC;
        A_1_1_read : OUT STD_LOGIC;
        A_2_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_1_empty_n : IN STD_LOGIC;
        A_2_1_read : OUT STD_LOGIC;
        A_3_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_1_empty_n : IN STD_LOGIC;
        A_3_1_read : OUT STD_LOGIC;
        A_4_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_1_empty_n : IN STD_LOGIC;
        A_4_1_read : OUT STD_LOGIC;
        A_5_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_1_empty_n : IN STD_LOGIC;
        A_5_1_read : OUT STD_LOGIC;
        A_6_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_1_empty_n : IN STD_LOGIC;
        A_6_1_read : OUT STD_LOGIC;
        A_7_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_1_empty_n : IN STD_LOGIC;
        A_7_1_read : OUT STD_LOGIC;
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_2_empty_n : IN STD_LOGIC;
        A_0_2_read : OUT STD_LOGIC;
        A_1_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_2_empty_n : IN STD_LOGIC;
        A_1_2_read : OUT STD_LOGIC;
        A_2_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_2_empty_n : IN STD_LOGIC;
        A_2_2_read : OUT STD_LOGIC;
        A_3_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_2_empty_n : IN STD_LOGIC;
        A_3_2_read : OUT STD_LOGIC;
        A_4_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_2_empty_n : IN STD_LOGIC;
        A_4_2_read : OUT STD_LOGIC;
        A_5_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_2_empty_n : IN STD_LOGIC;
        A_5_2_read : OUT STD_LOGIC;
        A_6_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_2_empty_n : IN STD_LOGIC;
        A_6_2_read : OUT STD_LOGIC;
        A_7_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_2_empty_n : IN STD_LOGIC;
        A_7_2_read : OUT STD_LOGIC;
        p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_3_empty_n : IN STD_LOGIC;
        A_0_3_read : OUT STD_LOGIC;
        A_1_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_3_empty_n : IN STD_LOGIC;
        A_1_3_read : OUT STD_LOGIC;
        A_2_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_3_empty_n : IN STD_LOGIC;
        A_2_3_read : OUT STD_LOGIC;
        A_3_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_3_empty_n : IN STD_LOGIC;
        A_3_3_read : OUT STD_LOGIC;
        A_4_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_3_empty_n : IN STD_LOGIC;
        A_4_3_read : OUT STD_LOGIC;
        A_5_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_3_empty_n : IN STD_LOGIC;
        A_5_3_read : OUT STD_LOGIC;
        A_6_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_3_empty_n : IN STD_LOGIC;
        A_6_3_read : OUT STD_LOGIC;
        A_7_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_3_empty_n : IN STD_LOGIC;
        A_7_3_read : OUT STD_LOGIC;
        p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_4_empty_n : IN STD_LOGIC;
        A_0_4_read : OUT STD_LOGIC;
        A_1_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_4_empty_n : IN STD_LOGIC;
        A_1_4_read : OUT STD_LOGIC;
        A_2_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_4_empty_n : IN STD_LOGIC;
        A_2_4_read : OUT STD_LOGIC;
        A_3_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_4_empty_n : IN STD_LOGIC;
        A_3_4_read : OUT STD_LOGIC;
        A_4_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_4_empty_n : IN STD_LOGIC;
        A_4_4_read : OUT STD_LOGIC;
        A_5_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_4_empty_n : IN STD_LOGIC;
        A_5_4_read : OUT STD_LOGIC;
        A_6_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_4_empty_n : IN STD_LOGIC;
        A_6_4_read : OUT STD_LOGIC;
        A_7_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_4_empty_n : IN STD_LOGIC;
        A_7_4_read : OUT STD_LOGIC;
        p_read32 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read33 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read34 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read35 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read36 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read37 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read38 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read39 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_5_empty_n : IN STD_LOGIC;
        A_0_5_read : OUT STD_LOGIC;
        A_1_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_5_empty_n : IN STD_LOGIC;
        A_1_5_read : OUT STD_LOGIC;
        A_2_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_5_empty_n : IN STD_LOGIC;
        A_2_5_read : OUT STD_LOGIC;
        A_3_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_5_empty_n : IN STD_LOGIC;
        A_3_5_read : OUT STD_LOGIC;
        A_4_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_5_empty_n : IN STD_LOGIC;
        A_4_5_read : OUT STD_LOGIC;
        A_5_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_5_empty_n : IN STD_LOGIC;
        A_5_5_read : OUT STD_LOGIC;
        A_6_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_5_empty_n : IN STD_LOGIC;
        A_6_5_read : OUT STD_LOGIC;
        A_7_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_5_empty_n : IN STD_LOGIC;
        A_7_5_read : OUT STD_LOGIC;
        p_read40 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read41 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read42 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read43 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read44 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read45 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read46 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read47 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_6_empty_n : IN STD_LOGIC;
        A_0_6_read : OUT STD_LOGIC;
        A_1_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_6_empty_n : IN STD_LOGIC;
        A_1_6_read : OUT STD_LOGIC;
        A_2_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_6_empty_n : IN STD_LOGIC;
        A_2_6_read : OUT STD_LOGIC;
        A_3_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_6_empty_n : IN STD_LOGIC;
        A_3_6_read : OUT STD_LOGIC;
        A_4_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_6_empty_n : IN STD_LOGIC;
        A_4_6_read : OUT STD_LOGIC;
        A_5_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_6_empty_n : IN STD_LOGIC;
        A_5_6_read : OUT STD_LOGIC;
        A_6_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_6_empty_n : IN STD_LOGIC;
        A_6_6_read : OUT STD_LOGIC;
        A_7_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_6_empty_n : IN STD_LOGIC;
        A_7_6_read : OUT STD_LOGIC;
        p_read48 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read49 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read50 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read51 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read52 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read53 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read54 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read55 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_7_empty_n : IN STD_LOGIC;
        A_0_7_read : OUT STD_LOGIC;
        A_1_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_7_empty_n : IN STD_LOGIC;
        A_1_7_read : OUT STD_LOGIC;
        A_2_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_7_empty_n : IN STD_LOGIC;
        A_2_7_read : OUT STD_LOGIC;
        A_3_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_7_empty_n : IN STD_LOGIC;
        A_3_7_read : OUT STD_LOGIC;
        A_4_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_7_empty_n : IN STD_LOGIC;
        A_4_7_read : OUT STD_LOGIC;
        A_5_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_7_empty_n : IN STD_LOGIC;
        A_5_7_read : OUT STD_LOGIC;
        A_6_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_7_empty_n : IN STD_LOGIC;
        A_6_7_read : OUT STD_LOGIC;
        A_7_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_7_empty_n : IN STD_LOGIC;
        A_7_7_read : OUT STD_LOGIC;
        p_read56 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read57 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read58 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read59 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read60 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read61 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read62 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read63 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FIFO_DCT_MAT_Multiply_A_5_171 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_6_272 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_4_173 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_5_074 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_6_675 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_4_076 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_1_277 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_1_178 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_7_779 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_3_680 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_5_681 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_1_582 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_6_483 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_4_784 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_0_785 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_7_586 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_2_087 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_1_488 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_0_189 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_0_690 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_0_091 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_0_592 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_5_393 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_4_394 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_4_295 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_2_596 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_5_497 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_4_498 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_5_799 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_6_3100 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_1_7101 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_6_5102 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_6_7103 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_5_2104 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_6_0105 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_0_2106 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_7_2107 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_0_3108 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_7_3109 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_2_4110 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_4_6111 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_0_4112 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_7_4113 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_3_1114 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_2_1115 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_7_6116 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_3_2117 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_7_1118 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_1_3119 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_6_1120 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_7_0121 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_2_6122 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_3_0123 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_3_7124 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_1_6125 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_1_0126 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_2_7127 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_3_5128 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_3_4129 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_3_3130 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_2_3131 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_5_5132 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_4_5133 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_A_2_2134 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0 : component DCT_MAT_Multiply_Loop_LoadRow_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start,
        ap_done => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done,
        ap_continue => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue,
        ap_idle => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle,
        ap_ready => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready,
        B_dout => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout,
        B_empty_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n,
        B_read => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_read,
        p_read64 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read64,
        p_read191 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read191,
        p_read192 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read192,
        p_read193 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read193,
        p_read196 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read196,
        p_read199 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read199,
        p_read200 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read200,
        p_read201 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read201,
        p_read202 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read202,
        p_read203 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read203,
        p_read204 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read204,
        p_read205 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read205,
        p_read206 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read206,
        p_read207 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read207,
        p_read208 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read208,
        p_read209 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read209,
        p_read211 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read211,
        p_read212 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read212,
        p_read213 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read213,
        p_read214 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read214,
        p_read215 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read215,
        p_read216 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read216,
        p_read218 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read218,
        p_read219 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read219,
        p_read220 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read220,
        p_read221 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read221,
        p_read222 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read222,
        p_read223 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read223,
        p_read224 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read224,
        p_read225 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read225,
        p_read226 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read226,
        p_read227 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read227,
        p_read228 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read228,
        p_read229 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read229,
        p_read230 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read230,
        p_read232 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read232,
        p_read233 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read233,
        p_read234 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read234,
        p_read235 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read235,
        p_read236 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read236,
        p_read237 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read237,
        p_read238 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read238,
        p_read239 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read239,
        p_read240 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read240,
        p_read241 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read241,
        p_read242 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read242,
        p_read243 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read243,
        p_read244 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read244,
        p_read245 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read245,
        p_read246 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read246,
        p_read247 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read247,
        p_read248 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read248,
        p_read250 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read250,
        p_read252 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read252,
        A_5_1_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_din,
        A_5_1_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_full_n,
        A_5_1_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_write,
        A_6_2_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_din,
        A_6_2_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_full_n,
        A_6_2_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_write,
        A_4_1_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_din,
        A_4_1_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_full_n,
        A_4_1_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_write,
        A_5_0_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_din,
        A_5_0_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_full_n,
        A_5_0_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_write,
        A_6_6_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_din,
        A_6_6_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_full_n,
        A_6_6_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_write,
        A_4_0_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_din,
        A_4_0_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_full_n,
        A_4_0_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_write,
        A_1_2_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_din,
        A_1_2_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_full_n,
        A_1_2_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_write,
        A_1_1_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_din,
        A_1_1_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_full_n,
        A_1_1_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_write,
        A_7_7_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_din,
        A_7_7_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_full_n,
        A_7_7_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_write,
        A_3_6_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_din,
        A_3_6_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_full_n,
        A_3_6_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_write,
        A_5_6_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_din,
        A_5_6_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_full_n,
        A_5_6_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_write,
        A_1_5_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_din,
        A_1_5_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_full_n,
        A_1_5_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_write,
        A_6_4_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_din,
        A_6_4_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_full_n,
        A_6_4_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_write,
        A_4_7_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_din,
        A_4_7_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_full_n,
        A_4_7_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_write,
        A_0_7_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_din,
        A_0_7_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_full_n,
        A_0_7_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_write,
        A_7_5_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_din,
        A_7_5_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_full_n,
        A_7_5_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_write,
        A_2_0_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_din,
        A_2_0_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_full_n,
        A_2_0_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_write,
        A_1_4_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_din,
        A_1_4_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_full_n,
        A_1_4_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_write,
        A_0_1_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_din,
        A_0_1_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_full_n,
        A_0_1_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_write,
        A_0_6_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_din,
        A_0_6_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_full_n,
        A_0_6_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_write,
        A_0_0_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_din,
        A_0_0_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_full_n,
        A_0_0_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_write,
        A_0_5_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_din,
        A_0_5_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_full_n,
        A_0_5_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_write,
        A_5_3_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_din,
        A_5_3_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_full_n,
        A_5_3_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_write,
        A_4_3_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_din,
        A_4_3_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_full_n,
        A_4_3_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_write,
        A_4_2_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_din,
        A_4_2_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_full_n,
        A_4_2_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_write,
        A_2_5_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_din,
        A_2_5_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_full_n,
        A_2_5_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_write,
        A_5_4_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_din,
        A_5_4_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_full_n,
        A_5_4_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_write,
        A_4_4_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_din,
        A_4_4_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_full_n,
        A_4_4_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_write,
        A_5_7_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_din,
        A_5_7_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_full_n,
        A_5_7_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_write,
        A_6_3_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_din,
        A_6_3_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_full_n,
        A_6_3_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_write,
        A_1_7_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_din,
        A_1_7_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_full_n,
        A_1_7_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_write,
        A_6_5_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_din,
        A_6_5_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_full_n,
        A_6_5_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_write,
        A_6_7_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_din,
        A_6_7_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_full_n,
        A_6_7_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_write,
        A_5_2_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_din,
        A_5_2_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_full_n,
        A_5_2_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_write,
        A_6_0_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_din,
        A_6_0_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_full_n,
        A_6_0_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_write,
        A_0_2_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_din,
        A_0_2_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_full_n,
        A_0_2_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_write,
        A_7_2_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_din,
        A_7_2_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_full_n,
        A_7_2_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_write,
        A_0_3_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_din,
        A_0_3_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_full_n,
        A_0_3_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_write,
        A_7_3_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_din,
        A_7_3_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_full_n,
        A_7_3_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_write,
        A_2_4_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_din,
        A_2_4_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_full_n,
        A_2_4_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_write,
        A_4_6_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_din,
        A_4_6_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_full_n,
        A_4_6_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_write,
        A_0_4_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_din,
        A_0_4_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_full_n,
        A_0_4_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_write,
        A_7_4_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_din,
        A_7_4_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_full_n,
        A_7_4_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_write,
        A_3_1_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_din,
        A_3_1_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_full_n,
        A_3_1_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_write,
        A_2_1_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_din,
        A_2_1_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_full_n,
        A_2_1_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_write,
        A_7_6_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_din,
        A_7_6_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_full_n,
        A_7_6_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_write,
        A_3_2_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_din,
        A_3_2_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_full_n,
        A_3_2_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_write,
        A_7_1_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_din,
        A_7_1_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_full_n,
        A_7_1_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_write,
        A_1_3_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_din,
        A_1_3_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_full_n,
        A_1_3_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_write,
        A_6_1_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_din,
        A_6_1_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_full_n,
        A_6_1_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_write,
        A_7_0_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_din,
        A_7_0_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_full_n,
        A_7_0_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_write,
        A_2_6_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_din,
        A_2_6_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_full_n,
        A_2_6_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_write,
        A_3_0_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_din,
        A_3_0_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_full_n,
        A_3_0_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_write,
        A_3_7_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_din,
        A_3_7_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_full_n,
        A_3_7_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_write,
        A_1_6_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_din,
        A_1_6_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_full_n,
        A_1_6_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_write,
        A_1_0_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_din,
        A_1_0_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_full_n,
        A_1_0_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_write,
        A_2_7_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_din,
        A_2_7_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_full_n,
        A_2_7_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_write,
        A_3_5_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_din,
        A_3_5_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_full_n,
        A_3_5_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_write,
        A_3_4_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_din,
        A_3_4_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_full_n,
        A_3_4_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_write,
        A_3_3_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_din,
        A_3_3_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_full_n,
        A_3_3_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_write,
        A_2_3_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_din,
        A_2_3_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_full_n,
        A_2_3_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_write,
        A_5_5_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_din,
        A_5_5_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_full_n,
        A_5_5_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_write,
        A_4_5_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_din,
        A_4_5_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_full_n,
        A_4_5_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_write,
        A_2_2_out_din => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_din,
        A_2_2_out_full_n => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_full_n,
        A_2_2_out_write => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_write,
        ap_return_0 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0,
        ap_return_1 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1,
        ap_return_2 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2,
        ap_return_3 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3,
        ap_return_4 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4,
        ap_return_5 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5,
        ap_return_6 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6,
        ap_return_7 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7,
        ap_return_8 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8,
        ap_return_9 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9,
        ap_return_10 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10,
        ap_return_11 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11,
        ap_return_12 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12,
        ap_return_13 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13,
        ap_return_14 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14,
        ap_return_15 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15,
        ap_return_16 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16,
        ap_return_17 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17,
        ap_return_18 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18,
        ap_return_19 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19,
        ap_return_20 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20,
        ap_return_21 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21,
        ap_return_22 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22,
        ap_return_23 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23,
        ap_return_24 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24,
        ap_return_25 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25,
        ap_return_26 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26,
        ap_return_27 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27,
        ap_return_28 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28,
        ap_return_29 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29,
        ap_return_30 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30,
        ap_return_31 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31,
        ap_return_32 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32,
        ap_return_33 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33,
        ap_return_34 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34,
        ap_return_35 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35,
        ap_return_36 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36,
        ap_return_37 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37,
        ap_return_38 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38,
        ap_return_39 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39,
        ap_return_40 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40,
        ap_return_41 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41,
        ap_return_42 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42,
        ap_return_43 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43,
        ap_return_44 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44,
        ap_return_45 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45,
        ap_return_46 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46,
        ap_return_47 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47,
        ap_return_48 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48,
        ap_return_49 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49,
        ap_return_50 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50,
        ap_return_51 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51,
        ap_return_52 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52,
        ap_return_53 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53,
        ap_return_54 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54,
        ap_return_55 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55,
        ap_return_56 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56,
        ap_return_57 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57,
        ap_return_58 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58,
        ap_return_59 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59,
        ap_return_60 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60,
        ap_return_61 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61,
        ap_return_62 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62,
        ap_return_63 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63);

    DCT_MAT_Multiply_Loop_Row_proc440_U0 : component DCT_MAT_Multiply_Loop_Row_proc440
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_start,
        ap_done => DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_done,
        ap_continue => DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_continue,
        ap_idle => DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_idle,
        ap_ready => DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready,
        A_0_0_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_dout,
        A_0_0_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_empty_n,
        A_0_0_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_read,
        A_1_0_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_dout,
        A_1_0_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_empty_n,
        A_1_0_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_read,
        A_2_0_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_dout,
        A_2_0_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_empty_n,
        A_2_0_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_read,
        A_3_0_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_dout,
        A_3_0_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_empty_n,
        A_3_0_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_read,
        A_4_0_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_dout,
        A_4_0_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_empty_n,
        A_4_0_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_read,
        A_5_0_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_dout,
        A_5_0_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_empty_n,
        A_5_0_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_read,
        A_6_0_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_dout,
        A_6_0_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_empty_n,
        A_6_0_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_read,
        A_7_0_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_dout,
        A_7_0_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_empty_n,
        A_7_0_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_read,
        p_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read,
        p_read1 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read1,
        p_read2 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read2,
        p_read3 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read3,
        p_read4 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read4,
        p_read5 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read5,
        p_read6 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read6,
        p_read7 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read7,
        A_0_1_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_dout,
        A_0_1_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_empty_n,
        A_0_1_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_read,
        A_1_1_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_dout,
        A_1_1_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_empty_n,
        A_1_1_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_read,
        A_2_1_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_dout,
        A_2_1_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_empty_n,
        A_2_1_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_read,
        A_3_1_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_dout,
        A_3_1_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_empty_n,
        A_3_1_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_read,
        A_4_1_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_dout,
        A_4_1_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_empty_n,
        A_4_1_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_read,
        A_5_1_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_dout,
        A_5_1_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_empty_n,
        A_5_1_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_read,
        A_6_1_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_dout,
        A_6_1_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_empty_n,
        A_6_1_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_read,
        A_7_1_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_dout,
        A_7_1_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_empty_n,
        A_7_1_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_read,
        p_read8 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read8,
        p_read9 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read9,
        p_read10 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read10,
        p_read11 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read11,
        p_read12 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read12,
        p_read13 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read13,
        p_read14 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read14,
        p_read15 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read15,
        A_0_2_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_dout,
        A_0_2_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_empty_n,
        A_0_2_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_read,
        A_1_2_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_dout,
        A_1_2_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_empty_n,
        A_1_2_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_read,
        A_2_2_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_dout,
        A_2_2_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_empty_n,
        A_2_2_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_read,
        A_3_2_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_dout,
        A_3_2_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_empty_n,
        A_3_2_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_read,
        A_4_2_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_dout,
        A_4_2_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_empty_n,
        A_4_2_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_read,
        A_5_2_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_dout,
        A_5_2_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_empty_n,
        A_5_2_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_read,
        A_6_2_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_dout,
        A_6_2_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_empty_n,
        A_6_2_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_read,
        A_7_2_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_dout,
        A_7_2_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_empty_n,
        A_7_2_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_read,
        p_read16 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read16,
        p_read17 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read17,
        p_read18 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read18,
        p_read19 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read19,
        p_read20 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read20,
        p_read21 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read21,
        p_read22 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read22,
        p_read23 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read23,
        A_0_3_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_dout,
        A_0_3_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_empty_n,
        A_0_3_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_read,
        A_1_3_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_dout,
        A_1_3_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_empty_n,
        A_1_3_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_read,
        A_2_3_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_dout,
        A_2_3_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_empty_n,
        A_2_3_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_read,
        A_3_3_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_dout,
        A_3_3_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_empty_n,
        A_3_3_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_read,
        A_4_3_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_dout,
        A_4_3_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_empty_n,
        A_4_3_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_read,
        A_5_3_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_dout,
        A_5_3_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_empty_n,
        A_5_3_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_read,
        A_6_3_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_dout,
        A_6_3_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_empty_n,
        A_6_3_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_read,
        A_7_3_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_dout,
        A_7_3_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_empty_n,
        A_7_3_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_read,
        p_read24 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read24,
        p_read25 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read25,
        p_read26 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read26,
        p_read27 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read27,
        p_read28 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read28,
        p_read29 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read29,
        p_read30 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read30,
        p_read31 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read31,
        A_0_4_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_dout,
        A_0_4_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_empty_n,
        A_0_4_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_read,
        A_1_4_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_dout,
        A_1_4_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_empty_n,
        A_1_4_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_read,
        A_2_4_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_dout,
        A_2_4_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_empty_n,
        A_2_4_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_read,
        A_3_4_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_dout,
        A_3_4_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_empty_n,
        A_3_4_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_read,
        A_4_4_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_dout,
        A_4_4_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_empty_n,
        A_4_4_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_read,
        A_5_4_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_dout,
        A_5_4_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_empty_n,
        A_5_4_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_read,
        A_6_4_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_dout,
        A_6_4_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_empty_n,
        A_6_4_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_read,
        A_7_4_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_dout,
        A_7_4_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_empty_n,
        A_7_4_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_read,
        p_read32 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read32,
        p_read33 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read33,
        p_read34 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read34,
        p_read35 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read35,
        p_read36 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read36,
        p_read37 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read37,
        p_read38 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read38,
        p_read39 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read39,
        A_0_5_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_dout,
        A_0_5_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_empty_n,
        A_0_5_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_read,
        A_1_5_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_dout,
        A_1_5_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_empty_n,
        A_1_5_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_read,
        A_2_5_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_dout,
        A_2_5_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_empty_n,
        A_2_5_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_read,
        A_3_5_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_dout,
        A_3_5_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_empty_n,
        A_3_5_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_read,
        A_4_5_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_dout,
        A_4_5_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_empty_n,
        A_4_5_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_read,
        A_5_5_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_dout,
        A_5_5_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_empty_n,
        A_5_5_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_read,
        A_6_5_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_dout,
        A_6_5_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_empty_n,
        A_6_5_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_read,
        A_7_5_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_dout,
        A_7_5_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_empty_n,
        A_7_5_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_read,
        p_read40 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read40,
        p_read41 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read41,
        p_read42 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read42,
        p_read43 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read43,
        p_read44 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read44,
        p_read45 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read45,
        p_read46 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read46,
        p_read47 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read47,
        A_0_6_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_dout,
        A_0_6_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_empty_n,
        A_0_6_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_read,
        A_1_6_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_dout,
        A_1_6_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_empty_n,
        A_1_6_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_read,
        A_2_6_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_dout,
        A_2_6_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_empty_n,
        A_2_6_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_read,
        A_3_6_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_dout,
        A_3_6_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_empty_n,
        A_3_6_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_read,
        A_4_6_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_dout,
        A_4_6_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_empty_n,
        A_4_6_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_read,
        A_5_6_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_dout,
        A_5_6_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_empty_n,
        A_5_6_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_read,
        A_6_6_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_dout,
        A_6_6_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_empty_n,
        A_6_6_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_read,
        A_7_6_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_dout,
        A_7_6_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_empty_n,
        A_7_6_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_read,
        p_read48 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read48,
        p_read49 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read49,
        p_read50 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read50,
        p_read51 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read51,
        p_read52 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read52,
        p_read53 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read53,
        p_read54 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read54,
        p_read55 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read55,
        A_0_7_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_dout,
        A_0_7_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_empty_n,
        A_0_7_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_read,
        A_1_7_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_dout,
        A_1_7_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_empty_n,
        A_1_7_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_read,
        A_2_7_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_dout,
        A_2_7_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_empty_n,
        A_2_7_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_read,
        A_3_7_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_dout,
        A_3_7_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_empty_n,
        A_3_7_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_read,
        A_4_7_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_dout,
        A_4_7_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_empty_n,
        A_4_7_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_read,
        A_5_7_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_dout,
        A_5_7_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_empty_n,
        A_5_7_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_read,
        A_6_7_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_dout,
        A_6_7_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_empty_n,
        A_6_7_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_read,
        A_7_7_dout => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_dout,
        A_7_7_empty_n => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_empty_n,
        A_7_7_read => DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_read,
        p_read56 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read56,
        p_read57 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read57,
        p_read58 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read58,
        p_read59 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read59,
        p_read60 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read60,
        p_read61 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read61,
        p_read62 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read62,
        p_read63 => DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read63,
        C_address0 => DCT_MAT_Multiply_Loop_Row_proc440_U0_C_address0,
        C_ce0 => DCT_MAT_Multiply_Loop_Row_proc440_U0_C_ce0,
        C_we0 => DCT_MAT_Multiply_Loop_Row_proc440_U0_C_we0,
        C_d0 => DCT_MAT_Multiply_Loop_Row_proc440_U0_C_d0);

    A_5_171_U : component FIFO_DCT_MAT_Multiply_A_5_171
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_5_171_U_ap_dummy_ce,
        if_write_ce => A_5_171_U_ap_dummy_ce,
        if_din => A_5_171_din,
        if_full_n => A_5_171_full_n,
        if_write => A_5_171_write,
        if_dout => A_5_171_dout,
        if_empty_n => A_5_171_empty_n,
        if_read => A_5_171_read);

    A_6_272_U : component FIFO_DCT_MAT_Multiply_A_6_272
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_6_272_U_ap_dummy_ce,
        if_write_ce => A_6_272_U_ap_dummy_ce,
        if_din => A_6_272_din,
        if_full_n => A_6_272_full_n,
        if_write => A_6_272_write,
        if_dout => A_6_272_dout,
        if_empty_n => A_6_272_empty_n,
        if_read => A_6_272_read);

    A_4_173_U : component FIFO_DCT_MAT_Multiply_A_4_173
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_4_173_U_ap_dummy_ce,
        if_write_ce => A_4_173_U_ap_dummy_ce,
        if_din => A_4_173_din,
        if_full_n => A_4_173_full_n,
        if_write => A_4_173_write,
        if_dout => A_4_173_dout,
        if_empty_n => A_4_173_empty_n,
        if_read => A_4_173_read);

    A_5_074_U : component FIFO_DCT_MAT_Multiply_A_5_074
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_5_074_U_ap_dummy_ce,
        if_write_ce => A_5_074_U_ap_dummy_ce,
        if_din => A_5_074_din,
        if_full_n => A_5_074_full_n,
        if_write => A_5_074_write,
        if_dout => A_5_074_dout,
        if_empty_n => A_5_074_empty_n,
        if_read => A_5_074_read);

    A_6_675_U : component FIFO_DCT_MAT_Multiply_A_6_675
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_6_675_U_ap_dummy_ce,
        if_write_ce => A_6_675_U_ap_dummy_ce,
        if_din => A_6_675_din,
        if_full_n => A_6_675_full_n,
        if_write => A_6_675_write,
        if_dout => A_6_675_dout,
        if_empty_n => A_6_675_empty_n,
        if_read => A_6_675_read);

    A_4_076_U : component FIFO_DCT_MAT_Multiply_A_4_076
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_4_076_U_ap_dummy_ce,
        if_write_ce => A_4_076_U_ap_dummy_ce,
        if_din => A_4_076_din,
        if_full_n => A_4_076_full_n,
        if_write => A_4_076_write,
        if_dout => A_4_076_dout,
        if_empty_n => A_4_076_empty_n,
        if_read => A_4_076_read);

    A_1_277_U : component FIFO_DCT_MAT_Multiply_A_1_277
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_1_277_U_ap_dummy_ce,
        if_write_ce => A_1_277_U_ap_dummy_ce,
        if_din => A_1_277_din,
        if_full_n => A_1_277_full_n,
        if_write => A_1_277_write,
        if_dout => A_1_277_dout,
        if_empty_n => A_1_277_empty_n,
        if_read => A_1_277_read);

    A_1_178_U : component FIFO_DCT_MAT_Multiply_A_1_178
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_1_178_U_ap_dummy_ce,
        if_write_ce => A_1_178_U_ap_dummy_ce,
        if_din => A_1_178_din,
        if_full_n => A_1_178_full_n,
        if_write => A_1_178_write,
        if_dout => A_1_178_dout,
        if_empty_n => A_1_178_empty_n,
        if_read => A_1_178_read);

    A_7_779_U : component FIFO_DCT_MAT_Multiply_A_7_779
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_7_779_U_ap_dummy_ce,
        if_write_ce => A_7_779_U_ap_dummy_ce,
        if_din => A_7_779_din,
        if_full_n => A_7_779_full_n,
        if_write => A_7_779_write,
        if_dout => A_7_779_dout,
        if_empty_n => A_7_779_empty_n,
        if_read => A_7_779_read);

    A_3_680_U : component FIFO_DCT_MAT_Multiply_A_3_680
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_3_680_U_ap_dummy_ce,
        if_write_ce => A_3_680_U_ap_dummy_ce,
        if_din => A_3_680_din,
        if_full_n => A_3_680_full_n,
        if_write => A_3_680_write,
        if_dout => A_3_680_dout,
        if_empty_n => A_3_680_empty_n,
        if_read => A_3_680_read);

    A_5_681_U : component FIFO_DCT_MAT_Multiply_A_5_681
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_5_681_U_ap_dummy_ce,
        if_write_ce => A_5_681_U_ap_dummy_ce,
        if_din => A_5_681_din,
        if_full_n => A_5_681_full_n,
        if_write => A_5_681_write,
        if_dout => A_5_681_dout,
        if_empty_n => A_5_681_empty_n,
        if_read => A_5_681_read);

    A_1_582_U : component FIFO_DCT_MAT_Multiply_A_1_582
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_1_582_U_ap_dummy_ce,
        if_write_ce => A_1_582_U_ap_dummy_ce,
        if_din => A_1_582_din,
        if_full_n => A_1_582_full_n,
        if_write => A_1_582_write,
        if_dout => A_1_582_dout,
        if_empty_n => A_1_582_empty_n,
        if_read => A_1_582_read);

    A_6_483_U : component FIFO_DCT_MAT_Multiply_A_6_483
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_6_483_U_ap_dummy_ce,
        if_write_ce => A_6_483_U_ap_dummy_ce,
        if_din => A_6_483_din,
        if_full_n => A_6_483_full_n,
        if_write => A_6_483_write,
        if_dout => A_6_483_dout,
        if_empty_n => A_6_483_empty_n,
        if_read => A_6_483_read);

    A_4_784_U : component FIFO_DCT_MAT_Multiply_A_4_784
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_4_784_U_ap_dummy_ce,
        if_write_ce => A_4_784_U_ap_dummy_ce,
        if_din => A_4_784_din,
        if_full_n => A_4_784_full_n,
        if_write => A_4_784_write,
        if_dout => A_4_784_dout,
        if_empty_n => A_4_784_empty_n,
        if_read => A_4_784_read);

    A_0_785_U : component FIFO_DCT_MAT_Multiply_A_0_785
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_0_785_U_ap_dummy_ce,
        if_write_ce => A_0_785_U_ap_dummy_ce,
        if_din => A_0_785_din,
        if_full_n => A_0_785_full_n,
        if_write => A_0_785_write,
        if_dout => A_0_785_dout,
        if_empty_n => A_0_785_empty_n,
        if_read => A_0_785_read);

    A_7_586_U : component FIFO_DCT_MAT_Multiply_A_7_586
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_7_586_U_ap_dummy_ce,
        if_write_ce => A_7_586_U_ap_dummy_ce,
        if_din => A_7_586_din,
        if_full_n => A_7_586_full_n,
        if_write => A_7_586_write,
        if_dout => A_7_586_dout,
        if_empty_n => A_7_586_empty_n,
        if_read => A_7_586_read);

    A_2_087_U : component FIFO_DCT_MAT_Multiply_A_2_087
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_2_087_U_ap_dummy_ce,
        if_write_ce => A_2_087_U_ap_dummy_ce,
        if_din => A_2_087_din,
        if_full_n => A_2_087_full_n,
        if_write => A_2_087_write,
        if_dout => A_2_087_dout,
        if_empty_n => A_2_087_empty_n,
        if_read => A_2_087_read);

    A_1_488_U : component FIFO_DCT_MAT_Multiply_A_1_488
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_1_488_U_ap_dummy_ce,
        if_write_ce => A_1_488_U_ap_dummy_ce,
        if_din => A_1_488_din,
        if_full_n => A_1_488_full_n,
        if_write => A_1_488_write,
        if_dout => A_1_488_dout,
        if_empty_n => A_1_488_empty_n,
        if_read => A_1_488_read);

    A_0_189_U : component FIFO_DCT_MAT_Multiply_A_0_189
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_0_189_U_ap_dummy_ce,
        if_write_ce => A_0_189_U_ap_dummy_ce,
        if_din => A_0_189_din,
        if_full_n => A_0_189_full_n,
        if_write => A_0_189_write,
        if_dout => A_0_189_dout,
        if_empty_n => A_0_189_empty_n,
        if_read => A_0_189_read);

    A_0_690_U : component FIFO_DCT_MAT_Multiply_A_0_690
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_0_690_U_ap_dummy_ce,
        if_write_ce => A_0_690_U_ap_dummy_ce,
        if_din => A_0_690_din,
        if_full_n => A_0_690_full_n,
        if_write => A_0_690_write,
        if_dout => A_0_690_dout,
        if_empty_n => A_0_690_empty_n,
        if_read => A_0_690_read);

    A_0_091_U : component FIFO_DCT_MAT_Multiply_A_0_091
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_0_091_U_ap_dummy_ce,
        if_write_ce => A_0_091_U_ap_dummy_ce,
        if_din => A_0_091_din,
        if_full_n => A_0_091_full_n,
        if_write => A_0_091_write,
        if_dout => A_0_091_dout,
        if_empty_n => A_0_091_empty_n,
        if_read => A_0_091_read);

    A_0_592_U : component FIFO_DCT_MAT_Multiply_A_0_592
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_0_592_U_ap_dummy_ce,
        if_write_ce => A_0_592_U_ap_dummy_ce,
        if_din => A_0_592_din,
        if_full_n => A_0_592_full_n,
        if_write => A_0_592_write,
        if_dout => A_0_592_dout,
        if_empty_n => A_0_592_empty_n,
        if_read => A_0_592_read);

    A_5_393_U : component FIFO_DCT_MAT_Multiply_A_5_393
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_5_393_U_ap_dummy_ce,
        if_write_ce => A_5_393_U_ap_dummy_ce,
        if_din => A_5_393_din,
        if_full_n => A_5_393_full_n,
        if_write => A_5_393_write,
        if_dout => A_5_393_dout,
        if_empty_n => A_5_393_empty_n,
        if_read => A_5_393_read);

    A_4_394_U : component FIFO_DCT_MAT_Multiply_A_4_394
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_4_394_U_ap_dummy_ce,
        if_write_ce => A_4_394_U_ap_dummy_ce,
        if_din => A_4_394_din,
        if_full_n => A_4_394_full_n,
        if_write => A_4_394_write,
        if_dout => A_4_394_dout,
        if_empty_n => A_4_394_empty_n,
        if_read => A_4_394_read);

    A_4_295_U : component FIFO_DCT_MAT_Multiply_A_4_295
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_4_295_U_ap_dummy_ce,
        if_write_ce => A_4_295_U_ap_dummy_ce,
        if_din => A_4_295_din,
        if_full_n => A_4_295_full_n,
        if_write => A_4_295_write,
        if_dout => A_4_295_dout,
        if_empty_n => A_4_295_empty_n,
        if_read => A_4_295_read);

    A_2_596_U : component FIFO_DCT_MAT_Multiply_A_2_596
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_2_596_U_ap_dummy_ce,
        if_write_ce => A_2_596_U_ap_dummy_ce,
        if_din => A_2_596_din,
        if_full_n => A_2_596_full_n,
        if_write => A_2_596_write,
        if_dout => A_2_596_dout,
        if_empty_n => A_2_596_empty_n,
        if_read => A_2_596_read);

    A_5_497_U : component FIFO_DCT_MAT_Multiply_A_5_497
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_5_497_U_ap_dummy_ce,
        if_write_ce => A_5_497_U_ap_dummy_ce,
        if_din => A_5_497_din,
        if_full_n => A_5_497_full_n,
        if_write => A_5_497_write,
        if_dout => A_5_497_dout,
        if_empty_n => A_5_497_empty_n,
        if_read => A_5_497_read);

    A_4_498_U : component FIFO_DCT_MAT_Multiply_A_4_498
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_4_498_U_ap_dummy_ce,
        if_write_ce => A_4_498_U_ap_dummy_ce,
        if_din => A_4_498_din,
        if_full_n => A_4_498_full_n,
        if_write => A_4_498_write,
        if_dout => A_4_498_dout,
        if_empty_n => A_4_498_empty_n,
        if_read => A_4_498_read);

    A_5_799_U : component FIFO_DCT_MAT_Multiply_A_5_799
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_5_799_U_ap_dummy_ce,
        if_write_ce => A_5_799_U_ap_dummy_ce,
        if_din => A_5_799_din,
        if_full_n => A_5_799_full_n,
        if_write => A_5_799_write,
        if_dout => A_5_799_dout,
        if_empty_n => A_5_799_empty_n,
        if_read => A_5_799_read);

    A_6_3100_U : component FIFO_DCT_MAT_Multiply_A_6_3100
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_6_3100_U_ap_dummy_ce,
        if_write_ce => A_6_3100_U_ap_dummy_ce,
        if_din => A_6_3100_din,
        if_full_n => A_6_3100_full_n,
        if_write => A_6_3100_write,
        if_dout => A_6_3100_dout,
        if_empty_n => A_6_3100_empty_n,
        if_read => A_6_3100_read);

    A_1_7101_U : component FIFO_DCT_MAT_Multiply_A_1_7101
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_1_7101_U_ap_dummy_ce,
        if_write_ce => A_1_7101_U_ap_dummy_ce,
        if_din => A_1_7101_din,
        if_full_n => A_1_7101_full_n,
        if_write => A_1_7101_write,
        if_dout => A_1_7101_dout,
        if_empty_n => A_1_7101_empty_n,
        if_read => A_1_7101_read);

    A_6_5102_U : component FIFO_DCT_MAT_Multiply_A_6_5102
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_6_5102_U_ap_dummy_ce,
        if_write_ce => A_6_5102_U_ap_dummy_ce,
        if_din => A_6_5102_din,
        if_full_n => A_6_5102_full_n,
        if_write => A_6_5102_write,
        if_dout => A_6_5102_dout,
        if_empty_n => A_6_5102_empty_n,
        if_read => A_6_5102_read);

    A_6_7103_U : component FIFO_DCT_MAT_Multiply_A_6_7103
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_6_7103_U_ap_dummy_ce,
        if_write_ce => A_6_7103_U_ap_dummy_ce,
        if_din => A_6_7103_din,
        if_full_n => A_6_7103_full_n,
        if_write => A_6_7103_write,
        if_dout => A_6_7103_dout,
        if_empty_n => A_6_7103_empty_n,
        if_read => A_6_7103_read);

    A_5_2104_U : component FIFO_DCT_MAT_Multiply_A_5_2104
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_5_2104_U_ap_dummy_ce,
        if_write_ce => A_5_2104_U_ap_dummy_ce,
        if_din => A_5_2104_din,
        if_full_n => A_5_2104_full_n,
        if_write => A_5_2104_write,
        if_dout => A_5_2104_dout,
        if_empty_n => A_5_2104_empty_n,
        if_read => A_5_2104_read);

    A_6_0105_U : component FIFO_DCT_MAT_Multiply_A_6_0105
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_6_0105_U_ap_dummy_ce,
        if_write_ce => A_6_0105_U_ap_dummy_ce,
        if_din => A_6_0105_din,
        if_full_n => A_6_0105_full_n,
        if_write => A_6_0105_write,
        if_dout => A_6_0105_dout,
        if_empty_n => A_6_0105_empty_n,
        if_read => A_6_0105_read);

    A_0_2106_U : component FIFO_DCT_MAT_Multiply_A_0_2106
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_0_2106_U_ap_dummy_ce,
        if_write_ce => A_0_2106_U_ap_dummy_ce,
        if_din => A_0_2106_din,
        if_full_n => A_0_2106_full_n,
        if_write => A_0_2106_write,
        if_dout => A_0_2106_dout,
        if_empty_n => A_0_2106_empty_n,
        if_read => A_0_2106_read);

    A_7_2107_U : component FIFO_DCT_MAT_Multiply_A_7_2107
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_7_2107_U_ap_dummy_ce,
        if_write_ce => A_7_2107_U_ap_dummy_ce,
        if_din => A_7_2107_din,
        if_full_n => A_7_2107_full_n,
        if_write => A_7_2107_write,
        if_dout => A_7_2107_dout,
        if_empty_n => A_7_2107_empty_n,
        if_read => A_7_2107_read);

    A_0_3108_U : component FIFO_DCT_MAT_Multiply_A_0_3108
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_0_3108_U_ap_dummy_ce,
        if_write_ce => A_0_3108_U_ap_dummy_ce,
        if_din => A_0_3108_din,
        if_full_n => A_0_3108_full_n,
        if_write => A_0_3108_write,
        if_dout => A_0_3108_dout,
        if_empty_n => A_0_3108_empty_n,
        if_read => A_0_3108_read);

    A_7_3109_U : component FIFO_DCT_MAT_Multiply_A_7_3109
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_7_3109_U_ap_dummy_ce,
        if_write_ce => A_7_3109_U_ap_dummy_ce,
        if_din => A_7_3109_din,
        if_full_n => A_7_3109_full_n,
        if_write => A_7_3109_write,
        if_dout => A_7_3109_dout,
        if_empty_n => A_7_3109_empty_n,
        if_read => A_7_3109_read);

    A_2_4110_U : component FIFO_DCT_MAT_Multiply_A_2_4110
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_2_4110_U_ap_dummy_ce,
        if_write_ce => A_2_4110_U_ap_dummy_ce,
        if_din => A_2_4110_din,
        if_full_n => A_2_4110_full_n,
        if_write => A_2_4110_write,
        if_dout => A_2_4110_dout,
        if_empty_n => A_2_4110_empty_n,
        if_read => A_2_4110_read);

    A_4_6111_U : component FIFO_DCT_MAT_Multiply_A_4_6111
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_4_6111_U_ap_dummy_ce,
        if_write_ce => A_4_6111_U_ap_dummy_ce,
        if_din => A_4_6111_din,
        if_full_n => A_4_6111_full_n,
        if_write => A_4_6111_write,
        if_dout => A_4_6111_dout,
        if_empty_n => A_4_6111_empty_n,
        if_read => A_4_6111_read);

    A_0_4112_U : component FIFO_DCT_MAT_Multiply_A_0_4112
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_0_4112_U_ap_dummy_ce,
        if_write_ce => A_0_4112_U_ap_dummy_ce,
        if_din => A_0_4112_din,
        if_full_n => A_0_4112_full_n,
        if_write => A_0_4112_write,
        if_dout => A_0_4112_dout,
        if_empty_n => A_0_4112_empty_n,
        if_read => A_0_4112_read);

    A_7_4113_U : component FIFO_DCT_MAT_Multiply_A_7_4113
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_7_4113_U_ap_dummy_ce,
        if_write_ce => A_7_4113_U_ap_dummy_ce,
        if_din => A_7_4113_din,
        if_full_n => A_7_4113_full_n,
        if_write => A_7_4113_write,
        if_dout => A_7_4113_dout,
        if_empty_n => A_7_4113_empty_n,
        if_read => A_7_4113_read);

    A_3_1114_U : component FIFO_DCT_MAT_Multiply_A_3_1114
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_3_1114_U_ap_dummy_ce,
        if_write_ce => A_3_1114_U_ap_dummy_ce,
        if_din => A_3_1114_din,
        if_full_n => A_3_1114_full_n,
        if_write => A_3_1114_write,
        if_dout => A_3_1114_dout,
        if_empty_n => A_3_1114_empty_n,
        if_read => A_3_1114_read);

    A_2_1115_U : component FIFO_DCT_MAT_Multiply_A_2_1115
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_2_1115_U_ap_dummy_ce,
        if_write_ce => A_2_1115_U_ap_dummy_ce,
        if_din => A_2_1115_din,
        if_full_n => A_2_1115_full_n,
        if_write => A_2_1115_write,
        if_dout => A_2_1115_dout,
        if_empty_n => A_2_1115_empty_n,
        if_read => A_2_1115_read);

    A_7_6116_U : component FIFO_DCT_MAT_Multiply_A_7_6116
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_7_6116_U_ap_dummy_ce,
        if_write_ce => A_7_6116_U_ap_dummy_ce,
        if_din => A_7_6116_din,
        if_full_n => A_7_6116_full_n,
        if_write => A_7_6116_write,
        if_dout => A_7_6116_dout,
        if_empty_n => A_7_6116_empty_n,
        if_read => A_7_6116_read);

    A_3_2117_U : component FIFO_DCT_MAT_Multiply_A_3_2117
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_3_2117_U_ap_dummy_ce,
        if_write_ce => A_3_2117_U_ap_dummy_ce,
        if_din => A_3_2117_din,
        if_full_n => A_3_2117_full_n,
        if_write => A_3_2117_write,
        if_dout => A_3_2117_dout,
        if_empty_n => A_3_2117_empty_n,
        if_read => A_3_2117_read);

    A_7_1118_U : component FIFO_DCT_MAT_Multiply_A_7_1118
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_7_1118_U_ap_dummy_ce,
        if_write_ce => A_7_1118_U_ap_dummy_ce,
        if_din => A_7_1118_din,
        if_full_n => A_7_1118_full_n,
        if_write => A_7_1118_write,
        if_dout => A_7_1118_dout,
        if_empty_n => A_7_1118_empty_n,
        if_read => A_7_1118_read);

    A_1_3119_U : component FIFO_DCT_MAT_Multiply_A_1_3119
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_1_3119_U_ap_dummy_ce,
        if_write_ce => A_1_3119_U_ap_dummy_ce,
        if_din => A_1_3119_din,
        if_full_n => A_1_3119_full_n,
        if_write => A_1_3119_write,
        if_dout => A_1_3119_dout,
        if_empty_n => A_1_3119_empty_n,
        if_read => A_1_3119_read);

    A_6_1120_U : component FIFO_DCT_MAT_Multiply_A_6_1120
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_6_1120_U_ap_dummy_ce,
        if_write_ce => A_6_1120_U_ap_dummy_ce,
        if_din => A_6_1120_din,
        if_full_n => A_6_1120_full_n,
        if_write => A_6_1120_write,
        if_dout => A_6_1120_dout,
        if_empty_n => A_6_1120_empty_n,
        if_read => A_6_1120_read);

    A_7_0121_U : component FIFO_DCT_MAT_Multiply_A_7_0121
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_7_0121_U_ap_dummy_ce,
        if_write_ce => A_7_0121_U_ap_dummy_ce,
        if_din => A_7_0121_din,
        if_full_n => A_7_0121_full_n,
        if_write => A_7_0121_write,
        if_dout => A_7_0121_dout,
        if_empty_n => A_7_0121_empty_n,
        if_read => A_7_0121_read);

    A_2_6122_U : component FIFO_DCT_MAT_Multiply_A_2_6122
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_2_6122_U_ap_dummy_ce,
        if_write_ce => A_2_6122_U_ap_dummy_ce,
        if_din => A_2_6122_din,
        if_full_n => A_2_6122_full_n,
        if_write => A_2_6122_write,
        if_dout => A_2_6122_dout,
        if_empty_n => A_2_6122_empty_n,
        if_read => A_2_6122_read);

    A_3_0123_U : component FIFO_DCT_MAT_Multiply_A_3_0123
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_3_0123_U_ap_dummy_ce,
        if_write_ce => A_3_0123_U_ap_dummy_ce,
        if_din => A_3_0123_din,
        if_full_n => A_3_0123_full_n,
        if_write => A_3_0123_write,
        if_dout => A_3_0123_dout,
        if_empty_n => A_3_0123_empty_n,
        if_read => A_3_0123_read);

    A_3_7124_U : component FIFO_DCT_MAT_Multiply_A_3_7124
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_3_7124_U_ap_dummy_ce,
        if_write_ce => A_3_7124_U_ap_dummy_ce,
        if_din => A_3_7124_din,
        if_full_n => A_3_7124_full_n,
        if_write => A_3_7124_write,
        if_dout => A_3_7124_dout,
        if_empty_n => A_3_7124_empty_n,
        if_read => A_3_7124_read);

    A_1_6125_U : component FIFO_DCT_MAT_Multiply_A_1_6125
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_1_6125_U_ap_dummy_ce,
        if_write_ce => A_1_6125_U_ap_dummy_ce,
        if_din => A_1_6125_din,
        if_full_n => A_1_6125_full_n,
        if_write => A_1_6125_write,
        if_dout => A_1_6125_dout,
        if_empty_n => A_1_6125_empty_n,
        if_read => A_1_6125_read);

    A_1_0126_U : component FIFO_DCT_MAT_Multiply_A_1_0126
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_1_0126_U_ap_dummy_ce,
        if_write_ce => A_1_0126_U_ap_dummy_ce,
        if_din => A_1_0126_din,
        if_full_n => A_1_0126_full_n,
        if_write => A_1_0126_write,
        if_dout => A_1_0126_dout,
        if_empty_n => A_1_0126_empty_n,
        if_read => A_1_0126_read);

    A_2_7127_U : component FIFO_DCT_MAT_Multiply_A_2_7127
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_2_7127_U_ap_dummy_ce,
        if_write_ce => A_2_7127_U_ap_dummy_ce,
        if_din => A_2_7127_din,
        if_full_n => A_2_7127_full_n,
        if_write => A_2_7127_write,
        if_dout => A_2_7127_dout,
        if_empty_n => A_2_7127_empty_n,
        if_read => A_2_7127_read);

    A_3_5128_U : component FIFO_DCT_MAT_Multiply_A_3_5128
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_3_5128_U_ap_dummy_ce,
        if_write_ce => A_3_5128_U_ap_dummy_ce,
        if_din => A_3_5128_din,
        if_full_n => A_3_5128_full_n,
        if_write => A_3_5128_write,
        if_dout => A_3_5128_dout,
        if_empty_n => A_3_5128_empty_n,
        if_read => A_3_5128_read);

    A_3_4129_U : component FIFO_DCT_MAT_Multiply_A_3_4129
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_3_4129_U_ap_dummy_ce,
        if_write_ce => A_3_4129_U_ap_dummy_ce,
        if_din => A_3_4129_din,
        if_full_n => A_3_4129_full_n,
        if_write => A_3_4129_write,
        if_dout => A_3_4129_dout,
        if_empty_n => A_3_4129_empty_n,
        if_read => A_3_4129_read);

    A_3_3130_U : component FIFO_DCT_MAT_Multiply_A_3_3130
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_3_3130_U_ap_dummy_ce,
        if_write_ce => A_3_3130_U_ap_dummy_ce,
        if_din => A_3_3130_din,
        if_full_n => A_3_3130_full_n,
        if_write => A_3_3130_write,
        if_dout => A_3_3130_dout,
        if_empty_n => A_3_3130_empty_n,
        if_read => A_3_3130_read);

    A_2_3131_U : component FIFO_DCT_MAT_Multiply_A_2_3131
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_2_3131_U_ap_dummy_ce,
        if_write_ce => A_2_3131_U_ap_dummy_ce,
        if_din => A_2_3131_din,
        if_full_n => A_2_3131_full_n,
        if_write => A_2_3131_write,
        if_dout => A_2_3131_dout,
        if_empty_n => A_2_3131_empty_n,
        if_read => A_2_3131_read);

    A_5_5132_U : component FIFO_DCT_MAT_Multiply_A_5_5132
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_5_5132_U_ap_dummy_ce,
        if_write_ce => A_5_5132_U_ap_dummy_ce,
        if_din => A_5_5132_din,
        if_full_n => A_5_5132_full_n,
        if_write => A_5_5132_write,
        if_dout => A_5_5132_dout,
        if_empty_n => A_5_5132_empty_n,
        if_read => A_5_5132_read);

    A_4_5133_U : component FIFO_DCT_MAT_Multiply_A_4_5133
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_4_5133_U_ap_dummy_ce,
        if_write_ce => A_4_5133_U_ap_dummy_ce,
        if_din => A_4_5133_din,
        if_full_n => A_4_5133_full_n,
        if_write => A_4_5133_write,
        if_dout => A_4_5133_dout,
        if_empty_n => A_4_5133_empty_n,
        if_read => A_4_5133_read);

    A_2_2134_U : component FIFO_DCT_MAT_Multiply_A_2_2134
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_2_2134_U_ap_dummy_ce,
        if_write_ce => A_2_2134_U_ap_dummy_ce,
        if_din => A_2_2134_din,
        if_full_n => A_2_2134_full_n,
        if_write => A_2_2134_write,
        if_dout => A_2_2134_dout,
        if_empty_n => A_2_2134_empty_n,
        if_read => A_2_2134_read);

    B_cached_0_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_0_channel_U_ap_dummy_ce,
        if_din => B_cached_0_0_channel_din,
        if_full_n => B_cached_0_0_channel_full_n,
        if_write => B_cached_0_0_channel_write,
        if_dout => B_cached_0_0_channel_dout,
        if_empty_n => B_cached_0_0_channel_empty_n,
        if_read => B_cached_0_0_channel_read);

    B_cached_0_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_1_channel_U_ap_dummy_ce,
        if_din => B_cached_0_1_channel_din,
        if_full_n => B_cached_0_1_channel_full_n,
        if_write => B_cached_0_1_channel_write,
        if_dout => B_cached_0_1_channel_dout,
        if_empty_n => B_cached_0_1_channel_empty_n,
        if_read => B_cached_0_1_channel_read);

    B_cached_0_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_2_channel_U_ap_dummy_ce,
        if_din => B_cached_0_2_channel_din,
        if_full_n => B_cached_0_2_channel_full_n,
        if_write => B_cached_0_2_channel_write,
        if_dout => B_cached_0_2_channel_dout,
        if_empty_n => B_cached_0_2_channel_empty_n,
        if_read => B_cached_0_2_channel_read);

    B_cached_0_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_3_channel_U_ap_dummy_ce,
        if_din => B_cached_0_3_channel_din,
        if_full_n => B_cached_0_3_channel_full_n,
        if_write => B_cached_0_3_channel_write,
        if_dout => B_cached_0_3_channel_dout,
        if_empty_n => B_cached_0_3_channel_empty_n,
        if_read => B_cached_0_3_channel_read);

    B_cached_0_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_4_channel_U_ap_dummy_ce,
        if_din => B_cached_0_4_channel_din,
        if_full_n => B_cached_0_4_channel_full_n,
        if_write => B_cached_0_4_channel_write,
        if_dout => B_cached_0_4_channel_dout,
        if_empty_n => B_cached_0_4_channel_empty_n,
        if_read => B_cached_0_4_channel_read);

    B_cached_0_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_5_channel_U_ap_dummy_ce,
        if_din => B_cached_0_5_channel_din,
        if_full_n => B_cached_0_5_channel_full_n,
        if_write => B_cached_0_5_channel_write,
        if_dout => B_cached_0_5_channel_dout,
        if_empty_n => B_cached_0_5_channel_empty_n,
        if_read => B_cached_0_5_channel_read);

    B_cached_0_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_6_channel_U_ap_dummy_ce,
        if_din => B_cached_0_6_channel_din,
        if_full_n => B_cached_0_6_channel_full_n,
        if_write => B_cached_0_6_channel_write,
        if_dout => B_cached_0_6_channel_dout,
        if_empty_n => B_cached_0_6_channel_empty_n,
        if_read => B_cached_0_6_channel_read);

    B_cached_0_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_7_channel_U_ap_dummy_ce,
        if_din => B_cached_0_7_channel_din,
        if_full_n => B_cached_0_7_channel_full_n,
        if_write => B_cached_0_7_channel_write,
        if_dout => B_cached_0_7_channel_dout,
        if_empty_n => B_cached_0_7_channel_empty_n,
        if_read => B_cached_0_7_channel_read);

    B_cached_1_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_0_channel_U_ap_dummy_ce,
        if_din => B_cached_1_0_channel_din,
        if_full_n => B_cached_1_0_channel_full_n,
        if_write => B_cached_1_0_channel_write,
        if_dout => B_cached_1_0_channel_dout,
        if_empty_n => B_cached_1_0_channel_empty_n,
        if_read => B_cached_1_0_channel_read);

    B_cached_1_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_1_channel_U_ap_dummy_ce,
        if_din => B_cached_1_1_channel_din,
        if_full_n => B_cached_1_1_channel_full_n,
        if_write => B_cached_1_1_channel_write,
        if_dout => B_cached_1_1_channel_dout,
        if_empty_n => B_cached_1_1_channel_empty_n,
        if_read => B_cached_1_1_channel_read);

    B_cached_1_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_2_channel_U_ap_dummy_ce,
        if_din => B_cached_1_2_channel_din,
        if_full_n => B_cached_1_2_channel_full_n,
        if_write => B_cached_1_2_channel_write,
        if_dout => B_cached_1_2_channel_dout,
        if_empty_n => B_cached_1_2_channel_empty_n,
        if_read => B_cached_1_2_channel_read);

    B_cached_1_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_3_channel_U_ap_dummy_ce,
        if_din => B_cached_1_3_channel_din,
        if_full_n => B_cached_1_3_channel_full_n,
        if_write => B_cached_1_3_channel_write,
        if_dout => B_cached_1_3_channel_dout,
        if_empty_n => B_cached_1_3_channel_empty_n,
        if_read => B_cached_1_3_channel_read);

    B_cached_1_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_4_channel_U_ap_dummy_ce,
        if_din => B_cached_1_4_channel_din,
        if_full_n => B_cached_1_4_channel_full_n,
        if_write => B_cached_1_4_channel_write,
        if_dout => B_cached_1_4_channel_dout,
        if_empty_n => B_cached_1_4_channel_empty_n,
        if_read => B_cached_1_4_channel_read);

    B_cached_1_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_5_channel_U_ap_dummy_ce,
        if_din => B_cached_1_5_channel_din,
        if_full_n => B_cached_1_5_channel_full_n,
        if_write => B_cached_1_5_channel_write,
        if_dout => B_cached_1_5_channel_dout,
        if_empty_n => B_cached_1_5_channel_empty_n,
        if_read => B_cached_1_5_channel_read);

    B_cached_1_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_6_channel_U_ap_dummy_ce,
        if_din => B_cached_1_6_channel_din,
        if_full_n => B_cached_1_6_channel_full_n,
        if_write => B_cached_1_6_channel_write,
        if_dout => B_cached_1_6_channel_dout,
        if_empty_n => B_cached_1_6_channel_empty_n,
        if_read => B_cached_1_6_channel_read);

    B_cached_1_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_7_channel_U_ap_dummy_ce,
        if_din => B_cached_1_7_channel_din,
        if_full_n => B_cached_1_7_channel_full_n,
        if_write => B_cached_1_7_channel_write,
        if_dout => B_cached_1_7_channel_dout,
        if_empty_n => B_cached_1_7_channel_empty_n,
        if_read => B_cached_1_7_channel_read);

    B_cached_2_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_0_channel_U_ap_dummy_ce,
        if_din => B_cached_2_0_channel_din,
        if_full_n => B_cached_2_0_channel_full_n,
        if_write => B_cached_2_0_channel_write,
        if_dout => B_cached_2_0_channel_dout,
        if_empty_n => B_cached_2_0_channel_empty_n,
        if_read => B_cached_2_0_channel_read);

    B_cached_2_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_1_channel_U_ap_dummy_ce,
        if_din => B_cached_2_1_channel_din,
        if_full_n => B_cached_2_1_channel_full_n,
        if_write => B_cached_2_1_channel_write,
        if_dout => B_cached_2_1_channel_dout,
        if_empty_n => B_cached_2_1_channel_empty_n,
        if_read => B_cached_2_1_channel_read);

    B_cached_2_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_2_channel_U_ap_dummy_ce,
        if_din => B_cached_2_2_channel_din,
        if_full_n => B_cached_2_2_channel_full_n,
        if_write => B_cached_2_2_channel_write,
        if_dout => B_cached_2_2_channel_dout,
        if_empty_n => B_cached_2_2_channel_empty_n,
        if_read => B_cached_2_2_channel_read);

    B_cached_2_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_3_channel_U_ap_dummy_ce,
        if_din => B_cached_2_3_channel_din,
        if_full_n => B_cached_2_3_channel_full_n,
        if_write => B_cached_2_3_channel_write,
        if_dout => B_cached_2_3_channel_dout,
        if_empty_n => B_cached_2_3_channel_empty_n,
        if_read => B_cached_2_3_channel_read);

    B_cached_2_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_4_channel_U_ap_dummy_ce,
        if_din => B_cached_2_4_channel_din,
        if_full_n => B_cached_2_4_channel_full_n,
        if_write => B_cached_2_4_channel_write,
        if_dout => B_cached_2_4_channel_dout,
        if_empty_n => B_cached_2_4_channel_empty_n,
        if_read => B_cached_2_4_channel_read);

    B_cached_2_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_5_channel_U_ap_dummy_ce,
        if_din => B_cached_2_5_channel_din,
        if_full_n => B_cached_2_5_channel_full_n,
        if_write => B_cached_2_5_channel_write,
        if_dout => B_cached_2_5_channel_dout,
        if_empty_n => B_cached_2_5_channel_empty_n,
        if_read => B_cached_2_5_channel_read);

    B_cached_2_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_6_channel_U_ap_dummy_ce,
        if_din => B_cached_2_6_channel_din,
        if_full_n => B_cached_2_6_channel_full_n,
        if_write => B_cached_2_6_channel_write,
        if_dout => B_cached_2_6_channel_dout,
        if_empty_n => B_cached_2_6_channel_empty_n,
        if_read => B_cached_2_6_channel_read);

    B_cached_2_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_7_channel_U_ap_dummy_ce,
        if_din => B_cached_2_7_channel_din,
        if_full_n => B_cached_2_7_channel_full_n,
        if_write => B_cached_2_7_channel_write,
        if_dout => B_cached_2_7_channel_dout,
        if_empty_n => B_cached_2_7_channel_empty_n,
        if_read => B_cached_2_7_channel_read);

    B_cached_3_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_0_channel_U_ap_dummy_ce,
        if_din => B_cached_3_0_channel_din,
        if_full_n => B_cached_3_0_channel_full_n,
        if_write => B_cached_3_0_channel_write,
        if_dout => B_cached_3_0_channel_dout,
        if_empty_n => B_cached_3_0_channel_empty_n,
        if_read => B_cached_3_0_channel_read);

    B_cached_3_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_1_channel_U_ap_dummy_ce,
        if_din => B_cached_3_1_channel_din,
        if_full_n => B_cached_3_1_channel_full_n,
        if_write => B_cached_3_1_channel_write,
        if_dout => B_cached_3_1_channel_dout,
        if_empty_n => B_cached_3_1_channel_empty_n,
        if_read => B_cached_3_1_channel_read);

    B_cached_3_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_2_channel_U_ap_dummy_ce,
        if_din => B_cached_3_2_channel_din,
        if_full_n => B_cached_3_2_channel_full_n,
        if_write => B_cached_3_2_channel_write,
        if_dout => B_cached_3_2_channel_dout,
        if_empty_n => B_cached_3_2_channel_empty_n,
        if_read => B_cached_3_2_channel_read);

    B_cached_3_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_3_channel_U_ap_dummy_ce,
        if_din => B_cached_3_3_channel_din,
        if_full_n => B_cached_3_3_channel_full_n,
        if_write => B_cached_3_3_channel_write,
        if_dout => B_cached_3_3_channel_dout,
        if_empty_n => B_cached_3_3_channel_empty_n,
        if_read => B_cached_3_3_channel_read);

    B_cached_3_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_4_channel_U_ap_dummy_ce,
        if_din => B_cached_3_4_channel_din,
        if_full_n => B_cached_3_4_channel_full_n,
        if_write => B_cached_3_4_channel_write,
        if_dout => B_cached_3_4_channel_dout,
        if_empty_n => B_cached_3_4_channel_empty_n,
        if_read => B_cached_3_4_channel_read);

    B_cached_3_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_5_channel_U_ap_dummy_ce,
        if_din => B_cached_3_5_channel_din,
        if_full_n => B_cached_3_5_channel_full_n,
        if_write => B_cached_3_5_channel_write,
        if_dout => B_cached_3_5_channel_dout,
        if_empty_n => B_cached_3_5_channel_empty_n,
        if_read => B_cached_3_5_channel_read);

    B_cached_3_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_6_channel_U_ap_dummy_ce,
        if_din => B_cached_3_6_channel_din,
        if_full_n => B_cached_3_6_channel_full_n,
        if_write => B_cached_3_6_channel_write,
        if_dout => B_cached_3_6_channel_dout,
        if_empty_n => B_cached_3_6_channel_empty_n,
        if_read => B_cached_3_6_channel_read);

    B_cached_3_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_7_channel_U_ap_dummy_ce,
        if_din => B_cached_3_7_channel_din,
        if_full_n => B_cached_3_7_channel_full_n,
        if_write => B_cached_3_7_channel_write,
        if_dout => B_cached_3_7_channel_dout,
        if_empty_n => B_cached_3_7_channel_empty_n,
        if_read => B_cached_3_7_channel_read);

    B_cached_4_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_0_channel_U_ap_dummy_ce,
        if_din => B_cached_4_0_channel_din,
        if_full_n => B_cached_4_0_channel_full_n,
        if_write => B_cached_4_0_channel_write,
        if_dout => B_cached_4_0_channel_dout,
        if_empty_n => B_cached_4_0_channel_empty_n,
        if_read => B_cached_4_0_channel_read);

    B_cached_4_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_1_channel_U_ap_dummy_ce,
        if_din => B_cached_4_1_channel_din,
        if_full_n => B_cached_4_1_channel_full_n,
        if_write => B_cached_4_1_channel_write,
        if_dout => B_cached_4_1_channel_dout,
        if_empty_n => B_cached_4_1_channel_empty_n,
        if_read => B_cached_4_1_channel_read);

    B_cached_4_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_2_channel_U_ap_dummy_ce,
        if_din => B_cached_4_2_channel_din,
        if_full_n => B_cached_4_2_channel_full_n,
        if_write => B_cached_4_2_channel_write,
        if_dout => B_cached_4_2_channel_dout,
        if_empty_n => B_cached_4_2_channel_empty_n,
        if_read => B_cached_4_2_channel_read);

    B_cached_4_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_3_channel_U_ap_dummy_ce,
        if_din => B_cached_4_3_channel_din,
        if_full_n => B_cached_4_3_channel_full_n,
        if_write => B_cached_4_3_channel_write,
        if_dout => B_cached_4_3_channel_dout,
        if_empty_n => B_cached_4_3_channel_empty_n,
        if_read => B_cached_4_3_channel_read);

    B_cached_4_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_4_channel_U_ap_dummy_ce,
        if_din => B_cached_4_4_channel_din,
        if_full_n => B_cached_4_4_channel_full_n,
        if_write => B_cached_4_4_channel_write,
        if_dout => B_cached_4_4_channel_dout,
        if_empty_n => B_cached_4_4_channel_empty_n,
        if_read => B_cached_4_4_channel_read);

    B_cached_4_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_5_channel_U_ap_dummy_ce,
        if_din => B_cached_4_5_channel_din,
        if_full_n => B_cached_4_5_channel_full_n,
        if_write => B_cached_4_5_channel_write,
        if_dout => B_cached_4_5_channel_dout,
        if_empty_n => B_cached_4_5_channel_empty_n,
        if_read => B_cached_4_5_channel_read);

    B_cached_4_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_6_channel_U_ap_dummy_ce,
        if_din => B_cached_4_6_channel_din,
        if_full_n => B_cached_4_6_channel_full_n,
        if_write => B_cached_4_6_channel_write,
        if_dout => B_cached_4_6_channel_dout,
        if_empty_n => B_cached_4_6_channel_empty_n,
        if_read => B_cached_4_6_channel_read);

    B_cached_4_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_7_channel_U_ap_dummy_ce,
        if_din => B_cached_4_7_channel_din,
        if_full_n => B_cached_4_7_channel_full_n,
        if_write => B_cached_4_7_channel_write,
        if_dout => B_cached_4_7_channel_dout,
        if_empty_n => B_cached_4_7_channel_empty_n,
        if_read => B_cached_4_7_channel_read);

    B_cached_5_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_0_channel_U_ap_dummy_ce,
        if_din => B_cached_5_0_channel_din,
        if_full_n => B_cached_5_0_channel_full_n,
        if_write => B_cached_5_0_channel_write,
        if_dout => B_cached_5_0_channel_dout,
        if_empty_n => B_cached_5_0_channel_empty_n,
        if_read => B_cached_5_0_channel_read);

    B_cached_5_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_1_channel_U_ap_dummy_ce,
        if_din => B_cached_5_1_channel_din,
        if_full_n => B_cached_5_1_channel_full_n,
        if_write => B_cached_5_1_channel_write,
        if_dout => B_cached_5_1_channel_dout,
        if_empty_n => B_cached_5_1_channel_empty_n,
        if_read => B_cached_5_1_channel_read);

    B_cached_5_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_2_channel_U_ap_dummy_ce,
        if_din => B_cached_5_2_channel_din,
        if_full_n => B_cached_5_2_channel_full_n,
        if_write => B_cached_5_2_channel_write,
        if_dout => B_cached_5_2_channel_dout,
        if_empty_n => B_cached_5_2_channel_empty_n,
        if_read => B_cached_5_2_channel_read);

    B_cached_5_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_3_channel_U_ap_dummy_ce,
        if_din => B_cached_5_3_channel_din,
        if_full_n => B_cached_5_3_channel_full_n,
        if_write => B_cached_5_3_channel_write,
        if_dout => B_cached_5_3_channel_dout,
        if_empty_n => B_cached_5_3_channel_empty_n,
        if_read => B_cached_5_3_channel_read);

    B_cached_5_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_4_channel_U_ap_dummy_ce,
        if_din => B_cached_5_4_channel_din,
        if_full_n => B_cached_5_4_channel_full_n,
        if_write => B_cached_5_4_channel_write,
        if_dout => B_cached_5_4_channel_dout,
        if_empty_n => B_cached_5_4_channel_empty_n,
        if_read => B_cached_5_4_channel_read);

    B_cached_5_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_5_channel_U_ap_dummy_ce,
        if_din => B_cached_5_5_channel_din,
        if_full_n => B_cached_5_5_channel_full_n,
        if_write => B_cached_5_5_channel_write,
        if_dout => B_cached_5_5_channel_dout,
        if_empty_n => B_cached_5_5_channel_empty_n,
        if_read => B_cached_5_5_channel_read);

    B_cached_5_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_6_channel_U_ap_dummy_ce,
        if_din => B_cached_5_6_channel_din,
        if_full_n => B_cached_5_6_channel_full_n,
        if_write => B_cached_5_6_channel_write,
        if_dout => B_cached_5_6_channel_dout,
        if_empty_n => B_cached_5_6_channel_empty_n,
        if_read => B_cached_5_6_channel_read);

    B_cached_5_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_7_channel_U_ap_dummy_ce,
        if_din => B_cached_5_7_channel_din,
        if_full_n => B_cached_5_7_channel_full_n,
        if_write => B_cached_5_7_channel_write,
        if_dout => B_cached_5_7_channel_dout,
        if_empty_n => B_cached_5_7_channel_empty_n,
        if_read => B_cached_5_7_channel_read);

    B_cached_6_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_0_channel_U_ap_dummy_ce,
        if_din => B_cached_6_0_channel_din,
        if_full_n => B_cached_6_0_channel_full_n,
        if_write => B_cached_6_0_channel_write,
        if_dout => B_cached_6_0_channel_dout,
        if_empty_n => B_cached_6_0_channel_empty_n,
        if_read => B_cached_6_0_channel_read);

    B_cached_6_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_1_channel_U_ap_dummy_ce,
        if_din => B_cached_6_1_channel_din,
        if_full_n => B_cached_6_1_channel_full_n,
        if_write => B_cached_6_1_channel_write,
        if_dout => B_cached_6_1_channel_dout,
        if_empty_n => B_cached_6_1_channel_empty_n,
        if_read => B_cached_6_1_channel_read);

    B_cached_6_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_2_channel_U_ap_dummy_ce,
        if_din => B_cached_6_2_channel_din,
        if_full_n => B_cached_6_2_channel_full_n,
        if_write => B_cached_6_2_channel_write,
        if_dout => B_cached_6_2_channel_dout,
        if_empty_n => B_cached_6_2_channel_empty_n,
        if_read => B_cached_6_2_channel_read);

    B_cached_6_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_3_channel_U_ap_dummy_ce,
        if_din => B_cached_6_3_channel_din,
        if_full_n => B_cached_6_3_channel_full_n,
        if_write => B_cached_6_3_channel_write,
        if_dout => B_cached_6_3_channel_dout,
        if_empty_n => B_cached_6_3_channel_empty_n,
        if_read => B_cached_6_3_channel_read);

    B_cached_6_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_4_channel_U_ap_dummy_ce,
        if_din => B_cached_6_4_channel_din,
        if_full_n => B_cached_6_4_channel_full_n,
        if_write => B_cached_6_4_channel_write,
        if_dout => B_cached_6_4_channel_dout,
        if_empty_n => B_cached_6_4_channel_empty_n,
        if_read => B_cached_6_4_channel_read);

    B_cached_6_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_5_channel_U_ap_dummy_ce,
        if_din => B_cached_6_5_channel_din,
        if_full_n => B_cached_6_5_channel_full_n,
        if_write => B_cached_6_5_channel_write,
        if_dout => B_cached_6_5_channel_dout,
        if_empty_n => B_cached_6_5_channel_empty_n,
        if_read => B_cached_6_5_channel_read);

    B_cached_6_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_6_channel_U_ap_dummy_ce,
        if_din => B_cached_6_6_channel_din,
        if_full_n => B_cached_6_6_channel_full_n,
        if_write => B_cached_6_6_channel_write,
        if_dout => B_cached_6_6_channel_dout,
        if_empty_n => B_cached_6_6_channel_empty_n,
        if_read => B_cached_6_6_channel_read);

    B_cached_6_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_7_channel_U_ap_dummy_ce,
        if_din => B_cached_6_7_channel_din,
        if_full_n => B_cached_6_7_channel_full_n,
        if_write => B_cached_6_7_channel_write,
        if_dout => B_cached_6_7_channel_dout,
        if_empty_n => B_cached_6_7_channel_empty_n,
        if_read => B_cached_6_7_channel_read);

    B_cached_7_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_0_channel_U_ap_dummy_ce,
        if_din => B_cached_7_0_channel_din,
        if_full_n => B_cached_7_0_channel_full_n,
        if_write => B_cached_7_0_channel_write,
        if_dout => B_cached_7_0_channel_dout,
        if_empty_n => B_cached_7_0_channel_empty_n,
        if_read => B_cached_7_0_channel_read);

    B_cached_7_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_1_channel_U_ap_dummy_ce,
        if_din => B_cached_7_1_channel_din,
        if_full_n => B_cached_7_1_channel_full_n,
        if_write => B_cached_7_1_channel_write,
        if_dout => B_cached_7_1_channel_dout,
        if_empty_n => B_cached_7_1_channel_empty_n,
        if_read => B_cached_7_1_channel_read);

    B_cached_7_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_2_channel_U_ap_dummy_ce,
        if_din => B_cached_7_2_channel_din,
        if_full_n => B_cached_7_2_channel_full_n,
        if_write => B_cached_7_2_channel_write,
        if_dout => B_cached_7_2_channel_dout,
        if_empty_n => B_cached_7_2_channel_empty_n,
        if_read => B_cached_7_2_channel_read);

    B_cached_7_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_3_channel_U_ap_dummy_ce,
        if_din => B_cached_7_3_channel_din,
        if_full_n => B_cached_7_3_channel_full_n,
        if_write => B_cached_7_3_channel_write,
        if_dout => B_cached_7_3_channel_dout,
        if_empty_n => B_cached_7_3_channel_empty_n,
        if_read => B_cached_7_3_channel_read);

    B_cached_7_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_4_channel_U_ap_dummy_ce,
        if_din => B_cached_7_4_channel_din,
        if_full_n => B_cached_7_4_channel_full_n,
        if_write => B_cached_7_4_channel_write,
        if_dout => B_cached_7_4_channel_dout,
        if_empty_n => B_cached_7_4_channel_empty_n,
        if_read => B_cached_7_4_channel_read);

    B_cached_7_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_5_channel_U_ap_dummy_ce,
        if_din => B_cached_7_5_channel_din,
        if_full_n => B_cached_7_5_channel_full_n,
        if_write => B_cached_7_5_channel_write,
        if_dout => B_cached_7_5_channel_dout,
        if_empty_n => B_cached_7_5_channel_empty_n,
        if_read => B_cached_7_5_channel_read);

    B_cached_7_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_6_channel_U_ap_dummy_ce,
        if_din => B_cached_7_6_channel_din,
        if_full_n => B_cached_7_6_channel_full_n,
        if_write => B_cached_7_6_channel_write,
        if_dout => B_cached_7_6_channel_dout,
        if_empty_n => B_cached_7_6_channel_empty_n,
        if_read => B_cached_7_6_channel_read);

    B_cached_7_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_7_channel_U_ap_dummy_ce,
        if_din => B_cached_7_7_channel_din,
        if_full_n => B_cached_7_7_channel_full_n,
        if_write => B_cached_7_7_channel_write,
        if_dout => B_cached_7_7_channel_dout,
        if_empty_n => B_cached_7_7_channel_empty_n,
        if_read => B_cached_7_7_channel_read);





    -- ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 assign process. --
    ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
                elsif ((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc440_U0 assign process. --
    ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc440_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc440_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc440_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc440_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    A_0_091_U_ap_dummy_ce <= ap_const_logic_1;
    A_0_091_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_din;
    A_0_091_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_read;
    A_0_091_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_write;
    A_0_189_U_ap_dummy_ce <= ap_const_logic_1;
    A_0_189_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_din;
    A_0_189_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_read;
    A_0_189_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_write;
    A_0_1_read_ap_ack <= ap_const_logic_1;
    A_0_2106_U_ap_dummy_ce <= ap_const_logic_1;
    A_0_2106_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_din;
    A_0_2106_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_read;
    A_0_2106_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_write;
    A_0_2_read_ap_ack <= ap_const_logic_1;
    A_0_3108_U_ap_dummy_ce <= ap_const_logic_1;
    A_0_3108_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_din;
    A_0_3108_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_read;
    A_0_3108_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_write;
    A_0_3_read_ap_ack <= ap_const_logic_1;
    A_0_4112_U_ap_dummy_ce <= ap_const_logic_1;
    A_0_4112_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_din;
    A_0_4112_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_read;
    A_0_4112_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_write;
    A_0_592_U_ap_dummy_ce <= ap_const_logic_1;
    A_0_592_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_din;
    A_0_592_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_read;
    A_0_592_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_write;
    A_0_5_read_ap_ack <= ap_const_logic_1;
    A_0_690_U_ap_dummy_ce <= ap_const_logic_1;
    A_0_690_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_din;
    A_0_690_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_read;
    A_0_690_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_write;
    A_0_6_read_ap_ack <= ap_const_logic_1;
    A_0_785_U_ap_dummy_ce <= ap_const_logic_1;
    A_0_785_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_din;
    A_0_785_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_read;
    A_0_785_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_write;
    A_0_7_read_ap_ack <= ap_const_logic_1;
    A_1_0126_U_ap_dummy_ce <= ap_const_logic_1;
    A_1_0126_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_din;
    A_1_0126_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_read;
    A_1_0126_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_write;
    A_1_0_read_ap_ack <= ap_const_logic_1;
    A_1_178_U_ap_dummy_ce <= ap_const_logic_1;
    A_1_178_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_din;
    A_1_178_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_read;
    A_1_178_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_write;
    A_1_277_U_ap_dummy_ce <= ap_const_logic_1;
    A_1_277_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_din;
    A_1_277_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_read;
    A_1_277_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_write;
    A_1_2_read_ap_ack <= ap_const_logic_1;
    A_1_3119_U_ap_dummy_ce <= ap_const_logic_1;
    A_1_3119_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_din;
    A_1_3119_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_read;
    A_1_3119_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_write;
    A_1_3_read_ap_ack <= ap_const_logic_1;
    A_1_488_U_ap_dummy_ce <= ap_const_logic_1;
    A_1_488_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_din;
    A_1_488_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_read;
    A_1_488_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_write;
    A_1_4_read_ap_ack <= ap_const_logic_1;
    A_1_582_U_ap_dummy_ce <= ap_const_logic_1;
    A_1_582_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_din;
    A_1_582_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_read;
    A_1_582_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_write;
    A_1_5_read_ap_ack <= ap_const_logic_1;
    A_1_6125_U_ap_dummy_ce <= ap_const_logic_1;
    A_1_6125_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_din;
    A_1_6125_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_read;
    A_1_6125_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_write;
    A_1_6_read_ap_ack <= ap_const_logic_1;
    A_1_7101_U_ap_dummy_ce <= ap_const_logic_1;
    A_1_7101_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_din;
    A_1_7101_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_read;
    A_1_7101_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_write;
    A_1_7_read_ap_ack <= ap_const_logic_1;
    A_2_087_U_ap_dummy_ce <= ap_const_logic_1;
    A_2_087_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_din;
    A_2_087_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_read;
    A_2_087_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_write;
    A_2_0_read_ap_ack <= ap_const_logic_1;
    A_2_1115_U_ap_dummy_ce <= ap_const_logic_1;
    A_2_1115_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_din;
    A_2_1115_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_read;
    A_2_1115_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_write;
    A_2_1_read_ap_ack <= ap_const_logic_1;
    A_2_2134_U_ap_dummy_ce <= ap_const_logic_1;
    A_2_2134_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_din;
    A_2_2134_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_read;
    A_2_2134_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_write;
    A_2_3131_U_ap_dummy_ce <= ap_const_logic_1;
    A_2_3131_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_din;
    A_2_3131_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_read;
    A_2_3131_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_write;
    A_2_3_read_ap_ack <= ap_const_logic_1;
    A_2_4110_U_ap_dummy_ce <= ap_const_logic_1;
    A_2_4110_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_din;
    A_2_4110_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_read;
    A_2_4110_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_write;
    A_2_4_read_ap_ack <= ap_const_logic_1;
    A_2_596_U_ap_dummy_ce <= ap_const_logic_1;
    A_2_596_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_din;
    A_2_596_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_read;
    A_2_596_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_write;
    A_2_5_read_ap_ack <= ap_const_logic_1;
    A_2_6122_U_ap_dummy_ce <= ap_const_logic_1;
    A_2_6122_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_din;
    A_2_6122_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_read;
    A_2_6122_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_write;
    A_2_6_read_ap_ack <= ap_const_logic_1;
    A_2_7127_U_ap_dummy_ce <= ap_const_logic_1;
    A_2_7127_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_din;
    A_2_7127_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_read;
    A_2_7127_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_write;
    A_2_7_read_ap_ack <= ap_const_logic_1;
    A_3_0123_U_ap_dummy_ce <= ap_const_logic_1;
    A_3_0123_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_din;
    A_3_0123_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_read;
    A_3_0123_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_write;
    A_3_0_read_ap_ack <= ap_const_logic_1;
    A_3_1114_U_ap_dummy_ce <= ap_const_logic_1;
    A_3_1114_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_din;
    A_3_1114_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_read;
    A_3_1114_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_write;
    A_3_1_read_ap_ack <= ap_const_logic_1;
    A_3_2117_U_ap_dummy_ce <= ap_const_logic_1;
    A_3_2117_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_din;
    A_3_2117_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_read;
    A_3_2117_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_write;
    A_3_2_read_ap_ack <= ap_const_logic_1;
    A_3_3130_U_ap_dummy_ce <= ap_const_logic_1;
    A_3_3130_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_din;
    A_3_3130_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_read;
    A_3_3130_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_write;
    A_3_4129_U_ap_dummy_ce <= ap_const_logic_1;
    A_3_4129_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_din;
    A_3_4129_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_read;
    A_3_4129_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_write;
    A_3_4_read_ap_ack <= ap_const_logic_1;
    A_3_5128_U_ap_dummy_ce <= ap_const_logic_1;
    A_3_5128_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_din;
    A_3_5128_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_read;
    A_3_5128_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_write;
    A_3_5_read_ap_ack <= ap_const_logic_1;
    A_3_680_U_ap_dummy_ce <= ap_const_logic_1;
    A_3_680_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_din;
    A_3_680_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_read;
    A_3_680_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_write;
    A_3_6_read_ap_ack <= ap_const_logic_1;
    A_3_7124_U_ap_dummy_ce <= ap_const_logic_1;
    A_3_7124_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_din;
    A_3_7124_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_read;
    A_3_7124_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_write;
    A_3_7_read_ap_ack <= ap_const_logic_1;
    A_4_076_U_ap_dummy_ce <= ap_const_logic_1;
    A_4_076_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_din;
    A_4_076_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_read;
    A_4_076_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_write;
    A_4_173_U_ap_dummy_ce <= ap_const_logic_1;
    A_4_173_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_din;
    A_4_173_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_read;
    A_4_173_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_write;
    A_4_1_read_ap_ack <= ap_const_logic_1;
    A_4_295_U_ap_dummy_ce <= ap_const_logic_1;
    A_4_295_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_din;
    A_4_295_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_read;
    A_4_295_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_write;
    A_4_2_read_ap_ack <= ap_const_logic_1;
    A_4_394_U_ap_dummy_ce <= ap_const_logic_1;
    A_4_394_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_din;
    A_4_394_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_read;
    A_4_394_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_write;
    A_4_3_read_ap_ack <= ap_const_logic_1;
    A_4_498_U_ap_dummy_ce <= ap_const_logic_1;
    A_4_498_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_din;
    A_4_498_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_read;
    A_4_498_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_write;
    A_4_5133_U_ap_dummy_ce <= ap_const_logic_1;
    A_4_5133_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_din;
    A_4_5133_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_read;
    A_4_5133_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_write;
    A_4_5_read_ap_ack <= ap_const_logic_1;
    A_4_6111_U_ap_dummy_ce <= ap_const_logic_1;
    A_4_6111_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_din;
    A_4_6111_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_read;
    A_4_6111_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_write;
    A_4_6_read_ap_ack <= ap_const_logic_1;
    A_4_784_U_ap_dummy_ce <= ap_const_logic_1;
    A_4_784_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_din;
    A_4_784_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_read;
    A_4_784_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_write;
    A_4_7_read_ap_ack <= ap_const_logic_1;
    A_5_074_U_ap_dummy_ce <= ap_const_logic_1;
    A_5_074_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_din;
    A_5_074_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_read;
    A_5_074_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_write;
    A_5_0_read_ap_ack <= ap_const_logic_1;
    A_5_171_U_ap_dummy_ce <= ap_const_logic_1;
    A_5_171_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_din;
    A_5_171_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_read;
    A_5_171_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_write;
    A_5_1_read_ap_ack <= ap_const_logic_1;
    A_5_2104_U_ap_dummy_ce <= ap_const_logic_1;
    A_5_2104_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_din;
    A_5_2104_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_read;
    A_5_2104_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_write;
    A_5_2_read_ap_ack <= ap_const_logic_1;
    A_5_393_U_ap_dummy_ce <= ap_const_logic_1;
    A_5_393_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_din;
    A_5_393_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_read;
    A_5_393_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_write;
    A_5_3_read_ap_ack <= ap_const_logic_1;
    A_5_497_U_ap_dummy_ce <= ap_const_logic_1;
    A_5_497_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_din;
    A_5_497_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_read;
    A_5_497_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_write;
    A_5_4_read_ap_ack <= ap_const_logic_1;
    A_5_5132_U_ap_dummy_ce <= ap_const_logic_1;
    A_5_5132_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_din;
    A_5_5132_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_read;
    A_5_5132_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_write;
    A_5_681_U_ap_dummy_ce <= ap_const_logic_1;
    A_5_681_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_din;
    A_5_681_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_read;
    A_5_681_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_write;
    A_5_6_read_ap_ack <= ap_const_logic_1;
    A_5_799_U_ap_dummy_ce <= ap_const_logic_1;
    A_5_799_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_din;
    A_5_799_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_read;
    A_5_799_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_write;
    A_5_7_read_ap_ack <= ap_const_logic_1;
    A_6_0105_U_ap_dummy_ce <= ap_const_logic_1;
    A_6_0105_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_din;
    A_6_0105_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_read;
    A_6_0105_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_write;
    A_6_0_read_ap_ack <= ap_const_logic_1;
    A_6_1120_U_ap_dummy_ce <= ap_const_logic_1;
    A_6_1120_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_din;
    A_6_1120_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_read;
    A_6_1120_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_write;
    A_6_1_read_ap_ack <= ap_const_logic_1;
    A_6_272_U_ap_dummy_ce <= ap_const_logic_1;
    A_6_272_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_din;
    A_6_272_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_read;
    A_6_272_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_write;
    A_6_2_read_ap_ack <= ap_const_logic_1;
    A_6_3100_U_ap_dummy_ce <= ap_const_logic_1;
    A_6_3100_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_din;
    A_6_3100_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_read;
    A_6_3100_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_write;
    A_6_3_read_ap_ack <= ap_const_logic_1;
    A_6_483_U_ap_dummy_ce <= ap_const_logic_1;
    A_6_483_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_din;
    A_6_483_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_read;
    A_6_483_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_write;
    A_6_4_read_ap_ack <= ap_const_logic_1;
    A_6_5102_U_ap_dummy_ce <= ap_const_logic_1;
    A_6_5102_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_din;
    A_6_5102_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_read;
    A_6_5102_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_write;
    A_6_5_read_ap_ack <= ap_const_logic_1;
    A_6_675_U_ap_dummy_ce <= ap_const_logic_1;
    A_6_675_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_din;
    A_6_675_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_read;
    A_6_675_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_write;
    A_6_7103_U_ap_dummy_ce <= ap_const_logic_1;
    A_6_7103_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_din;
    A_6_7103_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_read;
    A_6_7103_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_write;
    A_6_7_read_ap_ack <= ap_const_logic_1;
    A_7_0121_U_ap_dummy_ce <= ap_const_logic_1;
    A_7_0121_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_din;
    A_7_0121_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_read;
    A_7_0121_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_write;
    A_7_0_read_ap_ack <= ap_const_logic_1;
    A_7_1118_U_ap_dummy_ce <= ap_const_logic_1;
    A_7_1118_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_din;
    A_7_1118_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_read;
    A_7_1118_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_write;
    A_7_1_read_ap_ack <= ap_const_logic_1;
    A_7_2107_U_ap_dummy_ce <= ap_const_logic_1;
    A_7_2107_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_din;
    A_7_2107_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_read;
    A_7_2107_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_write;
    A_7_2_read_ap_ack <= ap_const_logic_1;
    A_7_3109_U_ap_dummy_ce <= ap_const_logic_1;
    A_7_3109_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_din;
    A_7_3109_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_read;
    A_7_3109_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_write;
    A_7_3_read_ap_ack <= ap_const_logic_1;
    A_7_4113_U_ap_dummy_ce <= ap_const_logic_1;
    A_7_4113_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_din;
    A_7_4113_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_read;
    A_7_4113_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_write;
    A_7_4_read_ap_ack <= ap_const_logic_1;
    A_7_586_U_ap_dummy_ce <= ap_const_logic_1;
    A_7_586_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_din;
    A_7_586_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_read;
    A_7_586_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_write;
    A_7_5_read_ap_ack <= ap_const_logic_1;
    A_7_6116_U_ap_dummy_ce <= ap_const_logic_1;
    A_7_6116_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_din;
    A_7_6116_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_read;
    A_7_6116_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_write;
    A_7_6_read_ap_ack <= ap_const_logic_1;
    A_7_779_U_ap_dummy_ce <= ap_const_logic_1;
    A_7_779_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_din;
    A_7_779_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_read;
    A_7_779_write <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_write;
    B_cached_0_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0;
    B_cached_0_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_0_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel;
    B_cached_0_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1;
    B_cached_0_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_0_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel;
    B_cached_0_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2;
    B_cached_0_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_0_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel;
    B_cached_0_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3;
    B_cached_0_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_0_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel;
    B_cached_0_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4;
    B_cached_0_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_0_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel;
    B_cached_0_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5;
    B_cached_0_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_0_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel;
    B_cached_0_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6;
    B_cached_0_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_0_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel;
    B_cached_0_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7;
    B_cached_0_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_0_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel;
    B_cached_1_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8;
    B_cached_1_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_1_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel;
    B_cached_1_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9;
    B_cached_1_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_1_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel;
    B_cached_1_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10;
    B_cached_1_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_1_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel;
    B_cached_1_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11;
    B_cached_1_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_1_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel;
    B_cached_1_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12;
    B_cached_1_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_1_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel;
    B_cached_1_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13;
    B_cached_1_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_1_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel;
    B_cached_1_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14;
    B_cached_1_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_1_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel;
    B_cached_1_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15;
    B_cached_1_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_1_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel;
    B_cached_2_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16;
    B_cached_2_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_2_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel;
    B_cached_2_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17;
    B_cached_2_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_2_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel;
    B_cached_2_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18;
    B_cached_2_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_2_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel;
    B_cached_2_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19;
    B_cached_2_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_2_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel;
    B_cached_2_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20;
    B_cached_2_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_2_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel;
    B_cached_2_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21;
    B_cached_2_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_2_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel;
    B_cached_2_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22;
    B_cached_2_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_2_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel;
    B_cached_2_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23;
    B_cached_2_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_2_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel;
    B_cached_3_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24;
    B_cached_3_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_3_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel;
    B_cached_3_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25;
    B_cached_3_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_3_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel;
    B_cached_3_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26;
    B_cached_3_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_3_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel;
    B_cached_3_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27;
    B_cached_3_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_3_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel;
    B_cached_3_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28;
    B_cached_3_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_3_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel;
    B_cached_3_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29;
    B_cached_3_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_3_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel;
    B_cached_3_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30;
    B_cached_3_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_3_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel;
    B_cached_3_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31;
    B_cached_3_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_3_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel;
    B_cached_4_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32;
    B_cached_4_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_4_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel;
    B_cached_4_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33;
    B_cached_4_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_4_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel;
    B_cached_4_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34;
    B_cached_4_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_4_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel;
    B_cached_4_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35;
    B_cached_4_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_4_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel;
    B_cached_4_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36;
    B_cached_4_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_4_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel;
    B_cached_4_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37;
    B_cached_4_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_4_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel;
    B_cached_4_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38;
    B_cached_4_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_4_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel;
    B_cached_4_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39;
    B_cached_4_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_4_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel;
    B_cached_5_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40;
    B_cached_5_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_5_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel;
    B_cached_5_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41;
    B_cached_5_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_5_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel;
    B_cached_5_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42;
    B_cached_5_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_5_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel;
    B_cached_5_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43;
    B_cached_5_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_5_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel;
    B_cached_5_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44;
    B_cached_5_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_5_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel;
    B_cached_5_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45;
    B_cached_5_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_5_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel;
    B_cached_5_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46;
    B_cached_5_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_5_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel;
    B_cached_5_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47;
    B_cached_5_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_5_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel;
    B_cached_6_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48;
    B_cached_6_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_6_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel;
    B_cached_6_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49;
    B_cached_6_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_6_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel;
    B_cached_6_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50;
    B_cached_6_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_6_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel;
    B_cached_6_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51;
    B_cached_6_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_6_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel;
    B_cached_6_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52;
    B_cached_6_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_6_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel;
    B_cached_6_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53;
    B_cached_6_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_6_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel;
    B_cached_6_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54;
    B_cached_6_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_6_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel;
    B_cached_6_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55;
    B_cached_6_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_6_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel;
    B_cached_7_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56;
    B_cached_7_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_7_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel;
    B_cached_7_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57;
    B_cached_7_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_7_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel;
    B_cached_7_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58;
    B_cached_7_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_7_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel;
    B_cached_7_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59;
    B_cached_7_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_7_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel;
    B_cached_7_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60;
    B_cached_7_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_7_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel;
    B_cached_7_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61;
    B_cached_7_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_7_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel;
    B_cached_7_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62;
    B_cached_7_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_7_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel;
    B_cached_7_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63;
    B_cached_7_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_ready;
    B_cached_7_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel;
    B_read <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_read;
    C_address0 <= DCT_MAT_Multiply_Loop_Row_proc440_U0_C_address0;
    C_address1 <= ap_const_lv6_0;
    C_ce0 <= DCT_MAT_Multiply_Loop_Row_proc440_U0_C_ce0;
    C_ce1 <= ap_const_logic_0;
    C_d0 <= DCT_MAT_Multiply_Loop_Row_proc440_U0_C_d0;
    C_d1 <= ap_const_lv32_0;
    C_we0 <= DCT_MAT_Multiply_Loop_Row_proc440_U0_C_we0;
    C_we1 <= ap_const_logic_0;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_0_out_full_n <= A_0_091_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_1_out_full_n <= A_0_189_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_2_out_full_n <= A_0_2106_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_3_out_full_n <= A_0_3108_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_4_out_full_n <= A_0_4112_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_5_out_full_n <= A_0_592_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_6_out_full_n <= A_0_690_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_0_7_out_full_n <= A_0_785_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_0_out_full_n <= A_1_0126_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_1_out_full_n <= A_1_178_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_2_out_full_n <= A_1_277_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_3_out_full_n <= A_1_3119_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_4_out_full_n <= A_1_488_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_5_out_full_n <= A_1_582_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_6_out_full_n <= A_1_6125_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_1_7_out_full_n <= A_1_7101_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_0_out_full_n <= A_2_087_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_1_out_full_n <= A_2_1115_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_2_out_full_n <= A_2_2134_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_3_out_full_n <= A_2_3131_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_4_out_full_n <= A_2_4110_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_5_out_full_n <= A_2_596_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_6_out_full_n <= A_2_6122_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_2_7_out_full_n <= A_2_7127_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_0_out_full_n <= A_3_0123_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_1_out_full_n <= A_3_1114_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_2_out_full_n <= A_3_2117_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_3_out_full_n <= A_3_3130_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_4_out_full_n <= A_3_4129_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_5_out_full_n <= A_3_5128_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_6_out_full_n <= A_3_680_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_3_7_out_full_n <= A_3_7124_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_0_out_full_n <= A_4_076_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_1_out_full_n <= A_4_173_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_2_out_full_n <= A_4_295_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_3_out_full_n <= A_4_394_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_4_out_full_n <= A_4_498_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_5_out_full_n <= A_4_5133_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_6_out_full_n <= A_4_6111_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_4_7_out_full_n <= A_4_784_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_0_out_full_n <= A_5_074_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_1_out_full_n <= A_5_171_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_2_out_full_n <= A_5_2104_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_3_out_full_n <= A_5_393_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_4_out_full_n <= A_5_497_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_5_out_full_n <= A_5_5132_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_6_out_full_n <= A_5_681_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_5_7_out_full_n <= A_5_799_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_0_out_full_n <= A_6_0105_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_1_out_full_n <= A_6_1120_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_2_out_full_n <= A_6_272_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_3_out_full_n <= A_6_3100_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_4_out_full_n <= A_6_483_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_5_out_full_n <= A_6_5102_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_6_out_full_n <= A_6_675_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_6_7_out_full_n <= A_6_7103_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_0_out_full_n <= A_7_0121_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_1_out_full_n <= A_7_1118_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_2_out_full_n <= A_7_2107_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_3_out_full_n <= A_7_3109_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_4_out_full_n <= A_7_4113_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_5_out_full_n <= A_7_586_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_6_out_full_n <= A_7_6116_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_A_7_7_out_full_n <= A_7_779_full_n;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_dout <= B_dout;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_empty_n <= B_empty_n;

    -- DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue assign process. --
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue_assign_proc : process(ap_sig_ready_B_cached_2_6_channel_full_n, ap_sig_ready_B_cached_6_4_channel_full_n, ap_sig_ready_B_cached_0_4_channel_full_n, ap_sig_ready_B_cached_1_2_channel_full_n, ap_sig_ready_B_cached_1_5_channel_full_n, ap_sig_ready_B_cached_0_2_channel_full_n, ap_sig_ready_B_cached_6_5_channel_full_n, ap_sig_ready_B_cached_0_6_channel_full_n, ap_sig_ready_B_cached_0_1_channel_full_n, ap_sig_ready_B_cached_3_6_channel_full_n, ap_sig_ready_B_cached_4_3_channel_full_n, ap_sig_ready_B_cached_0_5_channel_full_n, ap_sig_ready_B_cached_4_5_channel_full_n, ap_sig_ready_B_cached_5_5_channel_full_n, ap_sig_ready_B_cached_1_1_channel_full_n, ap_sig_ready_B_cached_1_7_channel_full_n, ap_sig_ready_B_cached_2_1_channel_full_n, ap_sig_ready_B_cached_6_6_channel_full_n, ap_sig_ready_B_cached_6_7_channel_full_n, ap_sig_ready_B_cached_7_2_channel_full_n, ap_sig_ready_B_cached_7_3_channel_full_n, ap_sig_ready_B_cached_5_2_channel_full_n, ap_sig_ready_B_cached_6_3_channel_full_n, ap_sig_ready_B_cached_7_6_channel_full_n, ap_sig_ready_B_cached_4_1_channel_full_n, ap_sig_ready_B_cached_5_1_channel_full_n, ap_sig_ready_B_cached_4_7_channel_full_n, ap_sig_ready_B_cached_7_5_channel_full_n, ap_sig_ready_B_cached_7_7_channel_full_n, ap_sig_ready_B_cached_5_6_channel_full_n, ap_sig_ready_B_cached_2_3_channel_full_n, ap_sig_ready_B_cached_3_2_channel_full_n, ap_sig_ready_B_cached_4_0_channel_full_n, ap_sig_ready_B_cached_2_0_channel_full_n, ap_sig_ready_B_cached_3_7_channel_full_n, ap_sig_ready_B_cached_5_0_channel_full_n, ap_sig_ready_B_cached_4_4_channel_full_n, ap_sig_ready_B_cached_4_6_channel_full_n, ap_sig_ready_B_cached_2_4_channel_full_n, ap_sig_ready_B_cached_7_0_channel_full_n, ap_sig_ready_B_cached_0_3_channel_full_n, ap_sig_ready_B_cached_1_4_channel_full_n, ap_sig_ready_B_cached_4_2_channel_full_n, ap_sig_ready_B_cached_6_0_channel_full_n, ap_sig_ready_B_cached_7_1_channel_full_n, ap_sig_ready_B_cached_3_4_channel_full_n, ap_sig_ready_B_cached_7_4_channel_full_n, ap_sig_ready_B_cached_1_0_channel_full_n, ap_sig_ready_B_cached_2_5_channel_full_n, ap_sig_ready_B_cached_3_1_channel_full_n, ap_sig_ready_B_cached_1_6_channel_full_n, ap_sig_ready_B_cached_3_3_channel_full_n, ap_sig_ready_B_cached_3_5_channel_full_n, ap_sig_ready_B_cached_0_7_channel_full_n, ap_sig_ready_B_cached_5_4_channel_full_n, ap_sig_ready_B_cached_0_0_channel_full_n, ap_sig_ready_B_cached_2_2_channel_full_n, ap_sig_ready_B_cached_1_3_channel_full_n, ap_sig_ready_B_cached_3_0_channel_full_n, ap_sig_ready_B_cached_2_7_channel_full_n, ap_sig_ready_B_cached_5_3_channel_full_n, ap_sig_ready_B_cached_6_1_channel_full_n, ap_sig_ready_B_cached_6_2_channel_full_n, ap_sig_ready_B_cached_5_7_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_B_cached_2_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_7_channel_full_n))) then 
            DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start <= ap_start;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read191 <= A_6_2_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read192 <= A_4_1_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read193 <= A_5_0_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read196 <= A_1_2_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read199 <= A_3_6_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read200 <= A_5_6_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read201 <= A_1_5_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read202 <= A_6_4_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read203 <= A_4_7_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read204 <= A_0_7_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read205 <= A_7_5_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read206 <= A_2_0_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read207 <= A_1_4_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read208 <= A_0_1_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read209 <= A_0_6_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read211 <= A_0_5_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read212 <= A_5_3_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read213 <= A_4_3_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read214 <= A_4_2_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read215 <= A_2_5_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read216 <= A_5_4_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read218 <= A_5_7_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read219 <= A_6_3_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read220 <= A_1_7_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read221 <= A_6_5_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read222 <= A_6_7_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read223 <= A_5_2_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read224 <= A_6_0_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read225 <= A_0_2_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read226 <= A_7_2_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read227 <= A_0_3_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read228 <= A_7_3_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read229 <= A_2_4_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read230 <= A_4_6_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read232 <= A_7_4_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read233 <= A_3_1_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read234 <= A_2_1_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read235 <= A_7_6_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read236 <= A_3_2_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read237 <= A_7_1_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read238 <= A_1_3_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read239 <= A_6_1_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read240 <= A_7_0_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read241 <= A_2_6_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read242 <= A_3_0_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read243 <= A_3_7_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read244 <= A_1_6_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read245 <= A_1_0_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read246 <= A_2_7_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read247 <= A_3_5_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read248 <= A_3_4_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read250 <= A_2_3_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read252 <= A_4_5_read;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_p_read64 <= A_5_1_read;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_dout <= A_0_091_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_0_empty_n <= A_0_091_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_dout <= A_0_189_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_1_empty_n <= A_0_189_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_dout <= A_0_2106_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_2_empty_n <= A_0_2106_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_dout <= A_0_3108_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_3_empty_n <= A_0_3108_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_dout <= A_0_4112_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_4_empty_n <= A_0_4112_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_dout <= A_0_592_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_5_empty_n <= A_0_592_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_dout <= A_0_690_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_6_empty_n <= A_0_690_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_dout <= A_0_785_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_0_7_empty_n <= A_0_785_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_dout <= A_1_0126_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_0_empty_n <= A_1_0126_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_dout <= A_1_178_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_1_empty_n <= A_1_178_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_dout <= A_1_277_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_2_empty_n <= A_1_277_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_dout <= A_1_3119_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_3_empty_n <= A_1_3119_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_dout <= A_1_488_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_4_empty_n <= A_1_488_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_dout <= A_1_582_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_5_empty_n <= A_1_582_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_dout <= A_1_6125_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_6_empty_n <= A_1_6125_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_dout <= A_1_7101_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_1_7_empty_n <= A_1_7101_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_dout <= A_2_087_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_0_empty_n <= A_2_087_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_dout <= A_2_1115_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_1_empty_n <= A_2_1115_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_dout <= A_2_2134_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_2_empty_n <= A_2_2134_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_dout <= A_2_3131_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_3_empty_n <= A_2_3131_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_dout <= A_2_4110_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_4_empty_n <= A_2_4110_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_dout <= A_2_596_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_5_empty_n <= A_2_596_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_dout <= A_2_6122_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_6_empty_n <= A_2_6122_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_dout <= A_2_7127_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_2_7_empty_n <= A_2_7127_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_dout <= A_3_0123_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_0_empty_n <= A_3_0123_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_dout <= A_3_1114_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_1_empty_n <= A_3_1114_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_dout <= A_3_2117_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_2_empty_n <= A_3_2117_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_dout <= A_3_3130_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_3_empty_n <= A_3_3130_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_dout <= A_3_4129_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_4_empty_n <= A_3_4129_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_dout <= A_3_5128_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_5_empty_n <= A_3_5128_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_dout <= A_3_680_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_6_empty_n <= A_3_680_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_dout <= A_3_7124_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_3_7_empty_n <= A_3_7124_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_dout <= A_4_076_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_0_empty_n <= A_4_076_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_dout <= A_4_173_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_1_empty_n <= A_4_173_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_dout <= A_4_295_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_2_empty_n <= A_4_295_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_dout <= A_4_394_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_3_empty_n <= A_4_394_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_dout <= A_4_498_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_4_empty_n <= A_4_498_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_dout <= A_4_5133_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_5_empty_n <= A_4_5133_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_dout <= A_4_6111_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_6_empty_n <= A_4_6111_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_dout <= A_4_784_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_4_7_empty_n <= A_4_784_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_dout <= A_5_074_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_0_empty_n <= A_5_074_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_dout <= A_5_171_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_1_empty_n <= A_5_171_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_dout <= A_5_2104_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_2_empty_n <= A_5_2104_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_dout <= A_5_393_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_3_empty_n <= A_5_393_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_dout <= A_5_497_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_4_empty_n <= A_5_497_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_dout <= A_5_5132_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_5_empty_n <= A_5_5132_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_dout <= A_5_681_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_6_empty_n <= A_5_681_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_dout <= A_5_799_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_5_7_empty_n <= A_5_799_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_dout <= A_6_0105_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_0_empty_n <= A_6_0105_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_dout <= A_6_1120_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_1_empty_n <= A_6_1120_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_dout <= A_6_272_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_2_empty_n <= A_6_272_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_dout <= A_6_3100_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_3_empty_n <= A_6_3100_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_dout <= A_6_483_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_4_empty_n <= A_6_483_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_dout <= A_6_5102_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_5_empty_n <= A_6_5102_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_dout <= A_6_675_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_6_empty_n <= A_6_675_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_dout <= A_6_7103_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_6_7_empty_n <= A_6_7103_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_dout <= A_7_0121_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_0_empty_n <= A_7_0121_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_dout <= A_7_1118_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_1_empty_n <= A_7_1118_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_dout <= A_7_2107_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_2_empty_n <= A_7_2107_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_dout <= A_7_3109_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_3_empty_n <= A_7_3109_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_dout <= A_7_4113_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_4_empty_n <= A_7_4113_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_dout <= A_7_586_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_5_empty_n <= A_7_586_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_dout <= A_7_6116_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_6_empty_n <= A_7_6116_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_dout <= A_7_779_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_A_7_7_empty_n <= A_7_779_empty_n;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_continue <= ap_sig_hs_continue;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_start <= (B_cached_0_0_channel_empty_n and B_cached_0_1_channel_empty_n and B_cached_0_2_channel_empty_n and B_cached_0_3_channel_empty_n and B_cached_0_4_channel_empty_n and B_cached_0_5_channel_empty_n and B_cached_0_6_channel_empty_n and B_cached_0_7_channel_empty_n and B_cached_1_0_channel_empty_n and B_cached_1_1_channel_empty_n and B_cached_1_2_channel_empty_n and B_cached_1_3_channel_empty_n and B_cached_1_4_channel_empty_n and B_cached_1_5_channel_empty_n and B_cached_1_6_channel_empty_n and B_cached_1_7_channel_empty_n and B_cached_2_0_channel_empty_n and B_cached_2_1_channel_empty_n and B_cached_2_2_channel_empty_n and B_cached_2_3_channel_empty_n and B_cached_2_4_channel_empty_n and B_cached_2_5_channel_empty_n and B_cached_2_6_channel_empty_n and B_cached_2_7_channel_empty_n and B_cached_3_0_channel_empty_n and B_cached_3_1_channel_empty_n and B_cached_3_2_channel_empty_n and B_cached_3_3_channel_empty_n and B_cached_3_4_channel_empty_n and B_cached_3_5_channel_empty_n and B_cached_3_6_channel_empty_n and B_cached_3_7_channel_empty_n and B_cached_4_0_channel_empty_n and B_cached_4_1_channel_empty_n and B_cached_4_2_channel_empty_n and B_cached_4_3_channel_empty_n and B_cached_4_4_channel_empty_n and B_cached_4_5_channel_empty_n and B_cached_4_6_channel_empty_n and B_cached_4_7_channel_empty_n and B_cached_5_0_channel_empty_n and B_cached_5_1_channel_empty_n and B_cached_5_2_channel_empty_n and B_cached_5_3_channel_empty_n and B_cached_5_4_channel_empty_n and B_cached_5_5_channel_empty_n and B_cached_5_6_channel_empty_n and B_cached_5_7_channel_empty_n and B_cached_6_0_channel_empty_n and B_cached_6_1_channel_empty_n and B_cached_6_2_channel_empty_n and B_cached_6_3_channel_empty_n and B_cached_6_4_channel_empty_n and B_cached_6_5_channel_empty_n and B_cached_6_6_channel_empty_n and B_cached_6_7_channel_empty_n and B_cached_7_0_channel_empty_n and B_cached_7_1_channel_empty_n and B_cached_7_2_channel_empty_n and B_cached_7_3_channel_empty_n and B_cached_7_4_channel_empty_n and B_cached_7_5_channel_empty_n and B_cached_7_6_channel_empty_n and B_cached_7_7_channel_empty_n);
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read <= B_cached_0_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read1 <= B_cached_0_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read10 <= B_cached_1_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read11 <= B_cached_1_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read12 <= B_cached_1_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read13 <= B_cached_1_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read14 <= B_cached_1_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read15 <= B_cached_1_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read16 <= B_cached_2_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read17 <= B_cached_2_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read18 <= B_cached_2_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read19 <= B_cached_2_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read2 <= B_cached_0_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read20 <= B_cached_2_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read21 <= B_cached_2_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read22 <= B_cached_2_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read23 <= B_cached_2_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read24 <= B_cached_3_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read25 <= B_cached_3_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read26 <= B_cached_3_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read27 <= B_cached_3_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read28 <= B_cached_3_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read29 <= B_cached_3_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read3 <= B_cached_0_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read30 <= B_cached_3_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read31 <= B_cached_3_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read32 <= B_cached_4_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read33 <= B_cached_4_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read34 <= B_cached_4_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read35 <= B_cached_4_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read36 <= B_cached_4_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read37 <= B_cached_4_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read38 <= B_cached_4_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read39 <= B_cached_4_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read4 <= B_cached_0_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read40 <= B_cached_5_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read41 <= B_cached_5_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read42 <= B_cached_5_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read43 <= B_cached_5_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read44 <= B_cached_5_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read45 <= B_cached_5_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read46 <= B_cached_5_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read47 <= B_cached_5_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read48 <= B_cached_6_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read49 <= B_cached_6_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read5 <= B_cached_0_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read50 <= B_cached_6_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read51 <= B_cached_6_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read52 <= B_cached_6_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read53 <= B_cached_6_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read54 <= B_cached_6_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read55 <= B_cached_6_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read56 <= B_cached_7_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read57 <= B_cached_7_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read58 <= B_cached_7_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read59 <= B_cached_7_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read6 <= B_cached_0_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read60 <= B_cached_7_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read61 <= B_cached_7_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read62 <= B_cached_7_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read63 <= B_cached_7_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read7 <= B_cached_0_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read8 <= B_cached_1_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc440_U0_p_read9 <= B_cached_1_1_channel_dout;

    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle, DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_idle, B_cached_0_0_channel_empty_n, B_cached_0_1_channel_empty_n, B_cached_0_2_channel_empty_n, B_cached_0_3_channel_empty_n, B_cached_0_4_channel_empty_n, B_cached_0_5_channel_empty_n, B_cached_0_6_channel_empty_n, B_cached_0_7_channel_empty_n, B_cached_1_0_channel_empty_n, B_cached_1_1_channel_empty_n, B_cached_1_2_channel_empty_n, B_cached_1_3_channel_empty_n, B_cached_1_4_channel_empty_n, B_cached_1_5_channel_empty_n, B_cached_1_6_channel_empty_n, B_cached_1_7_channel_empty_n, B_cached_2_0_channel_empty_n, B_cached_2_1_channel_empty_n, B_cached_2_2_channel_empty_n, B_cached_2_3_channel_empty_n, B_cached_2_4_channel_empty_n, B_cached_2_5_channel_empty_n, B_cached_2_6_channel_empty_n, B_cached_2_7_channel_empty_n, B_cached_3_0_channel_empty_n, B_cached_3_1_channel_empty_n, B_cached_3_2_channel_empty_n, B_cached_3_3_channel_empty_n, B_cached_3_4_channel_empty_n, B_cached_3_5_channel_empty_n, B_cached_3_6_channel_empty_n, B_cached_3_7_channel_empty_n, B_cached_4_0_channel_empty_n, B_cached_4_1_channel_empty_n, B_cached_4_2_channel_empty_n, B_cached_4_3_channel_empty_n, B_cached_4_4_channel_empty_n, B_cached_4_5_channel_empty_n, B_cached_4_6_channel_empty_n, B_cached_4_7_channel_empty_n, B_cached_5_0_channel_empty_n, B_cached_5_1_channel_empty_n, B_cached_5_2_channel_empty_n, B_cached_5_3_channel_empty_n, B_cached_5_4_channel_empty_n, B_cached_5_5_channel_empty_n, B_cached_5_6_channel_empty_n, B_cached_5_7_channel_empty_n, B_cached_6_0_channel_empty_n, B_cached_6_1_channel_empty_n, B_cached_6_2_channel_empty_n, B_cached_6_3_channel_empty_n, B_cached_6_4_channel_empty_n, B_cached_6_5_channel_empty_n, B_cached_6_6_channel_empty_n, B_cached_6_7_channel_empty_n, B_cached_7_0_channel_empty_n, B_cached_7_1_channel_empty_n, B_cached_7_2_channel_empty_n, B_cached_7_3_channel_empty_n, B_cached_7_4_channel_empty_n, B_cached_7_5_channel_empty_n, B_cached_7_6_channel_empty_n, B_cached_7_7_channel_empty_n)
    begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_idle) and (ap_const_logic_0 = B_cached_0_0_channel_empty_n) and (ap_const_logic_0 = B_cached_0_1_channel_empty_n) and (ap_const_logic_0 = B_cached_0_2_channel_empty_n) and (ap_const_logic_0 = B_cached_0_3_channel_empty_n) and (ap_const_logic_0 = B_cached_0_4_channel_empty_n) and (ap_const_logic_0 = B_cached_0_5_channel_empty_n) and (ap_const_logic_0 = B_cached_0_6_channel_empty_n) and (ap_const_logic_0 = B_cached_0_7_channel_empty_n) and (ap_const_logic_0 = B_cached_1_0_channel_empty_n) and (ap_const_logic_0 = B_cached_1_1_channel_empty_n) and (ap_const_logic_0 = B_cached_1_2_channel_empty_n) and (ap_const_logic_0 = B_cached_1_3_channel_empty_n) and (ap_const_logic_0 = B_cached_1_4_channel_empty_n) and (ap_const_logic_0 = B_cached_1_5_channel_empty_n) and (ap_const_logic_0 = B_cached_1_6_channel_empty_n) and (ap_const_logic_0 = B_cached_1_7_channel_empty_n) and (ap_const_logic_0 = B_cached_2_0_channel_empty_n) and (ap_const_logic_0 = B_cached_2_1_channel_empty_n) and (ap_const_logic_0 = B_cached_2_2_channel_empty_n) and (ap_const_logic_0 = B_cached_2_3_channel_empty_n) and (ap_const_logic_0 = B_cached_2_4_channel_empty_n) and (ap_const_logic_0 = B_cached_2_5_channel_empty_n) and (ap_const_logic_0 = B_cached_2_6_channel_empty_n) and (ap_const_logic_0 = B_cached_2_7_channel_empty_n) and (ap_const_logic_0 = B_cached_3_0_channel_empty_n) and (ap_const_logic_0 = B_cached_3_1_channel_empty_n) and (ap_const_logic_0 = B_cached_3_2_channel_empty_n) and (ap_const_logic_0 = B_cached_3_3_channel_empty_n) and (ap_const_logic_0 = B_cached_3_4_channel_empty_n) and (ap_const_logic_0 = B_cached_3_5_channel_empty_n) and (ap_const_logic_0 = B_cached_3_6_channel_empty_n) and (ap_const_logic_0 = B_cached_3_7_channel_empty_n) and (ap_const_logic_0 = B_cached_4_0_channel_empty_n) and (ap_const_logic_0 = B_cached_4_1_channel_empty_n) and (ap_const_logic_0 = B_cached_4_2_channel_empty_n) and (ap_const_logic_0 = B_cached_4_3_channel_empty_n) and (ap_const_logic_0 = B_cached_4_4_channel_empty_n) and (ap_const_logic_0 = B_cached_4_5_channel_empty_n) and (ap_const_logic_0 = B_cached_4_6_channel_empty_n) and (ap_const_logic_0 = B_cached_4_7_channel_empty_n) and (ap_const_logic_0 = B_cached_5_0_channel_empty_n) and (ap_const_logic_0 = B_cached_5_1_channel_empty_n) and (ap_const_logic_0 = B_cached_5_2_channel_empty_n) and (ap_const_logic_0 = B_cached_5_3_channel_empty_n) and (ap_const_logic_0 = B_cached_5_4_channel_empty_n) and (ap_const_logic_0 = B_cached_5_5_channel_empty_n) and (ap_const_logic_0 = B_cached_5_6_channel_empty_n) and (ap_const_logic_0 = B_cached_5_7_channel_empty_n) and (ap_const_logic_0 = B_cached_6_0_channel_empty_n) and (ap_const_logic_0 = B_cached_6_1_channel_empty_n) and (ap_const_logic_0 = B_cached_6_2_channel_empty_n) and (ap_const_logic_0 = B_cached_6_3_channel_empty_n) and (ap_const_logic_0 = B_cached_6_4_channel_empty_n) and (ap_const_logic_0 = B_cached_6_5_channel_empty_n) and (ap_const_logic_0 = B_cached_6_6_channel_empty_n) and (ap_const_logic_0 = B_cached_6_7_channel_empty_n) and (ap_const_logic_0 = B_cached_7_0_channel_empty_n) and (ap_const_logic_0 = B_cached_7_1_channel_empty_n) and (ap_const_logic_0 = B_cached_7_2_channel_empty_n) and (ap_const_logic_0 = B_cached_7_3_channel_empty_n) and (ap_const_logic_0 = B_cached_7_4_channel_empty_n) and (ap_const_logic_0 = B_cached_7_5_channel_empty_n) and (ap_const_logic_0 = B_cached_7_6_channel_empty_n) and (ap_const_logic_0 = B_cached_7_7_channel_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_done)
    begin
        if ((ap_const_logic_1 = DCT_MAT_Multiply_Loop_Row_proc440_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_0_channel_full_n_assign_proc : process(B_cached_0_0_channel_full_n, ap_reg_ready_B_cached_0_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_0_channel_full_n)) then 
            ap_sig_ready_B_cached_0_0_channel_full_n <= B_cached_0_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_1_channel_full_n_assign_proc : process(B_cached_0_1_channel_full_n, ap_reg_ready_B_cached_0_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_1_channel_full_n)) then 
            ap_sig_ready_B_cached_0_1_channel_full_n <= B_cached_0_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_2_channel_full_n_assign_proc : process(B_cached_0_2_channel_full_n, ap_reg_ready_B_cached_0_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_2_channel_full_n)) then 
            ap_sig_ready_B_cached_0_2_channel_full_n <= B_cached_0_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_3_channel_full_n_assign_proc : process(B_cached_0_3_channel_full_n, ap_reg_ready_B_cached_0_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_3_channel_full_n)) then 
            ap_sig_ready_B_cached_0_3_channel_full_n <= B_cached_0_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_4_channel_full_n_assign_proc : process(B_cached_0_4_channel_full_n, ap_reg_ready_B_cached_0_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_4_channel_full_n)) then 
            ap_sig_ready_B_cached_0_4_channel_full_n <= B_cached_0_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_5_channel_full_n_assign_proc : process(B_cached_0_5_channel_full_n, ap_reg_ready_B_cached_0_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_5_channel_full_n)) then 
            ap_sig_ready_B_cached_0_5_channel_full_n <= B_cached_0_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_6_channel_full_n_assign_proc : process(B_cached_0_6_channel_full_n, ap_reg_ready_B_cached_0_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_6_channel_full_n)) then 
            ap_sig_ready_B_cached_0_6_channel_full_n <= B_cached_0_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_7_channel_full_n_assign_proc : process(B_cached_0_7_channel_full_n, ap_reg_ready_B_cached_0_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_7_channel_full_n)) then 
            ap_sig_ready_B_cached_0_7_channel_full_n <= B_cached_0_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_0_channel_full_n_assign_proc : process(B_cached_1_0_channel_full_n, ap_reg_ready_B_cached_1_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_0_channel_full_n)) then 
            ap_sig_ready_B_cached_1_0_channel_full_n <= B_cached_1_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_1_channel_full_n_assign_proc : process(B_cached_1_1_channel_full_n, ap_reg_ready_B_cached_1_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_1_channel_full_n)) then 
            ap_sig_ready_B_cached_1_1_channel_full_n <= B_cached_1_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_2_channel_full_n_assign_proc : process(B_cached_1_2_channel_full_n, ap_reg_ready_B_cached_1_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_2_channel_full_n)) then 
            ap_sig_ready_B_cached_1_2_channel_full_n <= B_cached_1_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_3_channel_full_n_assign_proc : process(B_cached_1_3_channel_full_n, ap_reg_ready_B_cached_1_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_3_channel_full_n)) then 
            ap_sig_ready_B_cached_1_3_channel_full_n <= B_cached_1_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_4_channel_full_n_assign_proc : process(B_cached_1_4_channel_full_n, ap_reg_ready_B_cached_1_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_4_channel_full_n)) then 
            ap_sig_ready_B_cached_1_4_channel_full_n <= B_cached_1_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_5_channel_full_n_assign_proc : process(B_cached_1_5_channel_full_n, ap_reg_ready_B_cached_1_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_5_channel_full_n)) then 
            ap_sig_ready_B_cached_1_5_channel_full_n <= B_cached_1_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_6_channel_full_n_assign_proc : process(B_cached_1_6_channel_full_n, ap_reg_ready_B_cached_1_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_6_channel_full_n)) then 
            ap_sig_ready_B_cached_1_6_channel_full_n <= B_cached_1_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_7_channel_full_n_assign_proc : process(B_cached_1_7_channel_full_n, ap_reg_ready_B_cached_1_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_7_channel_full_n)) then 
            ap_sig_ready_B_cached_1_7_channel_full_n <= B_cached_1_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_0_channel_full_n_assign_proc : process(B_cached_2_0_channel_full_n, ap_reg_ready_B_cached_2_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_0_channel_full_n)) then 
            ap_sig_ready_B_cached_2_0_channel_full_n <= B_cached_2_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_1_channel_full_n_assign_proc : process(B_cached_2_1_channel_full_n, ap_reg_ready_B_cached_2_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_1_channel_full_n)) then 
            ap_sig_ready_B_cached_2_1_channel_full_n <= B_cached_2_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_2_channel_full_n_assign_proc : process(B_cached_2_2_channel_full_n, ap_reg_ready_B_cached_2_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_2_channel_full_n)) then 
            ap_sig_ready_B_cached_2_2_channel_full_n <= B_cached_2_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_3_channel_full_n_assign_proc : process(B_cached_2_3_channel_full_n, ap_reg_ready_B_cached_2_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_3_channel_full_n)) then 
            ap_sig_ready_B_cached_2_3_channel_full_n <= B_cached_2_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_4_channel_full_n_assign_proc : process(B_cached_2_4_channel_full_n, ap_reg_ready_B_cached_2_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_4_channel_full_n)) then 
            ap_sig_ready_B_cached_2_4_channel_full_n <= B_cached_2_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_5_channel_full_n_assign_proc : process(B_cached_2_5_channel_full_n, ap_reg_ready_B_cached_2_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_5_channel_full_n)) then 
            ap_sig_ready_B_cached_2_5_channel_full_n <= B_cached_2_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_6_channel_full_n_assign_proc : process(B_cached_2_6_channel_full_n, ap_reg_ready_B_cached_2_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_6_channel_full_n)) then 
            ap_sig_ready_B_cached_2_6_channel_full_n <= B_cached_2_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_7_channel_full_n_assign_proc : process(B_cached_2_7_channel_full_n, ap_reg_ready_B_cached_2_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_7_channel_full_n)) then 
            ap_sig_ready_B_cached_2_7_channel_full_n <= B_cached_2_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_0_channel_full_n_assign_proc : process(B_cached_3_0_channel_full_n, ap_reg_ready_B_cached_3_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_0_channel_full_n)) then 
            ap_sig_ready_B_cached_3_0_channel_full_n <= B_cached_3_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_1_channel_full_n_assign_proc : process(B_cached_3_1_channel_full_n, ap_reg_ready_B_cached_3_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_1_channel_full_n)) then 
            ap_sig_ready_B_cached_3_1_channel_full_n <= B_cached_3_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_2_channel_full_n_assign_proc : process(B_cached_3_2_channel_full_n, ap_reg_ready_B_cached_3_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_2_channel_full_n)) then 
            ap_sig_ready_B_cached_3_2_channel_full_n <= B_cached_3_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_3_channel_full_n_assign_proc : process(B_cached_3_3_channel_full_n, ap_reg_ready_B_cached_3_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_3_channel_full_n)) then 
            ap_sig_ready_B_cached_3_3_channel_full_n <= B_cached_3_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_4_channel_full_n_assign_proc : process(B_cached_3_4_channel_full_n, ap_reg_ready_B_cached_3_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_4_channel_full_n)) then 
            ap_sig_ready_B_cached_3_4_channel_full_n <= B_cached_3_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_5_channel_full_n_assign_proc : process(B_cached_3_5_channel_full_n, ap_reg_ready_B_cached_3_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_5_channel_full_n)) then 
            ap_sig_ready_B_cached_3_5_channel_full_n <= B_cached_3_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_6_channel_full_n_assign_proc : process(B_cached_3_6_channel_full_n, ap_reg_ready_B_cached_3_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_6_channel_full_n)) then 
            ap_sig_ready_B_cached_3_6_channel_full_n <= B_cached_3_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_7_channel_full_n_assign_proc : process(B_cached_3_7_channel_full_n, ap_reg_ready_B_cached_3_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_7_channel_full_n)) then 
            ap_sig_ready_B_cached_3_7_channel_full_n <= B_cached_3_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_0_channel_full_n_assign_proc : process(B_cached_4_0_channel_full_n, ap_reg_ready_B_cached_4_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_0_channel_full_n)) then 
            ap_sig_ready_B_cached_4_0_channel_full_n <= B_cached_4_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_1_channel_full_n_assign_proc : process(B_cached_4_1_channel_full_n, ap_reg_ready_B_cached_4_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_1_channel_full_n)) then 
            ap_sig_ready_B_cached_4_1_channel_full_n <= B_cached_4_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_2_channel_full_n_assign_proc : process(B_cached_4_2_channel_full_n, ap_reg_ready_B_cached_4_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_2_channel_full_n)) then 
            ap_sig_ready_B_cached_4_2_channel_full_n <= B_cached_4_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_3_channel_full_n_assign_proc : process(B_cached_4_3_channel_full_n, ap_reg_ready_B_cached_4_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_3_channel_full_n)) then 
            ap_sig_ready_B_cached_4_3_channel_full_n <= B_cached_4_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_4_channel_full_n_assign_proc : process(B_cached_4_4_channel_full_n, ap_reg_ready_B_cached_4_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_4_channel_full_n)) then 
            ap_sig_ready_B_cached_4_4_channel_full_n <= B_cached_4_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_5_channel_full_n_assign_proc : process(B_cached_4_5_channel_full_n, ap_reg_ready_B_cached_4_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_5_channel_full_n)) then 
            ap_sig_ready_B_cached_4_5_channel_full_n <= B_cached_4_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_6_channel_full_n_assign_proc : process(B_cached_4_6_channel_full_n, ap_reg_ready_B_cached_4_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_6_channel_full_n)) then 
            ap_sig_ready_B_cached_4_6_channel_full_n <= B_cached_4_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_7_channel_full_n_assign_proc : process(B_cached_4_7_channel_full_n, ap_reg_ready_B_cached_4_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_7_channel_full_n)) then 
            ap_sig_ready_B_cached_4_7_channel_full_n <= B_cached_4_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_0_channel_full_n_assign_proc : process(B_cached_5_0_channel_full_n, ap_reg_ready_B_cached_5_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_0_channel_full_n)) then 
            ap_sig_ready_B_cached_5_0_channel_full_n <= B_cached_5_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_1_channel_full_n_assign_proc : process(B_cached_5_1_channel_full_n, ap_reg_ready_B_cached_5_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_1_channel_full_n)) then 
            ap_sig_ready_B_cached_5_1_channel_full_n <= B_cached_5_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_2_channel_full_n_assign_proc : process(B_cached_5_2_channel_full_n, ap_reg_ready_B_cached_5_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_2_channel_full_n)) then 
            ap_sig_ready_B_cached_5_2_channel_full_n <= B_cached_5_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_3_channel_full_n_assign_proc : process(B_cached_5_3_channel_full_n, ap_reg_ready_B_cached_5_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_3_channel_full_n)) then 
            ap_sig_ready_B_cached_5_3_channel_full_n <= B_cached_5_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_4_channel_full_n_assign_proc : process(B_cached_5_4_channel_full_n, ap_reg_ready_B_cached_5_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_4_channel_full_n)) then 
            ap_sig_ready_B_cached_5_4_channel_full_n <= B_cached_5_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_5_channel_full_n_assign_proc : process(B_cached_5_5_channel_full_n, ap_reg_ready_B_cached_5_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_5_channel_full_n)) then 
            ap_sig_ready_B_cached_5_5_channel_full_n <= B_cached_5_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_6_channel_full_n_assign_proc : process(B_cached_5_6_channel_full_n, ap_reg_ready_B_cached_5_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_6_channel_full_n)) then 
            ap_sig_ready_B_cached_5_6_channel_full_n <= B_cached_5_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_7_channel_full_n_assign_proc : process(B_cached_5_7_channel_full_n, ap_reg_ready_B_cached_5_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_7_channel_full_n)) then 
            ap_sig_ready_B_cached_5_7_channel_full_n <= B_cached_5_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_0_channel_full_n_assign_proc : process(B_cached_6_0_channel_full_n, ap_reg_ready_B_cached_6_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_0_channel_full_n)) then 
            ap_sig_ready_B_cached_6_0_channel_full_n <= B_cached_6_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_1_channel_full_n_assign_proc : process(B_cached_6_1_channel_full_n, ap_reg_ready_B_cached_6_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_1_channel_full_n)) then 
            ap_sig_ready_B_cached_6_1_channel_full_n <= B_cached_6_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_2_channel_full_n_assign_proc : process(B_cached_6_2_channel_full_n, ap_reg_ready_B_cached_6_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_2_channel_full_n)) then 
            ap_sig_ready_B_cached_6_2_channel_full_n <= B_cached_6_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_3_channel_full_n_assign_proc : process(B_cached_6_3_channel_full_n, ap_reg_ready_B_cached_6_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_3_channel_full_n)) then 
            ap_sig_ready_B_cached_6_3_channel_full_n <= B_cached_6_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_4_channel_full_n_assign_proc : process(B_cached_6_4_channel_full_n, ap_reg_ready_B_cached_6_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_4_channel_full_n)) then 
            ap_sig_ready_B_cached_6_4_channel_full_n <= B_cached_6_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_5_channel_full_n_assign_proc : process(B_cached_6_5_channel_full_n, ap_reg_ready_B_cached_6_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_5_channel_full_n)) then 
            ap_sig_ready_B_cached_6_5_channel_full_n <= B_cached_6_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_6_channel_full_n_assign_proc : process(B_cached_6_6_channel_full_n, ap_reg_ready_B_cached_6_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_6_channel_full_n)) then 
            ap_sig_ready_B_cached_6_6_channel_full_n <= B_cached_6_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_7_channel_full_n_assign_proc : process(B_cached_6_7_channel_full_n, ap_reg_ready_B_cached_6_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_7_channel_full_n)) then 
            ap_sig_ready_B_cached_6_7_channel_full_n <= B_cached_6_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_0_channel_full_n_assign_proc : process(B_cached_7_0_channel_full_n, ap_reg_ready_B_cached_7_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_0_channel_full_n)) then 
            ap_sig_ready_B_cached_7_0_channel_full_n <= B_cached_7_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_1_channel_full_n_assign_proc : process(B_cached_7_1_channel_full_n, ap_reg_ready_B_cached_7_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_1_channel_full_n)) then 
            ap_sig_ready_B_cached_7_1_channel_full_n <= B_cached_7_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_2_channel_full_n_assign_proc : process(B_cached_7_2_channel_full_n, ap_reg_ready_B_cached_7_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_2_channel_full_n)) then 
            ap_sig_ready_B_cached_7_2_channel_full_n <= B_cached_7_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_3_channel_full_n_assign_proc : process(B_cached_7_3_channel_full_n, ap_reg_ready_B_cached_7_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_3_channel_full_n)) then 
            ap_sig_ready_B_cached_7_3_channel_full_n <= B_cached_7_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_4_channel_full_n_assign_proc : process(B_cached_7_4_channel_full_n, ap_reg_ready_B_cached_7_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_4_channel_full_n)) then 
            ap_sig_ready_B_cached_7_4_channel_full_n <= B_cached_7_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_5_channel_full_n_assign_proc : process(B_cached_7_5_channel_full_n, ap_reg_ready_B_cached_7_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_5_channel_full_n)) then 
            ap_sig_ready_B_cached_7_5_channel_full_n <= B_cached_7_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_6_channel_full_n_assign_proc : process(B_cached_7_6_channel_full_n, ap_reg_ready_B_cached_7_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_6_channel_full_n)) then 
            ap_sig_ready_B_cached_7_6_channel_full_n <= B_cached_7_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_7_channel_full_n_assign_proc : process(B_cached_7_7_channel_full_n, ap_reg_ready_B_cached_7_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_7_channel_full_n)) then 
            ap_sig_ready_B_cached_7_7_channel_full_n <= B_cached_7_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;

    ap_sig_top_allready <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
end behav;
