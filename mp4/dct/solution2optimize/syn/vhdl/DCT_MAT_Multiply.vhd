-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_MAT_Multiply is
port (
    A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_we0 : OUT STD_LOGIC;
    A_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_0_ce1 : OUT STD_LOGIC;
    A_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_we1 : OUT STD_LOGIC;
    A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_we0 : OUT STD_LOGIC;
    A_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_we1 : OUT STD_LOGIC;
    A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_we0 : OUT STD_LOGIC;
    A_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_2_ce1 : OUT STD_LOGIC;
    A_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_we1 : OUT STD_LOGIC;
    A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_we0 : OUT STD_LOGIC;
    A_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_3_ce1 : OUT STD_LOGIC;
    A_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_we1 : OUT STD_LOGIC;
    A_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_4_ce0 : OUT STD_LOGIC;
    A_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_we0 : OUT STD_LOGIC;
    A_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_4_ce1 : OUT STD_LOGIC;
    A_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_we1 : OUT STD_LOGIC;
    A_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_5_ce0 : OUT STD_LOGIC;
    A_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_we0 : OUT STD_LOGIC;
    A_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_5_ce1 : OUT STD_LOGIC;
    A_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_we1 : OUT STD_LOGIC;
    A_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_6_ce0 : OUT STD_LOGIC;
    A_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_we0 : OUT STD_LOGIC;
    A_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_6_ce1 : OUT STD_LOGIC;
    A_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_we1 : OUT STD_LOGIC;
    A_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_7_ce0 : OUT STD_LOGIC;
    A_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_we0 : OUT STD_LOGIC;
    A_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_7_ce1 : OUT STD_LOGIC;
    A_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_we1 : OUT STD_LOGIC;
    B_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_we0 : OUT STD_LOGIC;
    B_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_we1 : OUT STD_LOGIC;
    C_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_0_we0 : OUT STD_LOGIC;
    C_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_0_ce1 : OUT STD_LOGIC;
    C_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_0_we1 : OUT STD_LOGIC;
    C_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_1_ce0 : OUT STD_LOGIC;
    C_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_1_we0 : OUT STD_LOGIC;
    C_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_1_ce1 : OUT STD_LOGIC;
    C_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_1_we1 : OUT STD_LOGIC;
    C_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_2_ce0 : OUT STD_LOGIC;
    C_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_2_we0 : OUT STD_LOGIC;
    C_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_2_ce1 : OUT STD_LOGIC;
    C_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_2_we1 : OUT STD_LOGIC;
    C_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_3_ce0 : OUT STD_LOGIC;
    C_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_3_we0 : OUT STD_LOGIC;
    C_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_3_ce1 : OUT STD_LOGIC;
    C_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_3_we1 : OUT STD_LOGIC;
    C_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_4_ce0 : OUT STD_LOGIC;
    C_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_4_we0 : OUT STD_LOGIC;
    C_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_4_ce1 : OUT STD_LOGIC;
    C_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_4_we1 : OUT STD_LOGIC;
    C_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_5_ce0 : OUT STD_LOGIC;
    C_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_5_we0 : OUT STD_LOGIC;
    C_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_5_ce1 : OUT STD_LOGIC;
    C_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_5_we1 : OUT STD_LOGIC;
    C_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_6_ce0 : OUT STD_LOGIC;
    C_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_6_we0 : OUT STD_LOGIC;
    C_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_6_ce1 : OUT STD_LOGIC;
    C_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_6_we1 : OUT STD_LOGIC;
    C_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_7_ce0 : OUT STD_LOGIC;
    C_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_7_we0 : OUT STD_LOGIC;
    C_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_7_ce1 : OUT STD_LOGIC;
    C_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_7_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    B_pipo_status : IN STD_LOGIC;
    B_pipo_update : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of DCT_MAT_Multiply is 
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_status : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_update : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel : STD_LOGIC;
    signal B_cached_0_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel : STD_LOGIC;
    signal B_cached_0_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel : STD_LOGIC;
    signal B_cached_0_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel : STD_LOGIC;
    signal B_cached_0_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel : STD_LOGIC;
    signal B_cached_0_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel : STD_LOGIC;
    signal B_cached_0_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel : STD_LOGIC;
    signal B_cached_0_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel : STD_LOGIC;
    signal B_cached_1_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel : STD_LOGIC;
    signal B_cached_0_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_0_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_0_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel : STD_LOGIC;
    signal B_cached_1_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel : STD_LOGIC;
    signal B_cached_1_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel : STD_LOGIC;
    signal B_cached_1_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel : STD_LOGIC;
    signal B_cached_1_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel : STD_LOGIC;
    signal B_cached_1_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel : STD_LOGIC;
    signal B_cached_1_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel : STD_LOGIC;
    signal B_cached_2_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel : STD_LOGIC;
    signal B_cached_1_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_1_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_1_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel : STD_LOGIC;
    signal B_cached_2_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel : STD_LOGIC;
    signal B_cached_2_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel : STD_LOGIC;
    signal B_cached_2_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel : STD_LOGIC;
    signal B_cached_2_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel : STD_LOGIC;
    signal B_cached_2_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel : STD_LOGIC;
    signal B_cached_2_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel : STD_LOGIC;
    signal B_cached_2_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_2_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_2_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel : STD_LOGIC;
    signal B_cached_3_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel : STD_LOGIC;
    signal B_cached_3_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel : STD_LOGIC;
    signal B_cached_3_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel : STD_LOGIC;
    signal B_cached_3_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel : STD_LOGIC;
    signal B_cached_3_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel : STD_LOGIC;
    signal B_cached_3_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel : STD_LOGIC;
    signal B_cached_3_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel : STD_LOGIC;
    signal B_cached_3_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_3_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_3_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel : STD_LOGIC;
    signal B_cached_4_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel : STD_LOGIC;
    signal B_cached_4_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel : STD_LOGIC;
    signal B_cached_4_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel : STD_LOGIC;
    signal B_cached_4_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel : STD_LOGIC;
    signal B_cached_4_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel : STD_LOGIC;
    signal B_cached_4_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel : STD_LOGIC;
    signal B_cached_4_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel : STD_LOGIC;
    signal B_cached_4_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_4_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_4_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel : STD_LOGIC;
    signal B_cached_5_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel : STD_LOGIC;
    signal B_cached_5_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel : STD_LOGIC;
    signal B_cached_5_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel : STD_LOGIC;
    signal B_cached_5_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel : STD_LOGIC;
    signal B_cached_5_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel : STD_LOGIC;
    signal B_cached_5_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel : STD_LOGIC;
    signal B_cached_5_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel : STD_LOGIC;
    signal B_cached_5_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_5_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_5_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel : STD_LOGIC;
    signal B_cached_6_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel : STD_LOGIC;
    signal B_cached_6_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel : STD_LOGIC;
    signal B_cached_6_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel : STD_LOGIC;
    signal B_cached_6_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel : STD_LOGIC;
    signal B_cached_6_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel : STD_LOGIC;
    signal B_cached_6_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel : STD_LOGIC;
    signal B_cached_6_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel : STD_LOGIC;
    signal B_cached_6_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_6_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_6_7_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel : STD_LOGIC;
    signal B_cached_7_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel : STD_LOGIC;
    signal B_cached_7_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel : STD_LOGIC;
    signal B_cached_7_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel : STD_LOGIC;
    signal B_cached_7_3_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_3_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_3_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel : STD_LOGIC;
    signal B_cached_7_4_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_4_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_4_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel : STD_LOGIC;
    signal B_cached_7_5_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_5_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_5_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel : STD_LOGIC;
    signal B_cached_7_6_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_6_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_6_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel : STD_LOGIC;
    signal B_cached_7_7_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_B_cached_7_7_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_B_cached_7_7_channel_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_ap_continue : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_ap_idle : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read3 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read7 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read8 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read9 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read10 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read11 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read12 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read13 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read14 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read15 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read16 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read17 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read18 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read19 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read20 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read21 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read22 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read23 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read24 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read25 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read26 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read27 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read28 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read29 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read30 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read31 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read32 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read33 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read34 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read35 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read36 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read37 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read38 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read39 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read40 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read41 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read42 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read43 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read44 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read45 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read46 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read47 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read48 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read49 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read50 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read51 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read52 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read53 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read54 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read55 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read56 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read57 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read58 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read59 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read60 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read61 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read62 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_p_read63 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_we0 : STD_LOGIC;
    signal DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal B_cached_0_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_0_channel_write : STD_LOGIC;
    signal B_cached_0_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_0_channel_empty_n : STD_LOGIC;
    signal B_cached_0_0_channel_read : STD_LOGIC;
    signal B_cached_0_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_1_channel_write : STD_LOGIC;
    signal B_cached_0_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_1_channel_empty_n : STD_LOGIC;
    signal B_cached_0_1_channel_read : STD_LOGIC;
    signal B_cached_0_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_2_channel_write : STD_LOGIC;
    signal B_cached_0_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_2_channel_empty_n : STD_LOGIC;
    signal B_cached_0_2_channel_read : STD_LOGIC;
    signal B_cached_0_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_3_channel_write : STD_LOGIC;
    signal B_cached_0_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_3_channel_empty_n : STD_LOGIC;
    signal B_cached_0_3_channel_read : STD_LOGIC;
    signal B_cached_0_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_4_channel_write : STD_LOGIC;
    signal B_cached_0_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_4_channel_empty_n : STD_LOGIC;
    signal B_cached_0_4_channel_read : STD_LOGIC;
    signal B_cached_0_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_5_channel_write : STD_LOGIC;
    signal B_cached_0_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_5_channel_empty_n : STD_LOGIC;
    signal B_cached_0_5_channel_read : STD_LOGIC;
    signal B_cached_0_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_6_channel_write : STD_LOGIC;
    signal B_cached_0_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_6_channel_empty_n : STD_LOGIC;
    signal B_cached_0_6_channel_read : STD_LOGIC;
    signal B_cached_0_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_0_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_7_channel_write : STD_LOGIC;
    signal B_cached_0_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_0_7_channel_empty_n : STD_LOGIC;
    signal B_cached_0_7_channel_read : STD_LOGIC;
    signal B_cached_1_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_0_channel_write : STD_LOGIC;
    signal B_cached_1_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_0_channel_empty_n : STD_LOGIC;
    signal B_cached_1_0_channel_read : STD_LOGIC;
    signal B_cached_1_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_1_channel_write : STD_LOGIC;
    signal B_cached_1_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_1_channel_empty_n : STD_LOGIC;
    signal B_cached_1_1_channel_read : STD_LOGIC;
    signal B_cached_1_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_2_channel_write : STD_LOGIC;
    signal B_cached_1_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_2_channel_empty_n : STD_LOGIC;
    signal B_cached_1_2_channel_read : STD_LOGIC;
    signal B_cached_1_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_3_channel_write : STD_LOGIC;
    signal B_cached_1_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_3_channel_empty_n : STD_LOGIC;
    signal B_cached_1_3_channel_read : STD_LOGIC;
    signal B_cached_1_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_4_channel_write : STD_LOGIC;
    signal B_cached_1_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_4_channel_empty_n : STD_LOGIC;
    signal B_cached_1_4_channel_read : STD_LOGIC;
    signal B_cached_1_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_5_channel_write : STD_LOGIC;
    signal B_cached_1_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_5_channel_empty_n : STD_LOGIC;
    signal B_cached_1_5_channel_read : STD_LOGIC;
    signal B_cached_1_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_6_channel_write : STD_LOGIC;
    signal B_cached_1_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_6_channel_empty_n : STD_LOGIC;
    signal B_cached_1_6_channel_read : STD_LOGIC;
    signal B_cached_1_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_1_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_7_channel_write : STD_LOGIC;
    signal B_cached_1_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_1_7_channel_empty_n : STD_LOGIC;
    signal B_cached_1_7_channel_read : STD_LOGIC;
    signal B_cached_2_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_0_channel_write : STD_LOGIC;
    signal B_cached_2_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_0_channel_empty_n : STD_LOGIC;
    signal B_cached_2_0_channel_read : STD_LOGIC;
    signal B_cached_2_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_1_channel_write : STD_LOGIC;
    signal B_cached_2_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_1_channel_empty_n : STD_LOGIC;
    signal B_cached_2_1_channel_read : STD_LOGIC;
    signal B_cached_2_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_2_channel_write : STD_LOGIC;
    signal B_cached_2_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_2_channel_empty_n : STD_LOGIC;
    signal B_cached_2_2_channel_read : STD_LOGIC;
    signal B_cached_2_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_3_channel_write : STD_LOGIC;
    signal B_cached_2_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_3_channel_empty_n : STD_LOGIC;
    signal B_cached_2_3_channel_read : STD_LOGIC;
    signal B_cached_2_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_4_channel_write : STD_LOGIC;
    signal B_cached_2_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_4_channel_empty_n : STD_LOGIC;
    signal B_cached_2_4_channel_read : STD_LOGIC;
    signal B_cached_2_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_5_channel_write : STD_LOGIC;
    signal B_cached_2_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_5_channel_empty_n : STD_LOGIC;
    signal B_cached_2_5_channel_read : STD_LOGIC;
    signal B_cached_2_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_6_channel_write : STD_LOGIC;
    signal B_cached_2_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_6_channel_empty_n : STD_LOGIC;
    signal B_cached_2_6_channel_read : STD_LOGIC;
    signal B_cached_2_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_2_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_7_channel_write : STD_LOGIC;
    signal B_cached_2_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_2_7_channel_empty_n : STD_LOGIC;
    signal B_cached_2_7_channel_read : STD_LOGIC;
    signal B_cached_3_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_0_channel_write : STD_LOGIC;
    signal B_cached_3_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_0_channel_empty_n : STD_LOGIC;
    signal B_cached_3_0_channel_read : STD_LOGIC;
    signal B_cached_3_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_1_channel_write : STD_LOGIC;
    signal B_cached_3_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_1_channel_empty_n : STD_LOGIC;
    signal B_cached_3_1_channel_read : STD_LOGIC;
    signal B_cached_3_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_2_channel_write : STD_LOGIC;
    signal B_cached_3_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_2_channel_empty_n : STD_LOGIC;
    signal B_cached_3_2_channel_read : STD_LOGIC;
    signal B_cached_3_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_3_channel_write : STD_LOGIC;
    signal B_cached_3_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_3_channel_empty_n : STD_LOGIC;
    signal B_cached_3_3_channel_read : STD_LOGIC;
    signal B_cached_3_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_4_channel_write : STD_LOGIC;
    signal B_cached_3_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_4_channel_empty_n : STD_LOGIC;
    signal B_cached_3_4_channel_read : STD_LOGIC;
    signal B_cached_3_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_5_channel_write : STD_LOGIC;
    signal B_cached_3_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_5_channel_empty_n : STD_LOGIC;
    signal B_cached_3_5_channel_read : STD_LOGIC;
    signal B_cached_3_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_6_channel_write : STD_LOGIC;
    signal B_cached_3_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_6_channel_empty_n : STD_LOGIC;
    signal B_cached_3_6_channel_read : STD_LOGIC;
    signal B_cached_3_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_3_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_7_channel_write : STD_LOGIC;
    signal B_cached_3_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_3_7_channel_empty_n : STD_LOGIC;
    signal B_cached_3_7_channel_read : STD_LOGIC;
    signal B_cached_4_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_0_channel_write : STD_LOGIC;
    signal B_cached_4_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_0_channel_empty_n : STD_LOGIC;
    signal B_cached_4_0_channel_read : STD_LOGIC;
    signal B_cached_4_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_1_channel_write : STD_LOGIC;
    signal B_cached_4_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_1_channel_empty_n : STD_LOGIC;
    signal B_cached_4_1_channel_read : STD_LOGIC;
    signal B_cached_4_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_2_channel_write : STD_LOGIC;
    signal B_cached_4_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_2_channel_empty_n : STD_LOGIC;
    signal B_cached_4_2_channel_read : STD_LOGIC;
    signal B_cached_4_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_3_channel_write : STD_LOGIC;
    signal B_cached_4_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_3_channel_empty_n : STD_LOGIC;
    signal B_cached_4_3_channel_read : STD_LOGIC;
    signal B_cached_4_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_4_channel_write : STD_LOGIC;
    signal B_cached_4_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_4_channel_empty_n : STD_LOGIC;
    signal B_cached_4_4_channel_read : STD_LOGIC;
    signal B_cached_4_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_5_channel_write : STD_LOGIC;
    signal B_cached_4_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_5_channel_empty_n : STD_LOGIC;
    signal B_cached_4_5_channel_read : STD_LOGIC;
    signal B_cached_4_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_6_channel_write : STD_LOGIC;
    signal B_cached_4_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_6_channel_empty_n : STD_LOGIC;
    signal B_cached_4_6_channel_read : STD_LOGIC;
    signal B_cached_4_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_4_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_7_channel_write : STD_LOGIC;
    signal B_cached_4_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_4_7_channel_empty_n : STD_LOGIC;
    signal B_cached_4_7_channel_read : STD_LOGIC;
    signal B_cached_5_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_0_channel_write : STD_LOGIC;
    signal B_cached_5_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_0_channel_empty_n : STD_LOGIC;
    signal B_cached_5_0_channel_read : STD_LOGIC;
    signal B_cached_5_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_1_channel_write : STD_LOGIC;
    signal B_cached_5_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_1_channel_empty_n : STD_LOGIC;
    signal B_cached_5_1_channel_read : STD_LOGIC;
    signal B_cached_5_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_2_channel_write : STD_LOGIC;
    signal B_cached_5_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_2_channel_empty_n : STD_LOGIC;
    signal B_cached_5_2_channel_read : STD_LOGIC;
    signal B_cached_5_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_3_channel_write : STD_LOGIC;
    signal B_cached_5_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_3_channel_empty_n : STD_LOGIC;
    signal B_cached_5_3_channel_read : STD_LOGIC;
    signal B_cached_5_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_4_channel_write : STD_LOGIC;
    signal B_cached_5_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_4_channel_empty_n : STD_LOGIC;
    signal B_cached_5_4_channel_read : STD_LOGIC;
    signal B_cached_5_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_5_channel_write : STD_LOGIC;
    signal B_cached_5_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_5_channel_empty_n : STD_LOGIC;
    signal B_cached_5_5_channel_read : STD_LOGIC;
    signal B_cached_5_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_6_channel_write : STD_LOGIC;
    signal B_cached_5_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_6_channel_empty_n : STD_LOGIC;
    signal B_cached_5_6_channel_read : STD_LOGIC;
    signal B_cached_5_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_5_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_7_channel_write : STD_LOGIC;
    signal B_cached_5_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_5_7_channel_empty_n : STD_LOGIC;
    signal B_cached_5_7_channel_read : STD_LOGIC;
    signal B_cached_6_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_0_channel_write : STD_LOGIC;
    signal B_cached_6_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_0_channel_empty_n : STD_LOGIC;
    signal B_cached_6_0_channel_read : STD_LOGIC;
    signal B_cached_6_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_1_channel_write : STD_LOGIC;
    signal B_cached_6_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_1_channel_empty_n : STD_LOGIC;
    signal B_cached_6_1_channel_read : STD_LOGIC;
    signal B_cached_6_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_2_channel_write : STD_LOGIC;
    signal B_cached_6_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_2_channel_empty_n : STD_LOGIC;
    signal B_cached_6_2_channel_read : STD_LOGIC;
    signal B_cached_6_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_3_channel_write : STD_LOGIC;
    signal B_cached_6_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_3_channel_empty_n : STD_LOGIC;
    signal B_cached_6_3_channel_read : STD_LOGIC;
    signal B_cached_6_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_4_channel_write : STD_LOGIC;
    signal B_cached_6_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_4_channel_empty_n : STD_LOGIC;
    signal B_cached_6_4_channel_read : STD_LOGIC;
    signal B_cached_6_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_5_channel_write : STD_LOGIC;
    signal B_cached_6_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_5_channel_empty_n : STD_LOGIC;
    signal B_cached_6_5_channel_read : STD_LOGIC;
    signal B_cached_6_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_6_channel_write : STD_LOGIC;
    signal B_cached_6_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_6_channel_empty_n : STD_LOGIC;
    signal B_cached_6_6_channel_read : STD_LOGIC;
    signal B_cached_6_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_6_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_7_channel_write : STD_LOGIC;
    signal B_cached_6_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_6_7_channel_empty_n : STD_LOGIC;
    signal B_cached_6_7_channel_read : STD_LOGIC;
    signal B_cached_7_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_0_channel_write : STD_LOGIC;
    signal B_cached_7_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_0_channel_empty_n : STD_LOGIC;
    signal B_cached_7_0_channel_read : STD_LOGIC;
    signal B_cached_7_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_1_channel_write : STD_LOGIC;
    signal B_cached_7_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_1_channel_empty_n : STD_LOGIC;
    signal B_cached_7_1_channel_read : STD_LOGIC;
    signal B_cached_7_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_2_channel_write : STD_LOGIC;
    signal B_cached_7_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_2_channel_empty_n : STD_LOGIC;
    signal B_cached_7_2_channel_read : STD_LOGIC;
    signal B_cached_7_3_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_3_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_3_channel_write : STD_LOGIC;
    signal B_cached_7_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_3_channel_empty_n : STD_LOGIC;
    signal B_cached_7_3_channel_read : STD_LOGIC;
    signal B_cached_7_4_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_4_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_4_channel_write : STD_LOGIC;
    signal B_cached_7_4_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_4_channel_empty_n : STD_LOGIC;
    signal B_cached_7_4_channel_read : STD_LOGIC;
    signal B_cached_7_5_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_5_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_5_channel_write : STD_LOGIC;
    signal B_cached_7_5_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_5_channel_empty_n : STD_LOGIC;
    signal B_cached_7_5_channel_read : STD_LOGIC;
    signal B_cached_7_6_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_6_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_6_channel_write : STD_LOGIC;
    signal B_cached_7_6_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_6_channel_empty_n : STD_LOGIC;
    signal B_cached_7_6_channel_read : STD_LOGIC;
    signal B_cached_7_7_channel_U_ap_dummy_ce : STD_LOGIC;
    signal B_cached_7_7_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_7_channel_write : STD_LOGIC;
    signal B_cached_7_7_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_cached_7_7_channel_empty_n : STD_LOGIC;
    signal B_cached_7_7_channel_read : STD_LOGIC;
    signal ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start : STD_LOGIC;

    component DCT_MAT_Multiply_Loop_LoadRow_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_52 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_53 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_54 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_55 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_56 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_57 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_58 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_59 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_60 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_61 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_62 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_63 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_MAT_Multiply_Loop_Row_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_0_ce1 : OUT STD_LOGIC;
        A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_1_ce1 : OUT STD_LOGIC;
        A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_2_ce1 : OUT STD_LOGIC;
        A_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_3_ce0 : OUT STD_LOGIC;
        A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_3_ce1 : OUT STD_LOGIC;
        A_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_4_ce0 : OUT STD_LOGIC;
        A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_4_ce1 : OUT STD_LOGIC;
        A_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_5_ce0 : OUT STD_LOGIC;
        A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_5_ce1 : OUT STD_LOGIC;
        A_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_6_ce0 : OUT STD_LOGIC;
        A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_6_ce1 : OUT STD_LOGIC;
        A_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_7_ce0 : OUT STD_LOGIC;
        A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_7_ce1 : OUT STD_LOGIC;
        A_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read32 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read33 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read34 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read35 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read36 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read37 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read38 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read39 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read40 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read41 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read42 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read43 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read44 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read45 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read46 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read47 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read48 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read49 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read50 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read51 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read52 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read53 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read54 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read55 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read56 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read57 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read58 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read59 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read60 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read61 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read62 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read63 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_we0 : OUT STD_LOGIC;
        C_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        C_1_ce0 : OUT STD_LOGIC;
        C_1_we0 : OUT STD_LOGIC;
        C_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        C_2_ce0 : OUT STD_LOGIC;
        C_2_we0 : OUT STD_LOGIC;
        C_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        C_3_ce0 : OUT STD_LOGIC;
        C_3_we0 : OUT STD_LOGIC;
        C_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        C_4_ce0 : OUT STD_LOGIC;
        C_4_we0 : OUT STD_LOGIC;
        C_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        C_5_ce0 : OUT STD_LOGIC;
        C_5_we0 : OUT STD_LOGIC;
        C_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        C_6_ce0 : OUT STD_LOGIC;
        C_6_we0 : OUT STD_LOGIC;
        C_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        C_7_ce0 : OUT STD_LOGIC;
        C_7_we0 : OUT STD_LOGIC;
        C_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_0_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_1_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_2_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_3_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_4_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_5_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_6_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_3_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_4_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_5_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_6_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply_B_cached_7_7_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0 : component DCT_MAT_Multiply_Loop_LoadRow_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start,
        ap_done => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done,
        ap_continue => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue,
        ap_idle => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle,
        ap_ready => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready,
        B_address0 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_address0,
        B_ce0 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_ce0,
        B_q0 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_q0,
        ap_return_0 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0,
        ap_return_1 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1,
        ap_return_2 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2,
        ap_return_3 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3,
        ap_return_4 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4,
        ap_return_5 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5,
        ap_return_6 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6,
        ap_return_7 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7,
        ap_return_8 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8,
        ap_return_9 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9,
        ap_return_10 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10,
        ap_return_11 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11,
        ap_return_12 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12,
        ap_return_13 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13,
        ap_return_14 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14,
        ap_return_15 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15,
        ap_return_16 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16,
        ap_return_17 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17,
        ap_return_18 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18,
        ap_return_19 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19,
        ap_return_20 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20,
        ap_return_21 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21,
        ap_return_22 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22,
        ap_return_23 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23,
        ap_return_24 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24,
        ap_return_25 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25,
        ap_return_26 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26,
        ap_return_27 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27,
        ap_return_28 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28,
        ap_return_29 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29,
        ap_return_30 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30,
        ap_return_31 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31,
        ap_return_32 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32,
        ap_return_33 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33,
        ap_return_34 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34,
        ap_return_35 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35,
        ap_return_36 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36,
        ap_return_37 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37,
        ap_return_38 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38,
        ap_return_39 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39,
        ap_return_40 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40,
        ap_return_41 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41,
        ap_return_42 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42,
        ap_return_43 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43,
        ap_return_44 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44,
        ap_return_45 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45,
        ap_return_46 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46,
        ap_return_47 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47,
        ap_return_48 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48,
        ap_return_49 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49,
        ap_return_50 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50,
        ap_return_51 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51,
        ap_return_52 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52,
        ap_return_53 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53,
        ap_return_54 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54,
        ap_return_55 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55,
        ap_return_56 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56,
        ap_return_57 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57,
        ap_return_58 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58,
        ap_return_59 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59,
        ap_return_60 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60,
        ap_return_61 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61,
        ap_return_62 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62,
        ap_return_63 => DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63);

    DCT_MAT_Multiply_Loop_Row_proc_U0 : component DCT_MAT_Multiply_Loop_Row_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start,
        ap_done => DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done,
        ap_continue => DCT_MAT_Multiply_Loop_Row_proc_U0_ap_continue,
        ap_idle => DCT_MAT_Multiply_Loop_Row_proc_U0_ap_idle,
        ap_ready => DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready,
        A_0_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address0,
        A_0_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0,
        A_0_q0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q0,
        A_0_address1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address1,
        A_0_ce1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1,
        A_0_q1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q1,
        A_1_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address0,
        A_1_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0,
        A_1_q0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q0,
        A_1_address1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address1,
        A_1_ce1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1,
        A_1_q1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q1,
        A_2_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address0,
        A_2_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0,
        A_2_q0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q0,
        A_2_address1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address1,
        A_2_ce1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1,
        A_2_q1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q1,
        A_3_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address0,
        A_3_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0,
        A_3_q0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q0,
        A_3_address1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address1,
        A_3_ce1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1,
        A_3_q1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q1,
        A_4_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address0,
        A_4_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0,
        A_4_q0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q0,
        A_4_address1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address1,
        A_4_ce1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1,
        A_4_q1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q1,
        A_5_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address0,
        A_5_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0,
        A_5_q0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q0,
        A_5_address1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address1,
        A_5_ce1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1,
        A_5_q1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q1,
        A_6_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address0,
        A_6_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0,
        A_6_q0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q0,
        A_6_address1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address1,
        A_6_ce1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1,
        A_6_q1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q1,
        A_7_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address0,
        A_7_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0,
        A_7_q0 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q0,
        A_7_address1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address1,
        A_7_ce1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1,
        A_7_q1 => DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q1,
        p_read => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read,
        p_read1 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read1,
        p_read2 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read2,
        p_read3 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read3,
        p_read4 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read4,
        p_read5 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read5,
        p_read6 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read6,
        p_read7 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read7,
        p_read8 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read8,
        p_read9 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read9,
        p_read10 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read10,
        p_read11 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read11,
        p_read12 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read12,
        p_read13 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read13,
        p_read14 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read14,
        p_read15 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read15,
        p_read16 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read16,
        p_read17 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read17,
        p_read18 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read18,
        p_read19 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read19,
        p_read20 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read20,
        p_read21 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read21,
        p_read22 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read22,
        p_read23 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read23,
        p_read24 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read24,
        p_read25 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read25,
        p_read26 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read26,
        p_read27 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read27,
        p_read28 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read28,
        p_read29 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read29,
        p_read30 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read30,
        p_read31 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read31,
        p_read32 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read32,
        p_read33 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read33,
        p_read34 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read34,
        p_read35 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read35,
        p_read36 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read36,
        p_read37 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read37,
        p_read38 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read38,
        p_read39 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read39,
        p_read40 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read40,
        p_read41 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read41,
        p_read42 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read42,
        p_read43 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read43,
        p_read44 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read44,
        p_read45 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read45,
        p_read46 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read46,
        p_read47 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read47,
        p_read48 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read48,
        p_read49 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read49,
        p_read50 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read50,
        p_read51 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read51,
        p_read52 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read52,
        p_read53 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read53,
        p_read54 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read54,
        p_read55 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read55,
        p_read56 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read56,
        p_read57 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read57,
        p_read58 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read58,
        p_read59 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read59,
        p_read60 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read60,
        p_read61 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read61,
        p_read62 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read62,
        p_read63 => DCT_MAT_Multiply_Loop_Row_proc_U0_p_read63,
        C_0_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_address0,
        C_0_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_ce0,
        C_0_we0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_we0,
        C_0_d0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_d0,
        C_1_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_address0,
        C_1_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_ce0,
        C_1_we0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_we0,
        C_1_d0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_d0,
        C_2_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_address0,
        C_2_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_ce0,
        C_2_we0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_we0,
        C_2_d0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_d0,
        C_3_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_address0,
        C_3_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_ce0,
        C_3_we0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_we0,
        C_3_d0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_d0,
        C_4_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_address0,
        C_4_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_ce0,
        C_4_we0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_we0,
        C_4_d0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_d0,
        C_5_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_address0,
        C_5_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_ce0,
        C_5_we0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_we0,
        C_5_d0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_d0,
        C_6_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_address0,
        C_6_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_ce0,
        C_6_we0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_we0,
        C_6_d0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_d0,
        C_7_address0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_address0,
        C_7_ce0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_ce0,
        C_7_we0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_we0,
        C_7_d0 => DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_d0);

    B_cached_0_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_0_channel_U_ap_dummy_ce,
        if_din => B_cached_0_0_channel_din,
        if_full_n => B_cached_0_0_channel_full_n,
        if_write => B_cached_0_0_channel_write,
        if_dout => B_cached_0_0_channel_dout,
        if_empty_n => B_cached_0_0_channel_empty_n,
        if_read => B_cached_0_0_channel_read);

    B_cached_0_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_1_channel_U_ap_dummy_ce,
        if_din => B_cached_0_1_channel_din,
        if_full_n => B_cached_0_1_channel_full_n,
        if_write => B_cached_0_1_channel_write,
        if_dout => B_cached_0_1_channel_dout,
        if_empty_n => B_cached_0_1_channel_empty_n,
        if_read => B_cached_0_1_channel_read);

    B_cached_0_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_2_channel_U_ap_dummy_ce,
        if_din => B_cached_0_2_channel_din,
        if_full_n => B_cached_0_2_channel_full_n,
        if_write => B_cached_0_2_channel_write,
        if_dout => B_cached_0_2_channel_dout,
        if_empty_n => B_cached_0_2_channel_empty_n,
        if_read => B_cached_0_2_channel_read);

    B_cached_0_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_3_channel_U_ap_dummy_ce,
        if_din => B_cached_0_3_channel_din,
        if_full_n => B_cached_0_3_channel_full_n,
        if_write => B_cached_0_3_channel_write,
        if_dout => B_cached_0_3_channel_dout,
        if_empty_n => B_cached_0_3_channel_empty_n,
        if_read => B_cached_0_3_channel_read);

    B_cached_0_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_4_channel_U_ap_dummy_ce,
        if_din => B_cached_0_4_channel_din,
        if_full_n => B_cached_0_4_channel_full_n,
        if_write => B_cached_0_4_channel_write,
        if_dout => B_cached_0_4_channel_dout,
        if_empty_n => B_cached_0_4_channel_empty_n,
        if_read => B_cached_0_4_channel_read);

    B_cached_0_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_5_channel_U_ap_dummy_ce,
        if_din => B_cached_0_5_channel_din,
        if_full_n => B_cached_0_5_channel_full_n,
        if_write => B_cached_0_5_channel_write,
        if_dout => B_cached_0_5_channel_dout,
        if_empty_n => B_cached_0_5_channel_empty_n,
        if_read => B_cached_0_5_channel_read);

    B_cached_0_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_6_channel_U_ap_dummy_ce,
        if_din => B_cached_0_6_channel_din,
        if_full_n => B_cached_0_6_channel_full_n,
        if_write => B_cached_0_6_channel_write,
        if_dout => B_cached_0_6_channel_dout,
        if_empty_n => B_cached_0_6_channel_empty_n,
        if_read => B_cached_0_6_channel_read);

    B_cached_0_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_0_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_0_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_0_7_channel_U_ap_dummy_ce,
        if_din => B_cached_0_7_channel_din,
        if_full_n => B_cached_0_7_channel_full_n,
        if_write => B_cached_0_7_channel_write,
        if_dout => B_cached_0_7_channel_dout,
        if_empty_n => B_cached_0_7_channel_empty_n,
        if_read => B_cached_0_7_channel_read);

    B_cached_1_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_0_channel_U_ap_dummy_ce,
        if_din => B_cached_1_0_channel_din,
        if_full_n => B_cached_1_0_channel_full_n,
        if_write => B_cached_1_0_channel_write,
        if_dout => B_cached_1_0_channel_dout,
        if_empty_n => B_cached_1_0_channel_empty_n,
        if_read => B_cached_1_0_channel_read);

    B_cached_1_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_1_channel_U_ap_dummy_ce,
        if_din => B_cached_1_1_channel_din,
        if_full_n => B_cached_1_1_channel_full_n,
        if_write => B_cached_1_1_channel_write,
        if_dout => B_cached_1_1_channel_dout,
        if_empty_n => B_cached_1_1_channel_empty_n,
        if_read => B_cached_1_1_channel_read);

    B_cached_1_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_2_channel_U_ap_dummy_ce,
        if_din => B_cached_1_2_channel_din,
        if_full_n => B_cached_1_2_channel_full_n,
        if_write => B_cached_1_2_channel_write,
        if_dout => B_cached_1_2_channel_dout,
        if_empty_n => B_cached_1_2_channel_empty_n,
        if_read => B_cached_1_2_channel_read);

    B_cached_1_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_3_channel_U_ap_dummy_ce,
        if_din => B_cached_1_3_channel_din,
        if_full_n => B_cached_1_3_channel_full_n,
        if_write => B_cached_1_3_channel_write,
        if_dout => B_cached_1_3_channel_dout,
        if_empty_n => B_cached_1_3_channel_empty_n,
        if_read => B_cached_1_3_channel_read);

    B_cached_1_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_4_channel_U_ap_dummy_ce,
        if_din => B_cached_1_4_channel_din,
        if_full_n => B_cached_1_4_channel_full_n,
        if_write => B_cached_1_4_channel_write,
        if_dout => B_cached_1_4_channel_dout,
        if_empty_n => B_cached_1_4_channel_empty_n,
        if_read => B_cached_1_4_channel_read);

    B_cached_1_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_5_channel_U_ap_dummy_ce,
        if_din => B_cached_1_5_channel_din,
        if_full_n => B_cached_1_5_channel_full_n,
        if_write => B_cached_1_5_channel_write,
        if_dout => B_cached_1_5_channel_dout,
        if_empty_n => B_cached_1_5_channel_empty_n,
        if_read => B_cached_1_5_channel_read);

    B_cached_1_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_6_channel_U_ap_dummy_ce,
        if_din => B_cached_1_6_channel_din,
        if_full_n => B_cached_1_6_channel_full_n,
        if_write => B_cached_1_6_channel_write,
        if_dout => B_cached_1_6_channel_dout,
        if_empty_n => B_cached_1_6_channel_empty_n,
        if_read => B_cached_1_6_channel_read);

    B_cached_1_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_1_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_1_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_1_7_channel_U_ap_dummy_ce,
        if_din => B_cached_1_7_channel_din,
        if_full_n => B_cached_1_7_channel_full_n,
        if_write => B_cached_1_7_channel_write,
        if_dout => B_cached_1_7_channel_dout,
        if_empty_n => B_cached_1_7_channel_empty_n,
        if_read => B_cached_1_7_channel_read);

    B_cached_2_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_0_channel_U_ap_dummy_ce,
        if_din => B_cached_2_0_channel_din,
        if_full_n => B_cached_2_0_channel_full_n,
        if_write => B_cached_2_0_channel_write,
        if_dout => B_cached_2_0_channel_dout,
        if_empty_n => B_cached_2_0_channel_empty_n,
        if_read => B_cached_2_0_channel_read);

    B_cached_2_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_1_channel_U_ap_dummy_ce,
        if_din => B_cached_2_1_channel_din,
        if_full_n => B_cached_2_1_channel_full_n,
        if_write => B_cached_2_1_channel_write,
        if_dout => B_cached_2_1_channel_dout,
        if_empty_n => B_cached_2_1_channel_empty_n,
        if_read => B_cached_2_1_channel_read);

    B_cached_2_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_2_channel_U_ap_dummy_ce,
        if_din => B_cached_2_2_channel_din,
        if_full_n => B_cached_2_2_channel_full_n,
        if_write => B_cached_2_2_channel_write,
        if_dout => B_cached_2_2_channel_dout,
        if_empty_n => B_cached_2_2_channel_empty_n,
        if_read => B_cached_2_2_channel_read);

    B_cached_2_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_3_channel_U_ap_dummy_ce,
        if_din => B_cached_2_3_channel_din,
        if_full_n => B_cached_2_3_channel_full_n,
        if_write => B_cached_2_3_channel_write,
        if_dout => B_cached_2_3_channel_dout,
        if_empty_n => B_cached_2_3_channel_empty_n,
        if_read => B_cached_2_3_channel_read);

    B_cached_2_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_4_channel_U_ap_dummy_ce,
        if_din => B_cached_2_4_channel_din,
        if_full_n => B_cached_2_4_channel_full_n,
        if_write => B_cached_2_4_channel_write,
        if_dout => B_cached_2_4_channel_dout,
        if_empty_n => B_cached_2_4_channel_empty_n,
        if_read => B_cached_2_4_channel_read);

    B_cached_2_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_5_channel_U_ap_dummy_ce,
        if_din => B_cached_2_5_channel_din,
        if_full_n => B_cached_2_5_channel_full_n,
        if_write => B_cached_2_5_channel_write,
        if_dout => B_cached_2_5_channel_dout,
        if_empty_n => B_cached_2_5_channel_empty_n,
        if_read => B_cached_2_5_channel_read);

    B_cached_2_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_6_channel_U_ap_dummy_ce,
        if_din => B_cached_2_6_channel_din,
        if_full_n => B_cached_2_6_channel_full_n,
        if_write => B_cached_2_6_channel_write,
        if_dout => B_cached_2_6_channel_dout,
        if_empty_n => B_cached_2_6_channel_empty_n,
        if_read => B_cached_2_6_channel_read);

    B_cached_2_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_2_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_2_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_2_7_channel_U_ap_dummy_ce,
        if_din => B_cached_2_7_channel_din,
        if_full_n => B_cached_2_7_channel_full_n,
        if_write => B_cached_2_7_channel_write,
        if_dout => B_cached_2_7_channel_dout,
        if_empty_n => B_cached_2_7_channel_empty_n,
        if_read => B_cached_2_7_channel_read);

    B_cached_3_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_0_channel_U_ap_dummy_ce,
        if_din => B_cached_3_0_channel_din,
        if_full_n => B_cached_3_0_channel_full_n,
        if_write => B_cached_3_0_channel_write,
        if_dout => B_cached_3_0_channel_dout,
        if_empty_n => B_cached_3_0_channel_empty_n,
        if_read => B_cached_3_0_channel_read);

    B_cached_3_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_1_channel_U_ap_dummy_ce,
        if_din => B_cached_3_1_channel_din,
        if_full_n => B_cached_3_1_channel_full_n,
        if_write => B_cached_3_1_channel_write,
        if_dout => B_cached_3_1_channel_dout,
        if_empty_n => B_cached_3_1_channel_empty_n,
        if_read => B_cached_3_1_channel_read);

    B_cached_3_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_2_channel_U_ap_dummy_ce,
        if_din => B_cached_3_2_channel_din,
        if_full_n => B_cached_3_2_channel_full_n,
        if_write => B_cached_3_2_channel_write,
        if_dout => B_cached_3_2_channel_dout,
        if_empty_n => B_cached_3_2_channel_empty_n,
        if_read => B_cached_3_2_channel_read);

    B_cached_3_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_3_channel_U_ap_dummy_ce,
        if_din => B_cached_3_3_channel_din,
        if_full_n => B_cached_3_3_channel_full_n,
        if_write => B_cached_3_3_channel_write,
        if_dout => B_cached_3_3_channel_dout,
        if_empty_n => B_cached_3_3_channel_empty_n,
        if_read => B_cached_3_3_channel_read);

    B_cached_3_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_4_channel_U_ap_dummy_ce,
        if_din => B_cached_3_4_channel_din,
        if_full_n => B_cached_3_4_channel_full_n,
        if_write => B_cached_3_4_channel_write,
        if_dout => B_cached_3_4_channel_dout,
        if_empty_n => B_cached_3_4_channel_empty_n,
        if_read => B_cached_3_4_channel_read);

    B_cached_3_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_5_channel_U_ap_dummy_ce,
        if_din => B_cached_3_5_channel_din,
        if_full_n => B_cached_3_5_channel_full_n,
        if_write => B_cached_3_5_channel_write,
        if_dout => B_cached_3_5_channel_dout,
        if_empty_n => B_cached_3_5_channel_empty_n,
        if_read => B_cached_3_5_channel_read);

    B_cached_3_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_6_channel_U_ap_dummy_ce,
        if_din => B_cached_3_6_channel_din,
        if_full_n => B_cached_3_6_channel_full_n,
        if_write => B_cached_3_6_channel_write,
        if_dout => B_cached_3_6_channel_dout,
        if_empty_n => B_cached_3_6_channel_empty_n,
        if_read => B_cached_3_6_channel_read);

    B_cached_3_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_3_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_3_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_3_7_channel_U_ap_dummy_ce,
        if_din => B_cached_3_7_channel_din,
        if_full_n => B_cached_3_7_channel_full_n,
        if_write => B_cached_3_7_channel_write,
        if_dout => B_cached_3_7_channel_dout,
        if_empty_n => B_cached_3_7_channel_empty_n,
        if_read => B_cached_3_7_channel_read);

    B_cached_4_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_0_channel_U_ap_dummy_ce,
        if_din => B_cached_4_0_channel_din,
        if_full_n => B_cached_4_0_channel_full_n,
        if_write => B_cached_4_0_channel_write,
        if_dout => B_cached_4_0_channel_dout,
        if_empty_n => B_cached_4_0_channel_empty_n,
        if_read => B_cached_4_0_channel_read);

    B_cached_4_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_1_channel_U_ap_dummy_ce,
        if_din => B_cached_4_1_channel_din,
        if_full_n => B_cached_4_1_channel_full_n,
        if_write => B_cached_4_1_channel_write,
        if_dout => B_cached_4_1_channel_dout,
        if_empty_n => B_cached_4_1_channel_empty_n,
        if_read => B_cached_4_1_channel_read);

    B_cached_4_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_2_channel_U_ap_dummy_ce,
        if_din => B_cached_4_2_channel_din,
        if_full_n => B_cached_4_2_channel_full_n,
        if_write => B_cached_4_2_channel_write,
        if_dout => B_cached_4_2_channel_dout,
        if_empty_n => B_cached_4_2_channel_empty_n,
        if_read => B_cached_4_2_channel_read);

    B_cached_4_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_3_channel_U_ap_dummy_ce,
        if_din => B_cached_4_3_channel_din,
        if_full_n => B_cached_4_3_channel_full_n,
        if_write => B_cached_4_3_channel_write,
        if_dout => B_cached_4_3_channel_dout,
        if_empty_n => B_cached_4_3_channel_empty_n,
        if_read => B_cached_4_3_channel_read);

    B_cached_4_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_4_channel_U_ap_dummy_ce,
        if_din => B_cached_4_4_channel_din,
        if_full_n => B_cached_4_4_channel_full_n,
        if_write => B_cached_4_4_channel_write,
        if_dout => B_cached_4_4_channel_dout,
        if_empty_n => B_cached_4_4_channel_empty_n,
        if_read => B_cached_4_4_channel_read);

    B_cached_4_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_5_channel_U_ap_dummy_ce,
        if_din => B_cached_4_5_channel_din,
        if_full_n => B_cached_4_5_channel_full_n,
        if_write => B_cached_4_5_channel_write,
        if_dout => B_cached_4_5_channel_dout,
        if_empty_n => B_cached_4_5_channel_empty_n,
        if_read => B_cached_4_5_channel_read);

    B_cached_4_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_6_channel_U_ap_dummy_ce,
        if_din => B_cached_4_6_channel_din,
        if_full_n => B_cached_4_6_channel_full_n,
        if_write => B_cached_4_6_channel_write,
        if_dout => B_cached_4_6_channel_dout,
        if_empty_n => B_cached_4_6_channel_empty_n,
        if_read => B_cached_4_6_channel_read);

    B_cached_4_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_4_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_4_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_4_7_channel_U_ap_dummy_ce,
        if_din => B_cached_4_7_channel_din,
        if_full_n => B_cached_4_7_channel_full_n,
        if_write => B_cached_4_7_channel_write,
        if_dout => B_cached_4_7_channel_dout,
        if_empty_n => B_cached_4_7_channel_empty_n,
        if_read => B_cached_4_7_channel_read);

    B_cached_5_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_0_channel_U_ap_dummy_ce,
        if_din => B_cached_5_0_channel_din,
        if_full_n => B_cached_5_0_channel_full_n,
        if_write => B_cached_5_0_channel_write,
        if_dout => B_cached_5_0_channel_dout,
        if_empty_n => B_cached_5_0_channel_empty_n,
        if_read => B_cached_5_0_channel_read);

    B_cached_5_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_1_channel_U_ap_dummy_ce,
        if_din => B_cached_5_1_channel_din,
        if_full_n => B_cached_5_1_channel_full_n,
        if_write => B_cached_5_1_channel_write,
        if_dout => B_cached_5_1_channel_dout,
        if_empty_n => B_cached_5_1_channel_empty_n,
        if_read => B_cached_5_1_channel_read);

    B_cached_5_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_2_channel_U_ap_dummy_ce,
        if_din => B_cached_5_2_channel_din,
        if_full_n => B_cached_5_2_channel_full_n,
        if_write => B_cached_5_2_channel_write,
        if_dout => B_cached_5_2_channel_dout,
        if_empty_n => B_cached_5_2_channel_empty_n,
        if_read => B_cached_5_2_channel_read);

    B_cached_5_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_3_channel_U_ap_dummy_ce,
        if_din => B_cached_5_3_channel_din,
        if_full_n => B_cached_5_3_channel_full_n,
        if_write => B_cached_5_3_channel_write,
        if_dout => B_cached_5_3_channel_dout,
        if_empty_n => B_cached_5_3_channel_empty_n,
        if_read => B_cached_5_3_channel_read);

    B_cached_5_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_4_channel_U_ap_dummy_ce,
        if_din => B_cached_5_4_channel_din,
        if_full_n => B_cached_5_4_channel_full_n,
        if_write => B_cached_5_4_channel_write,
        if_dout => B_cached_5_4_channel_dout,
        if_empty_n => B_cached_5_4_channel_empty_n,
        if_read => B_cached_5_4_channel_read);

    B_cached_5_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_5_channel_U_ap_dummy_ce,
        if_din => B_cached_5_5_channel_din,
        if_full_n => B_cached_5_5_channel_full_n,
        if_write => B_cached_5_5_channel_write,
        if_dout => B_cached_5_5_channel_dout,
        if_empty_n => B_cached_5_5_channel_empty_n,
        if_read => B_cached_5_5_channel_read);

    B_cached_5_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_6_channel_U_ap_dummy_ce,
        if_din => B_cached_5_6_channel_din,
        if_full_n => B_cached_5_6_channel_full_n,
        if_write => B_cached_5_6_channel_write,
        if_dout => B_cached_5_6_channel_dout,
        if_empty_n => B_cached_5_6_channel_empty_n,
        if_read => B_cached_5_6_channel_read);

    B_cached_5_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_5_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_5_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_5_7_channel_U_ap_dummy_ce,
        if_din => B_cached_5_7_channel_din,
        if_full_n => B_cached_5_7_channel_full_n,
        if_write => B_cached_5_7_channel_write,
        if_dout => B_cached_5_7_channel_dout,
        if_empty_n => B_cached_5_7_channel_empty_n,
        if_read => B_cached_5_7_channel_read);

    B_cached_6_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_0_channel_U_ap_dummy_ce,
        if_din => B_cached_6_0_channel_din,
        if_full_n => B_cached_6_0_channel_full_n,
        if_write => B_cached_6_0_channel_write,
        if_dout => B_cached_6_0_channel_dout,
        if_empty_n => B_cached_6_0_channel_empty_n,
        if_read => B_cached_6_0_channel_read);

    B_cached_6_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_1_channel_U_ap_dummy_ce,
        if_din => B_cached_6_1_channel_din,
        if_full_n => B_cached_6_1_channel_full_n,
        if_write => B_cached_6_1_channel_write,
        if_dout => B_cached_6_1_channel_dout,
        if_empty_n => B_cached_6_1_channel_empty_n,
        if_read => B_cached_6_1_channel_read);

    B_cached_6_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_2_channel_U_ap_dummy_ce,
        if_din => B_cached_6_2_channel_din,
        if_full_n => B_cached_6_2_channel_full_n,
        if_write => B_cached_6_2_channel_write,
        if_dout => B_cached_6_2_channel_dout,
        if_empty_n => B_cached_6_2_channel_empty_n,
        if_read => B_cached_6_2_channel_read);

    B_cached_6_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_3_channel_U_ap_dummy_ce,
        if_din => B_cached_6_3_channel_din,
        if_full_n => B_cached_6_3_channel_full_n,
        if_write => B_cached_6_3_channel_write,
        if_dout => B_cached_6_3_channel_dout,
        if_empty_n => B_cached_6_3_channel_empty_n,
        if_read => B_cached_6_3_channel_read);

    B_cached_6_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_4_channel_U_ap_dummy_ce,
        if_din => B_cached_6_4_channel_din,
        if_full_n => B_cached_6_4_channel_full_n,
        if_write => B_cached_6_4_channel_write,
        if_dout => B_cached_6_4_channel_dout,
        if_empty_n => B_cached_6_4_channel_empty_n,
        if_read => B_cached_6_4_channel_read);

    B_cached_6_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_5_channel_U_ap_dummy_ce,
        if_din => B_cached_6_5_channel_din,
        if_full_n => B_cached_6_5_channel_full_n,
        if_write => B_cached_6_5_channel_write,
        if_dout => B_cached_6_5_channel_dout,
        if_empty_n => B_cached_6_5_channel_empty_n,
        if_read => B_cached_6_5_channel_read);

    B_cached_6_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_6_channel_U_ap_dummy_ce,
        if_din => B_cached_6_6_channel_din,
        if_full_n => B_cached_6_6_channel_full_n,
        if_write => B_cached_6_6_channel_write,
        if_dout => B_cached_6_6_channel_dout,
        if_empty_n => B_cached_6_6_channel_empty_n,
        if_read => B_cached_6_6_channel_read);

    B_cached_6_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_6_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_6_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_6_7_channel_U_ap_dummy_ce,
        if_din => B_cached_6_7_channel_din,
        if_full_n => B_cached_6_7_channel_full_n,
        if_write => B_cached_6_7_channel_write,
        if_dout => B_cached_6_7_channel_dout,
        if_empty_n => B_cached_6_7_channel_empty_n,
        if_read => B_cached_6_7_channel_read);

    B_cached_7_0_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_0_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_0_channel_U_ap_dummy_ce,
        if_din => B_cached_7_0_channel_din,
        if_full_n => B_cached_7_0_channel_full_n,
        if_write => B_cached_7_0_channel_write,
        if_dout => B_cached_7_0_channel_dout,
        if_empty_n => B_cached_7_0_channel_empty_n,
        if_read => B_cached_7_0_channel_read);

    B_cached_7_1_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_1_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_1_channel_U_ap_dummy_ce,
        if_din => B_cached_7_1_channel_din,
        if_full_n => B_cached_7_1_channel_full_n,
        if_write => B_cached_7_1_channel_write,
        if_dout => B_cached_7_1_channel_dout,
        if_empty_n => B_cached_7_1_channel_empty_n,
        if_read => B_cached_7_1_channel_read);

    B_cached_7_2_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_2_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_2_channel_U_ap_dummy_ce,
        if_din => B_cached_7_2_channel_din,
        if_full_n => B_cached_7_2_channel_full_n,
        if_write => B_cached_7_2_channel_write,
        if_dout => B_cached_7_2_channel_dout,
        if_empty_n => B_cached_7_2_channel_empty_n,
        if_read => B_cached_7_2_channel_read);

    B_cached_7_3_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_3_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_3_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_3_channel_U_ap_dummy_ce,
        if_din => B_cached_7_3_channel_din,
        if_full_n => B_cached_7_3_channel_full_n,
        if_write => B_cached_7_3_channel_write,
        if_dout => B_cached_7_3_channel_dout,
        if_empty_n => B_cached_7_3_channel_empty_n,
        if_read => B_cached_7_3_channel_read);

    B_cached_7_4_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_4_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_4_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_4_channel_U_ap_dummy_ce,
        if_din => B_cached_7_4_channel_din,
        if_full_n => B_cached_7_4_channel_full_n,
        if_write => B_cached_7_4_channel_write,
        if_dout => B_cached_7_4_channel_dout,
        if_empty_n => B_cached_7_4_channel_empty_n,
        if_read => B_cached_7_4_channel_read);

    B_cached_7_5_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_5_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_5_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_5_channel_U_ap_dummy_ce,
        if_din => B_cached_7_5_channel_din,
        if_full_n => B_cached_7_5_channel_full_n,
        if_write => B_cached_7_5_channel_write,
        if_dout => B_cached_7_5_channel_dout,
        if_empty_n => B_cached_7_5_channel_empty_n,
        if_read => B_cached_7_5_channel_read);

    B_cached_7_6_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_6_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_6_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_6_channel_U_ap_dummy_ce,
        if_din => B_cached_7_6_channel_din,
        if_full_n => B_cached_7_6_channel_full_n,
        if_write => B_cached_7_6_channel_write,
        if_dout => B_cached_7_6_channel_dout,
        if_empty_n => B_cached_7_6_channel_empty_n,
        if_read => B_cached_7_6_channel_read);

    B_cached_7_7_channel_U : component FIFO_DCT_MAT_Multiply_B_cached_7_7_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => B_cached_7_7_channel_U_ap_dummy_ce,
        if_write_ce => B_cached_7_7_channel_U_ap_dummy_ce,
        if_din => B_cached_7_7_channel_din,
        if_full_n => B_cached_7_7_channel_full_n,
        if_write => B_cached_7_7_channel_write,
        if_dout => B_cached_7_7_channel_dout,
        if_empty_n => B_cached_7_7_channel_empty_n,
        if_read => B_cached_7_7_channel_read);





    -- ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 assign process. --
    ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_0;
                elsif ((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_DCT_MAT_Multiply_Loop_LoadRow_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 assign process. --
    ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply_Loop_Row_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_0_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_0_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_0_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_0_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_1_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_1_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_1_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_1_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_2_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_2_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_2_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_2_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_3_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_3_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_3_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_3_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_4_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_4_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_4_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_4_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_5_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_5_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_5_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_5_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_6_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_6_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_6_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_6_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_0_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_0_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_1_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_1_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_2_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_2_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_3_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_3_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_3_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_3_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_4_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_4_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_4_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_4_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_5_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_5_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_5_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_5_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_6_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_6_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_6_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_6_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_B_cached_7_7_channel_full_n assign process. --
    ap_reg_ready_B_cached_7_7_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = B_cached_7_7_channel_full_n))) then 
                    ap_reg_ready_B_cached_7_7_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready assign process. --
    ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready = ap_const_logic_1)) then 
                    ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready assign process. --
    ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)) then 
                    ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    A_0_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address0;
    A_0_address1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_address1;
    A_0_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce0;
    A_0_ce1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_ce1;
    A_0_d0 <= ap_const_lv32_0;
    A_0_d1 <= ap_const_lv32_0;
    A_0_we0 <= ap_const_logic_0;
    A_0_we1 <= ap_const_logic_0;
    A_1_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address0;
    A_1_address1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_address1;
    A_1_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce0;
    A_1_ce1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_ce1;
    A_1_d0 <= ap_const_lv32_0;
    A_1_d1 <= ap_const_lv32_0;
    A_1_we0 <= ap_const_logic_0;
    A_1_we1 <= ap_const_logic_0;
    A_2_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address0;
    A_2_address1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_address1;
    A_2_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce0;
    A_2_ce1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_ce1;
    A_2_d0 <= ap_const_lv32_0;
    A_2_d1 <= ap_const_lv32_0;
    A_2_we0 <= ap_const_logic_0;
    A_2_we1 <= ap_const_logic_0;
    A_3_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address0;
    A_3_address1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_address1;
    A_3_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce0;
    A_3_ce1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_ce1;
    A_3_d0 <= ap_const_lv32_0;
    A_3_d1 <= ap_const_lv32_0;
    A_3_we0 <= ap_const_logic_0;
    A_3_we1 <= ap_const_logic_0;
    A_4_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address0;
    A_4_address1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_address1;
    A_4_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce0;
    A_4_ce1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_ce1;
    A_4_d0 <= ap_const_lv32_0;
    A_4_d1 <= ap_const_lv32_0;
    A_4_we0 <= ap_const_logic_0;
    A_4_we1 <= ap_const_logic_0;
    A_5_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address0;
    A_5_address1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_address1;
    A_5_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce0;
    A_5_ce1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_ce1;
    A_5_d0 <= ap_const_lv32_0;
    A_5_d1 <= ap_const_lv32_0;
    A_5_we0 <= ap_const_logic_0;
    A_5_we1 <= ap_const_logic_0;
    A_6_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address0;
    A_6_address1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_address1;
    A_6_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce0;
    A_6_ce1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_ce1;
    A_6_d0 <= ap_const_lv32_0;
    A_6_d1 <= ap_const_lv32_0;
    A_6_we0 <= ap_const_logic_0;
    A_6_we1 <= ap_const_logic_0;
    A_7_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address0;
    A_7_address1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_address1;
    A_7_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce0;
    A_7_ce1 <= DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_ce1;
    A_7_d0 <= ap_const_lv32_0;
    A_7_d1 <= ap_const_lv32_0;
    A_7_we0 <= ap_const_logic_0;
    A_7_we1 <= ap_const_logic_0;
    B_address0 <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_address0;
    B_address1 <= ap_const_lv6_0;
    B_cached_0_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_0;
    B_cached_0_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_0_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel;
    B_cached_0_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_1;
    B_cached_0_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_0_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel;
    B_cached_0_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_2;
    B_cached_0_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_0_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel;
    B_cached_0_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_3;
    B_cached_0_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_0_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel;
    B_cached_0_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_4;
    B_cached_0_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_0_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel;
    B_cached_0_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_5;
    B_cached_0_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_0_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel;
    B_cached_0_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_6;
    B_cached_0_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_0_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel;
    B_cached_0_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_0_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_7;
    B_cached_0_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_0_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel;
    B_cached_1_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_8;
    B_cached_1_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_1_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel;
    B_cached_1_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_9;
    B_cached_1_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_1_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel;
    B_cached_1_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_10;
    B_cached_1_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_1_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel;
    B_cached_1_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_11;
    B_cached_1_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_1_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel;
    B_cached_1_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_12;
    B_cached_1_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_1_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel;
    B_cached_1_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_13;
    B_cached_1_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_1_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel;
    B_cached_1_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_14;
    B_cached_1_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_1_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel;
    B_cached_1_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_1_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_15;
    B_cached_1_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_1_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel;
    B_cached_2_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_16;
    B_cached_2_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_2_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel;
    B_cached_2_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_17;
    B_cached_2_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_2_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel;
    B_cached_2_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_18;
    B_cached_2_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_2_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel;
    B_cached_2_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_19;
    B_cached_2_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_2_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel;
    B_cached_2_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_20;
    B_cached_2_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_2_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel;
    B_cached_2_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_21;
    B_cached_2_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_2_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel;
    B_cached_2_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_22;
    B_cached_2_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_2_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel;
    B_cached_2_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_2_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_23;
    B_cached_2_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_2_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel;
    B_cached_3_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_24;
    B_cached_3_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_3_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel;
    B_cached_3_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_25;
    B_cached_3_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_3_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel;
    B_cached_3_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_26;
    B_cached_3_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_3_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel;
    B_cached_3_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_27;
    B_cached_3_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_3_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel;
    B_cached_3_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_28;
    B_cached_3_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_3_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel;
    B_cached_3_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_29;
    B_cached_3_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_3_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel;
    B_cached_3_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_30;
    B_cached_3_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_3_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel;
    B_cached_3_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_3_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_31;
    B_cached_3_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_3_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel;
    B_cached_4_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_32;
    B_cached_4_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_4_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel;
    B_cached_4_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_33;
    B_cached_4_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_4_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel;
    B_cached_4_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_34;
    B_cached_4_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_4_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel;
    B_cached_4_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_35;
    B_cached_4_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_4_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel;
    B_cached_4_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_36;
    B_cached_4_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_4_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel;
    B_cached_4_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_37;
    B_cached_4_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_4_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel;
    B_cached_4_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_38;
    B_cached_4_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_4_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel;
    B_cached_4_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_4_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_39;
    B_cached_4_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_4_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel;
    B_cached_5_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_40;
    B_cached_5_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_5_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel;
    B_cached_5_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_41;
    B_cached_5_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_5_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel;
    B_cached_5_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_42;
    B_cached_5_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_5_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel;
    B_cached_5_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_43;
    B_cached_5_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_5_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel;
    B_cached_5_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_44;
    B_cached_5_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_5_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel;
    B_cached_5_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_45;
    B_cached_5_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_5_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel;
    B_cached_5_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_46;
    B_cached_5_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_5_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel;
    B_cached_5_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_5_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_47;
    B_cached_5_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_5_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel;
    B_cached_6_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_48;
    B_cached_6_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_6_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel;
    B_cached_6_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_49;
    B_cached_6_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_6_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel;
    B_cached_6_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_50;
    B_cached_6_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_6_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel;
    B_cached_6_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_51;
    B_cached_6_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_6_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel;
    B_cached_6_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_52;
    B_cached_6_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_6_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel;
    B_cached_6_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_53;
    B_cached_6_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_6_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel;
    B_cached_6_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_54;
    B_cached_6_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_6_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel;
    B_cached_6_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_6_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_55;
    B_cached_6_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_6_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel;
    B_cached_7_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_0_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_56;
    B_cached_7_0_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_7_0_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel;
    B_cached_7_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_1_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_57;
    B_cached_7_1_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_7_1_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel;
    B_cached_7_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_2_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_58;
    B_cached_7_2_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_7_2_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel;
    B_cached_7_3_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_3_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_59;
    B_cached_7_3_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_7_3_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel;
    B_cached_7_4_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_4_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_60;
    B_cached_7_4_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_7_4_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel;
    B_cached_7_5_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_5_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_61;
    B_cached_7_5_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_7_5_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel;
    B_cached_7_6_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_6_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_62;
    B_cached_7_6_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_7_6_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel;
    B_cached_7_7_channel_U_ap_dummy_ce <= ap_const_logic_1;
    B_cached_7_7_channel_din <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_return_63;
    B_cached_7_7_channel_read <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
    B_cached_7_7_channel_write <= ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel;
    B_ce0 <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_ce0;
    B_ce1 <= ap_const_logic_0;
    B_d0 <= ap_const_lv32_0;
    B_d1 <= ap_const_lv32_0;
    B_pipo_update <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_update;
    B_we0 <= ap_const_logic_0;
    B_we1 <= ap_const_logic_0;
    C_0_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_address0;
    C_0_address1 <= ap_const_lv3_0;
    C_0_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_ce0;
    C_0_ce1 <= ap_const_logic_0;
    C_0_d0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_d0;
    C_0_d1 <= ap_const_lv32_0;
    C_0_we0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_0_we0;
    C_0_we1 <= ap_const_logic_0;
    C_1_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_address0;
    C_1_address1 <= ap_const_lv3_0;
    C_1_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_ce0;
    C_1_ce1 <= ap_const_logic_0;
    C_1_d0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_d0;
    C_1_d1 <= ap_const_lv32_0;
    C_1_we0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_1_we0;
    C_1_we1 <= ap_const_logic_0;
    C_2_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_address0;
    C_2_address1 <= ap_const_lv3_0;
    C_2_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_ce0;
    C_2_ce1 <= ap_const_logic_0;
    C_2_d0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_d0;
    C_2_d1 <= ap_const_lv32_0;
    C_2_we0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_2_we0;
    C_2_we1 <= ap_const_logic_0;
    C_3_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_address0;
    C_3_address1 <= ap_const_lv3_0;
    C_3_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_ce0;
    C_3_ce1 <= ap_const_logic_0;
    C_3_d0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_d0;
    C_3_d1 <= ap_const_lv32_0;
    C_3_we0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_3_we0;
    C_3_we1 <= ap_const_logic_0;
    C_4_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_address0;
    C_4_address1 <= ap_const_lv3_0;
    C_4_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_ce0;
    C_4_ce1 <= ap_const_logic_0;
    C_4_d0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_d0;
    C_4_d1 <= ap_const_lv32_0;
    C_4_we0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_4_we0;
    C_4_we1 <= ap_const_logic_0;
    C_5_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_address0;
    C_5_address1 <= ap_const_lv3_0;
    C_5_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_ce0;
    C_5_ce1 <= ap_const_logic_0;
    C_5_d0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_d0;
    C_5_d1 <= ap_const_lv32_0;
    C_5_we0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_5_we0;
    C_5_we1 <= ap_const_logic_0;
    C_6_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_address0;
    C_6_address1 <= ap_const_lv3_0;
    C_6_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_ce0;
    C_6_ce1 <= ap_const_logic_0;
    C_6_d0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_d0;
    C_6_d1 <= ap_const_lv32_0;
    C_6_we0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_6_we0;
    C_6_we1 <= ap_const_logic_0;
    C_7_address0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_address0;
    C_7_address1 <= ap_const_lv3_0;
    C_7_ce0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_ce0;
    C_7_ce1 <= ap_const_logic_0;
    C_7_d0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_d0;
    C_7_d1 <= ap_const_lv32_0;
    C_7_we0 <= DCT_MAT_Multiply_Loop_Row_proc_U0_C_7_we0;
    C_7_we1 <= ap_const_logic_0;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_status <= B_pipo_status;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_pipo_update <= ap_const_logic_0;
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_q0 <= B_q0;

    -- DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue assign process. --
    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue_assign_proc : process(ap_sig_ready_B_cached_0_1_channel_full_n, ap_sig_ready_B_cached_0_0_channel_full_n, ap_sig_ready_B_cached_0_2_channel_full_n, ap_sig_ready_B_cached_0_3_channel_full_n, ap_sig_ready_B_cached_0_4_channel_full_n, ap_sig_ready_B_cached_0_5_channel_full_n, ap_sig_ready_B_cached_0_6_channel_full_n, ap_sig_ready_B_cached_1_2_channel_full_n, ap_sig_ready_B_cached_0_7_channel_full_n, ap_sig_ready_B_cached_1_6_channel_full_n, ap_sig_ready_B_cached_1_0_channel_full_n, ap_sig_ready_B_cached_1_1_channel_full_n, ap_sig_ready_B_cached_1_3_channel_full_n, ap_sig_ready_B_cached_1_4_channel_full_n, ap_sig_ready_B_cached_1_5_channel_full_n, ap_sig_ready_B_cached_2_4_channel_full_n, ap_sig_ready_B_cached_1_7_channel_full_n, ap_sig_ready_B_cached_2_0_channel_full_n, ap_sig_ready_B_cached_2_1_channel_full_n, ap_sig_ready_B_cached_2_2_channel_full_n, ap_sig_ready_B_cached_2_3_channel_full_n, ap_sig_ready_B_cached_2_5_channel_full_n, ap_sig_ready_B_cached_2_6_channel_full_n, ap_sig_ready_B_cached_2_7_channel_full_n, ap_sig_ready_B_cached_3_0_channel_full_n, ap_sig_ready_B_cached_3_1_channel_full_n, ap_sig_ready_B_cached_3_2_channel_full_n, ap_sig_ready_B_cached_3_3_channel_full_n, ap_sig_ready_B_cached_3_4_channel_full_n, ap_sig_ready_B_cached_3_5_channel_full_n, ap_sig_ready_B_cached_3_6_channel_full_n, ap_sig_ready_B_cached_3_7_channel_full_n, ap_sig_ready_B_cached_4_0_channel_full_n, ap_sig_ready_B_cached_4_1_channel_full_n, ap_sig_ready_B_cached_4_2_channel_full_n, ap_sig_ready_B_cached_4_3_channel_full_n, ap_sig_ready_B_cached_4_4_channel_full_n, ap_sig_ready_B_cached_4_5_channel_full_n, ap_sig_ready_B_cached_4_6_channel_full_n, ap_sig_ready_B_cached_4_7_channel_full_n, ap_sig_ready_B_cached_5_0_channel_full_n, ap_sig_ready_B_cached_5_1_channel_full_n, ap_sig_ready_B_cached_5_2_channel_full_n, ap_sig_ready_B_cached_5_3_channel_full_n, ap_sig_ready_B_cached_5_4_channel_full_n, ap_sig_ready_B_cached_5_5_channel_full_n, ap_sig_ready_B_cached_5_6_channel_full_n, ap_sig_ready_B_cached_5_7_channel_full_n, ap_sig_ready_B_cached_6_0_channel_full_n, ap_sig_ready_B_cached_6_1_channel_full_n, ap_sig_ready_B_cached_6_2_channel_full_n, ap_sig_ready_B_cached_6_3_channel_full_n, ap_sig_ready_B_cached_6_4_channel_full_n, ap_sig_ready_B_cached_6_5_channel_full_n, ap_sig_ready_B_cached_6_6_channel_full_n, ap_sig_ready_B_cached_6_7_channel_full_n, ap_sig_ready_B_cached_7_0_channel_full_n, ap_sig_ready_B_cached_7_1_channel_full_n, ap_sig_ready_B_cached_7_2_channel_full_n, ap_sig_ready_B_cached_7_3_channel_full_n, ap_sig_ready_B_cached_7_4_channel_full_n, ap_sig_ready_B_cached_7_5_channel_full_n, ap_sig_ready_B_cached_7_6_channel_full_n, ap_sig_ready_B_cached_7_7_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_B_cached_0_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_0_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_1_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_2_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_3_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_4_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_5_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_6_7_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_3_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_4_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_5_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_6_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_B_cached_7_7_channel_full_n))) then 
            DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start <= ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q0 <= A_0_q0;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_0_q1 <= A_0_q1;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q0 <= A_1_q0;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_1_q1 <= A_1_q1;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q0 <= A_2_q0;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_2_q1 <= A_2_q1;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q0 <= A_3_q0;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_3_q1 <= A_3_q1;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q0 <= A_4_q0;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_4_q1 <= A_4_q1;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q0 <= A_5_q0;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_5_q1 <= A_5_q1;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q0 <= A_6_q0;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_6_q1 <= A_6_q1;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q0 <= A_7_q0;
    DCT_MAT_Multiply_Loop_Row_proc_U0_A_7_q1 <= A_7_q1;
    DCT_MAT_Multiply_Loop_Row_proc_U0_ap_continue <= ap_sig_hs_continue;
    DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start <= (B_cached_0_0_channel_empty_n and B_cached_0_1_channel_empty_n and B_cached_0_2_channel_empty_n and B_cached_0_3_channel_empty_n and B_cached_0_4_channel_empty_n and B_cached_0_5_channel_empty_n and B_cached_0_6_channel_empty_n and B_cached_0_7_channel_empty_n and B_cached_1_0_channel_empty_n and B_cached_1_1_channel_empty_n and B_cached_1_2_channel_empty_n and B_cached_1_3_channel_empty_n and B_cached_1_4_channel_empty_n and B_cached_1_5_channel_empty_n and B_cached_1_6_channel_empty_n and B_cached_1_7_channel_empty_n and B_cached_2_0_channel_empty_n and B_cached_2_1_channel_empty_n and B_cached_2_2_channel_empty_n and B_cached_2_3_channel_empty_n and B_cached_2_4_channel_empty_n and B_cached_2_5_channel_empty_n and B_cached_2_6_channel_empty_n and B_cached_2_7_channel_empty_n and B_cached_3_0_channel_empty_n and B_cached_3_1_channel_empty_n and B_cached_3_2_channel_empty_n and B_cached_3_3_channel_empty_n and B_cached_3_4_channel_empty_n and B_cached_3_5_channel_empty_n and B_cached_3_6_channel_empty_n and B_cached_3_7_channel_empty_n and B_cached_4_0_channel_empty_n and B_cached_4_1_channel_empty_n and B_cached_4_2_channel_empty_n and B_cached_4_3_channel_empty_n and B_cached_4_4_channel_empty_n and B_cached_4_5_channel_empty_n and B_cached_4_6_channel_empty_n and B_cached_4_7_channel_empty_n and B_cached_5_0_channel_empty_n and B_cached_5_1_channel_empty_n and B_cached_5_2_channel_empty_n and B_cached_5_3_channel_empty_n and B_cached_5_4_channel_empty_n and B_cached_5_5_channel_empty_n and B_cached_5_6_channel_empty_n and B_cached_5_7_channel_empty_n and B_cached_6_0_channel_empty_n and B_cached_6_1_channel_empty_n and B_cached_6_2_channel_empty_n and B_cached_6_3_channel_empty_n and B_cached_6_4_channel_empty_n and B_cached_6_5_channel_empty_n and B_cached_6_6_channel_empty_n and B_cached_6_7_channel_empty_n and B_cached_7_0_channel_empty_n and B_cached_7_1_channel_empty_n and B_cached_7_2_channel_empty_n and B_cached_7_3_channel_empty_n and B_cached_7_4_channel_empty_n and B_cached_7_5_channel_empty_n and B_cached_7_6_channel_empty_n and B_cached_7_7_channel_empty_n and ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start);
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read <= B_cached_0_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read1 <= B_cached_0_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read10 <= B_cached_1_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read11 <= B_cached_1_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read12 <= B_cached_1_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read13 <= B_cached_1_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read14 <= B_cached_1_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read15 <= B_cached_1_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read16 <= B_cached_2_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read17 <= B_cached_2_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read18 <= B_cached_2_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read19 <= B_cached_2_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read2 <= B_cached_0_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read20 <= B_cached_2_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read21 <= B_cached_2_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read22 <= B_cached_2_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read23 <= B_cached_2_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read24 <= B_cached_3_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read25 <= B_cached_3_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read26 <= B_cached_3_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read27 <= B_cached_3_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read28 <= B_cached_3_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read29 <= B_cached_3_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read3 <= B_cached_0_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read30 <= B_cached_3_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read31 <= B_cached_3_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read32 <= B_cached_4_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read33 <= B_cached_4_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read34 <= B_cached_4_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read35 <= B_cached_4_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read36 <= B_cached_4_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read37 <= B_cached_4_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read38 <= B_cached_4_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read39 <= B_cached_4_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read4 <= B_cached_0_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read40 <= B_cached_5_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read41 <= B_cached_5_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read42 <= B_cached_5_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read43 <= B_cached_5_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read44 <= B_cached_5_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read45 <= B_cached_5_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read46 <= B_cached_5_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read47 <= B_cached_5_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read48 <= B_cached_6_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read49 <= B_cached_6_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read5 <= B_cached_0_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read50 <= B_cached_6_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read51 <= B_cached_6_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read52 <= B_cached_6_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read53 <= B_cached_6_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read54 <= B_cached_6_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read55 <= B_cached_6_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read56 <= B_cached_7_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read57 <= B_cached_7_1_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read58 <= B_cached_7_2_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read59 <= B_cached_7_3_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read6 <= B_cached_0_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read60 <= B_cached_7_4_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read61 <= B_cached_7_5_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read62 <= B_cached_7_6_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read63 <= B_cached_7_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read7 <= B_cached_0_7_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read8 <= B_cached_1_0_channel_dout;
    DCT_MAT_Multiply_Loop_Row_proc_U0_p_read9 <= B_cached_1_1_channel_dout;

    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_0_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_0_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_0_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_1_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_1_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_1_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_2_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_2_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_2_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_3_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_3_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_3_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_4_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_4_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_4_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_5_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_5_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_5_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_6_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_6_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_6_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_0_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_0_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_1_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_1_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_2_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_2_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_3_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_3_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_3_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_4_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_4_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_4_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_5_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_5_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_5_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_6_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_6_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_6_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done, ap_reg_ready_B_cached_7_7_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_B_cached_7_7_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_B_cached_7_7_channel <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle, DCT_MAT_Multiply_Loop_Row_proc_U0_ap_idle, B_cached_0_0_channel_empty_n, B_cached_0_1_channel_empty_n, B_cached_0_2_channel_empty_n, B_cached_0_3_channel_empty_n, B_cached_0_4_channel_empty_n, B_cached_0_5_channel_empty_n, B_cached_0_6_channel_empty_n, B_cached_0_7_channel_empty_n, B_cached_1_0_channel_empty_n, B_cached_1_1_channel_empty_n, B_cached_1_2_channel_empty_n, B_cached_1_3_channel_empty_n, B_cached_1_4_channel_empty_n, B_cached_1_5_channel_empty_n, B_cached_1_6_channel_empty_n, B_cached_1_7_channel_empty_n, B_cached_2_0_channel_empty_n, B_cached_2_1_channel_empty_n, B_cached_2_2_channel_empty_n, B_cached_2_3_channel_empty_n, B_cached_2_4_channel_empty_n, B_cached_2_5_channel_empty_n, B_cached_2_6_channel_empty_n, B_cached_2_7_channel_empty_n, B_cached_3_0_channel_empty_n, B_cached_3_1_channel_empty_n, B_cached_3_2_channel_empty_n, B_cached_3_3_channel_empty_n, B_cached_3_4_channel_empty_n, B_cached_3_5_channel_empty_n, B_cached_3_6_channel_empty_n, B_cached_3_7_channel_empty_n, B_cached_4_0_channel_empty_n, B_cached_4_1_channel_empty_n, B_cached_4_2_channel_empty_n, B_cached_4_3_channel_empty_n, B_cached_4_4_channel_empty_n, B_cached_4_5_channel_empty_n, B_cached_4_6_channel_empty_n, B_cached_4_7_channel_empty_n, B_cached_5_0_channel_empty_n, B_cached_5_1_channel_empty_n, B_cached_5_2_channel_empty_n, B_cached_5_3_channel_empty_n, B_cached_5_4_channel_empty_n, B_cached_5_5_channel_empty_n, B_cached_5_6_channel_empty_n, B_cached_5_7_channel_empty_n, B_cached_6_0_channel_empty_n, B_cached_6_1_channel_empty_n, B_cached_6_2_channel_empty_n, B_cached_6_3_channel_empty_n, B_cached_6_4_channel_empty_n, B_cached_6_5_channel_empty_n, B_cached_6_6_channel_empty_n, B_cached_6_7_channel_empty_n, B_cached_7_0_channel_empty_n, B_cached_7_1_channel_empty_n, B_cached_7_2_channel_empty_n, B_cached_7_3_channel_empty_n, B_cached_7_4_channel_empty_n, B_cached_7_5_channel_empty_n, B_cached_7_6_channel_empty_n, B_cached_7_7_channel_empty_n)
    begin
        if (((DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_idle) and (ap_const_logic_0 = B_cached_0_0_channel_empty_n) and (ap_const_logic_0 = B_cached_0_1_channel_empty_n) and (ap_const_logic_0 = B_cached_0_2_channel_empty_n) and (ap_const_logic_0 = B_cached_0_3_channel_empty_n) and (ap_const_logic_0 = B_cached_0_4_channel_empty_n) and (ap_const_logic_0 = B_cached_0_5_channel_empty_n) and (ap_const_logic_0 = B_cached_0_6_channel_empty_n) and (ap_const_logic_0 = B_cached_0_7_channel_empty_n) and (ap_const_logic_0 = B_cached_1_0_channel_empty_n) and (ap_const_logic_0 = B_cached_1_1_channel_empty_n) and (ap_const_logic_0 = B_cached_1_2_channel_empty_n) and (ap_const_logic_0 = B_cached_1_3_channel_empty_n) and (ap_const_logic_0 = B_cached_1_4_channel_empty_n) and (ap_const_logic_0 = B_cached_1_5_channel_empty_n) and (ap_const_logic_0 = B_cached_1_6_channel_empty_n) and (ap_const_logic_0 = B_cached_1_7_channel_empty_n) and (ap_const_logic_0 = B_cached_2_0_channel_empty_n) and (ap_const_logic_0 = B_cached_2_1_channel_empty_n) and (ap_const_logic_0 = B_cached_2_2_channel_empty_n) and (ap_const_logic_0 = B_cached_2_3_channel_empty_n) and (ap_const_logic_0 = B_cached_2_4_channel_empty_n) and (ap_const_logic_0 = B_cached_2_5_channel_empty_n) and (ap_const_logic_0 = B_cached_2_6_channel_empty_n) and (ap_const_logic_0 = B_cached_2_7_channel_empty_n) and (ap_const_logic_0 = B_cached_3_0_channel_empty_n) and (ap_const_logic_0 = B_cached_3_1_channel_empty_n) and (ap_const_logic_0 = B_cached_3_2_channel_empty_n) and (ap_const_logic_0 = B_cached_3_3_channel_empty_n) and (ap_const_logic_0 = B_cached_3_4_channel_empty_n) and (ap_const_logic_0 = B_cached_3_5_channel_empty_n) and (ap_const_logic_0 = B_cached_3_6_channel_empty_n) and (ap_const_logic_0 = B_cached_3_7_channel_empty_n) and (ap_const_logic_0 = B_cached_4_0_channel_empty_n) and (ap_const_logic_0 = B_cached_4_1_channel_empty_n) and (ap_const_logic_0 = B_cached_4_2_channel_empty_n) and (ap_const_logic_0 = B_cached_4_3_channel_empty_n) and (ap_const_logic_0 = B_cached_4_4_channel_empty_n) and (ap_const_logic_0 = B_cached_4_5_channel_empty_n) and (ap_const_logic_0 = B_cached_4_6_channel_empty_n) and (ap_const_logic_0 = B_cached_4_7_channel_empty_n) and (ap_const_logic_0 = B_cached_5_0_channel_empty_n) and (ap_const_logic_0 = B_cached_5_1_channel_empty_n) and (ap_const_logic_0 = B_cached_5_2_channel_empty_n) and (ap_const_logic_0 = B_cached_5_3_channel_empty_n) and (ap_const_logic_0 = B_cached_5_4_channel_empty_n) and (ap_const_logic_0 = B_cached_5_5_channel_empty_n) and (ap_const_logic_0 = B_cached_5_6_channel_empty_n) and (ap_const_logic_0 = B_cached_5_7_channel_empty_n) and (ap_const_logic_0 = B_cached_6_0_channel_empty_n) and (ap_const_logic_0 = B_cached_6_1_channel_empty_n) and (ap_const_logic_0 = B_cached_6_2_channel_empty_n) and (ap_const_logic_0 = B_cached_6_3_channel_empty_n) and (ap_const_logic_0 = B_cached_6_4_channel_empty_n) and (ap_const_logic_0 = B_cached_6_5_channel_empty_n) and (ap_const_logic_0 = B_cached_6_6_channel_empty_n) and (ap_const_logic_0 = B_cached_6_7_channel_empty_n) and (ap_const_logic_0 = B_cached_7_0_channel_empty_n) and (ap_const_logic_0 = B_cached_7_1_channel_empty_n) and (ap_const_logic_0 = B_cached_7_2_channel_empty_n) and (ap_const_logic_0 = B_cached_7_3_channel_empty_n) and (ap_const_logic_0 = B_cached_7_4_channel_empty_n) and (ap_const_logic_0 = B_cached_7_5_channel_empty_n) and (ap_const_logic_0 = B_cached_7_6_channel_empty_n) and (ap_const_logic_0 = B_cached_7_7_channel_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done)
    begin
        if ((ap_const_logic_1 = DCT_MAT_Multiply_Loop_Row_proc_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_0_channel_full_n_assign_proc : process(B_cached_0_0_channel_full_n, ap_reg_ready_B_cached_0_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_0_channel_full_n)) then 
            ap_sig_ready_B_cached_0_0_channel_full_n <= B_cached_0_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_1_channel_full_n_assign_proc : process(B_cached_0_1_channel_full_n, ap_reg_ready_B_cached_0_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_1_channel_full_n)) then 
            ap_sig_ready_B_cached_0_1_channel_full_n <= B_cached_0_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_2_channel_full_n_assign_proc : process(B_cached_0_2_channel_full_n, ap_reg_ready_B_cached_0_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_2_channel_full_n)) then 
            ap_sig_ready_B_cached_0_2_channel_full_n <= B_cached_0_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_3_channel_full_n_assign_proc : process(B_cached_0_3_channel_full_n, ap_reg_ready_B_cached_0_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_3_channel_full_n)) then 
            ap_sig_ready_B_cached_0_3_channel_full_n <= B_cached_0_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_4_channel_full_n_assign_proc : process(B_cached_0_4_channel_full_n, ap_reg_ready_B_cached_0_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_4_channel_full_n)) then 
            ap_sig_ready_B_cached_0_4_channel_full_n <= B_cached_0_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_5_channel_full_n_assign_proc : process(B_cached_0_5_channel_full_n, ap_reg_ready_B_cached_0_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_5_channel_full_n)) then 
            ap_sig_ready_B_cached_0_5_channel_full_n <= B_cached_0_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_6_channel_full_n_assign_proc : process(B_cached_0_6_channel_full_n, ap_reg_ready_B_cached_0_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_6_channel_full_n)) then 
            ap_sig_ready_B_cached_0_6_channel_full_n <= B_cached_0_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_0_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_0_7_channel_full_n_assign_proc : process(B_cached_0_7_channel_full_n, ap_reg_ready_B_cached_0_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_0_7_channel_full_n)) then 
            ap_sig_ready_B_cached_0_7_channel_full_n <= B_cached_0_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_0_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_0_channel_full_n_assign_proc : process(B_cached_1_0_channel_full_n, ap_reg_ready_B_cached_1_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_0_channel_full_n)) then 
            ap_sig_ready_B_cached_1_0_channel_full_n <= B_cached_1_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_1_channel_full_n_assign_proc : process(B_cached_1_1_channel_full_n, ap_reg_ready_B_cached_1_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_1_channel_full_n)) then 
            ap_sig_ready_B_cached_1_1_channel_full_n <= B_cached_1_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_2_channel_full_n_assign_proc : process(B_cached_1_2_channel_full_n, ap_reg_ready_B_cached_1_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_2_channel_full_n)) then 
            ap_sig_ready_B_cached_1_2_channel_full_n <= B_cached_1_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_3_channel_full_n_assign_proc : process(B_cached_1_3_channel_full_n, ap_reg_ready_B_cached_1_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_3_channel_full_n)) then 
            ap_sig_ready_B_cached_1_3_channel_full_n <= B_cached_1_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_4_channel_full_n_assign_proc : process(B_cached_1_4_channel_full_n, ap_reg_ready_B_cached_1_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_4_channel_full_n)) then 
            ap_sig_ready_B_cached_1_4_channel_full_n <= B_cached_1_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_5_channel_full_n_assign_proc : process(B_cached_1_5_channel_full_n, ap_reg_ready_B_cached_1_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_5_channel_full_n)) then 
            ap_sig_ready_B_cached_1_5_channel_full_n <= B_cached_1_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_6_channel_full_n_assign_proc : process(B_cached_1_6_channel_full_n, ap_reg_ready_B_cached_1_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_6_channel_full_n)) then 
            ap_sig_ready_B_cached_1_6_channel_full_n <= B_cached_1_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_1_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_1_7_channel_full_n_assign_proc : process(B_cached_1_7_channel_full_n, ap_reg_ready_B_cached_1_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_1_7_channel_full_n)) then 
            ap_sig_ready_B_cached_1_7_channel_full_n <= B_cached_1_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_1_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_0_channel_full_n_assign_proc : process(B_cached_2_0_channel_full_n, ap_reg_ready_B_cached_2_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_0_channel_full_n)) then 
            ap_sig_ready_B_cached_2_0_channel_full_n <= B_cached_2_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_1_channel_full_n_assign_proc : process(B_cached_2_1_channel_full_n, ap_reg_ready_B_cached_2_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_1_channel_full_n)) then 
            ap_sig_ready_B_cached_2_1_channel_full_n <= B_cached_2_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_2_channel_full_n_assign_proc : process(B_cached_2_2_channel_full_n, ap_reg_ready_B_cached_2_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_2_channel_full_n)) then 
            ap_sig_ready_B_cached_2_2_channel_full_n <= B_cached_2_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_3_channel_full_n_assign_proc : process(B_cached_2_3_channel_full_n, ap_reg_ready_B_cached_2_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_3_channel_full_n)) then 
            ap_sig_ready_B_cached_2_3_channel_full_n <= B_cached_2_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_4_channel_full_n_assign_proc : process(B_cached_2_4_channel_full_n, ap_reg_ready_B_cached_2_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_4_channel_full_n)) then 
            ap_sig_ready_B_cached_2_4_channel_full_n <= B_cached_2_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_5_channel_full_n_assign_proc : process(B_cached_2_5_channel_full_n, ap_reg_ready_B_cached_2_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_5_channel_full_n)) then 
            ap_sig_ready_B_cached_2_5_channel_full_n <= B_cached_2_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_6_channel_full_n_assign_proc : process(B_cached_2_6_channel_full_n, ap_reg_ready_B_cached_2_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_6_channel_full_n)) then 
            ap_sig_ready_B_cached_2_6_channel_full_n <= B_cached_2_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_2_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_2_7_channel_full_n_assign_proc : process(B_cached_2_7_channel_full_n, ap_reg_ready_B_cached_2_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_2_7_channel_full_n)) then 
            ap_sig_ready_B_cached_2_7_channel_full_n <= B_cached_2_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_2_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_0_channel_full_n_assign_proc : process(B_cached_3_0_channel_full_n, ap_reg_ready_B_cached_3_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_0_channel_full_n)) then 
            ap_sig_ready_B_cached_3_0_channel_full_n <= B_cached_3_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_1_channel_full_n_assign_proc : process(B_cached_3_1_channel_full_n, ap_reg_ready_B_cached_3_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_1_channel_full_n)) then 
            ap_sig_ready_B_cached_3_1_channel_full_n <= B_cached_3_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_2_channel_full_n_assign_proc : process(B_cached_3_2_channel_full_n, ap_reg_ready_B_cached_3_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_2_channel_full_n)) then 
            ap_sig_ready_B_cached_3_2_channel_full_n <= B_cached_3_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_3_channel_full_n_assign_proc : process(B_cached_3_3_channel_full_n, ap_reg_ready_B_cached_3_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_3_channel_full_n)) then 
            ap_sig_ready_B_cached_3_3_channel_full_n <= B_cached_3_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_4_channel_full_n_assign_proc : process(B_cached_3_4_channel_full_n, ap_reg_ready_B_cached_3_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_4_channel_full_n)) then 
            ap_sig_ready_B_cached_3_4_channel_full_n <= B_cached_3_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_5_channel_full_n_assign_proc : process(B_cached_3_5_channel_full_n, ap_reg_ready_B_cached_3_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_5_channel_full_n)) then 
            ap_sig_ready_B_cached_3_5_channel_full_n <= B_cached_3_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_6_channel_full_n_assign_proc : process(B_cached_3_6_channel_full_n, ap_reg_ready_B_cached_3_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_6_channel_full_n)) then 
            ap_sig_ready_B_cached_3_6_channel_full_n <= B_cached_3_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_3_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_3_7_channel_full_n_assign_proc : process(B_cached_3_7_channel_full_n, ap_reg_ready_B_cached_3_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_3_7_channel_full_n)) then 
            ap_sig_ready_B_cached_3_7_channel_full_n <= B_cached_3_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_3_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_0_channel_full_n_assign_proc : process(B_cached_4_0_channel_full_n, ap_reg_ready_B_cached_4_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_0_channel_full_n)) then 
            ap_sig_ready_B_cached_4_0_channel_full_n <= B_cached_4_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_1_channel_full_n_assign_proc : process(B_cached_4_1_channel_full_n, ap_reg_ready_B_cached_4_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_1_channel_full_n)) then 
            ap_sig_ready_B_cached_4_1_channel_full_n <= B_cached_4_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_2_channel_full_n_assign_proc : process(B_cached_4_2_channel_full_n, ap_reg_ready_B_cached_4_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_2_channel_full_n)) then 
            ap_sig_ready_B_cached_4_2_channel_full_n <= B_cached_4_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_3_channel_full_n_assign_proc : process(B_cached_4_3_channel_full_n, ap_reg_ready_B_cached_4_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_3_channel_full_n)) then 
            ap_sig_ready_B_cached_4_3_channel_full_n <= B_cached_4_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_4_channel_full_n_assign_proc : process(B_cached_4_4_channel_full_n, ap_reg_ready_B_cached_4_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_4_channel_full_n)) then 
            ap_sig_ready_B_cached_4_4_channel_full_n <= B_cached_4_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_5_channel_full_n_assign_proc : process(B_cached_4_5_channel_full_n, ap_reg_ready_B_cached_4_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_5_channel_full_n)) then 
            ap_sig_ready_B_cached_4_5_channel_full_n <= B_cached_4_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_6_channel_full_n_assign_proc : process(B_cached_4_6_channel_full_n, ap_reg_ready_B_cached_4_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_6_channel_full_n)) then 
            ap_sig_ready_B_cached_4_6_channel_full_n <= B_cached_4_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_4_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_4_7_channel_full_n_assign_proc : process(B_cached_4_7_channel_full_n, ap_reg_ready_B_cached_4_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_4_7_channel_full_n)) then 
            ap_sig_ready_B_cached_4_7_channel_full_n <= B_cached_4_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_4_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_0_channel_full_n_assign_proc : process(B_cached_5_0_channel_full_n, ap_reg_ready_B_cached_5_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_0_channel_full_n)) then 
            ap_sig_ready_B_cached_5_0_channel_full_n <= B_cached_5_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_1_channel_full_n_assign_proc : process(B_cached_5_1_channel_full_n, ap_reg_ready_B_cached_5_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_1_channel_full_n)) then 
            ap_sig_ready_B_cached_5_1_channel_full_n <= B_cached_5_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_2_channel_full_n_assign_proc : process(B_cached_5_2_channel_full_n, ap_reg_ready_B_cached_5_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_2_channel_full_n)) then 
            ap_sig_ready_B_cached_5_2_channel_full_n <= B_cached_5_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_3_channel_full_n_assign_proc : process(B_cached_5_3_channel_full_n, ap_reg_ready_B_cached_5_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_3_channel_full_n)) then 
            ap_sig_ready_B_cached_5_3_channel_full_n <= B_cached_5_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_4_channel_full_n_assign_proc : process(B_cached_5_4_channel_full_n, ap_reg_ready_B_cached_5_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_4_channel_full_n)) then 
            ap_sig_ready_B_cached_5_4_channel_full_n <= B_cached_5_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_5_channel_full_n_assign_proc : process(B_cached_5_5_channel_full_n, ap_reg_ready_B_cached_5_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_5_channel_full_n)) then 
            ap_sig_ready_B_cached_5_5_channel_full_n <= B_cached_5_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_6_channel_full_n_assign_proc : process(B_cached_5_6_channel_full_n, ap_reg_ready_B_cached_5_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_6_channel_full_n)) then 
            ap_sig_ready_B_cached_5_6_channel_full_n <= B_cached_5_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_5_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_5_7_channel_full_n_assign_proc : process(B_cached_5_7_channel_full_n, ap_reg_ready_B_cached_5_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_5_7_channel_full_n)) then 
            ap_sig_ready_B_cached_5_7_channel_full_n <= B_cached_5_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_5_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_0_channel_full_n_assign_proc : process(B_cached_6_0_channel_full_n, ap_reg_ready_B_cached_6_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_0_channel_full_n)) then 
            ap_sig_ready_B_cached_6_0_channel_full_n <= B_cached_6_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_1_channel_full_n_assign_proc : process(B_cached_6_1_channel_full_n, ap_reg_ready_B_cached_6_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_1_channel_full_n)) then 
            ap_sig_ready_B_cached_6_1_channel_full_n <= B_cached_6_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_2_channel_full_n_assign_proc : process(B_cached_6_2_channel_full_n, ap_reg_ready_B_cached_6_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_2_channel_full_n)) then 
            ap_sig_ready_B_cached_6_2_channel_full_n <= B_cached_6_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_3_channel_full_n_assign_proc : process(B_cached_6_3_channel_full_n, ap_reg_ready_B_cached_6_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_3_channel_full_n)) then 
            ap_sig_ready_B_cached_6_3_channel_full_n <= B_cached_6_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_4_channel_full_n_assign_proc : process(B_cached_6_4_channel_full_n, ap_reg_ready_B_cached_6_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_4_channel_full_n)) then 
            ap_sig_ready_B_cached_6_4_channel_full_n <= B_cached_6_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_5_channel_full_n_assign_proc : process(B_cached_6_5_channel_full_n, ap_reg_ready_B_cached_6_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_5_channel_full_n)) then 
            ap_sig_ready_B_cached_6_5_channel_full_n <= B_cached_6_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_6_channel_full_n_assign_proc : process(B_cached_6_6_channel_full_n, ap_reg_ready_B_cached_6_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_6_channel_full_n)) then 
            ap_sig_ready_B_cached_6_6_channel_full_n <= B_cached_6_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_6_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_6_7_channel_full_n_assign_proc : process(B_cached_6_7_channel_full_n, ap_reg_ready_B_cached_6_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_6_7_channel_full_n)) then 
            ap_sig_ready_B_cached_6_7_channel_full_n <= B_cached_6_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_6_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_0_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_0_channel_full_n_assign_proc : process(B_cached_7_0_channel_full_n, ap_reg_ready_B_cached_7_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_0_channel_full_n)) then 
            ap_sig_ready_B_cached_7_0_channel_full_n <= B_cached_7_0_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_1_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_1_channel_full_n_assign_proc : process(B_cached_7_1_channel_full_n, ap_reg_ready_B_cached_7_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_1_channel_full_n)) then 
            ap_sig_ready_B_cached_7_1_channel_full_n <= B_cached_7_1_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_2_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_2_channel_full_n_assign_proc : process(B_cached_7_2_channel_full_n, ap_reg_ready_B_cached_7_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_2_channel_full_n)) then 
            ap_sig_ready_B_cached_7_2_channel_full_n <= B_cached_7_2_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_3_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_3_channel_full_n_assign_proc : process(B_cached_7_3_channel_full_n, ap_reg_ready_B_cached_7_3_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_3_channel_full_n)) then 
            ap_sig_ready_B_cached_7_3_channel_full_n <= B_cached_7_3_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_3_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_4_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_4_channel_full_n_assign_proc : process(B_cached_7_4_channel_full_n, ap_reg_ready_B_cached_7_4_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_4_channel_full_n)) then 
            ap_sig_ready_B_cached_7_4_channel_full_n <= B_cached_7_4_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_4_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_5_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_5_channel_full_n_assign_proc : process(B_cached_7_5_channel_full_n, ap_reg_ready_B_cached_7_5_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_5_channel_full_n)) then 
            ap_sig_ready_B_cached_7_5_channel_full_n <= B_cached_7_5_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_5_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_6_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_6_channel_full_n_assign_proc : process(B_cached_7_6_channel_full_n, ap_reg_ready_B_cached_7_6_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_6_channel_full_n)) then 
            ap_sig_ready_B_cached_7_6_channel_full_n <= B_cached_7_6_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_6_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_B_cached_7_7_channel_full_n assign process. --
    ap_sig_ready_B_cached_7_7_channel_full_n_assign_proc : process(B_cached_7_7_channel_full_n, ap_reg_ready_B_cached_7_7_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_B_cached_7_7_channel_full_n)) then 
            ap_sig_ready_B_cached_7_7_channel_full_n <= B_cached_7_7_channel_full_n;
        else 
            ap_sig_ready_B_cached_7_7_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready assign process. --
    ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready_assign_proc : process(DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready, ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)) then 
            ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready;
        else 
            ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready assign process. --
    ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready_assign_proc : process(DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready, ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)) then 
            ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready;
        else 
            ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start assign process. --
    ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start assign process. --
    ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready))) then 
            ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready, ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_DCT_MAT_Multiply_Loop_LoadRow_proc_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_DCT_MAT_Multiply_Loop_Row_proc_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

end behav;
