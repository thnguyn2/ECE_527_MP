-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_MAT_Multiply2_Loop_Row_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DCT_MAT_Multiply2_Loop_Row_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st5_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal indvar_flatten_reg_102 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i_i_reg_113 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_i_i_reg_124 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_57 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_675_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_166_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i_i_mid2_fu_192_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_i_mid2_reg_684 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_227_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_reg_694 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_tmp_21_reg_694_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_231_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_cached_row_0_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_94 : BOOLEAN;
    signal i_0_i_i_phi_fu_117_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_cached_row_7_36_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_68_fu_532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal A_cached_row_7_32_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_67_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_27_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_65_fu_509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_21_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_62_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_14_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_58_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_37_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_53_fu_416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_38_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_47_fu_370_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_39_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_6_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_i_i5_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_dup3_fu_186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_i_i_mid2_fu_178_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_204_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_trn_cast_fu_200_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_cached_row_7_fu_247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_cached_row_7_1_fu_253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_cached_row_7_2_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp8_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_cached_row_7_3_fu_278_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_cached_row_7_4_fu_291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_cached_row_7_5_fu_304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_7_fu_325_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_8_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_9_fu_338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_41_fu_346_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_45_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_46_fu_362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_48_fu_378_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_49_fu_384_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_50_fu_392_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_51_fu_400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_52_fu_408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_54_fu_424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_55_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_56_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_57_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_59_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_60_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_61_fu_478_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_63_fu_494_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_64_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_66_fu_517_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_160_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_94))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_160_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_94)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_160_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- i_0_i_i_reg_113 assign process. --
    i_0_i_i_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_675 = ap_const_lv1_0))) then 
                i_0_i_i_reg_113 <= i_0_i_i_mid2_reg_684;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_94))) then 
                i_0_i_i_reg_113 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_102 assign process. --
    indvar_flatten_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_160_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_102 <= indvar_flatten_next_fu_166_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_94))) then 
                indvar_flatten_reg_102 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_0_i_i_reg_124 assign process. --
    k_0_i_i_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_160_p2 = ap_const_lv1_0))) then 
                k_0_i_i_reg_124 <= k_fu_231_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_94))) then 
                k_0_i_i_reg_124 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_675 = ap_const_lv1_0))) then
                A_cached_row_0_reg_710 <= A_q0;
                sel_tmp2_reg_728 <= sel_tmp2_fu_242_p2;
                sel_tmp_reg_722 <= sel_tmp_fu_237_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond_flatten_reg_675_pp0_it1 = ap_const_lv1_0))) then
                A_cached_row_7_14_fu_74 <= A_cached_row_7_58_fu_455_p3;
                A_cached_row_7_21_fu_70 <= A_cached_row_7_62_fu_486_p3;
                A_cached_row_7_27_fu_66 <= A_cached_row_7_65_fu_509_p3;
                A_cached_row_7_32_fu_62 <= A_cached_row_7_67_fu_524_p3;
                A_cached_row_7_36_fu_58 <= A_cached_row_7_68_fu_532_p3;
                A_cached_row_7_37_fu_78 <= A_cached_row_7_53_fu_416_p3;
                A_cached_row_7_38_fu_82 <= A_cached_row_7_47_fu_370_p3;
                A_cached_row_7_39_fu_86 <= A_cached_row_7_6_fu_317_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_675_pp0_it1 <= exitcond_flatten_reg_675;
                ap_reg_ppstg_tmp_21_reg_694_pp0_it1 <= tmp_21_reg_694;
                exitcond_flatten_reg_675 <= exitcond_flatten_fu_160_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_160_p2 = ap_const_lv1_0))) then
                i_0_i_i_mid2_reg_684 <= i_0_i_i_mid2_fu_192_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_160_p2 = ap_const_lv1_0))) then
                tmp_21_reg_694 <= tmp_21_fu_227_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten_fu_160_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_94)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_94)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_160_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_160_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_2;
                end if;
            when ap_ST_st5_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_address0 <= tmp_19_fu_222_p1(6 - 1 downto 0);
    A_cached_row_7_1_fu_253_p3 <= 
        A_cached_row_7_39_fu_86 when (sel_tmp2_reg_728(0) = '1') else 
        A_cached_row_7_fu_247_p3;
    A_cached_row_7_2_fu_265_p3 <= 
        A_cached_row_7_39_fu_86 when (sel_tmp4_fu_260_p2(0) = '1') else 
        A_cached_row_7_1_fu_253_p3;
    A_cached_row_7_3_fu_278_p3 <= 
        A_cached_row_7_39_fu_86 when (sel_tmp6_fu_273_p2(0) = '1') else 
        A_cached_row_7_2_fu_265_p3;
    A_cached_row_7_41_fu_346_p3 <= 
        A_cached_row_7_38_fu_82 when (sel_tmp6_fu_273_p2(0) = '1') else 
        A_cached_row_7_9_fu_338_p3;
    A_cached_row_7_45_fu_354_p3 <= 
        A_cached_row_7_38_fu_82 when (sel_tmp8_fu_286_p2(0) = '1') else 
        A_cached_row_7_41_fu_346_p3;
    A_cached_row_7_46_fu_362_p3 <= 
        A_cached_row_7_38_fu_82 when (sel_tmp1_fu_299_p2(0) = '1') else 
        A_cached_row_7_45_fu_354_p3;
    A_cached_row_7_47_fu_370_p3 <= 
        A_cached_row_7_38_fu_82 when (sel_tmp5_fu_312_p2(0) = '1') else 
        A_cached_row_7_46_fu_362_p3;
    A_cached_row_7_48_fu_378_p3 <= 
        A_cached_row_0_reg_710 when (sel_tmp2_reg_728(0) = '1') else 
        A_cached_row_7_37_fu_78;
    A_cached_row_7_49_fu_384_p3 <= 
        A_cached_row_7_37_fu_78 when (sel_tmp4_fu_260_p2(0) = '1') else 
        A_cached_row_7_48_fu_378_p3;
    A_cached_row_7_4_fu_291_p3 <= 
        A_cached_row_7_39_fu_86 when (sel_tmp8_fu_286_p2(0) = '1') else 
        A_cached_row_7_3_fu_278_p3;
    A_cached_row_7_50_fu_392_p3 <= 
        A_cached_row_7_37_fu_78 when (sel_tmp6_fu_273_p2(0) = '1') else 
        A_cached_row_7_49_fu_384_p3;
    A_cached_row_7_51_fu_400_p3 <= 
        A_cached_row_7_37_fu_78 when (sel_tmp8_fu_286_p2(0) = '1') else 
        A_cached_row_7_50_fu_392_p3;
    A_cached_row_7_52_fu_408_p3 <= 
        A_cached_row_7_37_fu_78 when (sel_tmp1_fu_299_p2(0) = '1') else 
        A_cached_row_7_51_fu_400_p3;
    A_cached_row_7_53_fu_416_p3 <= 
        A_cached_row_7_37_fu_78 when (sel_tmp5_fu_312_p2(0) = '1') else 
        A_cached_row_7_52_fu_408_p3;
    A_cached_row_7_54_fu_424_p3 <= 
        A_cached_row_0_reg_710 when (sel_tmp4_fu_260_p2(0) = '1') else 
        A_cached_row_7_14_fu_74;
    A_cached_row_7_55_fu_431_p3 <= 
        A_cached_row_7_14_fu_74 when (sel_tmp6_fu_273_p2(0) = '1') else 
        A_cached_row_7_54_fu_424_p3;
    A_cached_row_7_56_fu_439_p3 <= 
        A_cached_row_7_14_fu_74 when (sel_tmp8_fu_286_p2(0) = '1') else 
        A_cached_row_7_55_fu_431_p3;
    A_cached_row_7_57_fu_447_p3 <= 
        A_cached_row_7_14_fu_74 when (sel_tmp1_fu_299_p2(0) = '1') else 
        A_cached_row_7_56_fu_439_p3;
    A_cached_row_7_58_fu_455_p3 <= 
        A_cached_row_7_14_fu_74 when (sel_tmp5_fu_312_p2(0) = '1') else 
        A_cached_row_7_57_fu_447_p3;
    A_cached_row_7_59_fu_463_p3 <= 
        A_cached_row_0_reg_710 when (sel_tmp6_fu_273_p2(0) = '1') else 
        A_cached_row_7_21_fu_70;
    A_cached_row_7_5_fu_304_p3 <= 
        A_cached_row_7_39_fu_86 when (sel_tmp1_fu_299_p2(0) = '1') else 
        A_cached_row_7_4_fu_291_p3;
    A_cached_row_7_60_fu_470_p3 <= 
        A_cached_row_7_21_fu_70 when (sel_tmp8_fu_286_p2(0) = '1') else 
        A_cached_row_7_59_fu_463_p3;
    A_cached_row_7_61_fu_478_p3 <= 
        A_cached_row_7_21_fu_70 when (sel_tmp1_fu_299_p2(0) = '1') else 
        A_cached_row_7_60_fu_470_p3;
    A_cached_row_7_62_fu_486_p3 <= 
        A_cached_row_7_21_fu_70 when (sel_tmp5_fu_312_p2(0) = '1') else 
        A_cached_row_7_61_fu_478_p3;
    A_cached_row_7_63_fu_494_p3 <= 
        A_cached_row_0_reg_710 when (sel_tmp8_fu_286_p2(0) = '1') else 
        A_cached_row_7_27_fu_66;
    A_cached_row_7_64_fu_501_p3 <= 
        A_cached_row_7_27_fu_66 when (sel_tmp1_fu_299_p2(0) = '1') else 
        A_cached_row_7_63_fu_494_p3;
    A_cached_row_7_65_fu_509_p3 <= 
        A_cached_row_7_27_fu_66 when (sel_tmp5_fu_312_p2(0) = '1') else 
        A_cached_row_7_64_fu_501_p3;
    A_cached_row_7_66_fu_517_p3 <= 
        A_cached_row_0_reg_710 when (sel_tmp1_fu_299_p2(0) = '1') else 
        A_cached_row_7_32_fu_62;
    A_cached_row_7_67_fu_524_p3 <= 
        A_cached_row_7_32_fu_62 when (sel_tmp5_fu_312_p2(0) = '1') else 
        A_cached_row_7_66_fu_517_p3;
    A_cached_row_7_68_fu_532_p3 <= 
        A_cached_row_0_reg_710 when (sel_tmp5_fu_312_p2(0) = '1') else 
        A_cached_row_7_36_fu_58;
    A_cached_row_7_6_fu_317_p3 <= 
        A_cached_row_7_39_fu_86 when (sel_tmp5_fu_312_p2(0) = '1') else 
        A_cached_row_7_5_fu_304_p3;
    A_cached_row_7_7_fu_325_p3 <= 
        A_cached_row_0_reg_710 when (sel_tmp_reg_722(0) = '1') else 
        A_cached_row_7_38_fu_82;
    A_cached_row_7_8_fu_331_p3 <= 
        A_cached_row_7_38_fu_82 when (sel_tmp2_reg_728(0) = '1') else 
        A_cached_row_7_7_fu_325_p3;
    A_cached_row_7_9_fu_338_p3 <= 
        A_cached_row_7_38_fu_82 when (sel_tmp4_fu_260_p2(0) = '1') else 
        A_cached_row_7_8_fu_331_p3;
    A_cached_row_7_fu_247_p3 <= 
        A_cached_row_7_39_fu_86 when (sel_tmp_reg_722(0) = '1') else 
        A_cached_row_0_reg_710;

    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st5_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= A_cached_row_7_39_fu_86;
    ap_return_1 <= A_cached_row_7_38_fu_82;
    ap_return_2 <= A_cached_row_7_37_fu_78;
    ap_return_3 <= A_cached_row_7_14_fu_74;
    ap_return_4 <= A_cached_row_7_21_fu_70;
    ap_return_5 <= A_cached_row_7_27_fu_66;
    ap_return_6 <= A_cached_row_7_32_fu_62;
    ap_return_7 <= A_cached_row_7_36_fu_58;

    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_57 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_94 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_57)
    begin
        if (ap_sig_bdd_57) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_2 assign process. --
    ap_sig_cseq_ST_st5_fsm_2_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st5_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_i_i5_fu_172_p2 <= "1" when (k_0_i_i_reg_124 = ap_const_lv4_8) else "0";
    exitcond_flatten_fu_160_p2 <= "1" when (indvar_flatten_reg_102 = ap_const_lv7_40) else "0";
    i_0_i_i_mid2_fu_192_p3 <= 
        tmp_1_i_dup3_fu_186_p2 when (exitcond2_i_i5_fu_172_p2(0) = '1') else 
        i_0_i_i_phi_fu_117_p4;

    -- i_0_i_i_phi_fu_117_p4 assign process. --
    i_0_i_i_phi_fu_117_p4_assign_proc : process(i_0_i_i_reg_113, exitcond_flatten_reg_675, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_0_i_i_mid2_reg_684)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_675 = ap_const_lv1_0))) then 
            i_0_i_i_phi_fu_117_p4 <= i_0_i_i_mid2_reg_684;
        else 
            i_0_i_i_phi_fu_117_p4 <= i_0_i_i_reg_113;
        end if; 
    end process;

    indvar_flatten_next_fu_166_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_102) + unsigned(ap_const_lv7_1));
    k_0_i_i_mid2_fu_178_p3 <= 
        ap_const_lv4_0 when (exitcond2_i_i5_fu_172_p2(0) = '1') else 
        k_0_i_i_reg_124;
    k_fu_231_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(k_0_i_i_mid2_fu_178_p3));
    p_addr1_fu_216_p2 <= std_logic_vector(unsigned(p_addr_cast_fu_212_p1) + unsigned(tmp_2_i_trn_cast_fu_200_p1));
    p_addr_cast_fu_212_p1 <= std_logic_vector(resize(unsigned(tmp_fu_204_p3),8));
    sel_tmp1_fu_299_p2 <= "1" when (ap_reg_ppstg_tmp_21_reg_694_pp0_it1 = ap_const_lv3_1) else "0";
    sel_tmp2_fu_242_p2 <= "1" when (tmp_21_reg_694 = ap_const_lv3_5) else "0";
    sel_tmp4_fu_260_p2 <= "1" when (ap_reg_ppstg_tmp_21_reg_694_pp0_it1 = ap_const_lv3_4) else "0";
    sel_tmp5_fu_312_p2 <= "1" when (ap_reg_ppstg_tmp_21_reg_694_pp0_it1 = ap_const_lv3_0) else "0";
    sel_tmp6_fu_273_p2 <= "1" when (ap_reg_ppstg_tmp_21_reg_694_pp0_it1 = ap_const_lv3_3) else "0";
    sel_tmp8_fu_286_p2 <= "1" when (ap_reg_ppstg_tmp_21_reg_694_pp0_it1 = ap_const_lv3_2) else "0";
    sel_tmp_fu_237_p2 <= "1" when (tmp_21_reg_694 = ap_const_lv3_6) else "0";
    tmp_19_fu_222_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_216_p2),64));
    tmp_1_i_dup3_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_0_i_i_phi_fu_117_p4));
    tmp_21_fu_227_p1 <= k_0_i_i_mid2_fu_178_p3(3 - 1 downto 0);
    tmp_2_i_trn_cast_fu_200_p1 <= std_logic_vector(resize(unsigned(k_0_i_i_mid2_fu_178_p3),8));
    tmp_fu_204_p3 <= (i_0_i_i_mid2_fu_192_p3 & ap_const_lv3_0);
end behav;
