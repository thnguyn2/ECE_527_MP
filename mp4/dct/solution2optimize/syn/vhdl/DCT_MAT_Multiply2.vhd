-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_MAT_Multiply2 is
port (
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_we0 : OUT STD_LOGIC;
    A_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_we1 : OUT STD_LOGIC;
    B_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_we0 : OUT STD_LOGIC;
    B_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_0_ce1 : OUT STD_LOGIC;
    B_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_we1 : OUT STD_LOGIC;
    B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_we0 : OUT STD_LOGIC;
    B_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_1_ce1 : OUT STD_LOGIC;
    B_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_we1 : OUT STD_LOGIC;
    B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_we0 : OUT STD_LOGIC;
    B_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_2_ce1 : OUT STD_LOGIC;
    B_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_we1 : OUT STD_LOGIC;
    B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_we0 : OUT STD_LOGIC;
    B_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_3_ce1 : OUT STD_LOGIC;
    B_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_we1 : OUT STD_LOGIC;
    B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_4_ce0 : OUT STD_LOGIC;
    B_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_we0 : OUT STD_LOGIC;
    B_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_4_ce1 : OUT STD_LOGIC;
    B_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_we1 : OUT STD_LOGIC;
    B_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_5_ce0 : OUT STD_LOGIC;
    B_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_we0 : OUT STD_LOGIC;
    B_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_5_ce1 : OUT STD_LOGIC;
    B_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_we1 : OUT STD_LOGIC;
    B_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_6_ce0 : OUT STD_LOGIC;
    B_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_we0 : OUT STD_LOGIC;
    B_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_6_ce1 : OUT STD_LOGIC;
    B_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_we1 : OUT STD_LOGIC;
    B_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_7_ce0 : OUT STD_LOGIC;
    B_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_we0 : OUT STD_LOGIC;
    B_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_7_ce1 : OUT STD_LOGIC;
    B_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_we1 : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of DCT_MAT_Multiply2 is 
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_idle : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_A_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_A_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel : STD_LOGIC;
    signal A_cached_row_0_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_A_cached_row_0_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_A_cached_row_0_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel : STD_LOGIC;
    signal A_cached_row_4_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_A_cached_row_4_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_A_cached_row_4_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel : STD_LOGIC;
    signal A_cached_row_6_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_A_cached_row_6_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_A_cached_row_6_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel : STD_LOGIC;
    signal A_cached_row_7_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_A_cached_row_7_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_A_cached_row_7_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel : STD_LOGIC;
    signal A_cached_row_1_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_A_cached_row_1_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_A_cached_row_1_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel : STD_LOGIC;
    signal A_cached_row_3_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_A_cached_row_3_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_A_cached_row_3_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel : STD_LOGIC;
    signal A_cached_row_2_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_A_cached_row_2_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_A_cached_row_2_loc_channel_full_n : STD_LOGIC;
    signal ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel : STD_LOGIC;
    signal A_cached_row_5_loc_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_A_cached_row_5_loc_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_A_cached_row_5_loc_channel_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_continue : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_idle : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read3 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read6 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_ce0 : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read7 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_din : STD_LOGIC_VECTOR (31 downto 0);
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_full_n : STD_LOGIC;
    signal DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_write : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal A_cached_row_7_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal A_cached_row_7_loc_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_loc_channel_write : STD_LOGIC;
    signal A_cached_row_7_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_7_loc_channel_empty_n : STD_LOGIC;
    signal A_cached_row_7_loc_channel_read : STD_LOGIC;
    signal A_cached_row_6_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal A_cached_row_6_loc_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_6_loc_channel_write : STD_LOGIC;
    signal A_cached_row_6_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_6_loc_channel_empty_n : STD_LOGIC;
    signal A_cached_row_6_loc_channel_read : STD_LOGIC;
    signal A_cached_row_5_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal A_cached_row_5_loc_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_5_loc_channel_write : STD_LOGIC;
    signal A_cached_row_5_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_5_loc_channel_empty_n : STD_LOGIC;
    signal A_cached_row_5_loc_channel_read : STD_LOGIC;
    signal A_cached_row_4_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal A_cached_row_4_loc_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_4_loc_channel_write : STD_LOGIC;
    signal A_cached_row_4_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_4_loc_channel_empty_n : STD_LOGIC;
    signal A_cached_row_4_loc_channel_read : STD_LOGIC;
    signal A_cached_row_3_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal A_cached_row_3_loc_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_3_loc_channel_write : STD_LOGIC;
    signal A_cached_row_3_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_3_loc_channel_empty_n : STD_LOGIC;
    signal A_cached_row_3_loc_channel_read : STD_LOGIC;
    signal A_cached_row_2_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal A_cached_row_2_loc_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_2_loc_channel_write : STD_LOGIC;
    signal A_cached_row_2_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_2_loc_channel_empty_n : STD_LOGIC;
    signal A_cached_row_2_loc_channel_read : STD_LOGIC;
    signal A_cached_row_1_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal A_cached_row_1_loc_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_1_loc_channel_write : STD_LOGIC;
    signal A_cached_row_1_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_1_loc_channel_empty_n : STD_LOGIC;
    signal A_cached_row_1_loc_channel_read : STD_LOGIC;
    signal A_cached_row_0_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal A_cached_row_0_loc_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_0_loc_channel_write : STD_LOGIC;
    signal A_cached_row_0_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_cached_row_0_loc_channel_empty_n : STD_LOGIC;
    signal A_cached_row_0_loc_channel_read : STD_LOGIC;
    signal ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start : STD_LOGIC;

    component DCT_MAT_Multiply2_Loop_Row_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_MAT_Multiply2_Loop_Col_proc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_2_ce0 : OUT STD_LOGIC;
        B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_3_ce0 : OUT STD_LOGIC;
        B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_4_ce0 : OUT STD_LOGIC;
        B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_5_ce0 : OUT STD_LOGIC;
        B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_6_ce0 : OUT STD_LOGIC;
        B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_7_ce0 : OUT STD_LOGIC;
        B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_full_n : IN STD_LOGIC;
        C_write : OUT STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply2_A_cached_row_7_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply2_A_cached_row_6_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply2_A_cached_row_5_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply2_A_cached_row_4_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply2_A_cached_row_3_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply2_A_cached_row_2_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply2_A_cached_row_1_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_DCT_MAT_Multiply2_A_cached_row_0_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    DCT_MAT_Multiply2_Loop_Row_proc_U0 : component DCT_MAT_Multiply2_Loop_Row_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start,
        ap_done => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done,
        ap_continue => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue,
        ap_idle => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_idle,
        ap_ready => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready,
        A_address0 => DCT_MAT_Multiply2_Loop_Row_proc_U0_A_address0,
        A_ce0 => DCT_MAT_Multiply2_Loop_Row_proc_U0_A_ce0,
        A_q0 => DCT_MAT_Multiply2_Loop_Row_proc_U0_A_q0,
        ap_return_0 => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_0,
        ap_return_1 => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_1,
        ap_return_2 => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_2,
        ap_return_3 => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_3,
        ap_return_4 => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_4,
        ap_return_5 => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_5,
        ap_return_6 => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_6,
        ap_return_7 => DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_7);

    DCT_MAT_Multiply2_Loop_Col_proc2_U0 : component DCT_MAT_Multiply2_Loop_Col_proc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start,
        ap_done => DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done,
        ap_continue => DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_continue,
        ap_idle => DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_idle,
        ap_ready => DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready,
        B_0_address0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_address0,
        B_0_ce0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_ce0,
        B_0_q0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_q0,
        p_read => DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read,
        B_1_address0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_address0,
        B_1_ce0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_ce0,
        B_1_q0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_q0,
        p_read1 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read1,
        B_2_address0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_address0,
        B_2_ce0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_ce0,
        B_2_q0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_q0,
        p_read2 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read2,
        B_3_address0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_address0,
        B_3_ce0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_ce0,
        B_3_q0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_q0,
        p_read3 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read3,
        B_4_address0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_address0,
        B_4_ce0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_ce0,
        B_4_q0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_q0,
        p_read4 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read4,
        B_5_address0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_address0,
        B_5_ce0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_ce0,
        B_5_q0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_q0,
        p_read5 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read5,
        B_6_address0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_address0,
        B_6_ce0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_ce0,
        B_6_q0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_q0,
        p_read6 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read6,
        B_7_address0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_address0,
        B_7_ce0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_ce0,
        B_7_q0 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_q0,
        p_read7 => DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read7,
        C_din => DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_din,
        C_full_n => DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_full_n,
        C_write => DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_write);

    A_cached_row_7_loc_channel_U : component FIFO_DCT_MAT_Multiply2_A_cached_row_7_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_cached_row_7_loc_channel_U_ap_dummy_ce,
        if_write_ce => A_cached_row_7_loc_channel_U_ap_dummy_ce,
        if_din => A_cached_row_7_loc_channel_din,
        if_full_n => A_cached_row_7_loc_channel_full_n,
        if_write => A_cached_row_7_loc_channel_write,
        if_dout => A_cached_row_7_loc_channel_dout,
        if_empty_n => A_cached_row_7_loc_channel_empty_n,
        if_read => A_cached_row_7_loc_channel_read);

    A_cached_row_6_loc_channel_U : component FIFO_DCT_MAT_Multiply2_A_cached_row_6_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_cached_row_6_loc_channel_U_ap_dummy_ce,
        if_write_ce => A_cached_row_6_loc_channel_U_ap_dummy_ce,
        if_din => A_cached_row_6_loc_channel_din,
        if_full_n => A_cached_row_6_loc_channel_full_n,
        if_write => A_cached_row_6_loc_channel_write,
        if_dout => A_cached_row_6_loc_channel_dout,
        if_empty_n => A_cached_row_6_loc_channel_empty_n,
        if_read => A_cached_row_6_loc_channel_read);

    A_cached_row_5_loc_channel_U : component FIFO_DCT_MAT_Multiply2_A_cached_row_5_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_cached_row_5_loc_channel_U_ap_dummy_ce,
        if_write_ce => A_cached_row_5_loc_channel_U_ap_dummy_ce,
        if_din => A_cached_row_5_loc_channel_din,
        if_full_n => A_cached_row_5_loc_channel_full_n,
        if_write => A_cached_row_5_loc_channel_write,
        if_dout => A_cached_row_5_loc_channel_dout,
        if_empty_n => A_cached_row_5_loc_channel_empty_n,
        if_read => A_cached_row_5_loc_channel_read);

    A_cached_row_4_loc_channel_U : component FIFO_DCT_MAT_Multiply2_A_cached_row_4_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_cached_row_4_loc_channel_U_ap_dummy_ce,
        if_write_ce => A_cached_row_4_loc_channel_U_ap_dummy_ce,
        if_din => A_cached_row_4_loc_channel_din,
        if_full_n => A_cached_row_4_loc_channel_full_n,
        if_write => A_cached_row_4_loc_channel_write,
        if_dout => A_cached_row_4_loc_channel_dout,
        if_empty_n => A_cached_row_4_loc_channel_empty_n,
        if_read => A_cached_row_4_loc_channel_read);

    A_cached_row_3_loc_channel_U : component FIFO_DCT_MAT_Multiply2_A_cached_row_3_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_cached_row_3_loc_channel_U_ap_dummy_ce,
        if_write_ce => A_cached_row_3_loc_channel_U_ap_dummy_ce,
        if_din => A_cached_row_3_loc_channel_din,
        if_full_n => A_cached_row_3_loc_channel_full_n,
        if_write => A_cached_row_3_loc_channel_write,
        if_dout => A_cached_row_3_loc_channel_dout,
        if_empty_n => A_cached_row_3_loc_channel_empty_n,
        if_read => A_cached_row_3_loc_channel_read);

    A_cached_row_2_loc_channel_U : component FIFO_DCT_MAT_Multiply2_A_cached_row_2_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_cached_row_2_loc_channel_U_ap_dummy_ce,
        if_write_ce => A_cached_row_2_loc_channel_U_ap_dummy_ce,
        if_din => A_cached_row_2_loc_channel_din,
        if_full_n => A_cached_row_2_loc_channel_full_n,
        if_write => A_cached_row_2_loc_channel_write,
        if_dout => A_cached_row_2_loc_channel_dout,
        if_empty_n => A_cached_row_2_loc_channel_empty_n,
        if_read => A_cached_row_2_loc_channel_read);

    A_cached_row_1_loc_channel_U : component FIFO_DCT_MAT_Multiply2_A_cached_row_1_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_cached_row_1_loc_channel_U_ap_dummy_ce,
        if_write_ce => A_cached_row_1_loc_channel_U_ap_dummy_ce,
        if_din => A_cached_row_1_loc_channel_din,
        if_full_n => A_cached_row_1_loc_channel_full_n,
        if_write => A_cached_row_1_loc_channel_write,
        if_dout => A_cached_row_1_loc_channel_dout,
        if_empty_n => A_cached_row_1_loc_channel_empty_n,
        if_read => A_cached_row_1_loc_channel_read);

    A_cached_row_0_loc_channel_U : component FIFO_DCT_MAT_Multiply2_A_cached_row_0_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => A_cached_row_0_loc_channel_U_ap_dummy_ce,
        if_write_ce => A_cached_row_0_loc_channel_U_ap_dummy_ce,
        if_din => A_cached_row_0_loc_channel_din,
        if_full_n => A_cached_row_0_loc_channel_full_n,
        if_write => A_cached_row_0_loc_channel_write,
        if_dout => A_cached_row_0_loc_channel_dout,
        if_empty_n => A_cached_row_0_loc_channel_empty_n,
        if_read => A_cached_row_0_loc_channel_read);





    -- ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 assign process. --
    ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply2_Loop_Col_proc2_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 assign process. --
    ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_0;
                elsif ((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_DCT_MAT_Multiply2_Loop_Row_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_A_cached_row_0_loc_channel_full_n assign process. --
    ap_reg_ready_A_cached_row_0_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_A_cached_row_0_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_A_cached_row_0_loc_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = A_cached_row_0_loc_channel_full_n))) then 
                    ap_reg_ready_A_cached_row_0_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_A_cached_row_1_loc_channel_full_n assign process. --
    ap_reg_ready_A_cached_row_1_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_A_cached_row_1_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_A_cached_row_1_loc_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = A_cached_row_1_loc_channel_full_n))) then 
                    ap_reg_ready_A_cached_row_1_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_A_cached_row_2_loc_channel_full_n assign process. --
    ap_reg_ready_A_cached_row_2_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_A_cached_row_2_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_A_cached_row_2_loc_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = A_cached_row_2_loc_channel_full_n))) then 
                    ap_reg_ready_A_cached_row_2_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_A_cached_row_3_loc_channel_full_n assign process. --
    ap_reg_ready_A_cached_row_3_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_A_cached_row_3_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_A_cached_row_3_loc_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = A_cached_row_3_loc_channel_full_n))) then 
                    ap_reg_ready_A_cached_row_3_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_A_cached_row_4_loc_channel_full_n assign process. --
    ap_reg_ready_A_cached_row_4_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_A_cached_row_4_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_A_cached_row_4_loc_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = A_cached_row_4_loc_channel_full_n))) then 
                    ap_reg_ready_A_cached_row_4_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_A_cached_row_5_loc_channel_full_n assign process. --
    ap_reg_ready_A_cached_row_5_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_A_cached_row_5_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_A_cached_row_5_loc_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = A_cached_row_5_loc_channel_full_n))) then 
                    ap_reg_ready_A_cached_row_5_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_A_cached_row_6_loc_channel_full_n assign process. --
    ap_reg_ready_A_cached_row_6_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_A_cached_row_6_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_A_cached_row_6_loc_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = A_cached_row_6_loc_channel_full_n))) then 
                    ap_reg_ready_A_cached_row_6_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_A_cached_row_7_loc_channel_full_n assign process. --
    ap_reg_ready_A_cached_row_7_loc_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_A_cached_row_7_loc_channel_full_n <= ap_const_logic_0;
            else
                if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_A_cached_row_7_loc_channel_full_n <= ap_const_logic_0;
                elsif (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = A_cached_row_7_loc_channel_full_n))) then 
                    ap_reg_ready_A_cached_row_7_loc_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready assign process. --
    ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)) then 
                    ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready assign process. --
    ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready = ap_const_logic_1)) then 
                    ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    A_address0 <= DCT_MAT_Multiply2_Loop_Row_proc_U0_A_address0;
    A_address1 <= ap_const_lv6_0;
    A_cached_row_0_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    A_cached_row_0_loc_channel_din <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_7;
    A_cached_row_0_loc_channel_read <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    A_cached_row_0_loc_channel_write <= ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel;
    A_cached_row_1_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    A_cached_row_1_loc_channel_din <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_6;
    A_cached_row_1_loc_channel_read <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    A_cached_row_1_loc_channel_write <= ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel;
    A_cached_row_2_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    A_cached_row_2_loc_channel_din <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_5;
    A_cached_row_2_loc_channel_read <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    A_cached_row_2_loc_channel_write <= ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel;
    A_cached_row_3_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    A_cached_row_3_loc_channel_din <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_4;
    A_cached_row_3_loc_channel_read <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    A_cached_row_3_loc_channel_write <= ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel;
    A_cached_row_4_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    A_cached_row_4_loc_channel_din <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_3;
    A_cached_row_4_loc_channel_read <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    A_cached_row_4_loc_channel_write <= ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel;
    A_cached_row_5_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    A_cached_row_5_loc_channel_din <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_2;
    A_cached_row_5_loc_channel_read <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    A_cached_row_5_loc_channel_write <= ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel;
    A_cached_row_6_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    A_cached_row_6_loc_channel_din <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_1;
    A_cached_row_6_loc_channel_read <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    A_cached_row_6_loc_channel_write <= ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel;
    A_cached_row_7_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    A_cached_row_7_loc_channel_din <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_return_0;
    A_cached_row_7_loc_channel_read <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
    A_cached_row_7_loc_channel_write <= ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel;
    A_ce0 <= DCT_MAT_Multiply2_Loop_Row_proc_U0_A_ce0;
    A_ce1 <= ap_const_logic_0;
    A_d0 <= ap_const_lv32_0;
    A_d1 <= ap_const_lv32_0;
    A_we0 <= ap_const_logic_0;
    A_we1 <= ap_const_logic_0;
    B_0_address0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_address0;
    B_0_address1 <= ap_const_lv3_0;
    B_0_ce0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_ce0;
    B_0_ce1 <= ap_const_logic_0;
    B_0_d0 <= ap_const_lv32_0;
    B_0_d1 <= ap_const_lv32_0;
    B_0_we0 <= ap_const_logic_0;
    B_0_we1 <= ap_const_logic_0;
    B_1_address0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_address0;
    B_1_address1 <= ap_const_lv3_0;
    B_1_ce0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_ce0;
    B_1_ce1 <= ap_const_logic_0;
    B_1_d0 <= ap_const_lv32_0;
    B_1_d1 <= ap_const_lv32_0;
    B_1_we0 <= ap_const_logic_0;
    B_1_we1 <= ap_const_logic_0;
    B_2_address0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_address0;
    B_2_address1 <= ap_const_lv3_0;
    B_2_ce0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_ce0;
    B_2_ce1 <= ap_const_logic_0;
    B_2_d0 <= ap_const_lv32_0;
    B_2_d1 <= ap_const_lv32_0;
    B_2_we0 <= ap_const_logic_0;
    B_2_we1 <= ap_const_logic_0;
    B_3_address0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_address0;
    B_3_address1 <= ap_const_lv3_0;
    B_3_ce0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_ce0;
    B_3_ce1 <= ap_const_logic_0;
    B_3_d0 <= ap_const_lv32_0;
    B_3_d1 <= ap_const_lv32_0;
    B_3_we0 <= ap_const_logic_0;
    B_3_we1 <= ap_const_logic_0;
    B_4_address0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_address0;
    B_4_address1 <= ap_const_lv3_0;
    B_4_ce0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_ce0;
    B_4_ce1 <= ap_const_logic_0;
    B_4_d0 <= ap_const_lv32_0;
    B_4_d1 <= ap_const_lv32_0;
    B_4_we0 <= ap_const_logic_0;
    B_4_we1 <= ap_const_logic_0;
    B_5_address0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_address0;
    B_5_address1 <= ap_const_lv3_0;
    B_5_ce0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_ce0;
    B_5_ce1 <= ap_const_logic_0;
    B_5_d0 <= ap_const_lv32_0;
    B_5_d1 <= ap_const_lv32_0;
    B_5_we0 <= ap_const_logic_0;
    B_5_we1 <= ap_const_logic_0;
    B_6_address0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_address0;
    B_6_address1 <= ap_const_lv3_0;
    B_6_ce0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_ce0;
    B_6_ce1 <= ap_const_logic_0;
    B_6_d0 <= ap_const_lv32_0;
    B_6_d1 <= ap_const_lv32_0;
    B_6_we0 <= ap_const_logic_0;
    B_6_we1 <= ap_const_logic_0;
    B_7_address0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_address0;
    B_7_address1 <= ap_const_lv3_0;
    B_7_ce0 <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_ce0;
    B_7_ce1 <= ap_const_logic_0;
    B_7_d0 <= ap_const_lv32_0;
    B_7_d1 <= ap_const_lv32_0;
    B_7_we0 <= ap_const_logic_0;
    B_7_we1 <= ap_const_logic_0;
    C_din <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_din;
    C_write <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_write;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_0_q0 <= B_0_q0;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_1_q0 <= B_1_q0;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_2_q0 <= B_2_q0;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_3_q0 <= B_3_q0;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_4_q0 <= B_4_q0;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_5_q0 <= B_5_q0;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_6_q0 <= B_6_q0;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_B_7_q0 <= B_7_q0;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_C_full_n <= C_full_n;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_continue <= ap_sig_hs_continue;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start <= (A_cached_row_7_loc_channel_empty_n and A_cached_row_6_loc_channel_empty_n and A_cached_row_5_loc_channel_empty_n and A_cached_row_4_loc_channel_empty_n and A_cached_row_3_loc_channel_empty_n and A_cached_row_2_loc_channel_empty_n and A_cached_row_1_loc_channel_empty_n and A_cached_row_0_loc_channel_empty_n and ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start);
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read <= A_cached_row_0_loc_channel_dout;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read1 <= A_cached_row_1_loc_channel_dout;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read2 <= A_cached_row_2_loc_channel_dout;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read3 <= A_cached_row_3_loc_channel_dout;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read4 <= A_cached_row_4_loc_channel_dout;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read5 <= A_cached_row_5_loc_channel_dout;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read6 <= A_cached_row_6_loc_channel_dout;
    DCT_MAT_Multiply2_Loop_Col_proc2_U0_p_read7 <= A_cached_row_7_loc_channel_dout;
    DCT_MAT_Multiply2_Loop_Row_proc_U0_A_q0 <= A_q0;

    -- DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue assign process. --
    DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue_assign_proc : process(ap_sig_ready_A_cached_row_0_loc_channel_full_n, ap_sig_ready_A_cached_row_4_loc_channel_full_n, ap_sig_ready_A_cached_row_6_loc_channel_full_n, ap_sig_ready_A_cached_row_7_loc_channel_full_n, ap_sig_ready_A_cached_row_1_loc_channel_full_n, ap_sig_ready_A_cached_row_3_loc_channel_full_n, ap_sig_ready_A_cached_row_2_loc_channel_full_n, ap_sig_ready_A_cached_row_5_loc_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_A_cached_row_0_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_A_cached_row_4_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_A_cached_row_6_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_A_cached_row_7_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_A_cached_row_1_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_A_cached_row_3_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_A_cached_row_2_loc_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_A_cached_row_5_loc_channel_full_n))) then 
            DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start <= ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start;

    -- ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done, ap_reg_ready_A_cached_row_0_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_A_cached_row_0_loc_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_0_loc_channel <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done, ap_reg_ready_A_cached_row_1_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_A_cached_row_1_loc_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_1_loc_channel <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done, ap_reg_ready_A_cached_row_2_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_A_cached_row_2_loc_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_2_loc_channel <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done, ap_reg_ready_A_cached_row_3_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_A_cached_row_3_loc_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_3_loc_channel <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done, ap_reg_ready_A_cached_row_4_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_A_cached_row_4_loc_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_4_loc_channel <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done, ap_reg_ready_A_cached_row_5_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_A_cached_row_5_loc_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_5_loc_channel <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done, ap_reg_ready_A_cached_row_6_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_A_cached_row_6_loc_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_6_loc_channel <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel assign process. --
    ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done, ap_reg_ready_A_cached_row_7_loc_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_A_cached_row_7_loc_channel_full_n)) then 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel <= ap_const_logic_0;
        else 
            ap_chn_write_DCT_MAT_Multiply2_Loop_Row_proc_U0_A_cached_row_7_loc_channel <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_idle, DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_idle, A_cached_row_7_loc_channel_empty_n, A_cached_row_6_loc_channel_empty_n, A_cached_row_5_loc_channel_empty_n, A_cached_row_4_loc_channel_empty_n, A_cached_row_3_loc_channel_empty_n, A_cached_row_2_loc_channel_empty_n, A_cached_row_1_loc_channel_empty_n, A_cached_row_0_loc_channel_empty_n)
    begin
        if (((DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_idle) and (ap_const_logic_0 = A_cached_row_7_loc_channel_empty_n) and (ap_const_logic_0 = A_cached_row_6_loc_channel_empty_n) and (ap_const_logic_0 = A_cached_row_5_loc_channel_empty_n) and (ap_const_logic_0 = A_cached_row_4_loc_channel_empty_n) and (ap_const_logic_0 = A_cached_row_3_loc_channel_empty_n) and (ap_const_logic_0 = A_cached_row_2_loc_channel_empty_n) and (ap_const_logic_0 = A_cached_row_1_loc_channel_empty_n) and (ap_const_logic_0 = A_cached_row_0_loc_channel_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done)
    begin
        if ((ap_const_logic_1 = DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_A_cached_row_0_loc_channel_full_n assign process. --
    ap_sig_ready_A_cached_row_0_loc_channel_full_n_assign_proc : process(A_cached_row_0_loc_channel_full_n, ap_reg_ready_A_cached_row_0_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_A_cached_row_0_loc_channel_full_n)) then 
            ap_sig_ready_A_cached_row_0_loc_channel_full_n <= A_cached_row_0_loc_channel_full_n;
        else 
            ap_sig_ready_A_cached_row_0_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_A_cached_row_1_loc_channel_full_n assign process. --
    ap_sig_ready_A_cached_row_1_loc_channel_full_n_assign_proc : process(A_cached_row_1_loc_channel_full_n, ap_reg_ready_A_cached_row_1_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_A_cached_row_1_loc_channel_full_n)) then 
            ap_sig_ready_A_cached_row_1_loc_channel_full_n <= A_cached_row_1_loc_channel_full_n;
        else 
            ap_sig_ready_A_cached_row_1_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_A_cached_row_2_loc_channel_full_n assign process. --
    ap_sig_ready_A_cached_row_2_loc_channel_full_n_assign_proc : process(A_cached_row_2_loc_channel_full_n, ap_reg_ready_A_cached_row_2_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_A_cached_row_2_loc_channel_full_n)) then 
            ap_sig_ready_A_cached_row_2_loc_channel_full_n <= A_cached_row_2_loc_channel_full_n;
        else 
            ap_sig_ready_A_cached_row_2_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_A_cached_row_3_loc_channel_full_n assign process. --
    ap_sig_ready_A_cached_row_3_loc_channel_full_n_assign_proc : process(A_cached_row_3_loc_channel_full_n, ap_reg_ready_A_cached_row_3_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_A_cached_row_3_loc_channel_full_n)) then 
            ap_sig_ready_A_cached_row_3_loc_channel_full_n <= A_cached_row_3_loc_channel_full_n;
        else 
            ap_sig_ready_A_cached_row_3_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_A_cached_row_4_loc_channel_full_n assign process. --
    ap_sig_ready_A_cached_row_4_loc_channel_full_n_assign_proc : process(A_cached_row_4_loc_channel_full_n, ap_reg_ready_A_cached_row_4_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_A_cached_row_4_loc_channel_full_n)) then 
            ap_sig_ready_A_cached_row_4_loc_channel_full_n <= A_cached_row_4_loc_channel_full_n;
        else 
            ap_sig_ready_A_cached_row_4_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_A_cached_row_5_loc_channel_full_n assign process. --
    ap_sig_ready_A_cached_row_5_loc_channel_full_n_assign_proc : process(A_cached_row_5_loc_channel_full_n, ap_reg_ready_A_cached_row_5_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_A_cached_row_5_loc_channel_full_n)) then 
            ap_sig_ready_A_cached_row_5_loc_channel_full_n <= A_cached_row_5_loc_channel_full_n;
        else 
            ap_sig_ready_A_cached_row_5_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_A_cached_row_6_loc_channel_full_n assign process. --
    ap_sig_ready_A_cached_row_6_loc_channel_full_n_assign_proc : process(A_cached_row_6_loc_channel_full_n, ap_reg_ready_A_cached_row_6_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_A_cached_row_6_loc_channel_full_n)) then 
            ap_sig_ready_A_cached_row_6_loc_channel_full_n <= A_cached_row_6_loc_channel_full_n;
        else 
            ap_sig_ready_A_cached_row_6_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_A_cached_row_7_loc_channel_full_n assign process. --
    ap_sig_ready_A_cached_row_7_loc_channel_full_n_assign_proc : process(A_cached_row_7_loc_channel_full_n, ap_reg_ready_A_cached_row_7_loc_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_A_cached_row_7_loc_channel_full_n)) then 
            ap_sig_ready_A_cached_row_7_loc_channel_full_n <= A_cached_row_7_loc_channel_full_n;
        else 
            ap_sig_ready_A_cached_row_7_loc_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready assign process. --
    ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready_assign_proc : process(DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready, ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)) then 
            ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready <= DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready;
        else 
            ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready assign process. --
    ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready_assign_proc : process(DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready, ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready)) then 
            ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready <= DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready;
        else 
            ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start assign process. --
    ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready))) then 
            ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start assign process. --
    ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready, ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_DCT_MAT_Multiply2_Loop_Row_proc_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_DCT_MAT_Multiply2_Loop_Col_proc2_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

end behav;
