-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_MAT_Multiply2_Loop_Col_proc2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_4_ce0 : OUT STD_LOGIC;
    B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_5_ce0 : OUT STD_LOGIC;
    B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_6_ce0 : OUT STD_LOGIC;
    B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_7_ce0 : OUT STD_LOGIC;
    B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC );
end;


architecture behav of DCT_MAT_Multiply2_Loop_Col_proc2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st48_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal j_reg_225 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_96 : BOOLEAN;
    signal exitcond1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it40 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it41 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it42 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it43 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it44 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it44 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_217 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it45 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it40 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it41 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it42 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_367_pp0_it43 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_316_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_376 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it13 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_376_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_1_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_2_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_3_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_4_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_522_pp0_it30 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_522_pp0_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_522_pp0_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_522_pp0_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_6_reg_522_pp0_it34 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it30 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it34 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it35 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it37 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it38 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_7_reg_527_pp0_it39 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_5_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_6_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_7_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_246_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_300_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_ce : STD_LOGIC;
    signal grp_fu_242_ce : STD_LOGIC;
    signal grp_fu_246_ce : STD_LOGIC;
    signal grp_fu_250_ce : STD_LOGIC;
    signal grp_fu_254_ce : STD_LOGIC;
    signal grp_fu_258_ce : STD_LOGIC;
    signal grp_fu_262_ce : STD_LOGIC;
    signal grp_fu_266_ce : STD_LOGIC;
    signal grp_fu_270_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal grp_fu_280_ce : STD_LOGIC;
    signal grp_fu_285_ce : STD_LOGIC;
    signal grp_fu_290_ce : STD_LOGIC;
    signal grp_fu_295_ce : STD_LOGIC;
    signal grp_fu_300_ce : STD_LOGIC;
    signal grp_fu_305_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st48_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_686 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component DCT_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    DCT_fadd_32ns_32ns_32_5_full_dsp_U163 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_237_p0,
        din1 => grp_fu_237_p1,
        ce => grp_fu_237_ce,
        dout => grp_fu_237_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U164 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_242_p0,
        din1 => grp_fu_242_p1,
        ce => grp_fu_242_ce,
        dout => grp_fu_242_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U165 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_246_p0,
        din1 => grp_fu_246_p1,
        ce => grp_fu_246_ce,
        dout => grp_fu_246_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U166 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        ce => grp_fu_250_ce,
        dout => grp_fu_250_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U167 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U168 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_258_p0,
        din1 => grp_fu_258_p1,
        ce => grp_fu_258_ce,
        dout => grp_fu_258_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U169 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_262_p0,
        din1 => grp_fu_262_p1,
        ce => grp_fu_262_ce,
        dout => grp_fu_262_p2);

    DCT_fadd_32ns_32ns_32_5_full_dsp_U170 : component DCT_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        din1 => grp_fu_266_p1,
        ce => grp_fu_266_ce,
        dout => grp_fu_266_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U171 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        ce => grp_fu_270_ce,
        dout => grp_fu_270_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U172 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U173 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_280_p0,
        din1 => grp_fu_280_p1,
        ce => grp_fu_280_ce,
        dout => grp_fu_280_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U174 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        ce => grp_fu_285_ce,
        dout => grp_fu_285_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U175 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_290_p0,
        din1 => grp_fu_290_p1,
        ce => grp_fu_290_ce,
        dout => grp_fu_290_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U176 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_295_p0,
        din1 => grp_fu_295_p1,
        ce => grp_fu_295_ce,
        dout => grp_fu_295_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U177 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_300_p0,
        din1 => grp_fu_300_p1,
        ce => grp_fu_300_ce,
        dout => grp_fu_300_p2);

    DCT_fmul_32ns_32ns_32_4_max_dsp_U178 : component DCT_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_305_p0,
        din1 => grp_fu_305_p1,
        ce => grp_fu_305_ce,
        dout => grp_fu_305_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and not((exitcond1_fu_310_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_96))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (exitcond1_fu_310_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_96)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and not((exitcond1_fu_310_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it26 assign process. --
    ap_reg_ppiten_pp0_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it27 assign process. --
    ap_reg_ppiten_pp0_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it28 assign process. --
    ap_reg_ppiten_pp0_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it29 assign process. --
    ap_reg_ppiten_pp0_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it30 assign process. --
    ap_reg_ppiten_pp0_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it31 assign process. --
    ap_reg_ppiten_pp0_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it32 assign process. --
    ap_reg_ppiten_pp0_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it33 assign process. --
    ap_reg_ppiten_pp0_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it34 assign process. --
    ap_reg_ppiten_pp0_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it35 assign process. --
    ap_reg_ppiten_pp0_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it35 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it35 <= ap_reg_ppiten_pp0_it34;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it36 assign process. --
    ap_reg_ppiten_pp0_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it36 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it36 <= ap_reg_ppiten_pp0_it35;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it37 assign process. --
    ap_reg_ppiten_pp0_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it37 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it37 <= ap_reg_ppiten_pp0_it36;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it38 assign process. --
    ap_reg_ppiten_pp0_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it38 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it38 <= ap_reg_ppiten_pp0_it37;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it39 assign process. --
    ap_reg_ppiten_pp0_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it39 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it39 <= ap_reg_ppiten_pp0_it38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it40 assign process. --
    ap_reg_ppiten_pp0_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it40 <= ap_reg_ppiten_pp0_it39;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it41 assign process. --
    ap_reg_ppiten_pp0_it41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it41 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it41 <= ap_reg_ppiten_pp0_it40;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it42 assign process. --
    ap_reg_ppiten_pp0_it42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it42 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it42 <= ap_reg_ppiten_pp0_it41;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it43 assign process. --
    ap_reg_ppiten_pp0_it43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it43 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it43 <= ap_reg_ppiten_pp0_it42;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it44 assign process. --
    ap_reg_ppiten_pp0_it44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it44 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it44 <= ap_reg_ppiten_pp0_it43;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it45 assign process. --
    ap_reg_ppiten_pp0_it45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it45 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it45 <= ap_reg_ppiten_pp0_it44;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_96))) then 
                    ap_reg_ppiten_pp0_it45 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- j_reg_225 assign process. --
    j_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_96))) then 
                j_reg_225 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (exitcond1_fu_310_p2 = ap_const_lv1_0))) then 
                j_reg_225 <= j_1_fu_316_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then
                ap_reg_ppstg_exitcond1_reg_367_pp0_it1 <= exitcond1_reg_367;
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it1(3 downto 0) <= tmp_s_reg_376(3 downto 0);
                exitcond1_reg_367 <= exitcond1_fu_310_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45)))) then
                ap_reg_ppstg_exitcond1_reg_367_pp0_it10 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it9;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it11 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it10;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it12 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it11;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it13 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it12;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it14 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it13;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it15 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it14;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it16 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it15;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it17 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it16;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it18 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it17;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it19 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it18;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it2 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it1;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it20 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it19;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it21 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it20;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it22 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it21;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it23 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it22;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it24 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it23;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it25 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it24;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it26 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it25;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it27 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it26;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it28 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it27;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it29 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it28;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it3 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it2;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it30 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it29;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it31 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it30;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it32 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it31;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it33 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it32;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it34 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it33;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it35 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it34;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it36 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it35;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it37 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it36;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it38 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it37;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it39 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it38;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it4 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it3;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it40 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it39;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it41 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it40;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it42 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it41;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it43 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it42;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it44 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it43;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it5 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it4;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it6 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it5;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it7 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it6;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it8 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it7;
                ap_reg_ppstg_exitcond1_reg_367_pp0_it9 <= ap_reg_ppstg_exitcond1_reg_367_pp0_it8;
                ap_reg_ppstg_tmp_4_6_reg_522_pp0_it30 <= tmp_4_6_reg_522;
                ap_reg_ppstg_tmp_4_6_reg_522_pp0_it31 <= ap_reg_ppstg_tmp_4_6_reg_522_pp0_it30;
                ap_reg_ppstg_tmp_4_6_reg_522_pp0_it32 <= ap_reg_ppstg_tmp_4_6_reg_522_pp0_it31;
                ap_reg_ppstg_tmp_4_6_reg_522_pp0_it33 <= ap_reg_ppstg_tmp_4_6_reg_522_pp0_it32;
                ap_reg_ppstg_tmp_4_6_reg_522_pp0_it34 <= ap_reg_ppstg_tmp_4_6_reg_522_pp0_it33;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it30 <= tmp_4_7_reg_527;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it31 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it30;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it32 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it31;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it33 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it32;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it34 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it33;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it35 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it34;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it36 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it35;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it37 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it36;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it38 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it37;
                ap_reg_ppstg_tmp_4_7_reg_527_pp0_it39 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it38;
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it10(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it9(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it11(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it10(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it12(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it11(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it13(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it12(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it14(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it13(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it15(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it14(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it16(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it15(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it17(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it16(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it18(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it17(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it19(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it18(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it2(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it1(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it20(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it19(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it21(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it20(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it22(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it21(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it23(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it22(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it24(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it23(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it3(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it2(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it4(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it3(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it5(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it4(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it6(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it5(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it7(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it6(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it8(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it7(3 downto 0);
                    ap_reg_ppstg_tmp_s_reg_376_pp0_it9(3 downto 0) <= ap_reg_ppstg_tmp_s_reg_376_pp0_it8(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it13))) then
                temp_2_1_reg_432 <= grp_fu_242_p2;
                tmp_4_2_reg_437 <= grp_fu_280_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it18))) then
                temp_2_2_reg_452 <= grp_fu_246_p2;
                tmp_4_3_reg_457 <= grp_fu_285_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it23))) then
                temp_2_3_reg_472 <= grp_fu_250_p2;
                tmp_4_4_reg_477 <= grp_fu_290_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it28))) then
                temp_2_4_reg_512 <= grp_fu_254_p2;
                tmp_4_5_reg_517 <= grp_fu_295_p2;
                tmp_4_6_reg_522 <= grp_fu_300_p2;
                tmp_4_7_reg_527 <= grp_fu_305_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it33))) then
                temp_2_5_reg_532 <= grp_fu_258_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it38))) then
                temp_2_6_reg_537 <= grp_fu_262_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it43))) then
                temp_2_7_reg_542 <= grp_fu_266_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it8))) then
                temp_2_reg_412 <= grp_fu_237_p2;
                tmp_4_1_reg_417 <= grp_fu_275_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_367_pp0_it3))) then
                tmp_4_reg_397 <= grp_fu_270_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and (exitcond1_fu_310_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_376(3 downto 0) <= tmp_s_fu_322_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_376(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it1(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it2(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it3(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it4(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it5(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it6(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it7(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it8(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it9(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it10(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it11(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it12(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it13(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it14(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it15(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it16(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it17(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it18(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it19(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it20(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it21(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it22(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it23(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_s_reg_376_pp0_it24(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_96, exitcond1_fu_310_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it44, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_96)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it45) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it44)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and not((exitcond1_fu_310_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it45) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it44))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))) and not((exitcond1_fu_310_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st48_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st48_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    B_0_address0 <= tmp_s_fu_322_p1(3 - 1 downto 0);

    -- B_0_ce0 assign process. --
    B_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= ap_reg_ppstg_tmp_s_reg_376_pp0_it4(3 - 1 downto 0);

    -- B_1_ce0 assign process. --
    B_1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it5, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= ap_reg_ppstg_tmp_s_reg_376_pp0_it9(3 - 1 downto 0);

    -- B_2_ce0 assign process. --
    B_2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it10, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= ap_reg_ppstg_tmp_s_reg_376_pp0_it14(3 - 1 downto 0);

    -- B_3_ce0 assign process. --
    B_3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it15, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it15) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_4_address0 <= ap_reg_ppstg_tmp_s_reg_376_pp0_it19(3 - 1 downto 0);

    -- B_4_ce0 assign process. --
    B_4_ce0_assign_proc : process(ap_reg_ppiten_pp0_it20, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it20) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            B_4_ce0 <= ap_const_logic_1;
        else 
            B_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_5_address0 <= ap_reg_ppstg_tmp_s_reg_376_pp0_it24(3 - 1 downto 0);

    -- B_5_ce0 assign process. --
    B_5_ce0_assign_proc : process(ap_reg_ppiten_pp0_it25, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            B_5_ce0 <= ap_const_logic_1;
        else 
            B_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_6_address0 <= ap_reg_ppstg_tmp_s_reg_376_pp0_it24(3 - 1 downto 0);

    -- B_6_ce0 assign process. --
    B_6_ce0_assign_proc : process(ap_reg_ppiten_pp0_it25, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            B_6_ce0 <= ap_const_logic_1;
        else 
            B_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_7_address0 <= ap_reg_ppstg_tmp_s_reg_376_pp0_it24(3 - 1 downto 0);

    -- B_7_ce0 assign process. --
    B_7_ce0_assign_proc : process(ap_reg_ppiten_pp0_it25, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            B_7_ce0 <= ap_const_logic_1;
        else 
            B_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_din <= temp_2_7_reg_542;

    -- C_write assign process. --
    C_write_assign_proc : process(ap_reg_ppstg_exitcond1_reg_367_pp0_it44, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_reg_ppstg_exitcond1_reg_367_pp0_it44 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st48_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st48_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_217 assign process. --
    ap_sig_bdd_217_assign_proc : process(C_full_n, ap_reg_ppstg_exitcond1_reg_367_pp0_it44)
    begin
                ap_sig_bdd_217 <= ((C_full_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond1_reg_367_pp0_it44 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_686 assign process. --
    ap_sig_bdd_686_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_686 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_96 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_2 assign process. --
    ap_sig_cseq_ST_st48_fsm_2_assign_proc : process(ap_sig_bdd_686)
    begin
        if (ap_sig_bdd_686) then 
            ap_sig_cseq_ST_st48_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_310_p2 <= "1" when (j_reg_225 = ap_const_lv4_8) else "0";

    -- grp_fu_237_ce assign process. --
    grp_fu_237_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_237_ce <= ap_const_logic_1;
        else 
            grp_fu_237_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_237_p0 <= tmp_4_reg_397;
    grp_fu_237_p1 <= ap_const_lv32_0;

    -- grp_fu_242_ce assign process. --
    grp_fu_242_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_242_ce <= ap_const_logic_1;
        else 
            grp_fu_242_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_242_p0 <= temp_2_reg_412;
    grp_fu_242_p1 <= tmp_4_1_reg_417;

    -- grp_fu_246_ce assign process. --
    grp_fu_246_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_246_ce <= ap_const_logic_1;
        else 
            grp_fu_246_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_246_p0 <= temp_2_1_reg_432;
    grp_fu_246_p1 <= tmp_4_2_reg_437;

    -- grp_fu_250_ce assign process. --
    grp_fu_250_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_250_ce <= ap_const_logic_1;
        else 
            grp_fu_250_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_250_p0 <= temp_2_2_reg_452;
    grp_fu_250_p1 <= tmp_4_3_reg_457;

    -- grp_fu_254_ce assign process. --
    grp_fu_254_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_254_ce <= ap_const_logic_1;
        else 
            grp_fu_254_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_254_p0 <= temp_2_3_reg_472;
    grp_fu_254_p1 <= tmp_4_4_reg_477;

    -- grp_fu_258_ce assign process. --
    grp_fu_258_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_258_ce <= ap_const_logic_1;
        else 
            grp_fu_258_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_258_p0 <= temp_2_4_reg_512;
    grp_fu_258_p1 <= tmp_4_5_reg_517;

    -- grp_fu_262_ce assign process. --
    grp_fu_262_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_262_ce <= ap_const_logic_1;
        else 
            grp_fu_262_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_262_p0 <= temp_2_5_reg_532;
    grp_fu_262_p1 <= ap_reg_ppstg_tmp_4_6_reg_522_pp0_it34;

    -- grp_fu_266_ce assign process. --
    grp_fu_266_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_266_ce <= ap_const_logic_1;
        else 
            grp_fu_266_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_266_p0 <= temp_2_6_reg_537;
    grp_fu_266_p1 <= ap_reg_ppstg_tmp_4_7_reg_527_pp0_it39;

    -- grp_fu_270_ce assign process. --
    grp_fu_270_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_270_ce <= ap_const_logic_1;
        else 
            grp_fu_270_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_270_p0 <= B_0_q0;
    grp_fu_270_p1 <= p_read;

    -- grp_fu_275_ce assign process. --
    grp_fu_275_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_275_p0 <= B_1_q0;
    grp_fu_275_p1 <= p_read1;

    -- grp_fu_280_ce assign process. --
    grp_fu_280_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_280_ce <= ap_const_logic_1;
        else 
            grp_fu_280_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_280_p0 <= B_2_q0;
    grp_fu_280_p1 <= p_read2;

    -- grp_fu_285_ce assign process. --
    grp_fu_285_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_285_ce <= ap_const_logic_1;
        else 
            grp_fu_285_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p0 <= B_3_q0;
    grp_fu_285_p1 <= p_read3;

    -- grp_fu_290_ce assign process. --
    grp_fu_290_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_290_ce <= ap_const_logic_1;
        else 
            grp_fu_290_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_290_p0 <= B_4_q0;
    grp_fu_290_p1 <= p_read4;

    -- grp_fu_295_ce assign process. --
    grp_fu_295_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_295_ce <= ap_const_logic_1;
        else 
            grp_fu_295_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_295_p0 <= B_5_q0;
    grp_fu_295_p1 <= p_read5;

    -- grp_fu_300_ce assign process. --
    grp_fu_300_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_300_ce <= ap_const_logic_1;
        else 
            grp_fu_300_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_300_p0 <= B_6_q0;
    grp_fu_300_p1 <= p_read6;

    -- grp_fu_305_ce assign process. --
    grp_fu_305_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_217, ap_reg_ppiten_pp0_it45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it45))))) then 
            grp_fu_305_ce <= ap_const_logic_1;
        else 
            grp_fu_305_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_305_p0 <= B_7_q0;
    grp_fu_305_p1 <= p_read7;
    j_1_fu_316_p2 <= std_logic_vector(unsigned(j_reg_225) + unsigned(ap_const_lv4_1));
    tmp_s_fu_322_p1 <= std_logic_vector(resize(unsigned(j_reg_225),64));
end behav;
